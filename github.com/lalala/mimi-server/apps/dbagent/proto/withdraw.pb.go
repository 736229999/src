// Code generated by protoc-gen-go. DO NOT EDIT.
// source: withdraw.proto

package dbproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type WithdrawApply struct {
	Id           int64   `protobuf:"varint,1,opt,name=id" json:"id"`
	AccountId    int64   `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id"`
	Realname     string  `protobuf:"bytes,3,opt,name=realname" json:"realname"`
	CreateTime   int64   `protobuf:"varint,4,opt,name=create_time,json=createTime" json:"create_time"`
	Amount       float64 `protobuf:"fixed64,5,opt,name=amount" json:"amount"`
	InBankname   string  `protobuf:"bytes,6,opt,name=in_bankname,json=inBankname" json:"in_bankname"`
	InNo         string  `protobuf:"bytes,7,opt,name=in_no,json=inNo" json:"in_no"`
	Step         int32   `protobuf:"varint,8,opt,name=step" json:"step"`
	IsSuccess    bool    `protobuf:"varint,9,opt,name=is_success,json=isSuccess" json:"is_success"`
	Auditor      string  `protobuf:"bytes,10,opt,name=auditor" json:"auditor"`
	AuditTime    int64   `protobuf:"varint,11,opt,name=audit_time,json=auditTime" json:"audit_time"`
	AuditComment string  `protobuf:"bytes,12,opt,name=audit_comment,json=auditComment" json:"audit_comment"`
	WithdrawType int32   `protobuf:"varint,13,opt,name=withdraw_type,json=withdrawType" json:"withdraw_type"`
}

func (m *WithdrawApply) Reset()                    { *m = WithdrawApply{} }
func (m *WithdrawApply) String() string            { return proto.CompactTextString(m) }
func (*WithdrawApply) ProtoMessage()               {}
func (*WithdrawApply) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{0} }

func (m *WithdrawApply) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *WithdrawApply) GetAccountId() int64 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *WithdrawApply) GetRealname() string {
	if m != nil {
		return m.Realname
	}
	return ""
}

func (m *WithdrawApply) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *WithdrawApply) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *WithdrawApply) GetInBankname() string {
	if m != nil {
		return m.InBankname
	}
	return ""
}

func (m *WithdrawApply) GetInNo() string {
	if m != nil {
		return m.InNo
	}
	return ""
}

func (m *WithdrawApply) GetStep() int32 {
	if m != nil {
		return m.Step
	}
	return 0
}

func (m *WithdrawApply) GetIsSuccess() bool {
	if m != nil {
		return m.IsSuccess
	}
	return false
}

func (m *WithdrawApply) GetAuditor() string {
	if m != nil {
		return m.Auditor
	}
	return ""
}

func (m *WithdrawApply) GetAuditTime() int64 {
	if m != nil {
		return m.AuditTime
	}
	return 0
}

func (m *WithdrawApply) GetAuditComment() string {
	if m != nil {
		return m.AuditComment
	}
	return ""
}

func (m *WithdrawApply) GetWithdrawType() int32 {
	if m != nil {
		return m.WithdrawType
	}
	return 0
}

func init() {
	proto.RegisterType((*WithdrawApply)(nil), "dbproto.WithdrawApply")
}

func init() { proto.RegisterFile("withdraw.proto", fileDescriptor24) }

var fileDescriptor24 = []byte{
	// 289 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x91, 0xcb, 0x4a, 0xf4, 0x40,
	0x10, 0x85, 0xe9, 0xcc, 0x35, 0x35, 0x97, 0x45, 0xff, 0xf0, 0x53, 0x08, 0x62, 0xd0, 0x4d, 0x56,
	0x6e, 0x7c, 0x02, 0x75, 0xe5, 0xc6, 0x45, 0x1c, 0x70, 0x19, 0x7a, 0xd2, 0x0d, 0x16, 0x4e, 0x5f,
	0x48, 0xf7, 0x30, 0xcc, 0xd3, 0x2b, 0x5d, 0x49, 0xdc, 0x55, 0x7d, 0x27, 0xe7, 0x70, 0x2a, 0x0d,
	0xfb, 0x0b, 0xa5, 0x2f, 0xdd, 0xab, 0xcb, 0x63, 0xe8, 0x7d, 0xf2, 0x72, 0xa5, 0x8f, 0x3c, 0xdc,
	0xff, 0x14, 0xb0, 0xfb, 0x1c, 0xb5, 0xe7, 0x10, 0x4e, 0x57, 0xb9, 0x87, 0x82, 0x34, 0x8a, 0x4a,
	0xd4, 0xb3, 0xa6, 0x20, 0x2d, 0x6f, 0x01, 0x54, 0xd7, 0xf9, 0xb3, 0x4b, 0x2d, 0x69, 0x2c, 0x98,
	0x97, 0x23, 0x79, 0xd3, 0xf2, 0x06, 0xd6, 0xbd, 0x51, 0x27, 0xa7, 0xac, 0xc1, 0x59, 0x25, 0xea,
	0xb2, 0xf9, 0xdb, 0xe5, 0x1d, 0x6c, 0xba, 0xde, 0xa8, 0x64, 0xda, 0x44, 0xd6, 0xe0, 0x9c, 0xbd,
	0x30, 0xa0, 0x03, 0x59, 0x23, 0xff, 0xc3, 0x52, 0xd9, 0x1c, 0x84, 0x8b, 0x4a, 0xd4, 0xa2, 0x19,
	0xb7, 0x6c, 0x24, 0xd7, 0x1e, 0x95, 0xfb, 0xe6, 0xdc, 0x25, 0xe7, 0x02, 0xb9, 0x97, 0x91, 0xc8,
	0x7f, 0xb0, 0x20, 0xd7, 0x3a, 0x8f, 0x2b, 0x96, 0xe6, 0xe4, 0xde, 0xbd, 0x94, 0x30, 0x8f, 0xc9,
	0x04, 0x5c, 0x57, 0xa2, 0x5e, 0x34, 0x3c, 0xe7, 0xf6, 0x14, 0xdb, 0x78, 0xee, 0x3a, 0x13, 0x23,
	0x96, 0x95, 0xa8, 0xd7, 0x4d, 0x49, 0xf1, 0x63, 0x00, 0x12, 0x61, 0xa5, 0xce, 0x9a, 0x92, 0xef,
	0x11, 0x38, 0x69, 0x5a, 0xf9, 0xec, 0x3c, 0x0e, 0xd5, 0x37, 0xe3, 0xd9, 0x99, 0x70, 0xf3, 0x07,
	0xd8, 0x0d, 0x72, 0xe7, 0xad, 0x35, 0x2e, 0xe1, 0x96, 0xed, 0x5b, 0x86, 0xaf, 0x03, 0xcb, 0x1f,
	0x4d, 0xff, 0xbd, 0x4d, 0xd7, 0x60, 0x70, 0xc7, 0xcd, 0xb6, 0x13, 0x3c, 0x5c, 0x83, 0x39, 0x2e,
	0xf9, 0x21, 0x9e, 0x7e, 0x03, 0x00, 0x00, 0xff, 0xff, 0xbc, 0x7d, 0xb3, 0x7e, 0xa3, 0x01, 0x00,
	0x00,
}
