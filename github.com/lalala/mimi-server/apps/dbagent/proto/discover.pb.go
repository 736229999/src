// Code generated by protoc-gen-go. DO NOT EDIT.
// source: discover.proto

package dbproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type News struct {
	Id          int64  `protobuf:"varint,1,opt,name=id" json:"id"`
	Title       string `protobuf:"bytes,2,opt,name=title" json:"title"`
	Description string `protobuf:"bytes,3,opt,name=description" json:"description"`
	Cover       string `protobuf:"bytes,4,opt,name=cover" json:"cover"`
	Content     string `protobuf:"bytes,5,opt,name=content" json:"content"`
	Html        string `protobuf:"bytes,6,opt,name=html" json:"html"`
	Author      string `protobuf:"bytes,7,opt,name=author" json:"author"`
	Created     int64  `protobuf:"varint,8,opt,name=created" json:"created"`
	NewsClass   int64  `protobuf:"varint,9,opt,name=newsClass" json:"newsClass"`
	IsVisible   bool   `protobuf:"varint,10,opt,name=isVisible" json:"isVisible"`
	Updated     int64  `protobuf:"varint,11,opt,name=updated" json:"updated"`
	PageViews   int64  `protobuf:"varint,12,opt,name=pageViews" json:"pageViews"`
}

func (m *News) Reset()                    { *m = News{} }
func (m *News) String() string            { return proto.CompactTextString(m) }
func (*News) ProtoMessage()               {}
func (*News) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{0} }

func (m *News) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *News) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *News) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *News) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *News) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *News) GetHtml() string {
	if m != nil {
		return m.Html
	}
	return ""
}

func (m *News) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *News) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *News) GetNewsClass() int64 {
	if m != nil {
		return m.NewsClass
	}
	return 0
}

func (m *News) GetIsVisible() bool {
	if m != nil {
		return m.IsVisible
	}
	return false
}

func (m *News) GetUpdated() int64 {
	if m != nil {
		return m.Updated
	}
	return 0
}

func (m *News) GetPageViews() int64 {
	if m != nil {
		return m.PageViews
	}
	return 0
}

type QueryNewsArg struct {
	Page     int64 `protobuf:"varint,6,opt,name=page" json:"page"`
	PageSize int64 `protobuf:"varint,7,opt,name=pageSize" json:"pageSize"`
}

func (m *QueryNewsArg) Reset()                    { *m = QueryNewsArg{} }
func (m *QueryNewsArg) String() string            { return proto.CompactTextString(m) }
func (*QueryNewsArg) ProtoMessage()               {}
func (*QueryNewsArg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{1} }

func (m *QueryNewsArg) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *QueryNewsArg) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type NewsList struct {
	List  []*News `protobuf:"bytes,1,rep,name=list" json:"list"`
	Total int64   `protobuf:"varint,2,opt,name=total" json:"total"`
}

func (m *NewsList) Reset()                    { *m = NewsList{} }
func (m *NewsList) String() string            { return proto.CompactTextString(m) }
func (*NewsList) ProtoMessage()               {}
func (*NewsList) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{2} }

func (m *NewsList) GetList() []*News {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *NewsList) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type NewsId struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id"`
}

func (m *NewsId) Reset()                    { *m = NewsId{} }
func (m *NewsId) String() string            { return proto.CompactTextString(m) }
func (*NewsId) ProtoMessage()               {}
func (*NewsId) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{3} }

func (m *NewsId) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryNewsOfSelect struct {
	KeyWord string `protobuf:"bytes,1,opt,name=keyWord" json:"keyWord"`
}

func (m *QueryNewsOfSelect) Reset()                    { *m = QueryNewsOfSelect{} }
func (m *QueryNewsOfSelect) String() string            { return proto.CompactTextString(m) }
func (*QueryNewsOfSelect) ProtoMessage()               {}
func (*QueryNewsOfSelect) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{4} }

func (m *QueryNewsOfSelect) GetKeyWord() string {
	if m != nil {
		return m.KeyWord
	}
	return ""
}

func init() {
	proto.RegisterType((*News)(nil), "dbproto.News")
	proto.RegisterType((*QueryNewsArg)(nil), "dbproto.QueryNewsArg")
	proto.RegisterType((*NewsList)(nil), "dbproto.NewsList")
	proto.RegisterType((*NewsId)(nil), "dbproto.NewsId")
	proto.RegisterType((*QueryNewsOfSelect)(nil), "dbproto.QueryNewsOfSelect")
}

func init() { proto.RegisterFile("discover.proto", fileDescriptor12) }

var fileDescriptor12 = []byte{
	// 344 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xcb, 0x4e, 0xf3, 0x30,
	0x10, 0x85, 0x95, 0x4b, 0xd3, 0x64, 0xda, 0xbf, 0xd2, 0x6f, 0x21, 0x64, 0x21, 0x16, 0x21, 0xab,
	0x6c, 0xe8, 0x02, 0xf6, 0x48, 0xa8, 0x2b, 0x24, 0x04, 0xc2, 0x95, 0xca, 0x3a, 0x8d, 0x87, 0xd6,
	0x22, 0xc4, 0x91, 0xed, 0x52, 0x95, 0x27, 0xe3, 0xf1, 0x90, 0x27, 0xbd, 0x20, 0x56, 0xf1, 0x77,
	0xce, 0xcc, 0xb1, 0x27, 0x03, 0x13, 0xa9, 0x6c, 0xad, 0x3f, 0xd1, 0x4c, 0x3b, 0xa3, 0x9d, 0x66,
	0x43, 0xb9, 0xa4, 0x43, 0xf1, 0x1d, 0x42, 0xfc, 0x84, 0x5b, 0xcb, 0x26, 0x10, 0x2a, 0xc9, 0x83,
	0x3c, 0x28, 0x23, 0x11, 0x2a, 0xc9, 0xce, 0x60, 0xe0, 0x94, 0x6b, 0x90, 0x87, 0x79, 0x50, 0x66,
	0xa2, 0x07, 0x96, 0xc3, 0x48, 0xa2, 0xad, 0x8d, 0xea, 0x9c, 0xd2, 0x2d, 0x8f, 0xc8, 0xfb, 0x2d,
	0xf9, 0x3e, 0xba, 0x88, 0xc7, 0x7d, 0x1f, 0x01, 0xe3, 0x30, 0xac, 0x75, 0xeb, 0xb0, 0x75, 0x7c,
	0x40, 0xfa, 0x01, 0x19, 0x83, 0x78, 0xed, 0x3e, 0x1a, 0x9e, 0x90, 0x4c, 0x67, 0x76, 0x0e, 0x49,
	0xb5, 0x71, 0x6b, 0x6d, 0xf8, 0x90, 0xd4, 0x3d, 0x51, 0x8a, 0xc1, 0xca, 0xa1, 0xe4, 0x29, 0x3d,
	0xf4, 0x80, 0xec, 0x12, 0xb2, 0x16, 0xb7, 0x76, 0xd6, 0x54, 0xd6, 0xf2, 0x8c, 0xbc, 0x93, 0xe0,
	0x5d, 0x65, 0x17, 0xca, 0xaa, 0x65, 0x83, 0x1c, 0xf2, 0xa0, 0x4c, 0xc5, 0x49, 0xf0, 0xa9, 0x9b,
	0x4e, 0x52, 0xea, 0xa8, 0x4f, 0xdd, 0xa3, 0xef, 0xeb, 0xaa, 0x15, 0x2e, 0x14, 0x6e, 0x2d, 0x1f,
	0xf7, 0xa9, 0x47, 0xa1, 0xb8, 0x83, 0xf1, 0xcb, 0x06, 0xcd, 0xce, 0xff, 0xbe, 0x7b, 0xb3, 0xf2,
	0x93, 0x78, 0x93, 0x26, 0x89, 0x04, 0x9d, 0xd9, 0x05, 0xa4, 0xfe, 0x3b, 0x57, 0x5f, 0x48, 0xb3,
	0x44, 0xe2, 0xc8, 0xc5, 0x0c, 0x52, 0xdf, 0xfa, 0xa8, 0xac, 0x63, 0x57, 0x10, 0x37, 0xca, 0x3a,
	0x1e, 0xe4, 0x51, 0x39, 0xba, 0xf9, 0x37, 0xdd, 0xaf, 0x67, 0xea, 0x0b, 0x04, 0x59, 0xb4, 0x10,
	0xed, 0xaa, 0x86, 0x16, 0x12, 0x89, 0x1e, 0x0a, 0x0e, 0x89, 0xaf, 0x79, 0x90, 0x7f, 0x17, 0x58,
	0x5c, 0xc3, 0xff, 0xe3, 0xf3, 0x9e, 0xdf, 0xe6, 0xd8, 0x60, 0xed, 0xfc, 0xac, 0xef, 0xb8, 0x7b,
	0xd5, 0xa6, 0xaf, 0xcc, 0xc4, 0x01, 0x97, 0x09, 0x5d, 0x78, 0xfb, 0x13, 0x00, 0x00, 0xff, 0xff,
	0xbc, 0x5d, 0x72, 0x30, 0x2a, 0x02, 0x00, 0x00,
}
