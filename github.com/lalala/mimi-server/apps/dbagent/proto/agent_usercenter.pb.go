// Code generated by protoc-gen-go. DO NOT EDIT.
// source: agent_usercenter.proto

package dbproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DbUsercenterAgent service

type DbUsercenterAgentClient interface {
	QueryUserInfo(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*UserInfo, error)
	CreateAccount(ctx context.Context, in *CreateAccountArg, opts ...grpc.CallOption) (*IntValue, error)
	QueryPhoneUser(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*PhoneUser, error)
	QueryQQUser(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*QQUser, error)
	QueryWeixinUser(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*WeixinUser, error)
	SetPhonePassword(ctx context.Context, in *PhonePassword, opts ...grpc.CallOption) (*Nil, error)
	ChangePhone(ctx context.Context, in *ChangePhoneArg, opts ...grpc.CallOption) (*Nil, error)
	SetAccountUser(ctx context.Context, in *SetUserArg, opts ...grpc.CallOption) (*Nil, error)
	SetAccountPayPassword(ctx context.Context, in *PayPasswordArg, opts ...grpc.CallOption) (*Nil, error)
	OpenAccountPayPassword(ctx context.Context, in *PayPasswordArg, opts ...grpc.CallOption) (*Nil, error)
	QueryAccountPaySettings(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*PaySettings, error)
	//  rpc SetPhoneRegistGiftReceived(IntValue) returns (Nil) {}
	QueryPhoneRegistGiftReceived(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*BoolValue, error)
	// -----------------------------------------------------------------------------------------------------------------
	SetUserIcon(ctx context.Context, in *UserInfoArg, opts ...grpc.CallOption) (*Nil, error)
	SetUserNickname(ctx context.Context, in *UserInfoArg, opts ...grpc.CallOption) (*Nil, error)
	SetUserSex(ctx context.Context, in *UserInfoArg, opts ...grpc.CallOption) (*Nil, error)
	// -----------------------------------------------------------------------------------------------------------------
	InsertAccountBankcard(ctx context.Context, in *AccountBankcard, opts ...grpc.CallOption) (*Nil, error)
	QueryAccountBankcard(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*AccountBankcard, error)
	InsertAccountIdcard(ctx context.Context, in *AccountIdcard, opts ...grpc.CallOption) (*Nil, error)
	QueryAccountIdcard(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*AccountIdcard, error)
	DeleteAccountBankcard(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*Nil, error)
	// -----------------------------------------------------------------------------------------------------------------
	SetDailyCheck(ctx context.Context, in *DailyCheckArg, opts ...grpc.CallOption) (*Nil, error)
	// -----------------------------------------------------------------------------------------------------------------
	QueryFund(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*Fund, error)
	QueryFundHistory(ctx context.Context, in *QueryFundHistoryArg, opts ...grpc.CallOption) (*FundChangeHistory, error)
	QueryFundHistoryStats(ctx context.Context, in *QueryFundHistoryStatsArg, opts ...grpc.CallOption) (*FundHistoryStats, error)
	UpdateRechargeResult(ctx context.Context, in *RechargeResult, opts ...grpc.CallOption) (*Nil, error)
	InsertWithdrawApply(ctx context.Context, in *WithdrawApply, opts ...grpc.CallOption) (*WithdrawApply, error)
	QueryWithdrawApply(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*WithdrawApply, error)
	QueryCreditsHistory(ctx context.Context, in *QueryHistoryArg, opts ...grpc.CallOption) (DbUsercenterAgent_QueryCreditsHistoryClient, error)
	QueryKxdHistory(ctx context.Context, in *QueryHistoryArg, opts ...grpc.CallOption) (DbUsercenterAgent_QueryKxdHistoryClient, error)
	ChangeCredits(ctx context.Context, in *ChangeVirtualFundArg, opts ...grpc.CallOption) (*VirtualFund, error)
	ChangeKxd(ctx context.Context, in *ChangeVirtualFundArg, opts ...grpc.CallOption) (*VirtualFund, error)
	QueryVirtualFund(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*VirtualFund, error)
	QueryAccountCreditsTaskInfo(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*CreditsTaskInfo, error)
	QueryBuycaiTicket(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*BuycaiTicket, error)
	QueryBuycaiTickets(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (DbUsercenterAgent_QueryBuycaiTicketsClient, error)
	// 获取当前生效的购彩券
	QueryValidBuycaiTickets(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (DbUsercenterAgent_QueryValidBuycaiTicketsClient, error)
	InsertBuycaiTickets(ctx context.Context, in *InsertBuycaiTicketArg, opts ...grpc.CallOption) (*Nil, error)
	DeleteBuycaiTickets(ctx context.Context, in *DeleteBuycaiTicketArg, opts ...grpc.CallOption) (*Nil, error)
	// -----------------------------------------------------------------------------------------------------------------
	BuycaiInsertUserOrder(ctx context.Context, in *BuycaiUserOrder, opts ...grpc.CallOption) (*IntValue, error)
	BuycaiInsertVendorOrder(ctx context.Context, in *BuycaiVendorOrder, opts ...grpc.CallOption) (*IntValue, error)
	BuycaiQueryUserOrder(ctx context.Context, in *BuycaiQueryUserOrderArg, opts ...grpc.CallOption) (DbUsercenterAgent_BuycaiQueryUserOrderClient, error)
	BuycaiQueryVendorOrder(ctx context.Context, in *BuycaiQueryVendorOrderArg, opts ...grpc.CallOption) (DbUsercenterAgent_BuycaiQueryVendorOrderClient, error)
	BuycaiQueryUserOrderAllIssues(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*UserOrderAllIssues, error)
	BuycaiUpdateUserOrder(ctx context.Context, in *BuycaiUpdateUserStatusArg, opts ...grpc.CallOption) (*Nil, error)
	BuycaiUserCancelStopChase(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*Nil, error)
	BuycaiUpdateVendorOrder(ctx context.Context, in *BuycaiUpdateVendorStatusArg, opts ...grpc.CallOption) (*Nil, error)
	BuycaiQueryAccountUserOrder(ctx context.Context, in *BuycaiQueryAccountUserOrderArg, opts ...grpc.CallOption) (DbUsercenterAgent_BuycaiQueryAccountUserOrderClient, error)
	QueryVendorOrderHistory(ctx context.Context, in *QueryVendorOrderHistoryArg, opts ...grpc.CallOption) (DbUsercenterAgent_QueryVendorOrderHistoryClient, error)
	QueryUserOrderHistory(ctx context.Context, in *QueryUserOrderHistoryArg, opts ...grpc.CallOption) (DbUsercenterAgent_QueryUserOrderHistoryClient, error)
	QueryBuycaiUserOrderById(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*BuycaiUserOrder, error)
	QueryBuycaiVendorOrderById(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*BuycaiVendorOrder, error)
	// ------------------------------------------兑换码------------------------------------------------------------------
	QueryCountActivity(ctx context.Context, in *GiftPackage, opts ...grpc.CallOption) (*IntValue, error)
	CreateGiftPackage(ctx context.Context, in *GiftCdkeyArg, opts ...grpc.CallOption) (*Nil, error)
	QueryGiftByBatch(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*StringValue, error)
	InsertGiftUser(ctx context.Context, in *GiftArg, opts ...grpc.CallOption) (*Nil, error)
	QueryExchangeHistoryByAccountId(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*StringValue, error)
	QueryMaxExchangeByBatch(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*IntValue, error)
	QueryExchangeNumByBatch(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*IntValue, error)
	QueryCdkeyBatchByBatch(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*CdkeyBatch, error)
	QueryCdkeyStatus(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*BoolValue, error)
	QueryGiftTemplateById(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*GiftTemplate, error)
	ReceiveGift(ctx context.Context, in *UserGiftPackage, opts ...grpc.CallOption) (*Nil, error)
	// ---------------------------------------------邀请码---------------------------------------------------------------
	SetUserInviteRelation(ctx context.Context, in *Gift, opts ...grpc.CallOption) (*Nil, error)
	QueryUserAuthenticateByAccountId(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*BoolValue, error)
	QueryUserInfoByInvitationCode(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*IntValue, error)
	QueryUserInviteRelation(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*BoolValue, error)
	QueryInviteRelation(ctx context.Context, in *InviteRelationArg, opts ...grpc.CallOption) (*BoolValue, error)
	QueryInviteGift(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*StringValue, error)
	QueryUserInviteInfo(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*UserInviteInfo, error)
	QueryUserInviteStatus(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*BoolValue, error)
	// 获取新用户的注册礼包.
	QueryPhoneUserRegisterGift(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*StringValue, error)
	InsertPhoneRegistGiftReceived(ctx context.Context, in *PhoneRegistGift, opts ...grpc.CallOption) (*Nil, error)
}

type dbUsercenterAgentClient struct {
	cc *grpc.ClientConn
}

func NewDbUsercenterAgentClient(cc *grpc.ClientConn) DbUsercenterAgentClient {
	return &dbUsercenterAgentClient{cc}
}

func (c *dbUsercenterAgentClient) QueryUserInfo(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/QueryUserInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) CreateAccount(ctx context.Context, in *CreateAccountArg, opts ...grpc.CallOption) (*IntValue, error) {
	out := new(IntValue)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/CreateAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) QueryPhoneUser(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*PhoneUser, error) {
	out := new(PhoneUser)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/QueryPhoneUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) QueryQQUser(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*QQUser, error) {
	out := new(QQUser)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/QueryQQUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) QueryWeixinUser(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*WeixinUser, error) {
	out := new(WeixinUser)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/QueryWeixinUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) SetPhonePassword(ctx context.Context, in *PhonePassword, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/SetPhonePassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) ChangePhone(ctx context.Context, in *ChangePhoneArg, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/ChangePhone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) SetAccountUser(ctx context.Context, in *SetUserArg, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/SetAccountUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) SetAccountPayPassword(ctx context.Context, in *PayPasswordArg, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/SetAccountPayPassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) OpenAccountPayPassword(ctx context.Context, in *PayPasswordArg, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/OpenAccountPayPassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) QueryAccountPaySettings(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*PaySettings, error) {
	out := new(PaySettings)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/QueryAccountPaySettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) QueryPhoneRegistGiftReceived(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*BoolValue, error) {
	out := new(BoolValue)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/QueryPhoneRegistGiftReceived", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) SetUserIcon(ctx context.Context, in *UserInfoArg, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/SetUserIcon", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) SetUserNickname(ctx context.Context, in *UserInfoArg, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/SetUserNickname", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) SetUserSex(ctx context.Context, in *UserInfoArg, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/SetUserSex", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) InsertAccountBankcard(ctx context.Context, in *AccountBankcard, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/InsertAccountBankcard", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) QueryAccountBankcard(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*AccountBankcard, error) {
	out := new(AccountBankcard)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/QueryAccountBankcard", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) InsertAccountIdcard(ctx context.Context, in *AccountIdcard, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/InsertAccountIdcard", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) QueryAccountIdcard(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*AccountIdcard, error) {
	out := new(AccountIdcard)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/QueryAccountIdcard", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) DeleteAccountBankcard(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/DeleteAccountBankcard", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) SetDailyCheck(ctx context.Context, in *DailyCheckArg, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/SetDailyCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) QueryFund(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*Fund, error) {
	out := new(Fund)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/QueryFund", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) QueryFundHistory(ctx context.Context, in *QueryFundHistoryArg, opts ...grpc.CallOption) (*FundChangeHistory, error) {
	out := new(FundChangeHistory)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/QueryFundHistory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) QueryFundHistoryStats(ctx context.Context, in *QueryFundHistoryStatsArg, opts ...grpc.CallOption) (*FundHistoryStats, error) {
	out := new(FundHistoryStats)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/QueryFundHistoryStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) UpdateRechargeResult(ctx context.Context, in *RechargeResult, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/UpdateRechargeResult", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) InsertWithdrawApply(ctx context.Context, in *WithdrawApply, opts ...grpc.CallOption) (*WithdrawApply, error) {
	out := new(WithdrawApply)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/InsertWithdrawApply", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) QueryWithdrawApply(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*WithdrawApply, error) {
	out := new(WithdrawApply)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/QueryWithdrawApply", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) QueryCreditsHistory(ctx context.Context, in *QueryHistoryArg, opts ...grpc.CallOption) (DbUsercenterAgent_QueryCreditsHistoryClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DbUsercenterAgent_serviceDesc.Streams[0], c.cc, "/dbproto.DbUsercenterAgent/QueryCreditsHistory", opts...)
	if err != nil {
		return nil, err
	}
	x := &dbUsercenterAgentQueryCreditsHistoryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DbUsercenterAgent_QueryCreditsHistoryClient interface {
	Recv() (*VirtualFundChangeRecord, error)
	grpc.ClientStream
}

type dbUsercenterAgentQueryCreditsHistoryClient struct {
	grpc.ClientStream
}

func (x *dbUsercenterAgentQueryCreditsHistoryClient) Recv() (*VirtualFundChangeRecord, error) {
	m := new(VirtualFundChangeRecord)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dbUsercenterAgentClient) QueryKxdHistory(ctx context.Context, in *QueryHistoryArg, opts ...grpc.CallOption) (DbUsercenterAgent_QueryKxdHistoryClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DbUsercenterAgent_serviceDesc.Streams[1], c.cc, "/dbproto.DbUsercenterAgent/QueryKxdHistory", opts...)
	if err != nil {
		return nil, err
	}
	x := &dbUsercenterAgentQueryKxdHistoryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DbUsercenterAgent_QueryKxdHistoryClient interface {
	Recv() (*VirtualFundChangeRecord, error)
	grpc.ClientStream
}

type dbUsercenterAgentQueryKxdHistoryClient struct {
	grpc.ClientStream
}

func (x *dbUsercenterAgentQueryKxdHistoryClient) Recv() (*VirtualFundChangeRecord, error) {
	m := new(VirtualFundChangeRecord)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dbUsercenterAgentClient) ChangeCredits(ctx context.Context, in *ChangeVirtualFundArg, opts ...grpc.CallOption) (*VirtualFund, error) {
	out := new(VirtualFund)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/ChangeCredits", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) ChangeKxd(ctx context.Context, in *ChangeVirtualFundArg, opts ...grpc.CallOption) (*VirtualFund, error) {
	out := new(VirtualFund)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/ChangeKxd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) QueryVirtualFund(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*VirtualFund, error) {
	out := new(VirtualFund)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/QueryVirtualFund", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) QueryAccountCreditsTaskInfo(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*CreditsTaskInfo, error) {
	out := new(CreditsTaskInfo)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/QueryAccountCreditsTaskInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) QueryBuycaiTicket(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*BuycaiTicket, error) {
	out := new(BuycaiTicket)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/QueryBuycaiTicket", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) QueryBuycaiTickets(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (DbUsercenterAgent_QueryBuycaiTicketsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DbUsercenterAgent_serviceDesc.Streams[2], c.cc, "/dbproto.DbUsercenterAgent/QueryBuycaiTickets", opts...)
	if err != nil {
		return nil, err
	}
	x := &dbUsercenterAgentQueryBuycaiTicketsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DbUsercenterAgent_QueryBuycaiTicketsClient interface {
	Recv() (*BuycaiTicket, error)
	grpc.ClientStream
}

type dbUsercenterAgentQueryBuycaiTicketsClient struct {
	grpc.ClientStream
}

func (x *dbUsercenterAgentQueryBuycaiTicketsClient) Recv() (*BuycaiTicket, error) {
	m := new(BuycaiTicket)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dbUsercenterAgentClient) QueryValidBuycaiTickets(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (DbUsercenterAgent_QueryValidBuycaiTicketsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DbUsercenterAgent_serviceDesc.Streams[3], c.cc, "/dbproto.DbUsercenterAgent/QueryValidBuycaiTickets", opts...)
	if err != nil {
		return nil, err
	}
	x := &dbUsercenterAgentQueryValidBuycaiTicketsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DbUsercenterAgent_QueryValidBuycaiTicketsClient interface {
	Recv() (*BuycaiTicket, error)
	grpc.ClientStream
}

type dbUsercenterAgentQueryValidBuycaiTicketsClient struct {
	grpc.ClientStream
}

func (x *dbUsercenterAgentQueryValidBuycaiTicketsClient) Recv() (*BuycaiTicket, error) {
	m := new(BuycaiTicket)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dbUsercenterAgentClient) InsertBuycaiTickets(ctx context.Context, in *InsertBuycaiTicketArg, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/InsertBuycaiTickets", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) DeleteBuycaiTickets(ctx context.Context, in *DeleteBuycaiTicketArg, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/DeleteBuycaiTickets", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) BuycaiInsertUserOrder(ctx context.Context, in *BuycaiUserOrder, opts ...grpc.CallOption) (*IntValue, error) {
	out := new(IntValue)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/BuycaiInsertUserOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) BuycaiInsertVendorOrder(ctx context.Context, in *BuycaiVendorOrder, opts ...grpc.CallOption) (*IntValue, error) {
	out := new(IntValue)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/BuycaiInsertVendorOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) BuycaiQueryUserOrder(ctx context.Context, in *BuycaiQueryUserOrderArg, opts ...grpc.CallOption) (DbUsercenterAgent_BuycaiQueryUserOrderClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DbUsercenterAgent_serviceDesc.Streams[4], c.cc, "/dbproto.DbUsercenterAgent/BuycaiQueryUserOrder", opts...)
	if err != nil {
		return nil, err
	}
	x := &dbUsercenterAgentBuycaiQueryUserOrderClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DbUsercenterAgent_BuycaiQueryUserOrderClient interface {
	Recv() (*BuycaiUserOrder, error)
	grpc.ClientStream
}

type dbUsercenterAgentBuycaiQueryUserOrderClient struct {
	grpc.ClientStream
}

func (x *dbUsercenterAgentBuycaiQueryUserOrderClient) Recv() (*BuycaiUserOrder, error) {
	m := new(BuycaiUserOrder)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dbUsercenterAgentClient) BuycaiQueryVendorOrder(ctx context.Context, in *BuycaiQueryVendorOrderArg, opts ...grpc.CallOption) (DbUsercenterAgent_BuycaiQueryVendorOrderClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DbUsercenterAgent_serviceDesc.Streams[5], c.cc, "/dbproto.DbUsercenterAgent/BuycaiQueryVendorOrder", opts...)
	if err != nil {
		return nil, err
	}
	x := &dbUsercenterAgentBuycaiQueryVendorOrderClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DbUsercenterAgent_BuycaiQueryVendorOrderClient interface {
	Recv() (*BuycaiVendorOrder, error)
	grpc.ClientStream
}

type dbUsercenterAgentBuycaiQueryVendorOrderClient struct {
	grpc.ClientStream
}

func (x *dbUsercenterAgentBuycaiQueryVendorOrderClient) Recv() (*BuycaiVendorOrder, error) {
	m := new(BuycaiVendorOrder)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dbUsercenterAgentClient) BuycaiQueryUserOrderAllIssues(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*UserOrderAllIssues, error) {
	out := new(UserOrderAllIssues)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/BuycaiQueryUserOrderAllIssues", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) BuycaiUpdateUserOrder(ctx context.Context, in *BuycaiUpdateUserStatusArg, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/BuycaiUpdateUserOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) BuycaiUserCancelStopChase(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/BuycaiUserCancelStopChase", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) BuycaiUpdateVendorOrder(ctx context.Context, in *BuycaiUpdateVendorStatusArg, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/BuycaiUpdateVendorOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) BuycaiQueryAccountUserOrder(ctx context.Context, in *BuycaiQueryAccountUserOrderArg, opts ...grpc.CallOption) (DbUsercenterAgent_BuycaiQueryAccountUserOrderClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DbUsercenterAgent_serviceDesc.Streams[6], c.cc, "/dbproto.DbUsercenterAgent/BuycaiQueryAccountUserOrder", opts...)
	if err != nil {
		return nil, err
	}
	x := &dbUsercenterAgentBuycaiQueryAccountUserOrderClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DbUsercenterAgent_BuycaiQueryAccountUserOrderClient interface {
	Recv() (*BuycaiUserOrder, error)
	grpc.ClientStream
}

type dbUsercenterAgentBuycaiQueryAccountUserOrderClient struct {
	grpc.ClientStream
}

func (x *dbUsercenterAgentBuycaiQueryAccountUserOrderClient) Recv() (*BuycaiUserOrder, error) {
	m := new(BuycaiUserOrder)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dbUsercenterAgentClient) QueryVendorOrderHistory(ctx context.Context, in *QueryVendorOrderHistoryArg, opts ...grpc.CallOption) (DbUsercenterAgent_QueryVendorOrderHistoryClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DbUsercenterAgent_serviceDesc.Streams[7], c.cc, "/dbproto.DbUsercenterAgent/QueryVendorOrderHistory", opts...)
	if err != nil {
		return nil, err
	}
	x := &dbUsercenterAgentQueryVendorOrderHistoryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DbUsercenterAgent_QueryVendorOrderHistoryClient interface {
	Recv() (*VendorOrderRecord, error)
	grpc.ClientStream
}

type dbUsercenterAgentQueryVendorOrderHistoryClient struct {
	grpc.ClientStream
}

func (x *dbUsercenterAgentQueryVendorOrderHistoryClient) Recv() (*VendorOrderRecord, error) {
	m := new(VendorOrderRecord)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dbUsercenterAgentClient) QueryUserOrderHistory(ctx context.Context, in *QueryUserOrderHistoryArg, opts ...grpc.CallOption) (DbUsercenterAgent_QueryUserOrderHistoryClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DbUsercenterAgent_serviceDesc.Streams[8], c.cc, "/dbproto.DbUsercenterAgent/QueryUserOrderHistory", opts...)
	if err != nil {
		return nil, err
	}
	x := &dbUsercenterAgentQueryUserOrderHistoryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DbUsercenterAgent_QueryUserOrderHistoryClient interface {
	Recv() (*UserOrderRecord, error)
	grpc.ClientStream
}

type dbUsercenterAgentQueryUserOrderHistoryClient struct {
	grpc.ClientStream
}

func (x *dbUsercenterAgentQueryUserOrderHistoryClient) Recv() (*UserOrderRecord, error) {
	m := new(UserOrderRecord)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dbUsercenterAgentClient) QueryBuycaiUserOrderById(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*BuycaiUserOrder, error) {
	out := new(BuycaiUserOrder)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/QueryBuycaiUserOrderById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) QueryBuycaiVendorOrderById(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*BuycaiVendorOrder, error) {
	out := new(BuycaiVendorOrder)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/QueryBuycaiVendorOrderById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) QueryCountActivity(ctx context.Context, in *GiftPackage, opts ...grpc.CallOption) (*IntValue, error) {
	out := new(IntValue)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/QueryCountActivity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) CreateGiftPackage(ctx context.Context, in *GiftCdkeyArg, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/CreateGiftPackage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) QueryGiftByBatch(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*StringValue, error) {
	out := new(StringValue)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/QueryGiftByBatch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) InsertGiftUser(ctx context.Context, in *GiftArg, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/InsertGiftUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) QueryExchangeHistoryByAccountId(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*StringValue, error) {
	out := new(StringValue)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/QueryExchangeHistoryByAccountId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) QueryMaxExchangeByBatch(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*IntValue, error) {
	out := new(IntValue)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/QueryMaxExchangeByBatch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) QueryExchangeNumByBatch(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*IntValue, error) {
	out := new(IntValue)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/QueryExchangeNumByBatch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) QueryCdkeyBatchByBatch(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*CdkeyBatch, error) {
	out := new(CdkeyBatch)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/QueryCdkeyBatchByBatch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) QueryCdkeyStatus(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*BoolValue, error) {
	out := new(BoolValue)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/QueryCdkeyStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) QueryGiftTemplateById(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*GiftTemplate, error) {
	out := new(GiftTemplate)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/QueryGiftTemplateById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) ReceiveGift(ctx context.Context, in *UserGiftPackage, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/ReceiveGift", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) SetUserInviteRelation(ctx context.Context, in *Gift, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/SetUserInviteRelation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) QueryUserAuthenticateByAccountId(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*BoolValue, error) {
	out := new(BoolValue)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/QueryUserAuthenticateByAccountId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) QueryUserInfoByInvitationCode(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*IntValue, error) {
	out := new(IntValue)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/QueryUserInfoByInvitationCode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) QueryUserInviteRelation(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*BoolValue, error) {
	out := new(BoolValue)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/QueryUserInviteRelation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) QueryInviteRelation(ctx context.Context, in *InviteRelationArg, opts ...grpc.CallOption) (*BoolValue, error) {
	out := new(BoolValue)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/QueryInviteRelation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) QueryInviteGift(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*StringValue, error) {
	out := new(StringValue)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/QueryInviteGift", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) QueryUserInviteInfo(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*UserInviteInfo, error) {
	out := new(UserInviteInfo)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/QueryUserInviteInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) QueryUserInviteStatus(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*BoolValue, error) {
	out := new(BoolValue)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/QueryUserInviteStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) QueryPhoneUserRegisterGift(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*StringValue, error) {
	out := new(StringValue)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/QueryPhoneUserRegisterGift", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUsercenterAgentClient) InsertPhoneRegistGiftReceived(ctx context.Context, in *PhoneRegistGift, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbUsercenterAgent/InsertPhoneRegistGiftReceived", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DbUsercenterAgent service

type DbUsercenterAgentServer interface {
	QueryUserInfo(context.Context, *IntValue) (*UserInfo, error)
	CreateAccount(context.Context, *CreateAccountArg) (*IntValue, error)
	QueryPhoneUser(context.Context, *StringValue) (*PhoneUser, error)
	QueryQQUser(context.Context, *StringValue) (*QQUser, error)
	QueryWeixinUser(context.Context, *StringValue) (*WeixinUser, error)
	SetPhonePassword(context.Context, *PhonePassword) (*Nil, error)
	ChangePhone(context.Context, *ChangePhoneArg) (*Nil, error)
	SetAccountUser(context.Context, *SetUserArg) (*Nil, error)
	SetAccountPayPassword(context.Context, *PayPasswordArg) (*Nil, error)
	OpenAccountPayPassword(context.Context, *PayPasswordArg) (*Nil, error)
	QueryAccountPaySettings(context.Context, *IntValue) (*PaySettings, error)
	//  rpc SetPhoneRegistGiftReceived(IntValue) returns (Nil) {}
	QueryPhoneRegistGiftReceived(context.Context, *IntValue) (*BoolValue, error)
	// -----------------------------------------------------------------------------------------------------------------
	SetUserIcon(context.Context, *UserInfoArg) (*Nil, error)
	SetUserNickname(context.Context, *UserInfoArg) (*Nil, error)
	SetUserSex(context.Context, *UserInfoArg) (*Nil, error)
	// -----------------------------------------------------------------------------------------------------------------
	InsertAccountBankcard(context.Context, *AccountBankcard) (*Nil, error)
	QueryAccountBankcard(context.Context, *IntValue) (*AccountBankcard, error)
	InsertAccountIdcard(context.Context, *AccountIdcard) (*Nil, error)
	QueryAccountIdcard(context.Context, *IntValue) (*AccountIdcard, error)
	DeleteAccountBankcard(context.Context, *IntValue) (*Nil, error)
	// -----------------------------------------------------------------------------------------------------------------
	SetDailyCheck(context.Context, *DailyCheckArg) (*Nil, error)
	// -----------------------------------------------------------------------------------------------------------------
	QueryFund(context.Context, *IntValue) (*Fund, error)
	QueryFundHistory(context.Context, *QueryFundHistoryArg) (*FundChangeHistory, error)
	QueryFundHistoryStats(context.Context, *QueryFundHistoryStatsArg) (*FundHistoryStats, error)
	UpdateRechargeResult(context.Context, *RechargeResult) (*Nil, error)
	InsertWithdrawApply(context.Context, *WithdrawApply) (*WithdrawApply, error)
	QueryWithdrawApply(context.Context, *IntValue) (*WithdrawApply, error)
	QueryCreditsHistory(*QueryHistoryArg, DbUsercenterAgent_QueryCreditsHistoryServer) error
	QueryKxdHistory(*QueryHistoryArg, DbUsercenterAgent_QueryKxdHistoryServer) error
	ChangeCredits(context.Context, *ChangeVirtualFundArg) (*VirtualFund, error)
	ChangeKxd(context.Context, *ChangeVirtualFundArg) (*VirtualFund, error)
	QueryVirtualFund(context.Context, *IntValue) (*VirtualFund, error)
	QueryAccountCreditsTaskInfo(context.Context, *IntValue) (*CreditsTaskInfo, error)
	QueryBuycaiTicket(context.Context, *IntValue) (*BuycaiTicket, error)
	QueryBuycaiTickets(*IntValue, DbUsercenterAgent_QueryBuycaiTicketsServer) error
	// 获取当前生效的购彩券
	QueryValidBuycaiTickets(*IntValue, DbUsercenterAgent_QueryValidBuycaiTicketsServer) error
	InsertBuycaiTickets(context.Context, *InsertBuycaiTicketArg) (*Nil, error)
	DeleteBuycaiTickets(context.Context, *DeleteBuycaiTicketArg) (*Nil, error)
	// -----------------------------------------------------------------------------------------------------------------
	BuycaiInsertUserOrder(context.Context, *BuycaiUserOrder) (*IntValue, error)
	BuycaiInsertVendorOrder(context.Context, *BuycaiVendorOrder) (*IntValue, error)
	BuycaiQueryUserOrder(*BuycaiQueryUserOrderArg, DbUsercenterAgent_BuycaiQueryUserOrderServer) error
	BuycaiQueryVendorOrder(*BuycaiQueryVendorOrderArg, DbUsercenterAgent_BuycaiQueryVendorOrderServer) error
	BuycaiQueryUserOrderAllIssues(context.Context, *IntValue) (*UserOrderAllIssues, error)
	BuycaiUpdateUserOrder(context.Context, *BuycaiUpdateUserStatusArg) (*Nil, error)
	BuycaiUserCancelStopChase(context.Context, *IntValue) (*Nil, error)
	BuycaiUpdateVendorOrder(context.Context, *BuycaiUpdateVendorStatusArg) (*Nil, error)
	BuycaiQueryAccountUserOrder(*BuycaiQueryAccountUserOrderArg, DbUsercenterAgent_BuycaiQueryAccountUserOrderServer) error
	QueryVendorOrderHistory(*QueryVendorOrderHistoryArg, DbUsercenterAgent_QueryVendorOrderHistoryServer) error
	QueryUserOrderHistory(*QueryUserOrderHistoryArg, DbUsercenterAgent_QueryUserOrderHistoryServer) error
	QueryBuycaiUserOrderById(context.Context, *IntValue) (*BuycaiUserOrder, error)
	QueryBuycaiVendorOrderById(context.Context, *IntValue) (*BuycaiVendorOrder, error)
	// ------------------------------------------兑换码------------------------------------------------------------------
	QueryCountActivity(context.Context, *GiftPackage) (*IntValue, error)
	CreateGiftPackage(context.Context, *GiftCdkeyArg) (*Nil, error)
	QueryGiftByBatch(context.Context, *IntValue) (*StringValue, error)
	InsertGiftUser(context.Context, *GiftArg) (*Nil, error)
	QueryExchangeHistoryByAccountId(context.Context, *IntValue) (*StringValue, error)
	QueryMaxExchangeByBatch(context.Context, *IntValue) (*IntValue, error)
	QueryExchangeNumByBatch(context.Context, *IntValue) (*IntValue, error)
	QueryCdkeyBatchByBatch(context.Context, *IntValue) (*CdkeyBatch, error)
	QueryCdkeyStatus(context.Context, *StringValue) (*BoolValue, error)
	QueryGiftTemplateById(context.Context, *IntValue) (*GiftTemplate, error)
	ReceiveGift(context.Context, *UserGiftPackage) (*Nil, error)
	// ---------------------------------------------邀请码---------------------------------------------------------------
	SetUserInviteRelation(context.Context, *Gift) (*Nil, error)
	QueryUserAuthenticateByAccountId(context.Context, *IntValue) (*BoolValue, error)
	QueryUserInfoByInvitationCode(context.Context, *StringValue) (*IntValue, error)
	QueryUserInviteRelation(context.Context, *IntValue) (*BoolValue, error)
	QueryInviteRelation(context.Context, *InviteRelationArg) (*BoolValue, error)
	QueryInviteGift(context.Context, *Nil) (*StringValue, error)
	QueryUserInviteInfo(context.Context, *IntValue) (*UserInviteInfo, error)
	QueryUserInviteStatus(context.Context, *IntValue) (*BoolValue, error)
	// 获取新用户的注册礼包.
	QueryPhoneUserRegisterGift(context.Context, *Nil) (*StringValue, error)
	InsertPhoneRegistGiftReceived(context.Context, *PhoneRegistGift) (*Nil, error)
}

func RegisterDbUsercenterAgentServer(s *grpc.Server, srv DbUsercenterAgentServer) {
	s.RegisterService(&_DbUsercenterAgent_serviceDesc, srv)
}

func _DbUsercenterAgent_QueryUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).QueryUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/QueryUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).QueryUserInfo(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).CreateAccount(ctx, req.(*CreateAccountArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_QueryPhoneUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).QueryPhoneUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/QueryPhoneUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).QueryPhoneUser(ctx, req.(*StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_QueryQQUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).QueryQQUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/QueryQQUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).QueryQQUser(ctx, req.(*StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_QueryWeixinUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).QueryWeixinUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/QueryWeixinUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).QueryWeixinUser(ctx, req.(*StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_SetPhonePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhonePassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).SetPhonePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/SetPhonePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).SetPhonePassword(ctx, req.(*PhonePassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_ChangePhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePhoneArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).ChangePhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/ChangePhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).ChangePhone(ctx, req.(*ChangePhoneArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_SetAccountUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).SetAccountUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/SetAccountUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).SetAccountUser(ctx, req.(*SetUserArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_SetAccountPayPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayPasswordArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).SetAccountPayPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/SetAccountPayPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).SetAccountPayPassword(ctx, req.(*PayPasswordArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_OpenAccountPayPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayPasswordArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).OpenAccountPayPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/OpenAccountPayPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).OpenAccountPayPassword(ctx, req.(*PayPasswordArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_QueryAccountPaySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).QueryAccountPaySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/QueryAccountPaySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).QueryAccountPaySettings(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_QueryPhoneRegistGiftReceived_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).QueryPhoneRegistGiftReceived(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/QueryPhoneRegistGiftReceived",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).QueryPhoneRegistGiftReceived(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_SetUserIcon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).SetUserIcon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/SetUserIcon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).SetUserIcon(ctx, req.(*UserInfoArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_SetUserNickname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).SetUserNickname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/SetUserNickname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).SetUserNickname(ctx, req.(*UserInfoArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_SetUserSex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).SetUserSex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/SetUserSex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).SetUserSex(ctx, req.(*UserInfoArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_InsertAccountBankcard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountBankcard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).InsertAccountBankcard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/InsertAccountBankcard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).InsertAccountBankcard(ctx, req.(*AccountBankcard))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_QueryAccountBankcard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).QueryAccountBankcard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/QueryAccountBankcard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).QueryAccountBankcard(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_InsertAccountIdcard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountIdcard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).InsertAccountIdcard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/InsertAccountIdcard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).InsertAccountIdcard(ctx, req.(*AccountIdcard))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_QueryAccountIdcard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).QueryAccountIdcard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/QueryAccountIdcard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).QueryAccountIdcard(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_DeleteAccountBankcard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).DeleteAccountBankcard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/DeleteAccountBankcard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).DeleteAccountBankcard(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_SetDailyCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DailyCheckArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).SetDailyCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/SetDailyCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).SetDailyCheck(ctx, req.(*DailyCheckArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_QueryFund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).QueryFund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/QueryFund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).QueryFund(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_QueryFundHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFundHistoryArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).QueryFundHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/QueryFundHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).QueryFundHistory(ctx, req.(*QueryFundHistoryArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_QueryFundHistoryStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFundHistoryStatsArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).QueryFundHistoryStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/QueryFundHistoryStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).QueryFundHistoryStats(ctx, req.(*QueryFundHistoryStatsArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_UpdateRechargeResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RechargeResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).UpdateRechargeResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/UpdateRechargeResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).UpdateRechargeResult(ctx, req.(*RechargeResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_InsertWithdrawApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawApply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).InsertWithdrawApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/InsertWithdrawApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).InsertWithdrawApply(ctx, req.(*WithdrawApply))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_QueryWithdrawApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).QueryWithdrawApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/QueryWithdrawApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).QueryWithdrawApply(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_QueryCreditsHistory_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryHistoryArg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DbUsercenterAgentServer).QueryCreditsHistory(m, &dbUsercenterAgentQueryCreditsHistoryServer{stream})
}

type DbUsercenterAgent_QueryCreditsHistoryServer interface {
	Send(*VirtualFundChangeRecord) error
	grpc.ServerStream
}

type dbUsercenterAgentQueryCreditsHistoryServer struct {
	grpc.ServerStream
}

func (x *dbUsercenterAgentQueryCreditsHistoryServer) Send(m *VirtualFundChangeRecord) error {
	return x.ServerStream.SendMsg(m)
}

func _DbUsercenterAgent_QueryKxdHistory_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryHistoryArg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DbUsercenterAgentServer).QueryKxdHistory(m, &dbUsercenterAgentQueryKxdHistoryServer{stream})
}

type DbUsercenterAgent_QueryKxdHistoryServer interface {
	Send(*VirtualFundChangeRecord) error
	grpc.ServerStream
}

type dbUsercenterAgentQueryKxdHistoryServer struct {
	grpc.ServerStream
}

func (x *dbUsercenterAgentQueryKxdHistoryServer) Send(m *VirtualFundChangeRecord) error {
	return x.ServerStream.SendMsg(m)
}

func _DbUsercenterAgent_ChangeCredits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeVirtualFundArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).ChangeCredits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/ChangeCredits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).ChangeCredits(ctx, req.(*ChangeVirtualFundArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_ChangeKxd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeVirtualFundArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).ChangeKxd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/ChangeKxd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).ChangeKxd(ctx, req.(*ChangeVirtualFundArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_QueryVirtualFund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).QueryVirtualFund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/QueryVirtualFund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).QueryVirtualFund(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_QueryAccountCreditsTaskInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).QueryAccountCreditsTaskInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/QueryAccountCreditsTaskInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).QueryAccountCreditsTaskInfo(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_QueryBuycaiTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).QueryBuycaiTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/QueryBuycaiTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).QueryBuycaiTicket(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_QueryBuycaiTickets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(IntValue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DbUsercenterAgentServer).QueryBuycaiTickets(m, &dbUsercenterAgentQueryBuycaiTicketsServer{stream})
}

type DbUsercenterAgent_QueryBuycaiTicketsServer interface {
	Send(*BuycaiTicket) error
	grpc.ServerStream
}

type dbUsercenterAgentQueryBuycaiTicketsServer struct {
	grpc.ServerStream
}

func (x *dbUsercenterAgentQueryBuycaiTicketsServer) Send(m *BuycaiTicket) error {
	return x.ServerStream.SendMsg(m)
}

func _DbUsercenterAgent_QueryValidBuycaiTickets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(IntValue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DbUsercenterAgentServer).QueryValidBuycaiTickets(m, &dbUsercenterAgentQueryValidBuycaiTicketsServer{stream})
}

type DbUsercenterAgent_QueryValidBuycaiTicketsServer interface {
	Send(*BuycaiTicket) error
	grpc.ServerStream
}

type dbUsercenterAgentQueryValidBuycaiTicketsServer struct {
	grpc.ServerStream
}

func (x *dbUsercenterAgentQueryValidBuycaiTicketsServer) Send(m *BuycaiTicket) error {
	return x.ServerStream.SendMsg(m)
}

func _DbUsercenterAgent_InsertBuycaiTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertBuycaiTicketArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).InsertBuycaiTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/InsertBuycaiTickets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).InsertBuycaiTickets(ctx, req.(*InsertBuycaiTicketArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_DeleteBuycaiTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBuycaiTicketArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).DeleteBuycaiTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/DeleteBuycaiTickets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).DeleteBuycaiTickets(ctx, req.(*DeleteBuycaiTicketArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_BuycaiInsertUserOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuycaiUserOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).BuycaiInsertUserOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/BuycaiInsertUserOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).BuycaiInsertUserOrder(ctx, req.(*BuycaiUserOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_BuycaiInsertVendorOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuycaiVendorOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).BuycaiInsertVendorOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/BuycaiInsertVendorOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).BuycaiInsertVendorOrder(ctx, req.(*BuycaiVendorOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_BuycaiQueryUserOrder_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BuycaiQueryUserOrderArg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DbUsercenterAgentServer).BuycaiQueryUserOrder(m, &dbUsercenterAgentBuycaiQueryUserOrderServer{stream})
}

type DbUsercenterAgent_BuycaiQueryUserOrderServer interface {
	Send(*BuycaiUserOrder) error
	grpc.ServerStream
}

type dbUsercenterAgentBuycaiQueryUserOrderServer struct {
	grpc.ServerStream
}

func (x *dbUsercenterAgentBuycaiQueryUserOrderServer) Send(m *BuycaiUserOrder) error {
	return x.ServerStream.SendMsg(m)
}

func _DbUsercenterAgent_BuycaiQueryVendorOrder_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BuycaiQueryVendorOrderArg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DbUsercenterAgentServer).BuycaiQueryVendorOrder(m, &dbUsercenterAgentBuycaiQueryVendorOrderServer{stream})
}

type DbUsercenterAgent_BuycaiQueryVendorOrderServer interface {
	Send(*BuycaiVendorOrder) error
	grpc.ServerStream
}

type dbUsercenterAgentBuycaiQueryVendorOrderServer struct {
	grpc.ServerStream
}

func (x *dbUsercenterAgentBuycaiQueryVendorOrderServer) Send(m *BuycaiVendorOrder) error {
	return x.ServerStream.SendMsg(m)
}

func _DbUsercenterAgent_BuycaiQueryUserOrderAllIssues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).BuycaiQueryUserOrderAllIssues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/BuycaiQueryUserOrderAllIssues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).BuycaiQueryUserOrderAllIssues(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_BuycaiUpdateUserOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuycaiUpdateUserStatusArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).BuycaiUpdateUserOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/BuycaiUpdateUserOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).BuycaiUpdateUserOrder(ctx, req.(*BuycaiUpdateUserStatusArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_BuycaiUserCancelStopChase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).BuycaiUserCancelStopChase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/BuycaiUserCancelStopChase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).BuycaiUserCancelStopChase(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_BuycaiUpdateVendorOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuycaiUpdateVendorStatusArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).BuycaiUpdateVendorOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/BuycaiUpdateVendorOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).BuycaiUpdateVendorOrder(ctx, req.(*BuycaiUpdateVendorStatusArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_BuycaiQueryAccountUserOrder_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BuycaiQueryAccountUserOrderArg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DbUsercenterAgentServer).BuycaiQueryAccountUserOrder(m, &dbUsercenterAgentBuycaiQueryAccountUserOrderServer{stream})
}

type DbUsercenterAgent_BuycaiQueryAccountUserOrderServer interface {
	Send(*BuycaiUserOrder) error
	grpc.ServerStream
}

type dbUsercenterAgentBuycaiQueryAccountUserOrderServer struct {
	grpc.ServerStream
}

func (x *dbUsercenterAgentBuycaiQueryAccountUserOrderServer) Send(m *BuycaiUserOrder) error {
	return x.ServerStream.SendMsg(m)
}

func _DbUsercenterAgent_QueryVendorOrderHistory_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryVendorOrderHistoryArg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DbUsercenterAgentServer).QueryVendorOrderHistory(m, &dbUsercenterAgentQueryVendorOrderHistoryServer{stream})
}

type DbUsercenterAgent_QueryVendorOrderHistoryServer interface {
	Send(*VendorOrderRecord) error
	grpc.ServerStream
}

type dbUsercenterAgentQueryVendorOrderHistoryServer struct {
	grpc.ServerStream
}

func (x *dbUsercenterAgentQueryVendorOrderHistoryServer) Send(m *VendorOrderRecord) error {
	return x.ServerStream.SendMsg(m)
}

func _DbUsercenterAgent_QueryUserOrderHistory_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryUserOrderHistoryArg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DbUsercenterAgentServer).QueryUserOrderHistory(m, &dbUsercenterAgentQueryUserOrderHistoryServer{stream})
}

type DbUsercenterAgent_QueryUserOrderHistoryServer interface {
	Send(*UserOrderRecord) error
	grpc.ServerStream
}

type dbUsercenterAgentQueryUserOrderHistoryServer struct {
	grpc.ServerStream
}

func (x *dbUsercenterAgentQueryUserOrderHistoryServer) Send(m *UserOrderRecord) error {
	return x.ServerStream.SendMsg(m)
}

func _DbUsercenterAgent_QueryBuycaiUserOrderById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).QueryBuycaiUserOrderById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/QueryBuycaiUserOrderById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).QueryBuycaiUserOrderById(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_QueryBuycaiVendorOrderById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).QueryBuycaiVendorOrderById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/QueryBuycaiVendorOrderById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).QueryBuycaiVendorOrderById(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_QueryCountActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GiftPackage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).QueryCountActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/QueryCountActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).QueryCountActivity(ctx, req.(*GiftPackage))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_CreateGiftPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GiftCdkeyArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).CreateGiftPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/CreateGiftPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).CreateGiftPackage(ctx, req.(*GiftCdkeyArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_QueryGiftByBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).QueryGiftByBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/QueryGiftByBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).QueryGiftByBatch(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_InsertGiftUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GiftArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).InsertGiftUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/InsertGiftUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).InsertGiftUser(ctx, req.(*GiftArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_QueryExchangeHistoryByAccountId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).QueryExchangeHistoryByAccountId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/QueryExchangeHistoryByAccountId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).QueryExchangeHistoryByAccountId(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_QueryMaxExchangeByBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).QueryMaxExchangeByBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/QueryMaxExchangeByBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).QueryMaxExchangeByBatch(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_QueryExchangeNumByBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).QueryExchangeNumByBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/QueryExchangeNumByBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).QueryExchangeNumByBatch(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_QueryCdkeyBatchByBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).QueryCdkeyBatchByBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/QueryCdkeyBatchByBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).QueryCdkeyBatchByBatch(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_QueryCdkeyStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).QueryCdkeyStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/QueryCdkeyStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).QueryCdkeyStatus(ctx, req.(*StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_QueryGiftTemplateById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).QueryGiftTemplateById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/QueryGiftTemplateById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).QueryGiftTemplateById(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_ReceiveGift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGiftPackage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).ReceiveGift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/ReceiveGift",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).ReceiveGift(ctx, req.(*UserGiftPackage))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_SetUserInviteRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Gift)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).SetUserInviteRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/SetUserInviteRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).SetUserInviteRelation(ctx, req.(*Gift))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_QueryUserAuthenticateByAccountId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).QueryUserAuthenticateByAccountId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/QueryUserAuthenticateByAccountId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).QueryUserAuthenticateByAccountId(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_QueryUserInfoByInvitationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).QueryUserInfoByInvitationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/QueryUserInfoByInvitationCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).QueryUserInfoByInvitationCode(ctx, req.(*StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_QueryUserInviteRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).QueryUserInviteRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/QueryUserInviteRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).QueryUserInviteRelation(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_QueryInviteRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteRelationArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).QueryInviteRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/QueryInviteRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).QueryInviteRelation(ctx, req.(*InviteRelationArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_QueryInviteGift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).QueryInviteGift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/QueryInviteGift",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).QueryInviteGift(ctx, req.(*Nil))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_QueryUserInviteInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).QueryUserInviteInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/QueryUserInviteInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).QueryUserInviteInfo(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_QueryUserInviteStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).QueryUserInviteStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/QueryUserInviteStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).QueryUserInviteStatus(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_QueryPhoneUserRegisterGift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).QueryPhoneUserRegisterGift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/QueryPhoneUserRegisterGift",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).QueryPhoneUserRegisterGift(ctx, req.(*Nil))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUsercenterAgent_InsertPhoneRegistGiftReceived_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhoneRegistGift)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUsercenterAgentServer).InsertPhoneRegistGiftReceived(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbUsercenterAgent/InsertPhoneRegistGiftReceived",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUsercenterAgentServer).InsertPhoneRegistGiftReceived(ctx, req.(*PhoneRegistGift))
	}
	return interceptor(ctx, in, info, handler)
}

var _DbUsercenterAgent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dbproto.DbUsercenterAgent",
	HandlerType: (*DbUsercenterAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryUserInfo",
			Handler:    _DbUsercenterAgent_QueryUserInfo_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _DbUsercenterAgent_CreateAccount_Handler,
		},
		{
			MethodName: "QueryPhoneUser",
			Handler:    _DbUsercenterAgent_QueryPhoneUser_Handler,
		},
		{
			MethodName: "QueryQQUser",
			Handler:    _DbUsercenterAgent_QueryQQUser_Handler,
		},
		{
			MethodName: "QueryWeixinUser",
			Handler:    _DbUsercenterAgent_QueryWeixinUser_Handler,
		},
		{
			MethodName: "SetPhonePassword",
			Handler:    _DbUsercenterAgent_SetPhonePassword_Handler,
		},
		{
			MethodName: "ChangePhone",
			Handler:    _DbUsercenterAgent_ChangePhone_Handler,
		},
		{
			MethodName: "SetAccountUser",
			Handler:    _DbUsercenterAgent_SetAccountUser_Handler,
		},
		{
			MethodName: "SetAccountPayPassword",
			Handler:    _DbUsercenterAgent_SetAccountPayPassword_Handler,
		},
		{
			MethodName: "OpenAccountPayPassword",
			Handler:    _DbUsercenterAgent_OpenAccountPayPassword_Handler,
		},
		{
			MethodName: "QueryAccountPaySettings",
			Handler:    _DbUsercenterAgent_QueryAccountPaySettings_Handler,
		},
		{
			MethodName: "QueryPhoneRegistGiftReceived",
			Handler:    _DbUsercenterAgent_QueryPhoneRegistGiftReceived_Handler,
		},
		{
			MethodName: "SetUserIcon",
			Handler:    _DbUsercenterAgent_SetUserIcon_Handler,
		},
		{
			MethodName: "SetUserNickname",
			Handler:    _DbUsercenterAgent_SetUserNickname_Handler,
		},
		{
			MethodName: "SetUserSex",
			Handler:    _DbUsercenterAgent_SetUserSex_Handler,
		},
		{
			MethodName: "InsertAccountBankcard",
			Handler:    _DbUsercenterAgent_InsertAccountBankcard_Handler,
		},
		{
			MethodName: "QueryAccountBankcard",
			Handler:    _DbUsercenterAgent_QueryAccountBankcard_Handler,
		},
		{
			MethodName: "InsertAccountIdcard",
			Handler:    _DbUsercenterAgent_InsertAccountIdcard_Handler,
		},
		{
			MethodName: "QueryAccountIdcard",
			Handler:    _DbUsercenterAgent_QueryAccountIdcard_Handler,
		},
		{
			MethodName: "DeleteAccountBankcard",
			Handler:    _DbUsercenterAgent_DeleteAccountBankcard_Handler,
		},
		{
			MethodName: "SetDailyCheck",
			Handler:    _DbUsercenterAgent_SetDailyCheck_Handler,
		},
		{
			MethodName: "QueryFund",
			Handler:    _DbUsercenterAgent_QueryFund_Handler,
		},
		{
			MethodName: "QueryFundHistory",
			Handler:    _DbUsercenterAgent_QueryFundHistory_Handler,
		},
		{
			MethodName: "QueryFundHistoryStats",
			Handler:    _DbUsercenterAgent_QueryFundHistoryStats_Handler,
		},
		{
			MethodName: "UpdateRechargeResult",
			Handler:    _DbUsercenterAgent_UpdateRechargeResult_Handler,
		},
		{
			MethodName: "InsertWithdrawApply",
			Handler:    _DbUsercenterAgent_InsertWithdrawApply_Handler,
		},
		{
			MethodName: "QueryWithdrawApply",
			Handler:    _DbUsercenterAgent_QueryWithdrawApply_Handler,
		},
		{
			MethodName: "ChangeCredits",
			Handler:    _DbUsercenterAgent_ChangeCredits_Handler,
		},
		{
			MethodName: "ChangeKxd",
			Handler:    _DbUsercenterAgent_ChangeKxd_Handler,
		},
		{
			MethodName: "QueryVirtualFund",
			Handler:    _DbUsercenterAgent_QueryVirtualFund_Handler,
		},
		{
			MethodName: "QueryAccountCreditsTaskInfo",
			Handler:    _DbUsercenterAgent_QueryAccountCreditsTaskInfo_Handler,
		},
		{
			MethodName: "QueryBuycaiTicket",
			Handler:    _DbUsercenterAgent_QueryBuycaiTicket_Handler,
		},
		{
			MethodName: "InsertBuycaiTickets",
			Handler:    _DbUsercenterAgent_InsertBuycaiTickets_Handler,
		},
		{
			MethodName: "DeleteBuycaiTickets",
			Handler:    _DbUsercenterAgent_DeleteBuycaiTickets_Handler,
		},
		{
			MethodName: "BuycaiInsertUserOrder",
			Handler:    _DbUsercenterAgent_BuycaiInsertUserOrder_Handler,
		},
		{
			MethodName: "BuycaiInsertVendorOrder",
			Handler:    _DbUsercenterAgent_BuycaiInsertVendorOrder_Handler,
		},
		{
			MethodName: "BuycaiQueryUserOrderAllIssues",
			Handler:    _DbUsercenterAgent_BuycaiQueryUserOrderAllIssues_Handler,
		},
		{
			MethodName: "BuycaiUpdateUserOrder",
			Handler:    _DbUsercenterAgent_BuycaiUpdateUserOrder_Handler,
		},
		{
			MethodName: "BuycaiUserCancelStopChase",
			Handler:    _DbUsercenterAgent_BuycaiUserCancelStopChase_Handler,
		},
		{
			MethodName: "BuycaiUpdateVendorOrder",
			Handler:    _DbUsercenterAgent_BuycaiUpdateVendorOrder_Handler,
		},
		{
			MethodName: "QueryBuycaiUserOrderById",
			Handler:    _DbUsercenterAgent_QueryBuycaiUserOrderById_Handler,
		},
		{
			MethodName: "QueryBuycaiVendorOrderById",
			Handler:    _DbUsercenterAgent_QueryBuycaiVendorOrderById_Handler,
		},
		{
			MethodName: "QueryCountActivity",
			Handler:    _DbUsercenterAgent_QueryCountActivity_Handler,
		},
		{
			MethodName: "CreateGiftPackage",
			Handler:    _DbUsercenterAgent_CreateGiftPackage_Handler,
		},
		{
			MethodName: "QueryGiftByBatch",
			Handler:    _DbUsercenterAgent_QueryGiftByBatch_Handler,
		},
		{
			MethodName: "InsertGiftUser",
			Handler:    _DbUsercenterAgent_InsertGiftUser_Handler,
		},
		{
			MethodName: "QueryExchangeHistoryByAccountId",
			Handler:    _DbUsercenterAgent_QueryExchangeHistoryByAccountId_Handler,
		},
		{
			MethodName: "QueryMaxExchangeByBatch",
			Handler:    _DbUsercenterAgent_QueryMaxExchangeByBatch_Handler,
		},
		{
			MethodName: "QueryExchangeNumByBatch",
			Handler:    _DbUsercenterAgent_QueryExchangeNumByBatch_Handler,
		},
		{
			MethodName: "QueryCdkeyBatchByBatch",
			Handler:    _DbUsercenterAgent_QueryCdkeyBatchByBatch_Handler,
		},
		{
			MethodName: "QueryCdkeyStatus",
			Handler:    _DbUsercenterAgent_QueryCdkeyStatus_Handler,
		},
		{
			MethodName: "QueryGiftTemplateById",
			Handler:    _DbUsercenterAgent_QueryGiftTemplateById_Handler,
		},
		{
			MethodName: "ReceiveGift",
			Handler:    _DbUsercenterAgent_ReceiveGift_Handler,
		},
		{
			MethodName: "SetUserInviteRelation",
			Handler:    _DbUsercenterAgent_SetUserInviteRelation_Handler,
		},
		{
			MethodName: "QueryUserAuthenticateByAccountId",
			Handler:    _DbUsercenterAgent_QueryUserAuthenticateByAccountId_Handler,
		},
		{
			MethodName: "QueryUserInfoByInvitationCode",
			Handler:    _DbUsercenterAgent_QueryUserInfoByInvitationCode_Handler,
		},
		{
			MethodName: "QueryUserInviteRelation",
			Handler:    _DbUsercenterAgent_QueryUserInviteRelation_Handler,
		},
		{
			MethodName: "QueryInviteRelation",
			Handler:    _DbUsercenterAgent_QueryInviteRelation_Handler,
		},
		{
			MethodName: "QueryInviteGift",
			Handler:    _DbUsercenterAgent_QueryInviteGift_Handler,
		},
		{
			MethodName: "QueryUserInviteInfo",
			Handler:    _DbUsercenterAgent_QueryUserInviteInfo_Handler,
		},
		{
			MethodName: "QueryUserInviteStatus",
			Handler:    _DbUsercenterAgent_QueryUserInviteStatus_Handler,
		},
		{
			MethodName: "QueryPhoneUserRegisterGift",
			Handler:    _DbUsercenterAgent_QueryPhoneUserRegisterGift_Handler,
		},
		{
			MethodName: "InsertPhoneRegistGiftReceived",
			Handler:    _DbUsercenterAgent_InsertPhoneRegistGiftReceived_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QueryCreditsHistory",
			Handler:       _DbUsercenterAgent_QueryCreditsHistory_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "QueryKxdHistory",
			Handler:       _DbUsercenterAgent_QueryKxdHistory_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "QueryBuycaiTickets",
			Handler:       _DbUsercenterAgent_QueryBuycaiTickets_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "QueryValidBuycaiTickets",
			Handler:       _DbUsercenterAgent_QueryValidBuycaiTickets_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BuycaiQueryUserOrder",
			Handler:       _DbUsercenterAgent_BuycaiQueryUserOrder_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BuycaiQueryVendorOrder",
			Handler:       _DbUsercenterAgent_BuycaiQueryVendorOrder_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BuycaiQueryAccountUserOrder",
			Handler:       _DbUsercenterAgent_BuycaiQueryAccountUserOrder_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "QueryVendorOrderHistory",
			Handler:       _DbUsercenterAgent_QueryVendorOrderHistory_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "QueryUserOrderHistory",
			Handler:       _DbUsercenterAgent_QueryUserOrderHistory_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "agent_usercenter.proto",
}

func init() { proto.RegisterFile("agent_usercenter.proto", fileDescriptor8) }

var fileDescriptor8 = []byte{
	// 1359 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0x5b, 0x6f, 0xdb, 0x36,
	0x14, 0x76, 0x5f, 0x36, 0x94, 0xad, 0x73, 0x61, 0x6c, 0x27, 0x75, 0x9b, 0xad, 0xd3, 0x06, 0xf4,
	0x2d, 0x2b, 0x5a, 0x6c, 0x01, 0x8a, 0xb5, 0x9d, 0xed, 0x5c, 0xe6, 0xa6, 0xcd, 0xcd, 0xb9, 0xec,
	0x61, 0x58, 0x40, 0x4b, 0x8c, 0x4d, 0x58, 0x91, 0x0c, 0x89, 0x4a, 0xec, 0xdf, 0xb1, 0x3f, 0x3c,
	0xf0, 0x26, 0x92, 0x32, 0xe5, 0x38, 0xeb, 0xde, 0xa4, 0x73, 0xf9, 0xf8, 0xf1, 0xf0, 0xf0, 0xf0,
	0x90, 0xa0, 0x81, 0x06, 0x38, 0xa2, 0x57, 0x59, 0x8a, 0x13, 0x1f, 0x47, 0x14, 0x27, 0x5b, 0xe3,
	0x24, 0xa6, 0x31, 0xfc, 0x36, 0xe8, 0xf3, 0x8f, 0x26, 0xe8, 0xa3, 0x14, 0x6f, 0xc9, 0x6f, 0x66,
	0x26, 0xbf, 0x9f, 0xf6, 0xb3, 0xa9, 0x8f, 0x88, 0xd2, 0x5c, 0x67, 0x51, 0xa0, 0xbe, 0x07, 0xe4,
	0x9a, 0xca, 0xef, 0xa5, 0x3b, 0x42, 0x87, 0x41, 0x82, 0xee, 0xe4, 0xff, 0x1a, 0xd3, 0x5d, 0x51,
	0x7c, 0x33, 0x0e, 0x11, 0x55, 0xb0, 0xab, 0x7e, 0x30, 0xc2, 0xd3, 0xab, 0x3e, 0xa2, 0xfe, 0x50,
	0x8a, 0x96, 0xd9, 0x48, 0x57, 0x1a, 0xe8, 0xcd, 0x3f, 0xaf, 0xc0, 0xea, 0x4e, 0xff, 0x3c, 0xa7,
	0xd9, 0x62, 0xb4, 0xe1, 0x36, 0xa8, 0x9e, 0x64, 0x38, 0x99, 0x32, 0x79, 0x37, 0xba, 0x8e, 0xe1,
	0xea, 0x96, 0xe4, 0xbd, 0xd5, 0x8d, 0xe8, 0x05, 0x0a, 0x33, 0xdc, 0xd4, 0x22, 0x65, 0xe5, 0x55,
	0xe0, 0x47, 0x50, 0xed, 0x24, 0x18, 0x51, 0xdc, 0xf2, 0xfd, 0x38, 0x8b, 0x28, 0x7c, 0x96, 0x5b,
	0x59, 0xf2, 0x56, 0x32, 0x68, 0xce, 0x62, 0x7a, 0x15, 0xf8, 0x1b, 0x58, 0xe2, 0x23, 0x1f, 0x0f,
	0xe3, 0x08, 0x33, 0x60, 0x58, 0xcb, 0xcd, 0x7a, 0x34, 0x21, 0xd1, 0x40, 0x8c, 0x0e, 0x73, 0x69,
	0x6e, 0xe9, 0x55, 0xe0, 0xaf, 0xe0, 0x09, 0xf7, 0x3e, 0x39, 0x99, 0xe3, 0xba, 0x9c, 0x4b, 0x85,
	0x99, 0x57, 0x81, 0x1f, 0xc0, 0x32, 0xf7, 0xbb, 0xc4, 0x64, 0x42, 0xa2, 0x39, 0xbe, 0x6b, 0xb9,
	0x54, 0x9b, 0x7a, 0x15, 0xf8, 0x0e, 0xac, 0xf4, 0x30, 0xe5, 0x4c, 0x8e, 0x51, 0x9a, 0xde, 0xc5,
	0x49, 0x00, 0x1b, 0x36, 0x43, 0x25, 0x6f, 0x3e, 0xcd, 0xe5, 0x87, 0x24, 0x14, 0x9c, 0x3b, 0x43,
	0x14, 0x0d, 0x30, 0x37, 0x83, 0xeb, 0x3a, 0x60, 0x5a, 0xca, 0xc2, 0x55, 0xf4, 0xfb, 0x05, 0x2c,
	0xf5, 0x30, 0x95, 0xf1, 0xe4, 0x94, 0x35, 0xb9, 0x1e, 0xe6, 0x12, 0x97, 0xdb, 0xef, 0xa0, 0xae,
	0xdd, 0x8e, 0xd1, 0x34, 0xe7, 0xab, 0x07, 0x36, 0xa4, 0x2e, 0x84, 0x16, 0x68, 0x1c, 0x8d, 0x71,
	0xf4, 0x35, 0x10, 0x3b, 0x60, 0x9d, 0xc7, 0x5b, 0x63, 0xf4, 0x30, 0xa5, 0x24, 0x1a, 0xa4, 0xae,
	0x4c, 0xab, 0x99, 0xb0, 0xca, 0xd0, 0xab, 0xc0, 0x7d, 0xf0, 0x42, 0xe7, 0xca, 0x29, 0x1e, 0x90,
	0x94, 0xee, 0x93, 0x6b, 0x7a, 0x8a, 0x7d, 0x4c, 0x6e, 0x71, 0xe0, 0x82, 0xd2, 0x69, 0xd3, 0x8e,
	0xe3, 0x50, 0x25, 0xdd, 0x5b, 0xf0, 0x44, 0x46, 0xac, 0xeb, 0xc7, 0x91, 0xb1, 0xf4, 0x2a, 0xb3,
	0x5d, 0x73, 0xd8, 0x06, 0xcb, 0xd2, 0xe9, 0x90, 0xf8, 0xa3, 0x08, 0xdd, 0xe0, 0x05, 0x1d, 0xdf,
	0x00, 0x20, 0x1d, 0x7b, 0x78, 0xb2, 0xa0, 0x4f, 0x0b, 0xd4, 0xbb, 0x51, 0x8a, 0x13, 0xb5, 0x70,
	0x6d, 0x14, 0x8d, 0x7c, 0x94, 0x04, 0x70, 0x23, 0x37, 0x2c, 0x68, 0x66, 0x20, 0x76, 0x41, 0xcd,
	0x8c, 0x79, 0x8e, 0xe0, 0x88, 0x52, 0x29, 0xa8, 0x57, 0x81, 0xef, 0xc1, 0x9a, 0xc5, 0xa4, 0x1b,
	0x70, 0x94, 0x46, 0xd1, 0x45, 0xc8, 0x1d, 0x13, 0x81, 0x26, 0x0b, 0xe9, 0xed, 0xe0, 0x50, 0x02,
	0xc8, 0x37, 0x5b, 0x7d, 0x07, 0x87, 0x38, 0xaf, 0x25, 0xf3, 0x66, 0x32, 0xbb, 0x68, 0xd5, 0x1e,
	0xa6, 0x3b, 0x88, 0x84, 0xd3, 0xce, 0x10, 0xfb, 0x23, 0x83, 0xb7, 0x16, 0xba, 0x16, 0xe0, 0x67,
	0xf0, 0x98, 0xf3, 0xde, 0xcb, 0x22, 0xe7, 0x40, 0xd5, 0x5c, 0xc4, 0x2c, 0xbc, 0x0a, 0x3c, 0x04,
	0x2b, 0xb9, 0xc3, 0x1f, 0x24, 0xa5, 0x71, 0x32, 0x85, 0x2f, 0x74, 0xe5, 0x29, 0xa8, 0xd8, 0x90,
	0x4d, 0x0b, 0x42, 0xec, 0x7e, 0xa9, 0xf6, 0x2a, 0xf0, 0x12, 0xd4, 0x8b, 0x4e, 0x3d, 0x8a, 0x68,
	0x0a, 0x7f, 0x28, 0x05, 0xe5, 0x7a, 0x86, 0xfc, 0xcc, 0x42, 0x36, 0xb5, 0xbc, 0x64, 0xd7, 0xce,
	0xc7, 0x01, 0xa2, 0xf8, 0x14, 0xfb, 0x43, 0x94, 0x0c, 0xf0, 0x29, 0x4e, 0xb3, 0x90, 0x1a, 0x9b,
	0xd9, 0x56, 0xcc, 0x84, 0x66, 0x5f, 0x65, 0xc4, 0xa5, 0x3c, 0x93, 0x5a, 0xe3, 0x71, 0x38, 0x35,
	0x22, 0x6b, 0xc9, 0x9b, 0x25, 0x72, 0x23, 0x37, 0x6c, 0x9c, 0xb9, 0xb9, 0x51, 0x84, 0x38, 0x07,
	0x6b, 0x1c, 0xa2, 0x93, 0xe0, 0x80, 0xd0, 0x54, 0x05, 0x7e, 0xc3, 0x8e, 0x91, 0x11, 0xf4, 0x97,
	0xb9, 0xe6, 0x82, 0x24, 0x34, 0x43, 0xa1, 0x8e, 0xfd, 0x29, 0xf6, 0x63, 0x96, 0x70, 0xaf, 0x1f,
	0xc1, 0x13, 0x79, 0x3e, 0x1c, 0x4c, 0x82, 0xff, 0x0b, 0x72, 0x0f, 0x54, 0x85, 0x4c, 0x52, 0x85,
	0x9b, 0x85, 0xc2, 0x6f, 0x38, 0x33, 0xd4, 0x9a, 0x0b, 0xd5, 0xab, 0xc0, 0x36, 0x78, 0x2c, 0xec,
	0x0f, 0x26, 0xc1, 0x7f, 0xc5, 0x78, 0x2f, 0x73, 0xd5, 0x90, 0xce, 0xaf, 0xc3, 0xb6, 0xfb, 0x67,
	0xf0, 0xdc, 0xdc, 0xd3, 0x72, 0x42, 0x67, 0x28, 0x1d, 0x95, 0xf5, 0x0e, 0x1b, 0x66, 0x57, 0x60,
	0x1a, 0xf3, 0x7c, 0x5c, 0xe5, 0x68, 0x6d, 0xde, 0x07, 0x9d, 0x11, 0x7f, 0x84, 0xa9, 0x0b, 0xa3,
	0xae, 0x4b, 0xb9, 0x61, 0xc9, 0x23, 0x02, 0x67, 0x00, 0xd2, 0x87, 0x20, 0xbc, 0x7e, 0x04, 0xf7,
	0xe5, 0x01, 0x75, 0x81, 0x42, 0x12, 0x7c, 0x0d, 0xd0, 0xae, 0xda, 0x1c, 0x36, 0xc8, 0x77, 0x06,
	0x48, 0x51, 0xeb, 0x2a, 0x3f, 0xbb, 0x60, 0x4d, 0xd4, 0xbc, 0x32, 0x98, 0x59, 0xad, 0x0b, 0x66,
	0x0f, 0xd4, 0x85, 0x89, 0x18, 0x95, 0x9d, 0x38, 0x47, 0x49, 0x80, 0x13, 0x23, 0x9b, 0x85, 0x3e,
	0xd7, 0xb8, 0xbb, 0xb4, 0x4f, 0x60, 0xdd, 0xc4, 0xb9, 0xc0, 0x51, 0x10, 0x4b, 0xa4, 0x66, 0x01,
	0xc9, 0xd0, 0xb9, 0xb1, 0x2e, 0x40, 0x4d, 0x58, 0xe6, 0x1d, 0xa7, 0x00, 0x7a, 0x59, 0x00, 0xb2,
	0xd5, 0x6c, 0x76, 0xa5, 0xa4, 0x79, 0xe4, 0xff, 0x02, 0x0d, 0xc3, 0xd1, 0xa4, 0xe8, 0xb9, 0x90,
	0x0d, 0x03, 0xbb, 0x18, 0xcf, 0x4c, 0x43, 0x56, 0x84, 0x4d, 0x27, 0xad, 0x30, 0xec, 0xa6, 0x69,
	0x86, 0x9d, 0x69, 0xf2, 0xdc, 0x3a, 0xea, 0x6d, 0x7b, 0xaf, 0x02, 0x0f, 0xd4, 0xe2, 0x88, 0x72,
	0xac, 0x23, 0x51, 0xe4, 0xab, 0xf5, 0xac, 0x86, 0x67, 0xa9, 0x6b, 0xa5, 0x3f, 0x80, 0x67, 0x3a,
	0x28, 0x1d, 0x14, 0xf9, 0x38, 0xec, 0xd1, 0x78, 0xdc, 0x19, 0xa2, 0x14, 0x2f, 0x72, 0x50, 0x1e,
	0xa9, 0x15, 0x16, 0x83, 0x99, 0xe1, 0xfb, 0xc9, 0x49, 0x47, 0x58, 0x94, 0x13, 0x0a, 0xc0, 0x73,
	0x23, 0x60, 0x46, 0xdb, 0x2a, 0x40, 0x5f, 0xb9, 0xd6, 0xa4, 0x68, 0x75, 0xff, 0xa2, 0xff, 0xad,
	0xf6, 0xad, 0xe6, 0xab, 0x0a, 0xf6, 0x8f, 0x76, 0xc1, 0x9e, 0xb5, 0xb0, 0x97, 0xdd, 0xd0, 0x1b,
	0x55, 0xfb, 0x4f, 0x79, 0x0a, 0xe7, 0xa3, 0x2a, 0xf4, 0xc2, 0x29, 0x5c, 0xd4, 0xdb, 0xcc, 0x73,
	0xad, 0x81, 0xdc, 0x05, 0x1b, 0x46, 0xd5, 0xca, 0x2d, 0xda, 0xd3, 0xee, 0x3d, 0x2d, 0xda, 0x4c,
	0x18, 0xe0, 0x17, 0xd0, 0x34, 0xa0, 0x8c, 0x89, 0x94, 0x81, 0xcd, 0x4d, 0x76, 0xf8, 0x51, 0xd6,
	0xd3, 0x0e, 0xbf, 0xb8, 0xf9, 0x94, 0xdc, 0x12, 0x3a, 0x35, 0xfa, 0x56, 0xd6, 0x73, 0x1f, 0x23,
	0x7f, 0x84, 0x06, 0xd8, 0xbd, 0xc3, 0xdf, 0x81, 0x55, 0x71, 0xf9, 0x33, 0x2c, 0x61, 0xdd, 0xf2,
	0xef, 0xb0, 0x9b, 0xaa, 0x2b, 0x6d, 0xd4, 0xd1, 0xc4, 0x8c, 0xda, 0xd3, 0x36, 0xbb, 0xca, 0xce,
	0x3f, 0x9a, 0x8c, 0xdb, 0x1a, 0xef, 0xb5, 0x97, 0x44, 0x89, 0x62, 0xfe, 0xfc, 0x92, 0xb4, 0x62,
	0x8d, 0xeb, 0x1a, 0xf2, 0x33, 0xf8, 0x9e, 0x0f, 0xb9, 0x3b, 0xf1, 0xcd, 0x1e, 0xac, 0xad, 0x7b,
	0xd6, 0x87, 0x30, 0x68, 0xc9, 0x8c, 0xfc, 0x82, 0x26, 0x0a, 0x70, 0xce, 0x3c, 0x9c, 0xf1, 0x53,
	0x10, 0xca, 0xff, 0x30, 0xbb, 0x79, 0x28, 0x44, 0x1b, 0x34, 0xc4, 0x1a, 0xb2, 0x38, 0x73, 0xd7,
	0x39, 0x08, 0xfa, 0x1e, 0xa9, 0xcd, 0x79, 0x49, 0x59, 0xd1, 0x18, 0x62, 0xa3, 0xdf, 0x7b, 0x39,
	0x37, 0x6f, 0x59, 0x1d, 0xb9, 0x77, 0x58, 0xdc, 0xcf, 0xe4, 0x4b, 0x45, 0x59, 0x46, 0xda, 0xd9,
	0xa1, 0xac, 0x79, 0x03, 0xff, 0x44, 0xde, 0xef, 0x98, 0x02, 0xda, 0x7b, 0xca, 0xcc, 0xc4, 0xd9,
	0x6b, 0x76, 0x5d, 0xdd, 0xf1, 0xa2, 0x5b, 0xc2, 0xba, 0xdd, 0x10, 0x51, 0x12, 0x47, 0xb0, 0x6a,
	0x0d, 0x35, 0xe3, 0x77, 0x00, 0x5e, 0xe6, 0x3b, 0xba, 0x95, 0xd1, 0x21, 0x8e, 0x28, 0xf1, 0x39,
	0xf3, 0xb9, 0xe9, 0xe0, 0x0e, 0xc1, 0x27, 0xb0, 0x69, 0xbd, 0xab, 0xb4, 0xa7, 0x9c, 0x0c, 0x27,
	0xd2, 0x89, 0x03, 0x5c, 0x12, 0xcf, 0x92, 0x25, 0x5d, 0x37, 0xb0, 0xac, 0x29, 0x2d, 0xcc, 0x67,
	0x5f, 0xb6, 0xcb, 0x05, 0xff, 0xa6, 0xe1, 0x6f, 0x2a, 0xd8, 0x6e, 0x71, 0x03, 0x6d, 0xcb, 0x06,
	0x59, 0xd8, 0xf3, 0xa5, 0xb1, 0x02, 0x59, 0xba, 0x3d, 0x3a, 0x92, 0x81, 0x9e, 0x45, 0x59, 0xcf,
	0xb8, 0x5e, 0xb8, 0x28, 0x2b, 0x5b, 0xf1, 0xa6, 0x51, 0x00, 0x91, 0xe9, 0xb9, 0x70, 0x20, 0xda,
	0xb2, 0x64, 0xe6, 0x8f, 0x49, 0xe2, 0x39, 0x41, 0xa4, 0xd4, 0x82, 0x53, 0xe9, 0x82, 0x4d, 0x51,
	0x6b, 0xca, 0xde, 0x23, 0x36, 0xec, 0x17, 0x21, 0x6d, 0x51, 0x4c, 0xba, 0xfe, 0x37, 0xfc, 0xe7,
	0xed, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x8c, 0xac, 0xdf, 0xbf, 0x46, 0x14, 0x00, 0x00,
}
