// Code generated by protoc-gen-go. DO NOT EDIT.
// source: agent_thirdapi.proto

package dbproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DbThirdApiAgent service

type DbThirdApiAgentClient interface {
	InsertSms(ctx context.Context, in *Sms, opts ...grpc.CallOption) (*Nil, error)
	QuerySms(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*Sms, error)
	SetSmsExpired(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*Nil, error)
	QuerySmsStats(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*SmsStats, error)
	UpdateSmsStats(ctx context.Context, in *SmsStats, opts ...grpc.CallOption) (*Nil, error)
	// -------------------------------------------------------------------------------
	InsertIdcard(ctx context.Context, in *Idcard, opts ...grpc.CallOption) (*Nil, error)
	QueryIdcard(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*Idcard, error)
	InsertBankcard(ctx context.Context, in *Bankcard, opts ...grpc.CallOption) (*Nil, error)
	QueryBankcard(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*Bankcard, error)
	// -------------------------------------------------------------------------------
	OpencaiQueryByOpendate(ctx context.Context, in *OpencaiQueryArg, opts ...grpc.CallOption) (DbThirdApiAgent_OpencaiQueryByOpendateClient, error)
	OpencaiQueryByIssue(ctx context.Context, in *OpencaiQueryArg, opts ...grpc.CallOption) (*OpenInfo, error)
	OpencaiQueryByLatestNum(ctx context.Context, in *OpencaiQueryArg, opts ...grpc.CallOption) (DbThirdApiAgent_OpencaiQueryByLatestNumClient, error)
	OpencaiQueryLatestIssue(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*OpenInfo, error)
	OpencaiInsert(ctx context.Context, in *OpencaiInsertArg, opts ...grpc.CallOption) (*Nil, error)
	OpencaiUpsertDetail(ctx context.Context, in *OpencaiUpsertDetailArg, opts ...grpc.CallOption) (*Nil, error)
}

type dbThirdApiAgentClient struct {
	cc *grpc.ClientConn
}

func NewDbThirdApiAgentClient(cc *grpc.ClientConn) DbThirdApiAgentClient {
	return &dbThirdApiAgentClient{cc}
}

func (c *dbThirdApiAgentClient) InsertSms(ctx context.Context, in *Sms, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbThirdApiAgent/InsertSms", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbThirdApiAgentClient) QuerySms(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*Sms, error) {
	out := new(Sms)
	err := grpc.Invoke(ctx, "/dbproto.DbThirdApiAgent/QuerySms", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbThirdApiAgentClient) SetSmsExpired(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbThirdApiAgent/SetSmsExpired", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbThirdApiAgentClient) QuerySmsStats(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*SmsStats, error) {
	out := new(SmsStats)
	err := grpc.Invoke(ctx, "/dbproto.DbThirdApiAgent/QuerySmsStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbThirdApiAgentClient) UpdateSmsStats(ctx context.Context, in *SmsStats, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbThirdApiAgent/UpdateSmsStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbThirdApiAgentClient) InsertIdcard(ctx context.Context, in *Idcard, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbThirdApiAgent/InsertIdcard", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbThirdApiAgentClient) QueryIdcard(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*Idcard, error) {
	out := new(Idcard)
	err := grpc.Invoke(ctx, "/dbproto.DbThirdApiAgent/QueryIdcard", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbThirdApiAgentClient) InsertBankcard(ctx context.Context, in *Bankcard, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbThirdApiAgent/InsertBankcard", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbThirdApiAgentClient) QueryBankcard(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*Bankcard, error) {
	out := new(Bankcard)
	err := grpc.Invoke(ctx, "/dbproto.DbThirdApiAgent/QueryBankcard", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbThirdApiAgentClient) OpencaiQueryByOpendate(ctx context.Context, in *OpencaiQueryArg, opts ...grpc.CallOption) (DbThirdApiAgent_OpencaiQueryByOpendateClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DbThirdApiAgent_serviceDesc.Streams[0], c.cc, "/dbproto.DbThirdApiAgent/OpencaiQueryByOpendate", opts...)
	if err != nil {
		return nil, err
	}
	x := &dbThirdApiAgentOpencaiQueryByOpendateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DbThirdApiAgent_OpencaiQueryByOpendateClient interface {
	Recv() (*OpenInfo, error)
	grpc.ClientStream
}

type dbThirdApiAgentOpencaiQueryByOpendateClient struct {
	grpc.ClientStream
}

func (x *dbThirdApiAgentOpencaiQueryByOpendateClient) Recv() (*OpenInfo, error) {
	m := new(OpenInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dbThirdApiAgentClient) OpencaiQueryByIssue(ctx context.Context, in *OpencaiQueryArg, opts ...grpc.CallOption) (*OpenInfo, error) {
	out := new(OpenInfo)
	err := grpc.Invoke(ctx, "/dbproto.DbThirdApiAgent/OpencaiQueryByIssue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbThirdApiAgentClient) OpencaiQueryByLatestNum(ctx context.Context, in *OpencaiQueryArg, opts ...grpc.CallOption) (DbThirdApiAgent_OpencaiQueryByLatestNumClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DbThirdApiAgent_serviceDesc.Streams[1], c.cc, "/dbproto.DbThirdApiAgent/OpencaiQueryByLatestNum", opts...)
	if err != nil {
		return nil, err
	}
	x := &dbThirdApiAgentOpencaiQueryByLatestNumClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DbThirdApiAgent_OpencaiQueryByLatestNumClient interface {
	Recv() (*OpenInfo, error)
	grpc.ClientStream
}

type dbThirdApiAgentOpencaiQueryByLatestNumClient struct {
	grpc.ClientStream
}

func (x *dbThirdApiAgentOpencaiQueryByLatestNumClient) Recv() (*OpenInfo, error) {
	m := new(OpenInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dbThirdApiAgentClient) OpencaiQueryLatestIssue(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*OpenInfo, error) {
	out := new(OpenInfo)
	err := grpc.Invoke(ctx, "/dbproto.DbThirdApiAgent/OpencaiQueryLatestIssue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbThirdApiAgentClient) OpencaiInsert(ctx context.Context, in *OpencaiInsertArg, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbThirdApiAgent/OpencaiInsert", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbThirdApiAgentClient) OpencaiUpsertDetail(ctx context.Context, in *OpencaiUpsertDetailArg, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbThirdApiAgent/OpencaiUpsertDetail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DbThirdApiAgent service

type DbThirdApiAgentServer interface {
	InsertSms(context.Context, *Sms) (*Nil, error)
	QuerySms(context.Context, *StringValue) (*Sms, error)
	SetSmsExpired(context.Context, *IntValue) (*Nil, error)
	QuerySmsStats(context.Context, *StringValue) (*SmsStats, error)
	UpdateSmsStats(context.Context, *SmsStats) (*Nil, error)
	// -------------------------------------------------------------------------------
	InsertIdcard(context.Context, *Idcard) (*Nil, error)
	QueryIdcard(context.Context, *StringValue) (*Idcard, error)
	InsertBankcard(context.Context, *Bankcard) (*Nil, error)
	QueryBankcard(context.Context, *StringValue) (*Bankcard, error)
	// -------------------------------------------------------------------------------
	OpencaiQueryByOpendate(*OpencaiQueryArg, DbThirdApiAgent_OpencaiQueryByOpendateServer) error
	OpencaiQueryByIssue(context.Context, *OpencaiQueryArg) (*OpenInfo, error)
	OpencaiQueryByLatestNum(*OpencaiQueryArg, DbThirdApiAgent_OpencaiQueryByLatestNumServer) error
	OpencaiQueryLatestIssue(context.Context, *StringValue) (*OpenInfo, error)
	OpencaiInsert(context.Context, *OpencaiInsertArg) (*Nil, error)
	OpencaiUpsertDetail(context.Context, *OpencaiUpsertDetailArg) (*Nil, error)
}

func RegisterDbThirdApiAgentServer(s *grpc.Server, srv DbThirdApiAgentServer) {
	s.RegisterService(&_DbThirdApiAgent_serviceDesc, srv)
}

func _DbThirdApiAgent_InsertSms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sms)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbThirdApiAgentServer).InsertSms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbThirdApiAgent/InsertSms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbThirdApiAgentServer).InsertSms(ctx, req.(*Sms))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbThirdApiAgent_QuerySms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbThirdApiAgentServer).QuerySms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbThirdApiAgent/QuerySms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbThirdApiAgentServer).QuerySms(ctx, req.(*StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbThirdApiAgent_SetSmsExpired_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbThirdApiAgentServer).SetSmsExpired(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbThirdApiAgent/SetSmsExpired",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbThirdApiAgentServer).SetSmsExpired(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbThirdApiAgent_QuerySmsStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbThirdApiAgentServer).QuerySmsStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbThirdApiAgent/QuerySmsStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbThirdApiAgentServer).QuerySmsStats(ctx, req.(*StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbThirdApiAgent_UpdateSmsStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmsStats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbThirdApiAgentServer).UpdateSmsStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbThirdApiAgent/UpdateSmsStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbThirdApiAgentServer).UpdateSmsStats(ctx, req.(*SmsStats))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbThirdApiAgent_InsertIdcard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Idcard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbThirdApiAgentServer).InsertIdcard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbThirdApiAgent/InsertIdcard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbThirdApiAgentServer).InsertIdcard(ctx, req.(*Idcard))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbThirdApiAgent_QueryIdcard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbThirdApiAgentServer).QueryIdcard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbThirdApiAgent/QueryIdcard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbThirdApiAgentServer).QueryIdcard(ctx, req.(*StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbThirdApiAgent_InsertBankcard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bankcard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbThirdApiAgentServer).InsertBankcard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbThirdApiAgent/InsertBankcard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbThirdApiAgentServer).InsertBankcard(ctx, req.(*Bankcard))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbThirdApiAgent_QueryBankcard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbThirdApiAgentServer).QueryBankcard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbThirdApiAgent/QueryBankcard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbThirdApiAgentServer).QueryBankcard(ctx, req.(*StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbThirdApiAgent_OpencaiQueryByOpendate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OpencaiQueryArg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DbThirdApiAgentServer).OpencaiQueryByOpendate(m, &dbThirdApiAgentOpencaiQueryByOpendateServer{stream})
}

type DbThirdApiAgent_OpencaiQueryByOpendateServer interface {
	Send(*OpenInfo) error
	grpc.ServerStream
}

type dbThirdApiAgentOpencaiQueryByOpendateServer struct {
	grpc.ServerStream
}

func (x *dbThirdApiAgentOpencaiQueryByOpendateServer) Send(m *OpenInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _DbThirdApiAgent_OpencaiQueryByIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpencaiQueryArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbThirdApiAgentServer).OpencaiQueryByIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbThirdApiAgent/OpencaiQueryByIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbThirdApiAgentServer).OpencaiQueryByIssue(ctx, req.(*OpencaiQueryArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbThirdApiAgent_OpencaiQueryByLatestNum_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OpencaiQueryArg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DbThirdApiAgentServer).OpencaiQueryByLatestNum(m, &dbThirdApiAgentOpencaiQueryByLatestNumServer{stream})
}

type DbThirdApiAgent_OpencaiQueryByLatestNumServer interface {
	Send(*OpenInfo) error
	grpc.ServerStream
}

type dbThirdApiAgentOpencaiQueryByLatestNumServer struct {
	grpc.ServerStream
}

func (x *dbThirdApiAgentOpencaiQueryByLatestNumServer) Send(m *OpenInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _DbThirdApiAgent_OpencaiQueryLatestIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbThirdApiAgentServer).OpencaiQueryLatestIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbThirdApiAgent/OpencaiQueryLatestIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbThirdApiAgentServer).OpencaiQueryLatestIssue(ctx, req.(*StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbThirdApiAgent_OpencaiInsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpencaiInsertArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbThirdApiAgentServer).OpencaiInsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbThirdApiAgent/OpencaiInsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbThirdApiAgentServer).OpencaiInsert(ctx, req.(*OpencaiInsertArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbThirdApiAgent_OpencaiUpsertDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpencaiUpsertDetailArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbThirdApiAgentServer).OpencaiUpsertDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbThirdApiAgent/OpencaiUpsertDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbThirdApiAgentServer).OpencaiUpsertDetail(ctx, req.(*OpencaiUpsertDetailArg))
	}
	return interceptor(ctx, in, info, handler)
}

var _DbThirdApiAgent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dbproto.DbThirdApiAgent",
	HandlerType: (*DbThirdApiAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertSms",
			Handler:    _DbThirdApiAgent_InsertSms_Handler,
		},
		{
			MethodName: "QuerySms",
			Handler:    _DbThirdApiAgent_QuerySms_Handler,
		},
		{
			MethodName: "SetSmsExpired",
			Handler:    _DbThirdApiAgent_SetSmsExpired_Handler,
		},
		{
			MethodName: "QuerySmsStats",
			Handler:    _DbThirdApiAgent_QuerySmsStats_Handler,
		},
		{
			MethodName: "UpdateSmsStats",
			Handler:    _DbThirdApiAgent_UpdateSmsStats_Handler,
		},
		{
			MethodName: "InsertIdcard",
			Handler:    _DbThirdApiAgent_InsertIdcard_Handler,
		},
		{
			MethodName: "QueryIdcard",
			Handler:    _DbThirdApiAgent_QueryIdcard_Handler,
		},
		{
			MethodName: "InsertBankcard",
			Handler:    _DbThirdApiAgent_InsertBankcard_Handler,
		},
		{
			MethodName: "QueryBankcard",
			Handler:    _DbThirdApiAgent_QueryBankcard_Handler,
		},
		{
			MethodName: "OpencaiQueryByIssue",
			Handler:    _DbThirdApiAgent_OpencaiQueryByIssue_Handler,
		},
		{
			MethodName: "OpencaiQueryLatestIssue",
			Handler:    _DbThirdApiAgent_OpencaiQueryLatestIssue_Handler,
		},
		{
			MethodName: "OpencaiInsert",
			Handler:    _DbThirdApiAgent_OpencaiInsert_Handler,
		},
		{
			MethodName: "OpencaiUpsertDetail",
			Handler:    _DbThirdApiAgent_OpencaiUpsertDetail_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OpencaiQueryByOpendate",
			Handler:       _DbThirdApiAgent_OpencaiQueryByOpendate_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "OpencaiQueryByLatestNum",
			Handler:       _DbThirdApiAgent_OpencaiQueryByLatestNum_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "agent_thirdapi.proto",
}

func init() { proto.RegisterFile("agent_thirdapi.proto", fileDescriptor7) }

var fileDescriptor7 = []byte{
	// 372 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x4f, 0x4f, 0xea, 0x40,
	0x14, 0xc5, 0xfb, 0x36, 0x8f, 0xf7, 0xae, 0x14, 0xc2, 0x95, 0xf8, 0xa7, 0x1b, 0x93, 0xee, 0xdc,
	0x20, 0x81, 0xc4, 0x05, 0x3b, 0x0c, 0x9a, 0xd4, 0x18, 0x8c, 0xa9, 0xb8, 0x35, 0x53, 0x3a, 0x62,
	0x23, 0x4c, 0x27, 0x33, 0xd3, 0x44, 0xbe, 0x87, 0x1f, 0xd8, 0x4c, 0xa7, 0xf4, 0x1f, 0x10, 0xa2,
	0xbb, 0xce, 0xdc, 0x73, 0x7f, 0xe7, 0xe4, 0x4c, 0xa1, 0x4b, 0x16, 0x94, 0xa9, 0x57, 0xf5, 0x1e,
	0x89, 0x90, 0xf0, 0xa8, 0xc7, 0x45, 0xac, 0x62, 0x6c, 0x84, 0x41, 0xfa, 0xe1, 0xb4, 0xaa, 0x03,
	0x07, 0x02, 0x22, 0x69, 0xf6, 0x6d, 0xc7, 0x9c, 0xb2, 0x39, 0xc9, 0x46, 0x83, 0xaf, 0x06, 0xb4,
	0x27, 0xc1, 0xb3, 0xd6, 0x8f, 0x79, 0x34, 0xd6, 0x58, 0xbc, 0x84, 0xff, 0x1e, 0x93, 0x54, 0x28,
	0x7f, 0x25, 0xb1, 0xd9, 0xcb, 0xa8, 0x3d, 0x7f, 0x25, 0x9d, 0xe2, 0x34, 0x8d, 0x96, 0xae, 0x85,
	0x7d, 0xf8, 0xf7, 0x94, 0x50, 0xb1, 0xd6, 0xca, 0x6e, 0xa1, 0x54, 0x22, 0x62, 0x8b, 0x17, 0xb2,
	0x4c, 0xa8, 0x53, 0xd9, 0x77, 0x2d, 0x1c, 0x80, 0xed, 0x53, 0x4d, 0xbe, 0xfd, 0xe4, 0x91, 0xa0,
	0x21, 0x76, 0x72, 0x81, 0xc7, 0x54, 0x7d, 0xc7, 0xb8, 0x8c, 0xc0, 0xde, 0xb8, 0xf8, 0x8a, 0xa8,
	0x7d, 0x56, 0x9d, 0xb2, 0x55, 0x2a, 0x74, 0x2d, 0x1c, 0x42, 0x6b, 0xc6, 0x43, 0xa2, 0x68, 0xbe,
	0xbc, 0x2d, 0xdb, 0x32, 0xbc, 0x82, 0xa6, 0x69, 0xc0, 0x0b, 0xe7, 0x44, 0x84, 0xd8, 0x2e, 0x32,
	0xa6, 0x17, 0x5b, 0x0b, 0xd7, 0x70, 0x94, 0x26, 0xcc, 0xf4, 0xbb, 0xf3, 0xd5, 0x29, 0x26, 0x9d,
	0x31, 0xba, 0x21, 0xec, 0x23, 0x5d, 0x2d, 0xd2, 0x6d, 0xae, 0xf6, 0xd6, 0x91, 0xef, 0x1c, 0xaa,
	0x63, 0x23, 0x74, 0x2d, 0xf4, 0xe0, 0xe4, 0xd1, 0xfc, 0x00, 0x06, 0xb1, 0xd6, 0x27, 0x5d, 0x0f,
	0x9e, 0xe5, 0xf2, 0xb2, 0x60, 0x2c, 0x16, 0x25, 0x90, 0x9e, 0x78, 0xec, 0x2d, 0x76, 0xad, 0xfe,
	0x1f, 0x9c, 0xc0, 0x71, 0x15, 0xe5, 0x49, 0x99, 0xfc, 0x94, 0x83, 0xf7, 0x70, 0x5a, 0xa5, 0x3c,
	0x10, 0x45, 0xa5, 0x9a, 0x26, 0xab, 0xdf, 0x24, 0xaa, 0xb0, 0x0c, 0xc9, 0xa4, 0x3a, 0x54, 0x51,
	0x29, 0xd1, 0x08, 0xec, 0x8c, 0x62, 0x9e, 0x06, 0xcf, 0xeb, 0x39, 0xcc, 0xbd, 0x0e, 0x52, 0x7f,
	0x9a, 0xbb, 0xbc, 0x93, 0x19, 0xd7, 0x9a, 0x09, 0x55, 0x24, 0x5a, 0xe2, 0x45, 0x9d, 0x50, 0x9e,
	0xee, 0xe0, 0x04, 0x7f, 0xd3, 0xc3, 0xf0, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x92, 0xba, 0x45, 0xb2,
	0xe9, 0x03, 0x00, 0x00,
}
