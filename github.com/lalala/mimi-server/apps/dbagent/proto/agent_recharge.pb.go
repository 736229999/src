// Code generated by protoc-gen-go. DO NOT EDIT.
// source: agent_recharge.proto

package dbproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DbRechargeAgent service

type DbRechargeAgentClient interface {
	RechargeCreateOrder(ctx context.Context, in *RechargeOrder, opts ...grpc.CallOption) (*Nil, error)
	QueryRechargeInfoByOrderNo(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*RechargeOrder, error)
	SetRechargeSuccess(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*Nil, error)
	// rpc QueryRechargeNotCallbackOrder(StringValue) returns (stream CallbackOrderInfo) {}
	RechargeSetUcRespTime(ctx context.Context, in *RechargeOrder, opts ...grpc.CallOption) (*Nil, error)
	QueryOrderQuantityById(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*IntValue, error)
}

type dbRechargeAgentClient struct {
	cc *grpc.ClientConn
}

func NewDbRechargeAgentClient(cc *grpc.ClientConn) DbRechargeAgentClient {
	return &dbRechargeAgentClient{cc}
}

func (c *dbRechargeAgentClient) RechargeCreateOrder(ctx context.Context, in *RechargeOrder, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbRechargeAgent/RechargeCreateOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbRechargeAgentClient) QueryRechargeInfoByOrderNo(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*RechargeOrder, error) {
	out := new(RechargeOrder)
	err := grpc.Invoke(ctx, "/dbproto.DbRechargeAgent/QueryRechargeInfoByOrderNo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbRechargeAgentClient) SetRechargeSuccess(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbRechargeAgent/SetRechargeSuccess", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbRechargeAgentClient) RechargeSetUcRespTime(ctx context.Context, in *RechargeOrder, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbRechargeAgent/RechargeSetUcRespTime", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbRechargeAgentClient) QueryOrderQuantityById(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*IntValue, error) {
	out := new(IntValue)
	err := grpc.Invoke(ctx, "/dbproto.DbRechargeAgent/QueryOrderQuantityById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DbRechargeAgent service

type DbRechargeAgentServer interface {
	RechargeCreateOrder(context.Context, *RechargeOrder) (*Nil, error)
	QueryRechargeInfoByOrderNo(context.Context, *StringValue) (*RechargeOrder, error)
	SetRechargeSuccess(context.Context, *StringValue) (*Nil, error)
	// rpc QueryRechargeNotCallbackOrder(StringValue) returns (stream CallbackOrderInfo) {}
	RechargeSetUcRespTime(context.Context, *RechargeOrder) (*Nil, error)
	QueryOrderQuantityById(context.Context, *IntValue) (*IntValue, error)
}

func RegisterDbRechargeAgentServer(s *grpc.Server, srv DbRechargeAgentServer) {
	s.RegisterService(&_DbRechargeAgent_serviceDesc, srv)
}

func _DbRechargeAgent_RechargeCreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RechargeOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbRechargeAgentServer).RechargeCreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbRechargeAgent/RechargeCreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbRechargeAgentServer).RechargeCreateOrder(ctx, req.(*RechargeOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbRechargeAgent_QueryRechargeInfoByOrderNo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbRechargeAgentServer).QueryRechargeInfoByOrderNo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbRechargeAgent/QueryRechargeInfoByOrderNo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbRechargeAgentServer).QueryRechargeInfoByOrderNo(ctx, req.(*StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbRechargeAgent_SetRechargeSuccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbRechargeAgentServer).SetRechargeSuccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbRechargeAgent/SetRechargeSuccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbRechargeAgentServer).SetRechargeSuccess(ctx, req.(*StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbRechargeAgent_RechargeSetUcRespTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RechargeOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbRechargeAgentServer).RechargeSetUcRespTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbRechargeAgent/RechargeSetUcRespTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbRechargeAgentServer).RechargeSetUcRespTime(ctx, req.(*RechargeOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbRechargeAgent_QueryOrderQuantityById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbRechargeAgentServer).QueryOrderQuantityById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbRechargeAgent/QueryOrderQuantityById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbRechargeAgentServer).QueryOrderQuantityById(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

var _DbRechargeAgent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dbproto.DbRechargeAgent",
	HandlerType: (*DbRechargeAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RechargeCreateOrder",
			Handler:    _DbRechargeAgent_RechargeCreateOrder_Handler,
		},
		{
			MethodName: "QueryRechargeInfoByOrderNo",
			Handler:    _DbRechargeAgent_QueryRechargeInfoByOrderNo_Handler,
		},
		{
			MethodName: "SetRechargeSuccess",
			Handler:    _DbRechargeAgent_SetRechargeSuccess_Handler,
		},
		{
			MethodName: "RechargeSetUcRespTime",
			Handler:    _DbRechargeAgent_RechargeSetUcRespTime_Handler,
		},
		{
			MethodName: "QueryOrderQuantityById",
			Handler:    _DbRechargeAgent_QueryOrderQuantityById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agent_recharge.proto",
}

func init() { proto.RegisterFile("agent_recharge.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 229 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x8f, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0x40, 0x8b, 0x07, 0x85, 0x41, 0x14, 0xc7, 0x75, 0x0f, 0x39, 0xf6, 0x03, 0x7a, 0xd0, 0x9b,
	0x20, 0xea, 0xea, 0xa5, 0x20, 0x2b, 0xbb, 0x55, 0xaf, 0x92, 0xb6, 0x63, 0x2d, 0xac, 0xe9, 0x32,
	0x99, 0x1c, 0xf2, 0xb1, 0xfe, 0x8b, 0x18, 0x9b, 0x80, 0x4a, 0x61, 0x6f, 0xe1, 0xcd, 0xcb, 0x4b,
	0x06, 0x66, 0xba, 0x23, 0x23, 0xaf, 0x4c, 0xcd, 0xbb, 0xe6, 0x8e, 0x8a, 0x2d, 0x0f, 0x32, 0xe0,
	0x41, 0x5b, 0x87, 0x83, 0x82, 0x5a, 0xdb, 0x11, 0xaa, 0xa3, 0xdf, 0xd2, 0xf9, 0xe7, 0x1e, 0x1c,
	0xdf, 0xd7, 0xeb, 0x11, 0xde, 0x7e, 0x77, 0xf0, 0x0a, 0x4e, 0x23, 0xb8, 0x63, 0xd2, 0x42, 0x8f,
	0xdc, 0x12, 0xe3, 0xbc, 0x18, 0x83, 0x45, 0x9c, 0x06, 0xae, 0x0e, 0x13, 0x5f, 0xf6, 0x9b, 0x3c,
	0xc3, 0x07, 0x50, 0x2b, 0x47, 0xec, 0xa3, 0x55, 0x9a, 0xb7, 0x61, 0xe1, 0x83, 0xbb, 0x1c, 0x70,
	0x96, 0xec, 0x4a, 0xb8, 0x37, 0xdd, 0x8b, 0xde, 0x38, 0x52, 0x13, 0xed, 0x3c, 0xc3, 0x4b, 0xc0,
	0x8a, 0x24, 0xd2, 0xca, 0x35, 0x0d, 0x59, 0x3b, 0x51, 0xf9, 0xfb, 0x93, 0x6b, 0x38, 0x4b, 0x17,
	0x49, 0x9e, 0x9b, 0x35, 0xd9, 0xed, 0x53, 0xff, 0x41, 0x3b, 0xaf, 0x72, 0x03, 0xf3, 0xb0, 0x4a,
	0x98, 0xae, 0x9c, 0x36, 0xd2, 0x8b, 0x5f, 0xf8, 0xb2, 0xc5, 0x93, 0x64, 0x96, 0x46, 0x7e, 0x5e,
	0xff, 0x8f, 0xf2, 0xac, 0xde, 0x0f, 0xe4, 0xe2, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x2e, 0x68, 0xd0,
	0xcb, 0xa3, 0x01, 0x00, 0x00,
}
