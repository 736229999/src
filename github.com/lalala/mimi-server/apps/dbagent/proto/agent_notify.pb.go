// Code generated by protoc-gen-go. DO NOT EDIT.
// source: agent_notify.proto

package dbproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DbNotifyAgent service

type DbNotifyAgentClient interface {
	// 创建一条通知
	CreateNotify(ctx context.Context, in *Notify, opts ...grpc.CallOption) (*IntValue, error)
	// 创建一条用户关联通知
	CreateUserNotify(ctx context.Context, in *UserNotify, opts ...grpc.CallOption) (*IntValue, error)
	// 查询未加入用户消息队列的notify
	QueryNotifyUserMissed(ctx context.Context, in *QueryUserMissedArg, opts ...grpc.CallOption) (*QueryUserMissedRes, error)
	// 查询用户的消息队列
	QueryUserNotify(ctx context.Context, in *QueryUserNotifyArg, opts ...grpc.CallOption) (*QueryUserNotifyRes, error)
	// 把一条消息标为已读
	ReadUserNotify(ctx context.Context, in *ReadUserNotifyArg, opts ...grpc.CallOption) (*IntValue, error)
}

type dbNotifyAgentClient struct {
	cc *grpc.ClientConn
}

func NewDbNotifyAgentClient(cc *grpc.ClientConn) DbNotifyAgentClient {
	return &dbNotifyAgentClient{cc}
}

func (c *dbNotifyAgentClient) CreateNotify(ctx context.Context, in *Notify, opts ...grpc.CallOption) (*IntValue, error) {
	out := new(IntValue)
	err := grpc.Invoke(ctx, "/dbproto.DbNotifyAgent/CreateNotify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbNotifyAgentClient) CreateUserNotify(ctx context.Context, in *UserNotify, opts ...grpc.CallOption) (*IntValue, error) {
	out := new(IntValue)
	err := grpc.Invoke(ctx, "/dbproto.DbNotifyAgent/CreateUserNotify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbNotifyAgentClient) QueryNotifyUserMissed(ctx context.Context, in *QueryUserMissedArg, opts ...grpc.CallOption) (*QueryUserMissedRes, error) {
	out := new(QueryUserMissedRes)
	err := grpc.Invoke(ctx, "/dbproto.DbNotifyAgent/QueryNotifyUserMissed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbNotifyAgentClient) QueryUserNotify(ctx context.Context, in *QueryUserNotifyArg, opts ...grpc.CallOption) (*QueryUserNotifyRes, error) {
	out := new(QueryUserNotifyRes)
	err := grpc.Invoke(ctx, "/dbproto.DbNotifyAgent/QueryUserNotify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbNotifyAgentClient) ReadUserNotify(ctx context.Context, in *ReadUserNotifyArg, opts ...grpc.CallOption) (*IntValue, error) {
	out := new(IntValue)
	err := grpc.Invoke(ctx, "/dbproto.DbNotifyAgent/ReadUserNotify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DbNotifyAgent service

type DbNotifyAgentServer interface {
	// 创建一条通知
	CreateNotify(context.Context, *Notify) (*IntValue, error)
	// 创建一条用户关联通知
	CreateUserNotify(context.Context, *UserNotify) (*IntValue, error)
	// 查询未加入用户消息队列的notify
	QueryNotifyUserMissed(context.Context, *QueryUserMissedArg) (*QueryUserMissedRes, error)
	// 查询用户的消息队列
	QueryUserNotify(context.Context, *QueryUserNotifyArg) (*QueryUserNotifyRes, error)
	// 把一条消息标为已读
	ReadUserNotify(context.Context, *ReadUserNotifyArg) (*IntValue, error)
}

func RegisterDbNotifyAgentServer(s *grpc.Server, srv DbNotifyAgentServer) {
	s.RegisterService(&_DbNotifyAgent_serviceDesc, srv)
}

func _DbNotifyAgent_CreateNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Notify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbNotifyAgentServer).CreateNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbNotifyAgent/CreateNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbNotifyAgentServer).CreateNotify(ctx, req.(*Notify))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbNotifyAgent_CreateUserNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserNotify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbNotifyAgentServer).CreateUserNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbNotifyAgent/CreateUserNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbNotifyAgentServer).CreateUserNotify(ctx, req.(*UserNotify))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbNotifyAgent_QueryNotifyUserMissed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserMissedArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbNotifyAgentServer).QueryNotifyUserMissed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbNotifyAgent/QueryNotifyUserMissed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbNotifyAgentServer).QueryNotifyUserMissed(ctx, req.(*QueryUserMissedArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbNotifyAgent_QueryUserNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserNotifyArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbNotifyAgentServer).QueryUserNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbNotifyAgent/QueryUserNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbNotifyAgentServer).QueryUserNotify(ctx, req.(*QueryUserNotifyArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbNotifyAgent_ReadUserNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadUserNotifyArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbNotifyAgentServer).ReadUserNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbNotifyAgent/ReadUserNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbNotifyAgentServer).ReadUserNotify(ctx, req.(*ReadUserNotifyArg))
	}
	return interceptor(ctx, in, info, handler)
}

var _DbNotifyAgent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dbproto.DbNotifyAgent",
	HandlerType: (*DbNotifyAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNotify",
			Handler:    _DbNotifyAgent_CreateNotify_Handler,
		},
		{
			MethodName: "CreateUserNotify",
			Handler:    _DbNotifyAgent_CreateUserNotify_Handler,
		},
		{
			MethodName: "QueryNotifyUserMissed",
			Handler:    _DbNotifyAgent_QueryNotifyUserMissed_Handler,
		},
		{
			MethodName: "QueryUserNotify",
			Handler:    _DbNotifyAgent_QueryUserNotify_Handler,
		},
		{
			MethodName: "ReadUserNotify",
			Handler:    _DbNotifyAgent_ReadUserNotify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agent_notify.proto",
}

func init() { proto.RegisterFile("agent_notify.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 207 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4a, 0x4c, 0x4f, 0xcd,
	0x2b, 0x89, 0xcf, 0xcb, 0x2f, 0xc9, 0x4c, 0xab, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62,
	0x4f, 0x49, 0x02, 0x33, 0xa4, 0xb8, 0x92, 0x12, 0x8b, 0x53, 0x21, 0x82, 0x52, 0x3c, 0xc8, 0x4a,
	0x8c, 0x5e, 0x31, 0x71, 0xf1, 0xba, 0x24, 0xf9, 0x81, 0x85, 0x1c, 0x41, 0x26, 0x08, 0x99, 0x70,
	0xf1, 0x38, 0x17, 0xa5, 0x26, 0x96, 0xa4, 0x42, 0x04, 0x85, 0xf8, 0xf5, 0xa0, 0xa6, 0xe8, 0x41,
	0x04, 0xa4, 0x04, 0xe1, 0x02, 0x9e, 0x79, 0x25, 0x61, 0x89, 0x39, 0xa5, 0xa9, 0x4a, 0x0c, 0x42,
	0x36, 0x5c, 0x02, 0x10, 0x5d, 0xa1, 0xc5, 0xa9, 0x45, 0x50, 0x9d, 0xc2, 0x70, 0x85, 0x08, 0x41,
	0xec, 0xba, 0x83, 0xb9, 0x44, 0x03, 0x4b, 0x53, 0x8b, 0x2a, 0x21, 0x6a, 0x40, 0xaa, 0x7d, 0x33,
	0x8b, 0x8b, 0x53, 0x53, 0x84, 0xa4, 0xe1, 0xaa, 0xc1, 0xf2, 0x08, 0x19, 0xc7, 0xa2, 0x74, 0x29,
	0x9c, 0x92, 0x41, 0xa9, 0xc5, 0x4a, 0x0c, 0x42, 0xbe, 0x5c, 0xfc, 0x70, 0x71, 0xa8, 0x8b, 0xb0,
	0xe8, 0x80, 0x7a, 0x1d, 0xbb, 0x71, 0x10, 0x49, 0x88, 0x71, 0x8e, 0x5c, 0x7c, 0x41, 0xa9, 0x89,
	0x29, 0x48, 0xa6, 0x49, 0xc1, 0x35, 0xa0, 0x4a, 0x80, 0x0c, 0xc3, 0xe6, 0xcd, 0x24, 0x36, 0xb0,
	0x88, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x93, 0x65, 0x2d, 0x5f, 0xac, 0x01, 0x00, 0x00,
}
