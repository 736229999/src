/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "football.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public extension Apiproto{}

public extension Apiproto {
    public struct FootballRoot {
        public static let `default` = FootballRoot()
        public var extensionRegistry:ExtensionRegistry

        init() {
            extensionRegistry = ExtensionRegistry()
            registerAllExtensions(registry: extensionRegistry)
        }
        public func registerAllExtensions(registry: ExtensionRegistry) {
        }
    }

    ///比赛投注信息
    final public class GameInfo : GeneratedMessage {

        public static func == (lhs: Apiproto.GameInfo, rhs: Apiproto.GameInfo) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasStartTime == rhs.hasStartTime) && (!lhs.hasStartTime || lhs.startTime == rhs.startTime)
            fieldCheck = fieldCheck && (lhs.hasGameNo == rhs.hasGameNo) && (!lhs.hasGameNo || lhs.gameNo == rhs.gameNo)
            fieldCheck = fieldCheck && (lhs.hasHomeTeam == rhs.hasHomeTeam) && (!lhs.hasHomeTeam || lhs.homeTeam == rhs.homeTeam)
            fieldCheck = fieldCheck && (lhs.hasGuestTeam == rhs.hasGuestTeam) && (!lhs.hasGuestTeam || lhs.guestTeam == rhs.guestTeam)
            fieldCheck = fieldCheck && (lhs.hasGameType == rhs.hasGameType) && (!lhs.hasGameType || lhs.gameType == rhs.gameType)
            fieldCheck = fieldCheck && (lhs.hasGiveball == rhs.hasGiveball) && (!lhs.hasGiveball || lhs.giveball == rhs.giveball)
            fieldCheck = fieldCheck && (lhs.hasEndTime == rhs.hasEndTime) && (!lhs.hasEndTime || lhs.endTime == rhs.endTime)
            fieldCheck = fieldCheck && (lhs.hasHomeIcon == rhs.hasHomeIcon) && (!lhs.hasHomeIcon || lhs.homeIcon == rhs.homeIcon)
            fieldCheck = fieldCheck && (lhs.hasGuestIcon == rhs.hasGuestIcon) && (!lhs.hasGuestIcon || lhs.guestIcon == rhs.guestIcon)
            fieldCheck = fieldCheck && (lhs.spf == rhs.spf)
            fieldCheck = fieldCheck && (lhs.hasSpfDg == rhs.hasSpfDg) && (!lhs.hasSpfDg || lhs.spfDg == rhs.spfDg)
            fieldCheck = fieldCheck && (lhs.rqspf == rhs.rqspf)
            fieldCheck = fieldCheck && (lhs.hasRqspfDg == rhs.hasRqspfDg) && (!lhs.hasRqspfDg || lhs.rqspfDg == rhs.rqspfDg)
            fieldCheck = fieldCheck && (lhs.zjqs == rhs.zjqs)
            fieldCheck = fieldCheck && (lhs.hasZjqsDg == rhs.hasZjqsDg) && (!lhs.hasZjqsDg || lhs.zjqsDg == rhs.zjqsDg)
            fieldCheck = fieldCheck && (lhs.bqc == rhs.bqc)
            fieldCheck = fieldCheck && (lhs.hasBqcDg == rhs.hasBqcDg) && (!lhs.hasBqcDg || lhs.bqcDg == rhs.bqcDg)
            fieldCheck = fieldCheck && (lhs.bf == rhs.bf)
            fieldCheck = fieldCheck && (lhs.hasBfDg == rhs.hasBfDg) && (!lhs.hasBfDg || lhs.bfDg == rhs.bfDg)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var startTime:Int64 = Int64(0)
        public fileprivate(set) var hasStartTime:Bool = false

        public fileprivate(set) var gameNo:String = ""
        public fileprivate(set) var hasGameNo:Bool = false

        public fileprivate(set) var homeTeam:String = ""
        public fileprivate(set) var hasHomeTeam:Bool = false

        public fileprivate(set) var guestTeam:String = ""
        public fileprivate(set) var hasGuestTeam:Bool = false

        public fileprivate(set) var gameType:String = ""
        public fileprivate(set) var hasGameType:Bool = false

        public fileprivate(set) var giveball:String = ""
        public fileprivate(set) var hasGiveball:Bool = false

        public fileprivate(set) var endTime:Int64 = Int64(0)
        public fileprivate(set) var hasEndTime:Bool = false

        public fileprivate(set) var homeIcon:String = ""
        public fileprivate(set) var hasHomeIcon:Bool = false

        public fileprivate(set) var guestIcon:String = ""
        public fileprivate(set) var hasGuestIcon:Bool = false

        public fileprivate(set) var spf:Array<Double> = Array<Double>()
        private var spfMemoizedSerializedSize:Int32 = -1
        public fileprivate(set) var spfDg:Bool = false
        public fileprivate(set) var hasSpfDg:Bool = false

        public fileprivate(set) var rqspf:Array<Double> = Array<Double>()
        private var rqspfMemoizedSerializedSize:Int32 = -1
        public fileprivate(set) var rqspfDg:Bool = false
        public fileprivate(set) var hasRqspfDg:Bool = false

        public fileprivate(set) var zjqs:Array<Double> = Array<Double>()
        private var zjqsMemoizedSerializedSize:Int32 = -1
        public fileprivate(set) var zjqsDg:Bool = false
        public fileprivate(set) var hasZjqsDg:Bool = false

        public fileprivate(set) var bqc:Array<Double> = Array<Double>()
        private var bqcMemoizedSerializedSize:Int32 = -1
        public fileprivate(set) var bqcDg:Bool = false
        public fileprivate(set) var hasBqcDg:Bool = false

        public fileprivate(set) var bf:Array<Double> = Array<Double>()
        private var bfMemoizedSerializedSize:Int32 = -1
        public fileprivate(set) var bfDg:Bool = false
        public fileprivate(set) var hasBfDg:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasStartTime {
                try codedOutputStream.writeInt64(fieldNumber: 1, value:startTime)
            }
            if hasGameNo {
                try codedOutputStream.writeString(fieldNumber: 2, value:gameNo)
            }
            if hasHomeTeam {
                try codedOutputStream.writeString(fieldNumber: 3, value:homeTeam)
            }
            if hasGuestTeam {
                try codedOutputStream.writeString(fieldNumber: 4, value:guestTeam)
            }
            if hasGameType {
                try codedOutputStream.writeString(fieldNumber: 5, value:gameType)
            }
            if hasGiveball {
                try codedOutputStream.writeString(fieldNumber: 6, value:giveball)
            }
            if hasEndTime {
                try codedOutputStream.writeInt64(fieldNumber: 7, value:endTime)
            }
            if hasHomeIcon {
                try codedOutputStream.writeString(fieldNumber: 8, value:homeIcon)
            }
            if hasGuestIcon {
                try codedOutputStream.writeString(fieldNumber: 9, value:guestIcon)
            }
            if !spf.isEmpty {
                try codedOutputStream.writeRawVarint32(value: 82)
                try codedOutputStream.writeRawVarint32(value: spfMemoizedSerializedSize)
                for oneValuespf in spf {
                    try codedOutputStream.writeDoubleNoTag(value: oneValuespf)
                }
            }
            if hasSpfDg {
                try codedOutputStream.writeBool(fieldNumber: 11, value:spfDg)
            }
            if !rqspf.isEmpty {
                try codedOutputStream.writeRawVarint32(value: 98)
                try codedOutputStream.writeRawVarint32(value: rqspfMemoizedSerializedSize)
                for oneValuerqspf in rqspf {
                    try codedOutputStream.writeDoubleNoTag(value: oneValuerqspf)
                }
            }
            if hasRqspfDg {
                try codedOutputStream.writeBool(fieldNumber: 13, value:rqspfDg)
            }
            if !zjqs.isEmpty {
                try codedOutputStream.writeRawVarint32(value: 114)
                try codedOutputStream.writeRawVarint32(value: zjqsMemoizedSerializedSize)
                for oneValuezjqs in zjqs {
                    try codedOutputStream.writeDoubleNoTag(value: oneValuezjqs)
                }
            }
            if hasZjqsDg {
                try codedOutputStream.writeBool(fieldNumber: 15, value:zjqsDg)
            }
            if !bqc.isEmpty {
                try codedOutputStream.writeRawVarint32(value: 130)
                try codedOutputStream.writeRawVarint32(value: bqcMemoizedSerializedSize)
                for oneValuebqc in bqc {
                    try codedOutputStream.writeDoubleNoTag(value: oneValuebqc)
                }
            }
            if hasBqcDg {
                try codedOutputStream.writeBool(fieldNumber: 17, value:bqcDg)
            }
            if !bf.isEmpty {
                try codedOutputStream.writeRawVarint32(value: 146)
                try codedOutputStream.writeRawVarint32(value: bfMemoizedSerializedSize)
                for oneValuebf in bf {
                    try codedOutputStream.writeDoubleNoTag(value: oneValuebf)
                }
            }
            if hasBfDg {
                try codedOutputStream.writeBool(fieldNumber: 19, value:bfDg)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasStartTime {
                serialize_size += startTime.computeInt64Size(fieldNumber: 1)
            }
            if hasGameNo {
                serialize_size += gameNo.computeStringSize(fieldNumber: 2)
            }
            if hasHomeTeam {
                serialize_size += homeTeam.computeStringSize(fieldNumber: 3)
            }
            if hasGuestTeam {
                serialize_size += guestTeam.computeStringSize(fieldNumber: 4)
            }
            if hasGameType {
                serialize_size += gameType.computeStringSize(fieldNumber: 5)
            }
            if hasGiveball {
                serialize_size += giveball.computeStringSize(fieldNumber: 6)
            }
            if hasEndTime {
                serialize_size += endTime.computeInt64Size(fieldNumber: 7)
            }
            if hasHomeIcon {
                serialize_size += homeIcon.computeStringSize(fieldNumber: 8)
            }
            if hasGuestIcon {
                serialize_size += guestIcon.computeStringSize(fieldNumber: 9)
            }
            var dataSizeSpf:Int32 = 0
            dataSizeSpf = 8 * Int32(spf.count)
            serialize_size += dataSizeSpf
            if !spf.isEmpty {
                serialize_size += 1
                serialize_size += dataSizeSpf.computeInt32SizeNoTag()
            }
            spfMemoizedSerializedSize = dataSizeSpf
            if hasSpfDg {
                serialize_size += spfDg.computeBoolSize(fieldNumber: 11)
            }
            var dataSizeRqspf:Int32 = 0
            dataSizeRqspf = 8 * Int32(rqspf.count)
            serialize_size += dataSizeRqspf
            if !rqspf.isEmpty {
                serialize_size += 1
                serialize_size += dataSizeRqspf.computeInt32SizeNoTag()
            }
            rqspfMemoizedSerializedSize = dataSizeRqspf
            if hasRqspfDg {
                serialize_size += rqspfDg.computeBoolSize(fieldNumber: 13)
            }
            var dataSizeZjqs:Int32 = 0
            dataSizeZjqs = 8 * Int32(zjqs.count)
            serialize_size += dataSizeZjqs
            if !zjqs.isEmpty {
                serialize_size += 1
                serialize_size += dataSizeZjqs.computeInt32SizeNoTag()
            }
            zjqsMemoizedSerializedSize = dataSizeZjqs
            if hasZjqsDg {
                serialize_size += zjqsDg.computeBoolSize(fieldNumber: 15)
            }
            var dataSizeBqc:Int32 = 0
            dataSizeBqc = 8 * Int32(bqc.count)
            serialize_size += dataSizeBqc
            if !bqc.isEmpty {
                serialize_size += 2
                serialize_size += dataSizeBqc.computeInt32SizeNoTag()
            }
            bqcMemoizedSerializedSize = dataSizeBqc
            if hasBqcDg {
                serialize_size += bqcDg.computeBoolSize(fieldNumber: 17)
            }
            var dataSizeBf:Int32 = 0
            dataSizeBf = 8 * Int32(bf.count)
            serialize_size += dataSizeBf
            if !bf.isEmpty {
                serialize_size += 2
                serialize_size += dataSizeBf.computeInt32SizeNoTag()
            }
            bfMemoizedSerializedSize = dataSizeBf
            if hasBfDg {
                serialize_size += bfDg.computeBoolSize(fieldNumber: 19)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.GameInfo.Builder {
            return Apiproto.GameInfo.classBuilder() as! Apiproto.GameInfo.Builder
        }
        public func getBuilder() -> Apiproto.GameInfo.Builder {
            return classBuilder() as! Apiproto.GameInfo.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.GameInfo.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.GameInfo.Builder()
        }
        public func toBuilder() throws -> Apiproto.GameInfo.Builder {
            return try Apiproto.GameInfo.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.GameInfo) throws -> Apiproto.GameInfo.Builder {
            return try Apiproto.GameInfo.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasStartTime {
                jsonMap["startTime"] = "\(startTime)"
            }
            if hasGameNo {
                jsonMap["gameNo"] = gameNo
            }
            if hasHomeTeam {
                jsonMap["homeTeam"] = homeTeam
            }
            if hasGuestTeam {
                jsonMap["guestTeam"] = guestTeam
            }
            if hasGameType {
                jsonMap["gameType"] = gameType
            }
            if hasGiveball {
                jsonMap["giveball"] = giveball
            }
            if hasEndTime {
                jsonMap["endTime"] = "\(endTime)"
            }
            if hasHomeIcon {
                jsonMap["homeIcon"] = homeIcon
            }
            if hasGuestIcon {
                jsonMap["guestIcon"] = guestIcon
            }
            if !spf.isEmpty {
                var jsonArraySpf:Array<Double> = []
                for oneValueSpf in spf {
                    jsonArraySpf.append(Double(oneValueSpf))
                }
                jsonMap["spf"] = jsonArraySpf
            }
            if hasSpfDg {
                jsonMap["spfDg"] = spfDg
            }
            if !rqspf.isEmpty {
                var jsonArrayRqspf:Array<Double> = []
                for oneValueRqspf in rqspf {
                    jsonArrayRqspf.append(Double(oneValueRqspf))
                }
                jsonMap["rqspf"] = jsonArrayRqspf
            }
            if hasRqspfDg {
                jsonMap["rqspfDg"] = rqspfDg
            }
            if !zjqs.isEmpty {
                var jsonArrayZjqs:Array<Double> = []
                for oneValueZjqs in zjqs {
                    jsonArrayZjqs.append(Double(oneValueZjqs))
                }
                jsonMap["zjqs"] = jsonArrayZjqs
            }
            if hasZjqsDg {
                jsonMap["zjqsDg"] = zjqsDg
            }
            if !bqc.isEmpty {
                var jsonArrayBqc:Array<Double> = []
                for oneValueBqc in bqc {
                    jsonArrayBqc.append(Double(oneValueBqc))
                }
                jsonMap["bqc"] = jsonArrayBqc
            }
            if hasBqcDg {
                jsonMap["bqcDg"] = bqcDg
            }
            if !bf.isEmpty {
                var jsonArrayBf:Array<Double> = []
                for oneValueBf in bf {
                    jsonArrayBf.append(Double(oneValueBf))
                }
                jsonMap["bf"] = jsonArrayBf
            }
            if hasBfDg {
                jsonMap["bfDg"] = bfDg
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.GameInfo {
            return try Apiproto.GameInfo.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.GameInfo {
            return try Apiproto.GameInfo.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasStartTime {
                output += "\(indent) startTime: \(startTime) \n"
            }
            if hasGameNo {
                output += "\(indent) gameNo: \(gameNo) \n"
            }
            if hasHomeTeam {
                output += "\(indent) homeTeam: \(homeTeam) \n"
            }
            if hasGuestTeam {
                output += "\(indent) guestTeam: \(guestTeam) \n"
            }
            if hasGameType {
                output += "\(indent) gameType: \(gameType) \n"
            }
            if hasGiveball {
                output += "\(indent) giveball: \(giveball) \n"
            }
            if hasEndTime {
                output += "\(indent) endTime: \(endTime) \n"
            }
            if hasHomeIcon {
                output += "\(indent) homeIcon: \(homeIcon) \n"
            }
            if hasGuestIcon {
                output += "\(indent) guestIcon: \(guestIcon) \n"
            }
            var spfElementIndex:Int = 0
            for oneValueSpf in spf  {
                output += "\(indent) spf[\(spfElementIndex)]: \(oneValueSpf)\n"
                spfElementIndex += 1
            }
            if hasSpfDg {
                output += "\(indent) spfDg: \(spfDg) \n"
            }
            var rqspfElementIndex:Int = 0
            for oneValueRqspf in rqspf  {
                output += "\(indent) rqspf[\(rqspfElementIndex)]: \(oneValueRqspf)\n"
                rqspfElementIndex += 1
            }
            if hasRqspfDg {
                output += "\(indent) rqspfDg: \(rqspfDg) \n"
            }
            var zjqsElementIndex:Int = 0
            for oneValueZjqs in zjqs  {
                output += "\(indent) zjqs[\(zjqsElementIndex)]: \(oneValueZjqs)\n"
                zjqsElementIndex += 1
            }
            if hasZjqsDg {
                output += "\(indent) zjqsDg: \(zjqsDg) \n"
            }
            var bqcElementIndex:Int = 0
            for oneValueBqc in bqc  {
                output += "\(indent) bqc[\(bqcElementIndex)]: \(oneValueBqc)\n"
                bqcElementIndex += 1
            }
            if hasBqcDg {
                output += "\(indent) bqcDg: \(bqcDg) \n"
            }
            var bfElementIndex:Int = 0
            for oneValueBf in bf  {
                output += "\(indent) bf[\(bfElementIndex)]: \(oneValueBf)\n"
                bfElementIndex += 1
            }
            if hasBfDg {
                output += "\(indent) bfDg: \(bfDg) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasStartTime {
                    hashCode = (hashCode &* 31) &+ startTime.hashValue
                }
                if hasGameNo {
                    hashCode = (hashCode &* 31) &+ gameNo.hashValue
                }
                if hasHomeTeam {
                    hashCode = (hashCode &* 31) &+ homeTeam.hashValue
                }
                if hasGuestTeam {
                    hashCode = (hashCode &* 31) &+ guestTeam.hashValue
                }
                if hasGameType {
                    hashCode = (hashCode &* 31) &+ gameType.hashValue
                }
                if hasGiveball {
                    hashCode = (hashCode &* 31) &+ giveball.hashValue
                }
                if hasEndTime {
                    hashCode = (hashCode &* 31) &+ endTime.hashValue
                }
                if hasHomeIcon {
                    hashCode = (hashCode &* 31) &+ homeIcon.hashValue
                }
                if hasGuestIcon {
                    hashCode = (hashCode &* 31) &+ guestIcon.hashValue
                }
                for oneValueSpf in spf {
                    hashCode = (hashCode &* 31) &+ oneValueSpf.hashValue
                }
                if hasSpfDg {
                    hashCode = (hashCode &* 31) &+ spfDg.hashValue
                }
                for oneValueRqspf in rqspf {
                    hashCode = (hashCode &* 31) &+ oneValueRqspf.hashValue
                }
                if hasRqspfDg {
                    hashCode = (hashCode &* 31) &+ rqspfDg.hashValue
                }
                for oneValueZjqs in zjqs {
                    hashCode = (hashCode &* 31) &+ oneValueZjqs.hashValue
                }
                if hasZjqsDg {
                    hashCode = (hashCode &* 31) &+ zjqsDg.hashValue
                }
                for oneValueBqc in bqc {
                    hashCode = (hashCode &* 31) &+ oneValueBqc.hashValue
                }
                if hasBqcDg {
                    hashCode = (hashCode &* 31) &+ bqcDg.hashValue
                }
                for oneValueBf in bf {
                    hashCode = (hashCode &* 31) &+ oneValueBf.hashValue
                }
                if hasBfDg {
                    hashCode = (hashCode &* 31) &+ bfDg.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.GameInfo"
        }
        override public func className() -> String {
            return "Apiproto.GameInfo"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.GameInfo = Apiproto.GameInfo()
            public func getMessage() -> Apiproto.GameInfo {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var startTime:Int64 {
                get {
                    return builderResult.startTime
                }
                set (value) {
                    builderResult.hasStartTime = true
                    builderResult.startTime = value
                }
            }
            public var hasStartTime:Bool {
                get {
                    return builderResult.hasStartTime
                }
            }
            @discardableResult
            public func setStartTime(_ value:Int64) -> Apiproto.GameInfo.Builder {
                self.startTime = value
                return self
            }
            @discardableResult
            public func clearStartTime() -> Apiproto.GameInfo.Builder{
                builderResult.hasStartTime = false
                builderResult.startTime = Int64(0)
                return self
            }
            public var gameNo:String {
                get {
                    return builderResult.gameNo
                }
                set (value) {
                    builderResult.hasGameNo = true
                    builderResult.gameNo = value
                }
            }
            public var hasGameNo:Bool {
                get {
                    return builderResult.hasGameNo
                }
            }
            @discardableResult
            public func setGameNo(_ value:String) -> Apiproto.GameInfo.Builder {
                self.gameNo = value
                return self
            }
            @discardableResult
            public func clearGameNo() -> Apiproto.GameInfo.Builder{
                builderResult.hasGameNo = false
                builderResult.gameNo = ""
                return self
            }
            public var homeTeam:String {
                get {
                    return builderResult.homeTeam
                }
                set (value) {
                    builderResult.hasHomeTeam = true
                    builderResult.homeTeam = value
                }
            }
            public var hasHomeTeam:Bool {
                get {
                    return builderResult.hasHomeTeam
                }
            }
            @discardableResult
            public func setHomeTeam(_ value:String) -> Apiproto.GameInfo.Builder {
                self.homeTeam = value
                return self
            }
            @discardableResult
            public func clearHomeTeam() -> Apiproto.GameInfo.Builder{
                builderResult.hasHomeTeam = false
                builderResult.homeTeam = ""
                return self
            }
            public var guestTeam:String {
                get {
                    return builderResult.guestTeam
                }
                set (value) {
                    builderResult.hasGuestTeam = true
                    builderResult.guestTeam = value
                }
            }
            public var hasGuestTeam:Bool {
                get {
                    return builderResult.hasGuestTeam
                }
            }
            @discardableResult
            public func setGuestTeam(_ value:String) -> Apiproto.GameInfo.Builder {
                self.guestTeam = value
                return self
            }
            @discardableResult
            public func clearGuestTeam() -> Apiproto.GameInfo.Builder{
                builderResult.hasGuestTeam = false
                builderResult.guestTeam = ""
                return self
            }
            public var gameType:String {
                get {
                    return builderResult.gameType
                }
                set (value) {
                    builderResult.hasGameType = true
                    builderResult.gameType = value
                }
            }
            public var hasGameType:Bool {
                get {
                    return builderResult.hasGameType
                }
            }
            @discardableResult
            public func setGameType(_ value:String) -> Apiproto.GameInfo.Builder {
                self.gameType = value
                return self
            }
            @discardableResult
            public func clearGameType() -> Apiproto.GameInfo.Builder{
                builderResult.hasGameType = false
                builderResult.gameType = ""
                return self
            }
            public var giveball:String {
                get {
                    return builderResult.giveball
                }
                set (value) {
                    builderResult.hasGiveball = true
                    builderResult.giveball = value
                }
            }
            public var hasGiveball:Bool {
                get {
                    return builderResult.hasGiveball
                }
            }
            @discardableResult
            public func setGiveball(_ value:String) -> Apiproto.GameInfo.Builder {
                self.giveball = value
                return self
            }
            @discardableResult
            public func clearGiveball() -> Apiproto.GameInfo.Builder{
                builderResult.hasGiveball = false
                builderResult.giveball = ""
                return self
            }
            public var endTime:Int64 {
                get {
                    return builderResult.endTime
                }
                set (value) {
                    builderResult.hasEndTime = true
                    builderResult.endTime = value
                }
            }
            public var hasEndTime:Bool {
                get {
                    return builderResult.hasEndTime
                }
            }
            @discardableResult
            public func setEndTime(_ value:Int64) -> Apiproto.GameInfo.Builder {
                self.endTime = value
                return self
            }
            @discardableResult
            public func clearEndTime() -> Apiproto.GameInfo.Builder{
                builderResult.hasEndTime = false
                builderResult.endTime = Int64(0)
                return self
            }
            public var homeIcon:String {
                get {
                    return builderResult.homeIcon
                }
                set (value) {
                    builderResult.hasHomeIcon = true
                    builderResult.homeIcon = value
                }
            }
            public var hasHomeIcon:Bool {
                get {
                    return builderResult.hasHomeIcon
                }
            }
            @discardableResult
            public func setHomeIcon(_ value:String) -> Apiproto.GameInfo.Builder {
                self.homeIcon = value
                return self
            }
            @discardableResult
            public func clearHomeIcon() -> Apiproto.GameInfo.Builder{
                builderResult.hasHomeIcon = false
                builderResult.homeIcon = ""
                return self
            }
            public var guestIcon:String {
                get {
                    return builderResult.guestIcon
                }
                set (value) {
                    builderResult.hasGuestIcon = true
                    builderResult.guestIcon = value
                }
            }
            public var hasGuestIcon:Bool {
                get {
                    return builderResult.hasGuestIcon
                }
            }
            @discardableResult
            public func setGuestIcon(_ value:String) -> Apiproto.GameInfo.Builder {
                self.guestIcon = value
                return self
            }
            @discardableResult
            public func clearGuestIcon() -> Apiproto.GameInfo.Builder{
                builderResult.hasGuestIcon = false
                builderResult.guestIcon = ""
                return self
            }
            public var spf:Array<Double> {
                get {
                    return builderResult.spf
                }
                set (array) {
                    builderResult.spf = array
                }
            }
            @discardableResult
            public func setSpf(_ value:Array<Double>) -> Apiproto.GameInfo.Builder {
                self.spf = value
                return self
            }
            @discardableResult
            public func clearSpf() -> Apiproto.GameInfo.Builder {
                builderResult.spf.removeAll(keepingCapacity: false)
                return self
            }
            public var spfDg:Bool {
                get {
                    return builderResult.spfDg
                }
                set (value) {
                    builderResult.hasSpfDg = true
                    builderResult.spfDg = value
                }
            }
            public var hasSpfDg:Bool {
                get {
                    return builderResult.hasSpfDg
                }
            }
            @discardableResult
            public func setSpfDg(_ value:Bool) -> Apiproto.GameInfo.Builder {
                self.spfDg = value
                return self
            }
            @discardableResult
            public func clearSpfDg() -> Apiproto.GameInfo.Builder{
                builderResult.hasSpfDg = false
                builderResult.spfDg = false
                return self
            }
            public var rqspf:Array<Double> {
                get {
                    return builderResult.rqspf
                }
                set (array) {
                    builderResult.rqspf = array
                }
            }
            @discardableResult
            public func setRqspf(_ value:Array<Double>) -> Apiproto.GameInfo.Builder {
                self.rqspf = value
                return self
            }
            @discardableResult
            public func clearRqspf() -> Apiproto.GameInfo.Builder {
                builderResult.rqspf.removeAll(keepingCapacity: false)
                return self
            }
            public var rqspfDg:Bool {
                get {
                    return builderResult.rqspfDg
                }
                set (value) {
                    builderResult.hasRqspfDg = true
                    builderResult.rqspfDg = value
                }
            }
            public var hasRqspfDg:Bool {
                get {
                    return builderResult.hasRqspfDg
                }
            }
            @discardableResult
            public func setRqspfDg(_ value:Bool) -> Apiproto.GameInfo.Builder {
                self.rqspfDg = value
                return self
            }
            @discardableResult
            public func clearRqspfDg() -> Apiproto.GameInfo.Builder{
                builderResult.hasRqspfDg = false
                builderResult.rqspfDg = false
                return self
            }
            public var zjqs:Array<Double> {
                get {
                    return builderResult.zjqs
                }
                set (array) {
                    builderResult.zjqs = array
                }
            }
            @discardableResult
            public func setZjqs(_ value:Array<Double>) -> Apiproto.GameInfo.Builder {
                self.zjqs = value
                return self
            }
            @discardableResult
            public func clearZjqs() -> Apiproto.GameInfo.Builder {
                builderResult.zjqs.removeAll(keepingCapacity: false)
                return self
            }
            public var zjqsDg:Bool {
                get {
                    return builderResult.zjqsDg
                }
                set (value) {
                    builderResult.hasZjqsDg = true
                    builderResult.zjqsDg = value
                }
            }
            public var hasZjqsDg:Bool {
                get {
                    return builderResult.hasZjqsDg
                }
            }
            @discardableResult
            public func setZjqsDg(_ value:Bool) -> Apiproto.GameInfo.Builder {
                self.zjqsDg = value
                return self
            }
            @discardableResult
            public func clearZjqsDg() -> Apiproto.GameInfo.Builder{
                builderResult.hasZjqsDg = false
                builderResult.zjqsDg = false
                return self
            }
            public var bqc:Array<Double> {
                get {
                    return builderResult.bqc
                }
                set (array) {
                    builderResult.bqc = array
                }
            }
            @discardableResult
            public func setBqc(_ value:Array<Double>) -> Apiproto.GameInfo.Builder {
                self.bqc = value
                return self
            }
            @discardableResult
            public func clearBqc() -> Apiproto.GameInfo.Builder {
                builderResult.bqc.removeAll(keepingCapacity: false)
                return self
            }
            public var bqcDg:Bool {
                get {
                    return builderResult.bqcDg
                }
                set (value) {
                    builderResult.hasBqcDg = true
                    builderResult.bqcDg = value
                }
            }
            public var hasBqcDg:Bool {
                get {
                    return builderResult.hasBqcDg
                }
            }
            @discardableResult
            public func setBqcDg(_ value:Bool) -> Apiproto.GameInfo.Builder {
                self.bqcDg = value
                return self
            }
            @discardableResult
            public func clearBqcDg() -> Apiproto.GameInfo.Builder{
                builderResult.hasBqcDg = false
                builderResult.bqcDg = false
                return self
            }
            public var bf:Array<Double> {
                get {
                    return builderResult.bf
                }
                set (array) {
                    builderResult.bf = array
                }
            }
            @discardableResult
            public func setBf(_ value:Array<Double>) -> Apiproto.GameInfo.Builder {
                self.bf = value
                return self
            }
            @discardableResult
            public func clearBf() -> Apiproto.GameInfo.Builder {
                builderResult.bf.removeAll(keepingCapacity: false)
                return self
            }
            public var bfDg:Bool {
                get {
                    return builderResult.bfDg
                }
                set (value) {
                    builderResult.hasBfDg = true
                    builderResult.bfDg = value
                }
            }
            public var hasBfDg:Bool {
                get {
                    return builderResult.hasBfDg
                }
            }
            @discardableResult
            public func setBfDg(_ value:Bool) -> Apiproto.GameInfo.Builder {
                self.bfDg = value
                return self
            }
            @discardableResult
            public func clearBfDg() -> Apiproto.GameInfo.Builder{
                builderResult.hasBfDg = false
                builderResult.bfDg = false
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.GameInfo.Builder {
                builderResult = Apiproto.GameInfo()
                return self
            }
            override public func clone() throws -> Apiproto.GameInfo.Builder {
                return try Apiproto.GameInfo.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.GameInfo {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.GameInfo {
                let returnMe:Apiproto.GameInfo = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.GameInfo) throws -> Apiproto.GameInfo.Builder {
                if other == Apiproto.GameInfo() {
                    return self
                }
                if other.hasStartTime {
                    startTime = other.startTime
                }
                if other.hasGameNo {
                    gameNo = other.gameNo
                }
                if other.hasHomeTeam {
                    homeTeam = other.homeTeam
                }
                if other.hasGuestTeam {
                    guestTeam = other.guestTeam
                }
                if other.hasGameType {
                    gameType = other.gameType
                }
                if other.hasGiveball {
                    giveball = other.giveball
                }
                if other.hasEndTime {
                    endTime = other.endTime
                }
                if other.hasHomeIcon {
                    homeIcon = other.homeIcon
                }
                if other.hasGuestIcon {
                    guestIcon = other.guestIcon
                }
                if !other.spf.isEmpty {
                    builderResult.spf += other.spf
                }
                if other.hasSpfDg {
                    spfDg = other.spfDg
                }
                if !other.rqspf.isEmpty {
                    builderResult.rqspf += other.rqspf
                }
                if other.hasRqspfDg {
                    rqspfDg = other.rqspfDg
                }
                if !other.zjqs.isEmpty {
                    builderResult.zjqs += other.zjqs
                }
                if other.hasZjqsDg {
                    zjqsDg = other.zjqsDg
                }
                if !other.bqc.isEmpty {
                    builderResult.bqc += other.bqc
                }
                if other.hasBqcDg {
                    bqcDg = other.bqcDg
                }
                if !other.bf.isEmpty {
                    builderResult.bf += other.bf
                }
                if other.hasBfDg {
                    bfDg = other.bfDg
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.GameInfo.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.GameInfo.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        startTime = try codedInputStream.readInt64()

                    case 18:
                        gameNo = try codedInputStream.readString()

                    case 26:
                        homeTeam = try codedInputStream.readString()

                    case 34:
                        guestTeam = try codedInputStream.readString()

                    case 42:
                        gameType = try codedInputStream.readString()

                    case 50:
                        giveball = try codedInputStream.readString()

                    case 56:
                        endTime = try codedInputStream.readInt64()

                    case 66:
                        homeIcon = try codedInputStream.readString()

                    case 74:
                        guestIcon = try codedInputStream.readString()

                    case 82:
                        let length = Int(try codedInputStream.readRawVarint32())
                        let limit = try codedInputStream.pushLimit(byteLimit: length)
                        while (codedInputStream.bytesUntilLimit() > 0) {
                            builderResult.spf.append(try codedInputStream.readDouble())
                        }
                        codedInputStream.popLimit(oldLimit: limit)

                    case 88:
                        spfDg = try codedInputStream.readBool()

                    case 98:
                        let length = Int(try codedInputStream.readRawVarint32())
                        let limit = try codedInputStream.pushLimit(byteLimit: length)
                        while (codedInputStream.bytesUntilLimit() > 0) {
                            builderResult.rqspf.append(try codedInputStream.readDouble())
                        }
                        codedInputStream.popLimit(oldLimit: limit)

                    case 104:
                        rqspfDg = try codedInputStream.readBool()

                    case 114:
                        let length = Int(try codedInputStream.readRawVarint32())
                        let limit = try codedInputStream.pushLimit(byteLimit: length)
                        while (codedInputStream.bytesUntilLimit() > 0) {
                            builderResult.zjqs.append(try codedInputStream.readDouble())
                        }
                        codedInputStream.popLimit(oldLimit: limit)

                    case 120:
                        zjqsDg = try codedInputStream.readBool()

                    case 130:
                        let length = Int(try codedInputStream.readRawVarint32())
                        let limit = try codedInputStream.pushLimit(byteLimit: length)
                        while (codedInputStream.bytesUntilLimit() > 0) {
                            builderResult.bqc.append(try codedInputStream.readDouble())
                        }
                        codedInputStream.popLimit(oldLimit: limit)

                    case 136:
                        bqcDg = try codedInputStream.readBool()

                    case 146:
                        let length = Int(try codedInputStream.readRawVarint32())
                        let limit = try codedInputStream.pushLimit(byteLimit: length)
                        while (codedInputStream.bytesUntilLimit() > 0) {
                            builderResult.bf.append(try codedInputStream.readDouble())
                        }
                        codedInputStream.popLimit(oldLimit: limit)

                    case 152:
                        bfDg = try codedInputStream.readBool()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.GameInfo.Builder {
                let resultDecodedBuilder = Apiproto.GameInfo.Builder()
                if let jsonValueStartTime = jsonMap["startTime"] as? String {
                    resultDecodedBuilder.startTime = Int64(jsonValueStartTime)!
                } else if let jsonValueStartTime = jsonMap["startTime"] as? Int {
                    resultDecodedBuilder.startTime = Int64(jsonValueStartTime)
                }
                if let jsonValueGameNo = jsonMap["gameNo"] as? String {
                    resultDecodedBuilder.gameNo = jsonValueGameNo
                }
                if let jsonValueHomeTeam = jsonMap["homeTeam"] as? String {
                    resultDecodedBuilder.homeTeam = jsonValueHomeTeam
                }
                if let jsonValueGuestTeam = jsonMap["guestTeam"] as? String {
                    resultDecodedBuilder.guestTeam = jsonValueGuestTeam
                }
                if let jsonValueGameType = jsonMap["gameType"] as? String {
                    resultDecodedBuilder.gameType = jsonValueGameType
                }
                if let jsonValueGiveball = jsonMap["giveball"] as? String {
                    resultDecodedBuilder.giveball = jsonValueGiveball
                }
                if let jsonValueEndTime = jsonMap["endTime"] as? String {
                    resultDecodedBuilder.endTime = Int64(jsonValueEndTime)!
                } else if let jsonValueEndTime = jsonMap["endTime"] as? Int {
                    resultDecodedBuilder.endTime = Int64(jsonValueEndTime)
                }
                if let jsonValueHomeIcon = jsonMap["homeIcon"] as? String {
                    resultDecodedBuilder.homeIcon = jsonValueHomeIcon
                }
                if let jsonValueGuestIcon = jsonMap["guestIcon"] as? String {
                    resultDecodedBuilder.guestIcon = jsonValueGuestIcon
                }
                if let jsonValueSpf = jsonMap["spf"] as? Array<Double> {
                    var jsonArraySpf:Array<Double> = []
                    for oneValueSpf in jsonValueSpf {
                        jsonArraySpf.append(Double(oneValueSpf))
                    }
                    resultDecodedBuilder.spf = jsonArraySpf
                }
                if let jsonValueSpfDg = jsonMap["spfDg"] as? Bool {
                    resultDecodedBuilder.spfDg = jsonValueSpfDg
                }
                if let jsonValueRqspf = jsonMap["rqspf"] as? Array<Double> {
                    var jsonArrayRqspf:Array<Double> = []
                    for oneValueRqspf in jsonValueRqspf {
                        jsonArrayRqspf.append(Double(oneValueRqspf))
                    }
                    resultDecodedBuilder.rqspf = jsonArrayRqspf
                }
                if let jsonValueRqspfDg = jsonMap["rqspfDg"] as? Bool {
                    resultDecodedBuilder.rqspfDg = jsonValueRqspfDg
                }
                if let jsonValueZjqs = jsonMap["zjqs"] as? Array<Double> {
                    var jsonArrayZjqs:Array<Double> = []
                    for oneValueZjqs in jsonValueZjqs {
                        jsonArrayZjqs.append(Double(oneValueZjqs))
                    }
                    resultDecodedBuilder.zjqs = jsonArrayZjqs
                }
                if let jsonValueZjqsDg = jsonMap["zjqsDg"] as? Bool {
                    resultDecodedBuilder.zjqsDg = jsonValueZjqsDg
                }
                if let jsonValueBqc = jsonMap["bqc"] as? Array<Double> {
                    var jsonArrayBqc:Array<Double> = []
                    for oneValueBqc in jsonValueBqc {
                        jsonArrayBqc.append(Double(oneValueBqc))
                    }
                    resultDecodedBuilder.bqc = jsonArrayBqc
                }
                if let jsonValueBqcDg = jsonMap["bqcDg"] as? Bool {
                    resultDecodedBuilder.bqcDg = jsonValueBqcDg
                }
                if let jsonValueBf = jsonMap["bf"] as? Array<Double> {
                    var jsonArrayBf:Array<Double> = []
                    for oneValueBf in jsonValueBf {
                        jsonArrayBf.append(Double(oneValueBf))
                    }
                    resultDecodedBuilder.bf = jsonArrayBf
                }
                if let jsonValueBfDg = jsonMap["bfDg"] as? Bool {
                    resultDecodedBuilder.bfDg = jsonValueBfDg
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.GameInfo.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.GameInfo.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    ///开奖信息
    final public class FbGameOpencai : GeneratedMessage {

        public static func == (lhs: Apiproto.FbGameOpencai, rhs: Apiproto.FbGameOpencai) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasHomeTeam == rhs.hasHomeTeam) && (!lhs.hasHomeTeam || lhs.homeTeam == rhs.homeTeam)
            fieldCheck = fieldCheck && (lhs.hasGuestTeam == rhs.hasGuestTeam) && (!lhs.hasGuestTeam || lhs.guestTeam == rhs.guestTeam)
            fieldCheck = fieldCheck && (lhs.hasHomeIcon == rhs.hasHomeIcon) && (!lhs.hasHomeIcon || lhs.homeIcon == rhs.homeIcon)
            fieldCheck = fieldCheck && (lhs.hasGuestIcon == rhs.hasGuestIcon) && (!lhs.hasGuestIcon || lhs.guestIcon == rhs.guestIcon)
            fieldCheck = fieldCheck && (lhs.hasHomeball == rhs.hasHomeball) && (!lhs.hasHomeball || lhs.homeball == rhs.homeball)
            fieldCheck = fieldCheck && (lhs.hasGuestball == rhs.hasGuestball) && (!lhs.hasGuestball || lhs.guestball == rhs.guestball)
            fieldCheck = fieldCheck && (lhs.hasGiveball == rhs.hasGiveball) && (!lhs.hasGiveball || lhs.giveball == rhs.giveball)
            fieldCheck = fieldCheck && (lhs.hasSpf == rhs.hasSpf) && (!lhs.hasSpf || lhs.spf == rhs.spf)
            fieldCheck = fieldCheck && (lhs.hasRqspf == rhs.hasRqspf) && (!lhs.hasRqspf || lhs.rqspf == rhs.rqspf)
            fieldCheck = fieldCheck && (lhs.hasZjqs == rhs.hasZjqs) && (!lhs.hasZjqs || lhs.zjqs == rhs.zjqs)
            fieldCheck = fieldCheck && (lhs.hasBqc == rhs.hasBqc) && (!lhs.hasBqc || lhs.bqc == rhs.bqc)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var homeTeam:String = ""
        public fileprivate(set) var hasHomeTeam:Bool = false

        public fileprivate(set) var guestTeam:String = ""
        public fileprivate(set) var hasGuestTeam:Bool = false

        public fileprivate(set) var homeIcon:String = ""
        public fileprivate(set) var hasHomeIcon:Bool = false

        public fileprivate(set) var guestIcon:String = ""
        public fileprivate(set) var hasGuestIcon:Bool = false

        public fileprivate(set) var homeball:Int64 = Int64(0)
        public fileprivate(set) var hasHomeball:Bool = false

        public fileprivate(set) var guestball:Int64 = Int64(0)
        public fileprivate(set) var hasGuestball:Bool = false

        public fileprivate(set) var giveball:String = ""
        public fileprivate(set) var hasGiveball:Bool = false

        public fileprivate(set) var spf:String = ""
        public fileprivate(set) var hasSpf:Bool = false

        public fileprivate(set) var rqspf:String = ""
        public fileprivate(set) var hasRqspf:Bool = false

        public fileprivate(set) var zjqs:String = ""
        public fileprivate(set) var hasZjqs:Bool = false

        public fileprivate(set) var bqc:String = ""
        public fileprivate(set) var hasBqc:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasHomeTeam {
                try codedOutputStream.writeString(fieldNumber: 1, value:homeTeam)
            }
            if hasGuestTeam {
                try codedOutputStream.writeString(fieldNumber: 2, value:guestTeam)
            }
            if hasHomeIcon {
                try codedOutputStream.writeString(fieldNumber: 3, value:homeIcon)
            }
            if hasGuestIcon {
                try codedOutputStream.writeString(fieldNumber: 4, value:guestIcon)
            }
            if hasHomeball {
                try codedOutputStream.writeInt64(fieldNumber: 5, value:homeball)
            }
            if hasGuestball {
                try codedOutputStream.writeInt64(fieldNumber: 6, value:guestball)
            }
            if hasGiveball {
                try codedOutputStream.writeString(fieldNumber: 7, value:giveball)
            }
            if hasSpf {
                try codedOutputStream.writeString(fieldNumber: 8, value:spf)
            }
            if hasRqspf {
                try codedOutputStream.writeString(fieldNumber: 9, value:rqspf)
            }
            if hasZjqs {
                try codedOutputStream.writeString(fieldNumber: 10, value:zjqs)
            }
            if hasBqc {
                try codedOutputStream.writeString(fieldNumber: 11, value:bqc)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasHomeTeam {
                serialize_size += homeTeam.computeStringSize(fieldNumber: 1)
            }
            if hasGuestTeam {
                serialize_size += guestTeam.computeStringSize(fieldNumber: 2)
            }
            if hasHomeIcon {
                serialize_size += homeIcon.computeStringSize(fieldNumber: 3)
            }
            if hasGuestIcon {
                serialize_size += guestIcon.computeStringSize(fieldNumber: 4)
            }
            if hasHomeball {
                serialize_size += homeball.computeInt64Size(fieldNumber: 5)
            }
            if hasGuestball {
                serialize_size += guestball.computeInt64Size(fieldNumber: 6)
            }
            if hasGiveball {
                serialize_size += giveball.computeStringSize(fieldNumber: 7)
            }
            if hasSpf {
                serialize_size += spf.computeStringSize(fieldNumber: 8)
            }
            if hasRqspf {
                serialize_size += rqspf.computeStringSize(fieldNumber: 9)
            }
            if hasZjqs {
                serialize_size += zjqs.computeStringSize(fieldNumber: 10)
            }
            if hasBqc {
                serialize_size += bqc.computeStringSize(fieldNumber: 11)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.FbGameOpencai.Builder {
            return Apiproto.FbGameOpencai.classBuilder() as! Apiproto.FbGameOpencai.Builder
        }
        public func getBuilder() -> Apiproto.FbGameOpencai.Builder {
            return classBuilder() as! Apiproto.FbGameOpencai.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.FbGameOpencai.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.FbGameOpencai.Builder()
        }
        public func toBuilder() throws -> Apiproto.FbGameOpencai.Builder {
            return try Apiproto.FbGameOpencai.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.FbGameOpencai) throws -> Apiproto.FbGameOpencai.Builder {
            return try Apiproto.FbGameOpencai.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasHomeTeam {
                jsonMap["homeTeam"] = homeTeam
            }
            if hasGuestTeam {
                jsonMap["guestTeam"] = guestTeam
            }
            if hasHomeIcon {
                jsonMap["homeIcon"] = homeIcon
            }
            if hasGuestIcon {
                jsonMap["guestIcon"] = guestIcon
            }
            if hasHomeball {
                jsonMap["homeball"] = "\(homeball)"
            }
            if hasGuestball {
                jsonMap["guestball"] = "\(guestball)"
            }
            if hasGiveball {
                jsonMap["giveball"] = giveball
            }
            if hasSpf {
                jsonMap["spf"] = spf
            }
            if hasRqspf {
                jsonMap["rqspf"] = rqspf
            }
            if hasZjqs {
                jsonMap["zjqs"] = zjqs
            }
            if hasBqc {
                jsonMap["bqc"] = bqc
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.FbGameOpencai {
            return try Apiproto.FbGameOpencai.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.FbGameOpencai {
            return try Apiproto.FbGameOpencai.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasHomeTeam {
                output += "\(indent) homeTeam: \(homeTeam) \n"
            }
            if hasGuestTeam {
                output += "\(indent) guestTeam: \(guestTeam) \n"
            }
            if hasHomeIcon {
                output += "\(indent) homeIcon: \(homeIcon) \n"
            }
            if hasGuestIcon {
                output += "\(indent) guestIcon: \(guestIcon) \n"
            }
            if hasHomeball {
                output += "\(indent) homeball: \(homeball) \n"
            }
            if hasGuestball {
                output += "\(indent) guestball: \(guestball) \n"
            }
            if hasGiveball {
                output += "\(indent) giveball: \(giveball) \n"
            }
            if hasSpf {
                output += "\(indent) spf: \(spf) \n"
            }
            if hasRqspf {
                output += "\(indent) rqspf: \(rqspf) \n"
            }
            if hasZjqs {
                output += "\(indent) zjqs: \(zjqs) \n"
            }
            if hasBqc {
                output += "\(indent) bqc: \(bqc) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasHomeTeam {
                    hashCode = (hashCode &* 31) &+ homeTeam.hashValue
                }
                if hasGuestTeam {
                    hashCode = (hashCode &* 31) &+ guestTeam.hashValue
                }
                if hasHomeIcon {
                    hashCode = (hashCode &* 31) &+ homeIcon.hashValue
                }
                if hasGuestIcon {
                    hashCode = (hashCode &* 31) &+ guestIcon.hashValue
                }
                if hasHomeball {
                    hashCode = (hashCode &* 31) &+ homeball.hashValue
                }
                if hasGuestball {
                    hashCode = (hashCode &* 31) &+ guestball.hashValue
                }
                if hasGiveball {
                    hashCode = (hashCode &* 31) &+ giveball.hashValue
                }
                if hasSpf {
                    hashCode = (hashCode &* 31) &+ spf.hashValue
                }
                if hasRqspf {
                    hashCode = (hashCode &* 31) &+ rqspf.hashValue
                }
                if hasZjqs {
                    hashCode = (hashCode &* 31) &+ zjqs.hashValue
                }
                if hasBqc {
                    hashCode = (hashCode &* 31) &+ bqc.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.FbGameOpencai"
        }
        override public func className() -> String {
            return "Apiproto.FbGameOpencai"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.FbGameOpencai = Apiproto.FbGameOpencai()
            public func getMessage() -> Apiproto.FbGameOpencai {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var homeTeam:String {
                get {
                    return builderResult.homeTeam
                }
                set (value) {
                    builderResult.hasHomeTeam = true
                    builderResult.homeTeam = value
                }
            }
            public var hasHomeTeam:Bool {
                get {
                    return builderResult.hasHomeTeam
                }
            }
            @discardableResult
            public func setHomeTeam(_ value:String) -> Apiproto.FbGameOpencai.Builder {
                self.homeTeam = value
                return self
            }
            @discardableResult
            public func clearHomeTeam() -> Apiproto.FbGameOpencai.Builder{
                builderResult.hasHomeTeam = false
                builderResult.homeTeam = ""
                return self
            }
            public var guestTeam:String {
                get {
                    return builderResult.guestTeam
                }
                set (value) {
                    builderResult.hasGuestTeam = true
                    builderResult.guestTeam = value
                }
            }
            public var hasGuestTeam:Bool {
                get {
                    return builderResult.hasGuestTeam
                }
            }
            @discardableResult
            public func setGuestTeam(_ value:String) -> Apiproto.FbGameOpencai.Builder {
                self.guestTeam = value
                return self
            }
            @discardableResult
            public func clearGuestTeam() -> Apiproto.FbGameOpencai.Builder{
                builderResult.hasGuestTeam = false
                builderResult.guestTeam = ""
                return self
            }
            public var homeIcon:String {
                get {
                    return builderResult.homeIcon
                }
                set (value) {
                    builderResult.hasHomeIcon = true
                    builderResult.homeIcon = value
                }
            }
            public var hasHomeIcon:Bool {
                get {
                    return builderResult.hasHomeIcon
                }
            }
            @discardableResult
            public func setHomeIcon(_ value:String) -> Apiproto.FbGameOpencai.Builder {
                self.homeIcon = value
                return self
            }
            @discardableResult
            public func clearHomeIcon() -> Apiproto.FbGameOpencai.Builder{
                builderResult.hasHomeIcon = false
                builderResult.homeIcon = ""
                return self
            }
            public var guestIcon:String {
                get {
                    return builderResult.guestIcon
                }
                set (value) {
                    builderResult.hasGuestIcon = true
                    builderResult.guestIcon = value
                }
            }
            public var hasGuestIcon:Bool {
                get {
                    return builderResult.hasGuestIcon
                }
            }
            @discardableResult
            public func setGuestIcon(_ value:String) -> Apiproto.FbGameOpencai.Builder {
                self.guestIcon = value
                return self
            }
            @discardableResult
            public func clearGuestIcon() -> Apiproto.FbGameOpencai.Builder{
                builderResult.hasGuestIcon = false
                builderResult.guestIcon = ""
                return self
            }
            public var homeball:Int64 {
                get {
                    return builderResult.homeball
                }
                set (value) {
                    builderResult.hasHomeball = true
                    builderResult.homeball = value
                }
            }
            public var hasHomeball:Bool {
                get {
                    return builderResult.hasHomeball
                }
            }
            @discardableResult
            public func setHomeball(_ value:Int64) -> Apiproto.FbGameOpencai.Builder {
                self.homeball = value
                return self
            }
            @discardableResult
            public func clearHomeball() -> Apiproto.FbGameOpencai.Builder{
                builderResult.hasHomeball = false
                builderResult.homeball = Int64(0)
                return self
            }
            public var guestball:Int64 {
                get {
                    return builderResult.guestball
                }
                set (value) {
                    builderResult.hasGuestball = true
                    builderResult.guestball = value
                }
            }
            public var hasGuestball:Bool {
                get {
                    return builderResult.hasGuestball
                }
            }
            @discardableResult
            public func setGuestball(_ value:Int64) -> Apiproto.FbGameOpencai.Builder {
                self.guestball = value
                return self
            }
            @discardableResult
            public func clearGuestball() -> Apiproto.FbGameOpencai.Builder{
                builderResult.hasGuestball = false
                builderResult.guestball = Int64(0)
                return self
            }
            public var giveball:String {
                get {
                    return builderResult.giveball
                }
                set (value) {
                    builderResult.hasGiveball = true
                    builderResult.giveball = value
                }
            }
            public var hasGiveball:Bool {
                get {
                    return builderResult.hasGiveball
                }
            }
            @discardableResult
            public func setGiveball(_ value:String) -> Apiproto.FbGameOpencai.Builder {
                self.giveball = value
                return self
            }
            @discardableResult
            public func clearGiveball() -> Apiproto.FbGameOpencai.Builder{
                builderResult.hasGiveball = false
                builderResult.giveball = ""
                return self
            }
            public var spf:String {
                get {
                    return builderResult.spf
                }
                set (value) {
                    builderResult.hasSpf = true
                    builderResult.spf = value
                }
            }
            public var hasSpf:Bool {
                get {
                    return builderResult.hasSpf
                }
            }
            @discardableResult
            public func setSpf(_ value:String) -> Apiproto.FbGameOpencai.Builder {
                self.spf = value
                return self
            }
            @discardableResult
            public func clearSpf() -> Apiproto.FbGameOpencai.Builder{
                builderResult.hasSpf = false
                builderResult.spf = ""
                return self
            }
            public var rqspf:String {
                get {
                    return builderResult.rqspf
                }
                set (value) {
                    builderResult.hasRqspf = true
                    builderResult.rqspf = value
                }
            }
            public var hasRqspf:Bool {
                get {
                    return builderResult.hasRqspf
                }
            }
            @discardableResult
            public func setRqspf(_ value:String) -> Apiproto.FbGameOpencai.Builder {
                self.rqspf = value
                return self
            }
            @discardableResult
            public func clearRqspf() -> Apiproto.FbGameOpencai.Builder{
                builderResult.hasRqspf = false
                builderResult.rqspf = ""
                return self
            }
            public var zjqs:String {
                get {
                    return builderResult.zjqs
                }
                set (value) {
                    builderResult.hasZjqs = true
                    builderResult.zjqs = value
                }
            }
            public var hasZjqs:Bool {
                get {
                    return builderResult.hasZjqs
                }
            }
            @discardableResult
            public func setZjqs(_ value:String) -> Apiproto.FbGameOpencai.Builder {
                self.zjqs = value
                return self
            }
            @discardableResult
            public func clearZjqs() -> Apiproto.FbGameOpencai.Builder{
                builderResult.hasZjqs = false
                builderResult.zjqs = ""
                return self
            }
            public var bqc:String {
                get {
                    return builderResult.bqc
                }
                set (value) {
                    builderResult.hasBqc = true
                    builderResult.bqc = value
                }
            }
            public var hasBqc:Bool {
                get {
                    return builderResult.hasBqc
                }
            }
            @discardableResult
            public func setBqc(_ value:String) -> Apiproto.FbGameOpencai.Builder {
                self.bqc = value
                return self
            }
            @discardableResult
            public func clearBqc() -> Apiproto.FbGameOpencai.Builder{
                builderResult.hasBqc = false
                builderResult.bqc = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.FbGameOpencai.Builder {
                builderResult = Apiproto.FbGameOpencai()
                return self
            }
            override public func clone() throws -> Apiproto.FbGameOpencai.Builder {
                return try Apiproto.FbGameOpencai.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.FbGameOpencai {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.FbGameOpencai {
                let returnMe:Apiproto.FbGameOpencai = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.FbGameOpencai) throws -> Apiproto.FbGameOpencai.Builder {
                if other == Apiproto.FbGameOpencai() {
                    return self
                }
                if other.hasHomeTeam {
                    homeTeam = other.homeTeam
                }
                if other.hasGuestTeam {
                    guestTeam = other.guestTeam
                }
                if other.hasHomeIcon {
                    homeIcon = other.homeIcon
                }
                if other.hasGuestIcon {
                    guestIcon = other.guestIcon
                }
                if other.hasHomeball {
                    homeball = other.homeball
                }
                if other.hasGuestball {
                    guestball = other.guestball
                }
                if other.hasGiveball {
                    giveball = other.giveball
                }
                if other.hasSpf {
                    spf = other.spf
                }
                if other.hasRqspf {
                    rqspf = other.rqspf
                }
                if other.hasZjqs {
                    zjqs = other.zjqs
                }
                if other.hasBqc {
                    bqc = other.bqc
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.FbGameOpencai.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.FbGameOpencai.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        homeTeam = try codedInputStream.readString()

                    case 18:
                        guestTeam = try codedInputStream.readString()

                    case 26:
                        homeIcon = try codedInputStream.readString()

                    case 34:
                        guestIcon = try codedInputStream.readString()

                    case 40:
                        homeball = try codedInputStream.readInt64()

                    case 48:
                        guestball = try codedInputStream.readInt64()

                    case 58:
                        giveball = try codedInputStream.readString()

                    case 66:
                        spf = try codedInputStream.readString()

                    case 74:
                        rqspf = try codedInputStream.readString()

                    case 82:
                        zjqs = try codedInputStream.readString()

                    case 90:
                        bqc = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.FbGameOpencai.Builder {
                let resultDecodedBuilder = Apiproto.FbGameOpencai.Builder()
                if let jsonValueHomeTeam = jsonMap["homeTeam"] as? String {
                    resultDecodedBuilder.homeTeam = jsonValueHomeTeam
                }
                if let jsonValueGuestTeam = jsonMap["guestTeam"] as? String {
                    resultDecodedBuilder.guestTeam = jsonValueGuestTeam
                }
                if let jsonValueHomeIcon = jsonMap["homeIcon"] as? String {
                    resultDecodedBuilder.homeIcon = jsonValueHomeIcon
                }
                if let jsonValueGuestIcon = jsonMap["guestIcon"] as? String {
                    resultDecodedBuilder.guestIcon = jsonValueGuestIcon
                }
                if let jsonValueHomeball = jsonMap["homeball"] as? String {
                    resultDecodedBuilder.homeball = Int64(jsonValueHomeball)!
                } else if let jsonValueHomeball = jsonMap["homeball"] as? Int {
                    resultDecodedBuilder.homeball = Int64(jsonValueHomeball)
                }
                if let jsonValueGuestball = jsonMap["guestball"] as? String {
                    resultDecodedBuilder.guestball = Int64(jsonValueGuestball)!
                } else if let jsonValueGuestball = jsonMap["guestball"] as? Int {
                    resultDecodedBuilder.guestball = Int64(jsonValueGuestball)
                }
                if let jsonValueGiveball = jsonMap["giveball"] as? String {
                    resultDecodedBuilder.giveball = jsonValueGiveball
                }
                if let jsonValueSpf = jsonMap["spf"] as? String {
                    resultDecodedBuilder.spf = jsonValueSpf
                }
                if let jsonValueRqspf = jsonMap["rqspf"] as? String {
                    resultDecodedBuilder.rqspf = jsonValueRqspf
                }
                if let jsonValueZjqs = jsonMap["zjqs"] as? String {
                    resultDecodedBuilder.zjqs = jsonValueZjqs
                }
                if let jsonValueBqc = jsonMap["bqc"] as? String {
                    resultDecodedBuilder.bqc = jsonValueBqc
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.FbGameOpencai.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.FbGameOpencai.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class QueryGameInfoRes : GeneratedMessage {

        public static func == (lhs: Apiproto.QueryGameInfoRes, rhs: Apiproto.QueryGameInfoRes) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.list == rhs.list)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var list:Array<Apiproto.GameInfo>  = Array<Apiproto.GameInfo>()
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            for oneElementList in list {
                  try codedOutputStream.writeMessage(fieldNumber: 1, value:oneElementList)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            for oneElementList in list {
                serialize_size += oneElementList.computeMessageSize(fieldNumber: 1)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.QueryGameInfoRes.Builder {
            return Apiproto.QueryGameInfoRes.classBuilder() as! Apiproto.QueryGameInfoRes.Builder
        }
        public func getBuilder() -> Apiproto.QueryGameInfoRes.Builder {
            return classBuilder() as! Apiproto.QueryGameInfoRes.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.QueryGameInfoRes.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.QueryGameInfoRes.Builder()
        }
        public func toBuilder() throws -> Apiproto.QueryGameInfoRes.Builder {
            return try Apiproto.QueryGameInfoRes.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.QueryGameInfoRes) throws -> Apiproto.QueryGameInfoRes.Builder {
            return try Apiproto.QueryGameInfoRes.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if !list.isEmpty {
                var jsonArrayList:Array<Dictionary<String,Any>> = []
                for oneValueList in list {
                    let ecodedMessageList = try oneValueList.encode()
                    jsonArrayList.append(ecodedMessageList)
                }
                jsonMap["list"] = jsonArrayList
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.QueryGameInfoRes {
            return try Apiproto.QueryGameInfoRes.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.QueryGameInfoRes {
            return try Apiproto.QueryGameInfoRes.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            var listElementIndex:Int = 0
            for oneElementList in list {
                output += "\(indent) list[\(listElementIndex)] {\n"
                output += try oneElementList.getDescription(indent: "\(indent)  ")
                output += "\(indent)}\n"
                listElementIndex += 1
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                for oneElementList in list {
                    hashCode = (hashCode &* 31) &+ oneElementList.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.QueryGameInfoRes"
        }
        override public func className() -> String {
            return "Apiproto.QueryGameInfoRes"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.QueryGameInfoRes = Apiproto.QueryGameInfoRes()
            public func getMessage() -> Apiproto.QueryGameInfoRes {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var list:Array<Apiproto.GameInfo> {
                get {
                    return builderResult.list
                }
                set (value) {
                    builderResult.list = value
                }
            }
            @discardableResult
            public func setList(_ value:Array<Apiproto.GameInfo>) -> Apiproto.QueryGameInfoRes.Builder {
                self.list = value
                return self
            }
            @discardableResult
            public func clearList() -> Apiproto.QueryGameInfoRes.Builder {
                builderResult.list.removeAll(keepingCapacity: false)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.QueryGameInfoRes.Builder {
                builderResult = Apiproto.QueryGameInfoRes()
                return self
            }
            override public func clone() throws -> Apiproto.QueryGameInfoRes.Builder {
                return try Apiproto.QueryGameInfoRes.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.QueryGameInfoRes {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.QueryGameInfoRes {
                let returnMe:Apiproto.QueryGameInfoRes = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.QueryGameInfoRes) throws -> Apiproto.QueryGameInfoRes.Builder {
                if other == Apiproto.QueryGameInfoRes() {
                    return self
                }
                if !other.list.isEmpty  {
                     builderResult.list += other.list
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.QueryGameInfoRes.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.QueryGameInfoRes.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        let subBuilder = Apiproto.GameInfo.Builder()
                        try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                        list.append(subBuilder.buildPartial())

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.QueryGameInfoRes.Builder {
                let resultDecodedBuilder = Apiproto.QueryGameInfoRes.Builder()
                if let jsonValueList = jsonMap["list"] as? Array<Dictionary<String,Any>> {
                    var jsonArrayList:Array<Apiproto.GameInfo> = []
                    for oneValueList in jsonValueList {
                        let messageFromStringList = try Apiproto.GameInfo.Builder.decodeToBuilder(jsonMap:oneValueList).build()

                        jsonArrayList.append(messageFromStringList)
                    }
                    resultDecodedBuilder.list = jsonArrayList
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.QueryGameInfoRes.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.QueryGameInfoRes.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class QueryOpencaiRes : GeneratedMessage {

        public static func == (lhs: Apiproto.QueryOpencaiRes, rhs: Apiproto.QueryOpencaiRes) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.list == rhs.list)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var list:Array<Apiproto.FbGameOpencai>  = Array<Apiproto.FbGameOpencai>()
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            for oneElementList in list {
                  try codedOutputStream.writeMessage(fieldNumber: 1, value:oneElementList)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            for oneElementList in list {
                serialize_size += oneElementList.computeMessageSize(fieldNumber: 1)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.QueryOpencaiRes.Builder {
            return Apiproto.QueryOpencaiRes.classBuilder() as! Apiproto.QueryOpencaiRes.Builder
        }
        public func getBuilder() -> Apiproto.QueryOpencaiRes.Builder {
            return classBuilder() as! Apiproto.QueryOpencaiRes.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.QueryOpencaiRes.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.QueryOpencaiRes.Builder()
        }
        public func toBuilder() throws -> Apiproto.QueryOpencaiRes.Builder {
            return try Apiproto.QueryOpencaiRes.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.QueryOpencaiRes) throws -> Apiproto.QueryOpencaiRes.Builder {
            return try Apiproto.QueryOpencaiRes.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if !list.isEmpty {
                var jsonArrayList:Array<Dictionary<String,Any>> = []
                for oneValueList in list {
                    let ecodedMessageList = try oneValueList.encode()
                    jsonArrayList.append(ecodedMessageList)
                }
                jsonMap["list"] = jsonArrayList
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.QueryOpencaiRes {
            return try Apiproto.QueryOpencaiRes.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.QueryOpencaiRes {
            return try Apiproto.QueryOpencaiRes.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            var listElementIndex:Int = 0
            for oneElementList in list {
                output += "\(indent) list[\(listElementIndex)] {\n"
                output += try oneElementList.getDescription(indent: "\(indent)  ")
                output += "\(indent)}\n"
                listElementIndex += 1
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                for oneElementList in list {
                    hashCode = (hashCode &* 31) &+ oneElementList.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.QueryOpencaiRes"
        }
        override public func className() -> String {
            return "Apiproto.QueryOpencaiRes"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.QueryOpencaiRes = Apiproto.QueryOpencaiRes()
            public func getMessage() -> Apiproto.QueryOpencaiRes {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var list:Array<Apiproto.FbGameOpencai> {
                get {
                    return builderResult.list
                }
                set (value) {
                    builderResult.list = value
                }
            }
            @discardableResult
            public func setList(_ value:Array<Apiproto.FbGameOpencai>) -> Apiproto.QueryOpencaiRes.Builder {
                self.list = value
                return self
            }
            @discardableResult
            public func clearList() -> Apiproto.QueryOpencaiRes.Builder {
                builderResult.list.removeAll(keepingCapacity: false)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.QueryOpencaiRes.Builder {
                builderResult = Apiproto.QueryOpencaiRes()
                return self
            }
            override public func clone() throws -> Apiproto.QueryOpencaiRes.Builder {
                return try Apiproto.QueryOpencaiRes.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.QueryOpencaiRes {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.QueryOpencaiRes {
                let returnMe:Apiproto.QueryOpencaiRes = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.QueryOpencaiRes) throws -> Apiproto.QueryOpencaiRes.Builder {
                if other == Apiproto.QueryOpencaiRes() {
                    return self
                }
                if !other.list.isEmpty  {
                     builderResult.list += other.list
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.QueryOpencaiRes.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.QueryOpencaiRes.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        let subBuilder = Apiproto.FbGameOpencai.Builder()
                        try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                        list.append(subBuilder.buildPartial())

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.QueryOpencaiRes.Builder {
                let resultDecodedBuilder = Apiproto.QueryOpencaiRes.Builder()
                if let jsonValueList = jsonMap["list"] as? Array<Dictionary<String,Any>> {
                    var jsonArrayList:Array<Apiproto.FbGameOpencai> = []
                    for oneValueList in jsonValueList {
                        let messageFromStringList = try Apiproto.FbGameOpencai.Builder.decodeToBuilder(jsonMap:oneValueList).build()

                        jsonArrayList.append(messageFromStringList)
                    }
                    resultDecodedBuilder.list = jsonArrayList
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.QueryOpencaiRes.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.QueryOpencaiRes.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

}
extension Apiproto.GameInfo: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.GameInfo> {
        var mergedArray = Array<Apiproto.GameInfo>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.GameInfo? {
        return try Apiproto.GameInfo.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.GameInfo {
        return try Apiproto.GameInfo.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.FootballRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.GameInfo {
        return try Apiproto.GameInfo.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.GameInfo {
        return try Apiproto.GameInfo.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.GameInfo {
        return try Apiproto.GameInfo.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.GameInfo {
        return try Apiproto.GameInfo.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.GameInfo {
        return try Apiproto.GameInfo.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "startTime": return self.startTime
        case "gameNo": return self.gameNo
        case "homeTeam": return self.homeTeam
        case "guestTeam": return self.guestTeam
        case "gameType": return self.gameType
        case "giveball": return self.giveball
        case "endTime": return self.endTime
        case "homeIcon": return self.homeIcon
        case "guestIcon": return self.guestIcon
        case "spf": return self.spf
        case "spfDg": return self.spfDg
        case "rqspf": return self.rqspf
        case "rqspfDg": return self.rqspfDg
        case "zjqs": return self.zjqs
        case "zjqsDg": return self.zjqsDg
        case "bqc": return self.bqc
        case "bqcDg": return self.bqcDg
        case "bf": return self.bf
        case "bfDg": return self.bfDg
        default: return nil
        }
    }
}
extension Apiproto.GameInfo.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "startTime": return self.startTime
            case "gameNo": return self.gameNo
            case "homeTeam": return self.homeTeam
            case "guestTeam": return self.guestTeam
            case "gameType": return self.gameType
            case "giveball": return self.giveball
            case "endTime": return self.endTime
            case "homeIcon": return self.homeIcon
            case "guestIcon": return self.guestIcon
            case "spf": return self.spf
            case "spfDg": return self.spfDg
            case "rqspf": return self.rqspf
            case "rqspfDg": return self.rqspfDg
            case "zjqs": return self.zjqs
            case "zjqsDg": return self.zjqsDg
            case "bqc": return self.bqc
            case "bqcDg": return self.bqcDg
            case "bf": return self.bf
            case "bfDg": return self.bfDg
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "startTime":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.startTime = newSubscriptValue
            case "gameNo":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.gameNo = newSubscriptValue
            case "homeTeam":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.homeTeam = newSubscriptValue
            case "guestTeam":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.guestTeam = newSubscriptValue
            case "gameType":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.gameType = newSubscriptValue
            case "giveball":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.giveball = newSubscriptValue
            case "endTime":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.endTime = newSubscriptValue
            case "homeIcon":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.homeIcon = newSubscriptValue
            case "guestIcon":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.guestIcon = newSubscriptValue
            case "spf":
                guard let newSubscriptValue = newSubscriptValue as? Array<Double> else {
                    return
                }
                self.spf = newSubscriptValue
            case "spfDg":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.spfDg = newSubscriptValue
            case "rqspf":
                guard let newSubscriptValue = newSubscriptValue as? Array<Double> else {
                    return
                }
                self.rqspf = newSubscriptValue
            case "rqspfDg":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.rqspfDg = newSubscriptValue
            case "zjqs":
                guard let newSubscriptValue = newSubscriptValue as? Array<Double> else {
                    return
                }
                self.zjqs = newSubscriptValue
            case "zjqsDg":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.zjqsDg = newSubscriptValue
            case "bqc":
                guard let newSubscriptValue = newSubscriptValue as? Array<Double> else {
                    return
                }
                self.bqc = newSubscriptValue
            case "bqcDg":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.bqcDg = newSubscriptValue
            case "bf":
                guard let newSubscriptValue = newSubscriptValue as? Array<Double> else {
                    return
                }
                self.bf = newSubscriptValue
            case "bfDg":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.bfDg = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.FbGameOpencai: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.FbGameOpencai> {
        var mergedArray = Array<Apiproto.FbGameOpencai>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.FbGameOpencai? {
        return try Apiproto.FbGameOpencai.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.FbGameOpencai {
        return try Apiproto.FbGameOpencai.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.FootballRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.FbGameOpencai {
        return try Apiproto.FbGameOpencai.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.FbGameOpencai {
        return try Apiproto.FbGameOpencai.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.FbGameOpencai {
        return try Apiproto.FbGameOpencai.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.FbGameOpencai {
        return try Apiproto.FbGameOpencai.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.FbGameOpencai {
        return try Apiproto.FbGameOpencai.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "homeTeam": return self.homeTeam
        case "guestTeam": return self.guestTeam
        case "homeIcon": return self.homeIcon
        case "guestIcon": return self.guestIcon
        case "homeball": return self.homeball
        case "guestball": return self.guestball
        case "giveball": return self.giveball
        case "spf": return self.spf
        case "rqspf": return self.rqspf
        case "zjqs": return self.zjqs
        case "bqc": return self.bqc
        default: return nil
        }
    }
}
extension Apiproto.FbGameOpencai.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "homeTeam": return self.homeTeam
            case "guestTeam": return self.guestTeam
            case "homeIcon": return self.homeIcon
            case "guestIcon": return self.guestIcon
            case "homeball": return self.homeball
            case "guestball": return self.guestball
            case "giveball": return self.giveball
            case "spf": return self.spf
            case "rqspf": return self.rqspf
            case "zjqs": return self.zjqs
            case "bqc": return self.bqc
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "homeTeam":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.homeTeam = newSubscriptValue
            case "guestTeam":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.guestTeam = newSubscriptValue
            case "homeIcon":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.homeIcon = newSubscriptValue
            case "guestIcon":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.guestIcon = newSubscriptValue
            case "homeball":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.homeball = newSubscriptValue
            case "guestball":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.guestball = newSubscriptValue
            case "giveball":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.giveball = newSubscriptValue
            case "spf":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.spf = newSubscriptValue
            case "rqspf":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.rqspf = newSubscriptValue
            case "zjqs":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.zjqs = newSubscriptValue
            case "bqc":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.bqc = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.QueryGameInfoRes: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.QueryGameInfoRes> {
        var mergedArray = Array<Apiproto.QueryGameInfoRes>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.QueryGameInfoRes? {
        return try Apiproto.QueryGameInfoRes.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.QueryGameInfoRes {
        return try Apiproto.QueryGameInfoRes.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.FootballRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.QueryGameInfoRes {
        return try Apiproto.QueryGameInfoRes.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.QueryGameInfoRes {
        return try Apiproto.QueryGameInfoRes.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.QueryGameInfoRes {
        return try Apiproto.QueryGameInfoRes.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.QueryGameInfoRes {
        return try Apiproto.QueryGameInfoRes.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.QueryGameInfoRes {
        return try Apiproto.QueryGameInfoRes.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "list": return self.list
        default: return nil
        }
    }
}
extension Apiproto.QueryGameInfoRes.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "list": return self.list
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "list":
                guard let newSubscriptValue = newSubscriptValue as? Array<Apiproto.GameInfo> else {
                    return
                }
                self.list = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.QueryOpencaiRes: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.QueryOpencaiRes> {
        var mergedArray = Array<Apiproto.QueryOpencaiRes>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.QueryOpencaiRes? {
        return try Apiproto.QueryOpencaiRes.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.QueryOpencaiRes {
        return try Apiproto.QueryOpencaiRes.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.FootballRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.QueryOpencaiRes {
        return try Apiproto.QueryOpencaiRes.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.QueryOpencaiRes {
        return try Apiproto.QueryOpencaiRes.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.QueryOpencaiRes {
        return try Apiproto.QueryOpencaiRes.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.QueryOpencaiRes {
        return try Apiproto.QueryOpencaiRes.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.QueryOpencaiRes {
        return try Apiproto.QueryOpencaiRes.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "list": return self.list
        default: return nil
        }
    }
}
extension Apiproto.QueryOpencaiRes.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "list": return self.list
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "list":
                guard let newSubscriptValue = newSubscriptValue as? Array<Apiproto.FbGameOpencai> else {
                    return
                }
                self.list = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
