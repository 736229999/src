/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "user.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public extension Apiproto{}

public extension Apiproto {
    public struct UserRoot {
        public static let `default` = UserRoot()
        public var extensionRegistry:ExtensionRegistry

        init() {
            extensionRegistry = ExtensionRegistry()
            registerAllExtensions(registry: extensionRegistry)
            Apiproto.FundRoot.default.registerAllExtensions(registry: extensionRegistry)
        }
        public func registerAllExtensions(registry: ExtensionRegistry) {
        }
    }



    //Enum type declaration start 

    public enum UserType:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
        case phone = 0
        case qq = 1
        case weixin = 2
        public func toString() -> String {
            switch self {
            case .phone: return "Phone"
            case .qq: return "QQ"
            case .weixin: return "Weixin"
            }
        }
        public static func fromString(str:String) throws -> Apiproto.UserType {
            switch str {
            case "Phone":    return .phone
            case "QQ":    return .qq
            case "Weixin":    return .weixin
            default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
            }
        }
        public var debugDescription:String { return getDescription() }
        public var description:String { return getDescription() }
        private func getDescription() -> String { 
            switch self {
            case .phone: return ".phone"
            case .qq: return ".qq"
            case .weixin: return ".weixin"
            }
        }
        public var hashValue:Int {
            return self.rawValue.hashValue
        }
        public static func ==(lhs:UserType, rhs:UserType) -> Bool {
            return lhs.hashValue == rhs.hashValue
        }
    }

    //Enum type declaration end 



    //Enum type declaration start 

    public enum Sex:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
        case unknown = 0
        case male = 1
        case female = 2
        public func toString() -> String {
            switch self {
            case .unknown: return "Unknown"
            case .male: return "Male"
            case .female: return "Female"
            }
        }
        public static func fromString(str:String) throws -> Apiproto.Sex {
            switch str {
            case "Unknown":    return .unknown
            case "Male":    return .male
            case "Female":    return .female
            default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
            }
        }
        public var debugDescription:String { return getDescription() }
        public var description:String { return getDescription() }
        private func getDescription() -> String { 
            switch self {
            case .unknown: return ".unknown"
            case .male: return ".male"
            case .female: return ".female"
            }
        }
        public var hashValue:Int {
            return self.rawValue.hashValue
        }
        public static func ==(lhs:Sex, rhs:Sex) -> Bool {
            return lhs.hashValue == rhs.hashValue
        }
    }

    //Enum type declaration end 

    final public class UserInfo : GeneratedMessage {

        public static func == (lhs: Apiproto.UserInfo, rhs: Apiproto.UserInfo) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasAccountId == rhs.hasAccountId) && (!lhs.hasAccountId || lhs.accountId == rhs.accountId)
            fieldCheck = fieldCheck && (lhs.hasNickname == rhs.hasNickname) && (!lhs.hasNickname || lhs.nickname == rhs.nickname)
            fieldCheck = fieldCheck && (lhs.hasIcon == rhs.hasIcon) && (!lhs.hasIcon || lhs.icon == rhs.icon)
            fieldCheck = fieldCheck && (lhs.hasIdno == rhs.hasIdno) && (!lhs.hasIdno || lhs.idno == rhs.idno)
            fieldCheck = fieldCheck && (lhs.hasSex == rhs.hasSex) && (!lhs.hasSex || lhs.sex == rhs.sex)
            fieldCheck = fieldCheck && (lhs.hasExp == rhs.hasExp) && (!lhs.hasExp || lhs.exp == rhs.exp)
            fieldCheck = fieldCheck && (lhs.hasLevel == rhs.hasLevel) && (!lhs.hasLevel || lhs.level == rhs.level)
            fieldCheck = fieldCheck && (lhs.hasRealname == rhs.hasRealname) && (!lhs.hasRealname || lhs.realname == rhs.realname)
            fieldCheck = fieldCheck && (lhs.hasBindphone == rhs.hasBindphone) && (!lhs.hasBindphone || lhs.bindphone == rhs.bindphone)
            fieldCheck = fieldCheck && (lhs.hasBindqq == rhs.hasBindqq) && (!lhs.hasBindqq || lhs.bindqq == rhs.bindqq)
            fieldCheck = fieldCheck && (lhs.hasBindwx == rhs.hasBindwx) && (!lhs.hasBindwx || lhs.bindwx == rhs.bindwx)
            fieldCheck = fieldCheck && (lhs.hasInvitationCode == rhs.hasInvitationCode) && (!lhs.hasInvitationCode || lhs.invitationCode == rhs.invitationCode)
            fieldCheck = fieldCheck && (lhs.hasPayPassword == rhs.hasPayPassword) && (!lhs.hasPayPassword || lhs.payPassword == rhs.payPassword)
            fieldCheck = fieldCheck && (lhs.hasPayOpenPassword == rhs.hasPayOpenPassword) && (!lhs.hasPayOpenPassword || lhs.payOpenPassword == rhs.payOpenPassword)
            fieldCheck = fieldCheck && (lhs.hasLoginPassword == rhs.hasLoginPassword) && (!lhs.hasLoginPassword || lhs.loginPassword == rhs.loginPassword)
            fieldCheck = fieldCheck && (lhs.hasUserInviteStatus == rhs.hasUserInviteStatus) && (!lhs.hasUserInviteStatus || lhs.userInviteStatus == rhs.userInviteStatus)
            fieldCheck = fieldCheck && (lhs.hasIsDailyCheck == rhs.hasIsDailyCheck) && (!lhs.hasIsDailyCheck || lhs.isDailyCheck == rhs.isDailyCheck)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        /// 唯一id
        public fileprivate(set) var accountId:Int64 = Int64(0)
        public fileprivate(set) var hasAccountId:Bool = false

        /// 昵称
        public fileprivate(set) var nickname:String = ""
        public fileprivate(set) var hasNickname:Bool = false

        /// 头像
        public fileprivate(set) var icon:String = ""
        public fileprivate(set) var hasIcon:Bool = false

        /// 身份证号码
        public fileprivate(set) var idno:String = ""
        public fileprivate(set) var hasIdno:Bool = false

        public fileprivate(set) var sex:Apiproto.Sex = Apiproto.Sex.unknown
        public fileprivate(set) var hasSex:Bool = false
        public fileprivate(set) var exp:Int32 = Int32(0)
        public fileprivate(set) var hasExp:Bool = false

        public fileprivate(set) var level:Int32 = Int32(0)
        public fileprivate(set) var hasLevel:Bool = false

        public fileprivate(set) var realname:String = ""
        public fileprivate(set) var hasRealname:Bool = false

        /// 绑定手机号
        public fileprivate(set) var bindphone:String = ""
        public fileprivate(set) var hasBindphone:Bool = false

        /// 绑定QQ openid
        public fileprivate(set) var bindqq:String = ""
        public fileprivate(set) var hasBindqq:Bool = false

        /// 绑定微信 openid
        public fileprivate(set) var bindwx:String = ""
        public fileprivate(set) var hasBindwx:Bool = false

        /// 邀请码
        public fileprivate(set) var invitationCode:String = ""
        public fileprivate(set) var hasInvitationCode:Bool = false

        /// 是否设置支付密码
        public fileprivate(set) var payPassword:Bool = false
        public fileprivate(set) var hasPayPassword:Bool = false

        /// 是否开启支付密码
        public fileprivate(set) var payOpenPassword:Bool = false
        public fileprivate(set) var hasPayOpenPassword:Bool = false

        /// 是否设置登陆密码
        public fileprivate(set) var loginPassword:Bool = false
        public fileprivate(set) var hasLoginPassword:Bool = false

        ///true 为已经被邀请，false反之
        public fileprivate(set) var userInviteStatus:Bool = false
        public fileprivate(set) var hasUserInviteStatus:Bool = false

        /// 当日是否已签到
        public fileprivate(set) var isDailyCheck:Bool = false
        public fileprivate(set) var hasIsDailyCheck:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasAccountId {
                try codedOutputStream.writeInt64(fieldNumber: 1, value:accountId)
            }
            if hasNickname {
                try codedOutputStream.writeString(fieldNumber: 2, value:nickname)
            }
            if hasIcon {
                try codedOutputStream.writeString(fieldNumber: 3, value:icon)
            }
            if hasIdno {
                try codedOutputStream.writeString(fieldNumber: 4, value:idno)
            }
            if hasSex {
                try codedOutputStream.writeEnum(fieldNumber: 5, value:sex.rawValue)
            }
            if hasExp {
                try codedOutputStream.writeInt32(fieldNumber: 6, value:exp)
            }
            if hasLevel {
                try codedOutputStream.writeInt32(fieldNumber: 7, value:level)
            }
            if hasRealname {
                try codedOutputStream.writeString(fieldNumber: 8, value:realname)
            }
            if hasBindphone {
                try codedOutputStream.writeString(fieldNumber: 10, value:bindphone)
            }
            if hasBindqq {
                try codedOutputStream.writeString(fieldNumber: 11, value:bindqq)
            }
            if hasBindwx {
                try codedOutputStream.writeString(fieldNumber: 12, value:bindwx)
            }
            if hasInvitationCode {
                try codedOutputStream.writeString(fieldNumber: 13, value:invitationCode)
            }
            if hasPayPassword {
                try codedOutputStream.writeBool(fieldNumber: 14, value:payPassword)
            }
            if hasPayOpenPassword {
                try codedOutputStream.writeBool(fieldNumber: 15, value:payOpenPassword)
            }
            if hasLoginPassword {
                try codedOutputStream.writeBool(fieldNumber: 16, value:loginPassword)
            }
            if hasUserInviteStatus {
                try codedOutputStream.writeBool(fieldNumber: 17, value:userInviteStatus)
            }
            if hasIsDailyCheck {
                try codedOutputStream.writeBool(fieldNumber: 18, value:isDailyCheck)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasAccountId {
                serialize_size += accountId.computeInt64Size(fieldNumber: 1)
            }
            if hasNickname {
                serialize_size += nickname.computeStringSize(fieldNumber: 2)
            }
            if hasIcon {
                serialize_size += icon.computeStringSize(fieldNumber: 3)
            }
            if hasIdno {
                serialize_size += idno.computeStringSize(fieldNumber: 4)
            }
            if (hasSex) {
                serialize_size += sex.rawValue.computeEnumSize(fieldNumber: 5)
            }
            if hasExp {
                serialize_size += exp.computeInt32Size(fieldNumber: 6)
            }
            if hasLevel {
                serialize_size += level.computeInt32Size(fieldNumber: 7)
            }
            if hasRealname {
                serialize_size += realname.computeStringSize(fieldNumber: 8)
            }
            if hasBindphone {
                serialize_size += bindphone.computeStringSize(fieldNumber: 10)
            }
            if hasBindqq {
                serialize_size += bindqq.computeStringSize(fieldNumber: 11)
            }
            if hasBindwx {
                serialize_size += bindwx.computeStringSize(fieldNumber: 12)
            }
            if hasInvitationCode {
                serialize_size += invitationCode.computeStringSize(fieldNumber: 13)
            }
            if hasPayPassword {
                serialize_size += payPassword.computeBoolSize(fieldNumber: 14)
            }
            if hasPayOpenPassword {
                serialize_size += payOpenPassword.computeBoolSize(fieldNumber: 15)
            }
            if hasLoginPassword {
                serialize_size += loginPassword.computeBoolSize(fieldNumber: 16)
            }
            if hasUserInviteStatus {
                serialize_size += userInviteStatus.computeBoolSize(fieldNumber: 17)
            }
            if hasIsDailyCheck {
                serialize_size += isDailyCheck.computeBoolSize(fieldNumber: 18)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.UserInfo.Builder {
            return Apiproto.UserInfo.classBuilder() as! Apiproto.UserInfo.Builder
        }
        public func getBuilder() -> Apiproto.UserInfo.Builder {
            return classBuilder() as! Apiproto.UserInfo.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.UserInfo.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.UserInfo.Builder()
        }
        public func toBuilder() throws -> Apiproto.UserInfo.Builder {
            return try Apiproto.UserInfo.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.UserInfo) throws -> Apiproto.UserInfo.Builder {
            return try Apiproto.UserInfo.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasAccountId {
                jsonMap["accountId"] = "\(accountId)"
            }
            if hasNickname {
                jsonMap["nickname"] = nickname
            }
            if hasIcon {
                jsonMap["icon"] = icon
            }
            if hasIdno {
                jsonMap["idno"] = idno
            }
            if hasSex {
                jsonMap["sex"] = sex.toString()
            }
            if hasExp {
                jsonMap["exp"] = Int(exp)
            }
            if hasLevel {
                jsonMap["level"] = Int(level)
            }
            if hasRealname {
                jsonMap["realname"] = realname
            }
            if hasBindphone {
                jsonMap["bindphone"] = bindphone
            }
            if hasBindqq {
                jsonMap["bindqq"] = bindqq
            }
            if hasBindwx {
                jsonMap["bindwx"] = bindwx
            }
            if hasInvitationCode {
                jsonMap["invitationCode"] = invitationCode
            }
            if hasPayPassword {
                jsonMap["payPassword"] = payPassword
            }
            if hasPayOpenPassword {
                jsonMap["payOpenPassword"] = payOpenPassword
            }
            if hasLoginPassword {
                jsonMap["loginPassword"] = loginPassword
            }
            if hasUserInviteStatus {
                jsonMap["UserInviteStatus"] = userInviteStatus
            }
            if hasIsDailyCheck {
                jsonMap["isDailyCheck"] = isDailyCheck
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.UserInfo {
            return try Apiproto.UserInfo.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.UserInfo {
            return try Apiproto.UserInfo.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasAccountId {
                output += "\(indent) accountId: \(accountId) \n"
            }
            if hasNickname {
                output += "\(indent) nickname: \(nickname) \n"
            }
            if hasIcon {
                output += "\(indent) icon: \(icon) \n"
            }
            if hasIdno {
                output += "\(indent) idno: \(idno) \n"
            }
            if (hasSex) {
                output += "\(indent) sex: \(sex.description)\n"
            }
            if hasExp {
                output += "\(indent) exp: \(exp) \n"
            }
            if hasLevel {
                output += "\(indent) level: \(level) \n"
            }
            if hasRealname {
                output += "\(indent) realname: \(realname) \n"
            }
            if hasBindphone {
                output += "\(indent) bindphone: \(bindphone) \n"
            }
            if hasBindqq {
                output += "\(indent) bindqq: \(bindqq) \n"
            }
            if hasBindwx {
                output += "\(indent) bindwx: \(bindwx) \n"
            }
            if hasInvitationCode {
                output += "\(indent) invitationCode: \(invitationCode) \n"
            }
            if hasPayPassword {
                output += "\(indent) payPassword: \(payPassword) \n"
            }
            if hasPayOpenPassword {
                output += "\(indent) payOpenPassword: \(payOpenPassword) \n"
            }
            if hasLoginPassword {
                output += "\(indent) loginPassword: \(loginPassword) \n"
            }
            if hasUserInviteStatus {
                output += "\(indent) userInviteStatus: \(userInviteStatus) \n"
            }
            if hasIsDailyCheck {
                output += "\(indent) isDailyCheck: \(isDailyCheck) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasAccountId {
                    hashCode = (hashCode &* 31) &+ accountId.hashValue
                }
                if hasNickname {
                    hashCode = (hashCode &* 31) &+ nickname.hashValue
                }
                if hasIcon {
                    hashCode = (hashCode &* 31) &+ icon.hashValue
                }
                if hasIdno {
                    hashCode = (hashCode &* 31) &+ idno.hashValue
                }
                if hasSex {
                     hashCode = (hashCode &* 31) &+ sex.hashValue
                }
                if hasExp {
                    hashCode = (hashCode &* 31) &+ exp.hashValue
                }
                if hasLevel {
                    hashCode = (hashCode &* 31) &+ level.hashValue
                }
                if hasRealname {
                    hashCode = (hashCode &* 31) &+ realname.hashValue
                }
                if hasBindphone {
                    hashCode = (hashCode &* 31) &+ bindphone.hashValue
                }
                if hasBindqq {
                    hashCode = (hashCode &* 31) &+ bindqq.hashValue
                }
                if hasBindwx {
                    hashCode = (hashCode &* 31) &+ bindwx.hashValue
                }
                if hasInvitationCode {
                    hashCode = (hashCode &* 31) &+ invitationCode.hashValue
                }
                if hasPayPassword {
                    hashCode = (hashCode &* 31) &+ payPassword.hashValue
                }
                if hasPayOpenPassword {
                    hashCode = (hashCode &* 31) &+ payOpenPassword.hashValue
                }
                if hasLoginPassword {
                    hashCode = (hashCode &* 31) &+ loginPassword.hashValue
                }
                if hasUserInviteStatus {
                    hashCode = (hashCode &* 31) &+ userInviteStatus.hashValue
                }
                if hasIsDailyCheck {
                    hashCode = (hashCode &* 31) &+ isDailyCheck.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.UserInfo"
        }
        override public func className() -> String {
            return "Apiproto.UserInfo"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.UserInfo = Apiproto.UserInfo()
            public func getMessage() -> Apiproto.UserInfo {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            /// 唯一id
            public var accountId:Int64 {
                get {
                    return builderResult.accountId
                }
                set (value) {
                    builderResult.hasAccountId = true
                    builderResult.accountId = value
                }
            }
            public var hasAccountId:Bool {
                get {
                    return builderResult.hasAccountId
                }
            }
            @discardableResult
            public func setAccountId(_ value:Int64) -> Apiproto.UserInfo.Builder {
                self.accountId = value
                return self
            }
            @discardableResult
            public func clearAccountId() -> Apiproto.UserInfo.Builder{
                builderResult.hasAccountId = false
                builderResult.accountId = Int64(0)
                return self
            }
            /// 昵称
            public var nickname:String {
                get {
                    return builderResult.nickname
                }
                set (value) {
                    builderResult.hasNickname = true
                    builderResult.nickname = value
                }
            }
            public var hasNickname:Bool {
                get {
                    return builderResult.hasNickname
                }
            }
            @discardableResult
            public func setNickname(_ value:String) -> Apiproto.UserInfo.Builder {
                self.nickname = value
                return self
            }
            @discardableResult
            public func clearNickname() -> Apiproto.UserInfo.Builder{
                builderResult.hasNickname = false
                builderResult.nickname = ""
                return self
            }
            /// 头像
            public var icon:String {
                get {
                    return builderResult.icon
                }
                set (value) {
                    builderResult.hasIcon = true
                    builderResult.icon = value
                }
            }
            public var hasIcon:Bool {
                get {
                    return builderResult.hasIcon
                }
            }
            @discardableResult
            public func setIcon(_ value:String) -> Apiproto.UserInfo.Builder {
                self.icon = value
                return self
            }
            @discardableResult
            public func clearIcon() -> Apiproto.UserInfo.Builder{
                builderResult.hasIcon = false
                builderResult.icon = ""
                return self
            }
            /// 身份证号码
            public var idno:String {
                get {
                    return builderResult.idno
                }
                set (value) {
                    builderResult.hasIdno = true
                    builderResult.idno = value
                }
            }
            public var hasIdno:Bool {
                get {
                    return builderResult.hasIdno
                }
            }
            @discardableResult
            public func setIdno(_ value:String) -> Apiproto.UserInfo.Builder {
                self.idno = value
                return self
            }
            @discardableResult
            public func clearIdno() -> Apiproto.UserInfo.Builder{
                builderResult.hasIdno = false
                builderResult.idno = ""
                return self
            }
                public var sex:Apiproto.Sex {
                    get {
                        return builderResult.sex
                    }
                    set (value) {
                        builderResult.hasSex = true
                        builderResult.sex = value
                    }
                }
                public var hasSex:Bool{
                    get {
                        return builderResult.hasSex
                    }
                }
            @discardableResult
                public func setSex(_ value:Apiproto.Sex) -> Apiproto.UserInfo.Builder {
                  self.sex = value
                  return self
                }
            @discardableResult
                public func clearSex() -> Apiproto.UserInfo.Builder {
                   builderResult.hasSex = false
                   builderResult.sex = .unknown
                   return self
                }
            public var exp:Int32 {
                get {
                    return builderResult.exp
                }
                set (value) {
                    builderResult.hasExp = true
                    builderResult.exp = value
                }
            }
            public var hasExp:Bool {
                get {
                    return builderResult.hasExp
                }
            }
            @discardableResult
            public func setExp(_ value:Int32) -> Apiproto.UserInfo.Builder {
                self.exp = value
                return self
            }
            @discardableResult
            public func clearExp() -> Apiproto.UserInfo.Builder{
                builderResult.hasExp = false
                builderResult.exp = Int32(0)
                return self
            }
            public var level:Int32 {
                get {
                    return builderResult.level
                }
                set (value) {
                    builderResult.hasLevel = true
                    builderResult.level = value
                }
            }
            public var hasLevel:Bool {
                get {
                    return builderResult.hasLevel
                }
            }
            @discardableResult
            public func setLevel(_ value:Int32) -> Apiproto.UserInfo.Builder {
                self.level = value
                return self
            }
            @discardableResult
            public func clearLevel() -> Apiproto.UserInfo.Builder{
                builderResult.hasLevel = false
                builderResult.level = Int32(0)
                return self
            }
            public var realname:String {
                get {
                    return builderResult.realname
                }
                set (value) {
                    builderResult.hasRealname = true
                    builderResult.realname = value
                }
            }
            public var hasRealname:Bool {
                get {
                    return builderResult.hasRealname
                }
            }
            @discardableResult
            public func setRealname(_ value:String) -> Apiproto.UserInfo.Builder {
                self.realname = value
                return self
            }
            @discardableResult
            public func clearRealname() -> Apiproto.UserInfo.Builder{
                builderResult.hasRealname = false
                builderResult.realname = ""
                return self
            }
            /// 绑定手机号
            public var bindphone:String {
                get {
                    return builderResult.bindphone
                }
                set (value) {
                    builderResult.hasBindphone = true
                    builderResult.bindphone = value
                }
            }
            public var hasBindphone:Bool {
                get {
                    return builderResult.hasBindphone
                }
            }
            @discardableResult
            public func setBindphone(_ value:String) -> Apiproto.UserInfo.Builder {
                self.bindphone = value
                return self
            }
            @discardableResult
            public func clearBindphone() -> Apiproto.UserInfo.Builder{
                builderResult.hasBindphone = false
                builderResult.bindphone = ""
                return self
            }
            /// 绑定QQ openid
            public var bindqq:String {
                get {
                    return builderResult.bindqq
                }
                set (value) {
                    builderResult.hasBindqq = true
                    builderResult.bindqq = value
                }
            }
            public var hasBindqq:Bool {
                get {
                    return builderResult.hasBindqq
                }
            }
            @discardableResult
            public func setBindqq(_ value:String) -> Apiproto.UserInfo.Builder {
                self.bindqq = value
                return self
            }
            @discardableResult
            public func clearBindqq() -> Apiproto.UserInfo.Builder{
                builderResult.hasBindqq = false
                builderResult.bindqq = ""
                return self
            }
            /// 绑定微信 openid
            public var bindwx:String {
                get {
                    return builderResult.bindwx
                }
                set (value) {
                    builderResult.hasBindwx = true
                    builderResult.bindwx = value
                }
            }
            public var hasBindwx:Bool {
                get {
                    return builderResult.hasBindwx
                }
            }
            @discardableResult
            public func setBindwx(_ value:String) -> Apiproto.UserInfo.Builder {
                self.bindwx = value
                return self
            }
            @discardableResult
            public func clearBindwx() -> Apiproto.UserInfo.Builder{
                builderResult.hasBindwx = false
                builderResult.bindwx = ""
                return self
            }
            /// 邀请码
            public var invitationCode:String {
                get {
                    return builderResult.invitationCode
                }
                set (value) {
                    builderResult.hasInvitationCode = true
                    builderResult.invitationCode = value
                }
            }
            public var hasInvitationCode:Bool {
                get {
                    return builderResult.hasInvitationCode
                }
            }
            @discardableResult
            public func setInvitationCode(_ value:String) -> Apiproto.UserInfo.Builder {
                self.invitationCode = value
                return self
            }
            @discardableResult
            public func clearInvitationCode() -> Apiproto.UserInfo.Builder{
                builderResult.hasInvitationCode = false
                builderResult.invitationCode = ""
                return self
            }
            /// 是否设置支付密码
            public var payPassword:Bool {
                get {
                    return builderResult.payPassword
                }
                set (value) {
                    builderResult.hasPayPassword = true
                    builderResult.payPassword = value
                }
            }
            public var hasPayPassword:Bool {
                get {
                    return builderResult.hasPayPassword
                }
            }
            @discardableResult
            public func setPayPassword(_ value:Bool) -> Apiproto.UserInfo.Builder {
                self.payPassword = value
                return self
            }
            @discardableResult
            public func clearPayPassword() -> Apiproto.UserInfo.Builder{
                builderResult.hasPayPassword = false
                builderResult.payPassword = false
                return self
            }
            /// 是否开启支付密码
            public var payOpenPassword:Bool {
                get {
                    return builderResult.payOpenPassword
                }
                set (value) {
                    builderResult.hasPayOpenPassword = true
                    builderResult.payOpenPassword = value
                }
            }
            public var hasPayOpenPassword:Bool {
                get {
                    return builderResult.hasPayOpenPassword
                }
            }
            @discardableResult
            public func setPayOpenPassword(_ value:Bool) -> Apiproto.UserInfo.Builder {
                self.payOpenPassword = value
                return self
            }
            @discardableResult
            public func clearPayOpenPassword() -> Apiproto.UserInfo.Builder{
                builderResult.hasPayOpenPassword = false
                builderResult.payOpenPassword = false
                return self
            }
            /// 是否设置登陆密码
            public var loginPassword:Bool {
                get {
                    return builderResult.loginPassword
                }
                set (value) {
                    builderResult.hasLoginPassword = true
                    builderResult.loginPassword = value
                }
            }
            public var hasLoginPassword:Bool {
                get {
                    return builderResult.hasLoginPassword
                }
            }
            @discardableResult
            public func setLoginPassword(_ value:Bool) -> Apiproto.UserInfo.Builder {
                self.loginPassword = value
                return self
            }
            @discardableResult
            public func clearLoginPassword() -> Apiproto.UserInfo.Builder{
                builderResult.hasLoginPassword = false
                builderResult.loginPassword = false
                return self
            }
            ///true 为已经被邀请，false反之
            public var userInviteStatus:Bool {
                get {
                    return builderResult.userInviteStatus
                }
                set (value) {
                    builderResult.hasUserInviteStatus = true
                    builderResult.userInviteStatus = value
                }
            }
            public var hasUserInviteStatus:Bool {
                get {
                    return builderResult.hasUserInviteStatus
                }
            }
            @discardableResult
            public func setUserInviteStatus(_ value:Bool) -> Apiproto.UserInfo.Builder {
                self.userInviteStatus = value
                return self
            }
            @discardableResult
            public func clearUserInviteStatus() -> Apiproto.UserInfo.Builder{
                builderResult.hasUserInviteStatus = false
                builderResult.userInviteStatus = false
                return self
            }
            /// 当日是否已签到
            public var isDailyCheck:Bool {
                get {
                    return builderResult.isDailyCheck
                }
                set (value) {
                    builderResult.hasIsDailyCheck = true
                    builderResult.isDailyCheck = value
                }
            }
            public var hasIsDailyCheck:Bool {
                get {
                    return builderResult.hasIsDailyCheck
                }
            }
            @discardableResult
            public func setIsDailyCheck(_ value:Bool) -> Apiproto.UserInfo.Builder {
                self.isDailyCheck = value
                return self
            }
            @discardableResult
            public func clearIsDailyCheck() -> Apiproto.UserInfo.Builder{
                builderResult.hasIsDailyCheck = false
                builderResult.isDailyCheck = false
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.UserInfo.Builder {
                builderResult = Apiproto.UserInfo()
                return self
            }
            override public func clone() throws -> Apiproto.UserInfo.Builder {
                return try Apiproto.UserInfo.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.UserInfo {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.UserInfo {
                let returnMe:Apiproto.UserInfo = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.UserInfo) throws -> Apiproto.UserInfo.Builder {
                if other == Apiproto.UserInfo() {
                    return self
                }
                if other.hasAccountId {
                    accountId = other.accountId
                }
                if other.hasNickname {
                    nickname = other.nickname
                }
                if other.hasIcon {
                    icon = other.icon
                }
                if other.hasIdno {
                    idno = other.idno
                }
                if other.hasSex {
                    sex = other.sex
                }
                if other.hasExp {
                    exp = other.exp
                }
                if other.hasLevel {
                    level = other.level
                }
                if other.hasRealname {
                    realname = other.realname
                }
                if other.hasBindphone {
                    bindphone = other.bindphone
                }
                if other.hasBindqq {
                    bindqq = other.bindqq
                }
                if other.hasBindwx {
                    bindwx = other.bindwx
                }
                if other.hasInvitationCode {
                    invitationCode = other.invitationCode
                }
                if other.hasPayPassword {
                    payPassword = other.payPassword
                }
                if other.hasPayOpenPassword {
                    payOpenPassword = other.payOpenPassword
                }
                if other.hasLoginPassword {
                    loginPassword = other.loginPassword
                }
                if other.hasUserInviteStatus {
                    userInviteStatus = other.userInviteStatus
                }
                if other.hasIsDailyCheck {
                    isDailyCheck = other.isDailyCheck
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.UserInfo.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.UserInfo.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        accountId = try codedInputStream.readInt64()

                    case 18:
                        nickname = try codedInputStream.readString()

                    case 26:
                        icon = try codedInputStream.readString()

                    case 34:
                        idno = try codedInputStream.readString()

                    case 40:
                        let valueIntsex = try codedInputStream.readEnum()
                        if let enumssex = Apiproto.Sex(rawValue:valueIntsex){
                            sex = enumssex
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 5, value:Int64(valueIntsex))
                        }

                    case 48:
                        exp = try codedInputStream.readInt32()

                    case 56:
                        level = try codedInputStream.readInt32()

                    case 66:
                        realname = try codedInputStream.readString()

                    case 82:
                        bindphone = try codedInputStream.readString()

                    case 90:
                        bindqq = try codedInputStream.readString()

                    case 98:
                        bindwx = try codedInputStream.readString()

                    case 106:
                        invitationCode = try codedInputStream.readString()

                    case 112:
                        payPassword = try codedInputStream.readBool()

                    case 120:
                        payOpenPassword = try codedInputStream.readBool()

                    case 128:
                        loginPassword = try codedInputStream.readBool()

                    case 136:
                        userInviteStatus = try codedInputStream.readBool()

                    case 144:
                        isDailyCheck = try codedInputStream.readBool()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.UserInfo.Builder {
                let resultDecodedBuilder = Apiproto.UserInfo.Builder()
                if let jsonValueAccountId = jsonMap["accountId"] as? String {
                    resultDecodedBuilder.accountId = Int64(jsonValueAccountId)!
                } else if let jsonValueAccountId = jsonMap["accountId"] as? Int {
                    resultDecodedBuilder.accountId = Int64(jsonValueAccountId)
                }
                if let jsonValueNickname = jsonMap["nickname"] as? String {
                    resultDecodedBuilder.nickname = jsonValueNickname
                }
                if let jsonValueIcon = jsonMap["icon"] as? String {
                    resultDecodedBuilder.icon = jsonValueIcon
                }
                if let jsonValueIdno = jsonMap["idno"] as? String {
                    resultDecodedBuilder.idno = jsonValueIdno
                }
                if let jsonValueSex = jsonMap["sex"] as? String {
                    resultDecodedBuilder.sex = try Apiproto.Sex.fromString(str: jsonValueSex)
                }
                if let jsonValueExp = jsonMap["exp"] as? Int {
                    resultDecodedBuilder.exp = Int32(jsonValueExp)
                } else if let jsonValueExp = jsonMap["exp"] as? String {
                    resultDecodedBuilder.exp = Int32(jsonValueExp)!
                }
                if let jsonValueLevel = jsonMap["level"] as? Int {
                    resultDecodedBuilder.level = Int32(jsonValueLevel)
                } else if let jsonValueLevel = jsonMap["level"] as? String {
                    resultDecodedBuilder.level = Int32(jsonValueLevel)!
                }
                if let jsonValueRealname = jsonMap["realname"] as? String {
                    resultDecodedBuilder.realname = jsonValueRealname
                }
                if let jsonValueBindphone = jsonMap["bindphone"] as? String {
                    resultDecodedBuilder.bindphone = jsonValueBindphone
                }
                if let jsonValueBindqq = jsonMap["bindqq"] as? String {
                    resultDecodedBuilder.bindqq = jsonValueBindqq
                }
                if let jsonValueBindwx = jsonMap["bindwx"] as? String {
                    resultDecodedBuilder.bindwx = jsonValueBindwx
                }
                if let jsonValueInvitationCode = jsonMap["invitationCode"] as? String {
                    resultDecodedBuilder.invitationCode = jsonValueInvitationCode
                }
                if let jsonValuePayPassword = jsonMap["payPassword"] as? Bool {
                    resultDecodedBuilder.payPassword = jsonValuePayPassword
                }
                if let jsonValuePayOpenPassword = jsonMap["payOpenPassword"] as? Bool {
                    resultDecodedBuilder.payOpenPassword = jsonValuePayOpenPassword
                }
                if let jsonValueLoginPassword = jsonMap["loginPassword"] as? Bool {
                    resultDecodedBuilder.loginPassword = jsonValueLoginPassword
                }
                if let jsonValueUserInviteStatus = jsonMap["UserInviteStatus"] as? Bool {
                    resultDecodedBuilder.userInviteStatus = jsonValueUserInviteStatus
                }
                if let jsonValueIsDailyCheck = jsonMap["isDailyCheck"] as? Bool {
                    resultDecodedBuilder.isDailyCheck = jsonValueIsDailyCheck
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.UserInfo.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.UserInfo.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class RegistRequest : GeneratedMessage {

        public static func == (lhs: Apiproto.RegistRequest, rhs: Apiproto.RegistRequest) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasPhone == rhs.hasPhone) && (!lhs.hasPhone || lhs.phone == rhs.phone)
            fieldCheck = fieldCheck && (lhs.hasCode == rhs.hasCode) && (!lhs.hasCode || lhs.code == rhs.code)
            fieldCheck = fieldCheck && (lhs.hasPassword == rhs.hasPassword) && (!lhs.hasPassword || lhs.password == rhs.password)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var phone:String = ""
        public fileprivate(set) var hasPhone:Bool = false

        public fileprivate(set) var code:String = ""
        public fileprivate(set) var hasCode:Bool = false

        public fileprivate(set) var password:String = ""
        public fileprivate(set) var hasPassword:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasPhone {
                try codedOutputStream.writeString(fieldNumber: 1, value:phone)
            }
            if hasCode {
                try codedOutputStream.writeString(fieldNumber: 2, value:code)
            }
            if hasPassword {
                try codedOutputStream.writeString(fieldNumber: 3, value:password)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasPhone {
                serialize_size += phone.computeStringSize(fieldNumber: 1)
            }
            if hasCode {
                serialize_size += code.computeStringSize(fieldNumber: 2)
            }
            if hasPassword {
                serialize_size += password.computeStringSize(fieldNumber: 3)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.RegistRequest.Builder {
            return Apiproto.RegistRequest.classBuilder() as! Apiproto.RegistRequest.Builder
        }
        public func getBuilder() -> Apiproto.RegistRequest.Builder {
            return classBuilder() as! Apiproto.RegistRequest.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.RegistRequest.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.RegistRequest.Builder()
        }
        public func toBuilder() throws -> Apiproto.RegistRequest.Builder {
            return try Apiproto.RegistRequest.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.RegistRequest) throws -> Apiproto.RegistRequest.Builder {
            return try Apiproto.RegistRequest.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasPhone {
                jsonMap["phone"] = phone
            }
            if hasCode {
                jsonMap["code"] = code
            }
            if hasPassword {
                jsonMap["password"] = password
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.RegistRequest {
            return try Apiproto.RegistRequest.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.RegistRequest {
            return try Apiproto.RegistRequest.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasPhone {
                output += "\(indent) phone: \(phone) \n"
            }
            if hasCode {
                output += "\(indent) code: \(code) \n"
            }
            if hasPassword {
                output += "\(indent) password: \(password) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasPhone {
                    hashCode = (hashCode &* 31) &+ phone.hashValue
                }
                if hasCode {
                    hashCode = (hashCode &* 31) &+ code.hashValue
                }
                if hasPassword {
                    hashCode = (hashCode &* 31) &+ password.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.RegistRequest"
        }
        override public func className() -> String {
            return "Apiproto.RegistRequest"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.RegistRequest = Apiproto.RegistRequest()
            public func getMessage() -> Apiproto.RegistRequest {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var phone:String {
                get {
                    return builderResult.phone
                }
                set (value) {
                    builderResult.hasPhone = true
                    builderResult.phone = value
                }
            }
            public var hasPhone:Bool {
                get {
                    return builderResult.hasPhone
                }
            }
            @discardableResult
            public func setPhone(_ value:String) -> Apiproto.RegistRequest.Builder {
                self.phone = value
                return self
            }
            @discardableResult
            public func clearPhone() -> Apiproto.RegistRequest.Builder{
                builderResult.hasPhone = false
                builderResult.phone = ""
                return self
            }
            public var code:String {
                get {
                    return builderResult.code
                }
                set (value) {
                    builderResult.hasCode = true
                    builderResult.code = value
                }
            }
            public var hasCode:Bool {
                get {
                    return builderResult.hasCode
                }
            }
            @discardableResult
            public func setCode(_ value:String) -> Apiproto.RegistRequest.Builder {
                self.code = value
                return self
            }
            @discardableResult
            public func clearCode() -> Apiproto.RegistRequest.Builder{
                builderResult.hasCode = false
                builderResult.code = ""
                return self
            }
            public var password:String {
                get {
                    return builderResult.password
                }
                set (value) {
                    builderResult.hasPassword = true
                    builderResult.password = value
                }
            }
            public var hasPassword:Bool {
                get {
                    return builderResult.hasPassword
                }
            }
            @discardableResult
            public func setPassword(_ value:String) -> Apiproto.RegistRequest.Builder {
                self.password = value
                return self
            }
            @discardableResult
            public func clearPassword() -> Apiproto.RegistRequest.Builder{
                builderResult.hasPassword = false
                builderResult.password = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.RegistRequest.Builder {
                builderResult = Apiproto.RegistRequest()
                return self
            }
            override public func clone() throws -> Apiproto.RegistRequest.Builder {
                return try Apiproto.RegistRequest.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.RegistRequest {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.RegistRequest {
                let returnMe:Apiproto.RegistRequest = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.RegistRequest) throws -> Apiproto.RegistRequest.Builder {
                if other == Apiproto.RegistRequest() {
                    return self
                }
                if other.hasPhone {
                    phone = other.phone
                }
                if other.hasCode {
                    code = other.code
                }
                if other.hasPassword {
                    password = other.password
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.RegistRequest.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.RegistRequest.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        phone = try codedInputStream.readString()

                    case 18:
                        code = try codedInputStream.readString()

                    case 26:
                        password = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.RegistRequest.Builder {
                let resultDecodedBuilder = Apiproto.RegistRequest.Builder()
                if let jsonValuePhone = jsonMap["phone"] as? String {
                    resultDecodedBuilder.phone = jsonValuePhone
                }
                if let jsonValueCode = jsonMap["code"] as? String {
                    resultDecodedBuilder.code = jsonValueCode
                }
                if let jsonValuePassword = jsonMap["password"] as? String {
                    resultDecodedBuilder.password = jsonValuePassword
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.RegistRequest.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.RegistRequest.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class LoginRequest : GeneratedMessage {

        public static func == (lhs: Apiproto.LoginRequest, rhs: Apiproto.LoginRequest) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasType == rhs.hasType) && (!lhs.hasType || lhs.type == rhs.type)
            fieldCheck = fieldCheck && (lhs.hasPhone == rhs.hasPhone) && (!lhs.hasPhone || lhs.phone == rhs.phone)
            fieldCheck = fieldCheck && (lhs.hasPassword == rhs.hasPassword) && (!lhs.hasPassword || lhs.password == rhs.password)
            fieldCheck = fieldCheck && (lhs.hasOpenid == rhs.hasOpenid) && (!lhs.hasOpenid || lhs.openid == rhs.openid)
            fieldCheck = fieldCheck && (lhs.hasAccessToken == rhs.hasAccessToken) && (!lhs.hasAccessToken || lhs.accessToken == rhs.accessToken)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var type:Apiproto.UserType = Apiproto.UserType.phone
        public fileprivate(set) var hasType:Bool = false
        public fileprivate(set) var phone:String = ""
        public fileprivate(set) var hasPhone:Bool = false

        public fileprivate(set) var password:String = ""
        public fileprivate(set) var hasPassword:Bool = false

        public fileprivate(set) var openid:String = ""
        public fileprivate(set) var hasOpenid:Bool = false

        public fileprivate(set) var accessToken:String = ""
        public fileprivate(set) var hasAccessToken:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasType {
                try codedOutputStream.writeEnum(fieldNumber: 1, value:type.rawValue)
            }
            if hasPhone {
                try codedOutputStream.writeString(fieldNumber: 2, value:phone)
            }
            if hasPassword {
                try codedOutputStream.writeString(fieldNumber: 3, value:password)
            }
            if hasOpenid {
                try codedOutputStream.writeString(fieldNumber: 4, value:openid)
            }
            if hasAccessToken {
                try codedOutputStream.writeString(fieldNumber: 5, value:accessToken)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if (hasType) {
                serialize_size += type.rawValue.computeEnumSize(fieldNumber: 1)
            }
            if hasPhone {
                serialize_size += phone.computeStringSize(fieldNumber: 2)
            }
            if hasPassword {
                serialize_size += password.computeStringSize(fieldNumber: 3)
            }
            if hasOpenid {
                serialize_size += openid.computeStringSize(fieldNumber: 4)
            }
            if hasAccessToken {
                serialize_size += accessToken.computeStringSize(fieldNumber: 5)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.LoginRequest.Builder {
            return Apiproto.LoginRequest.classBuilder() as! Apiproto.LoginRequest.Builder
        }
        public func getBuilder() -> Apiproto.LoginRequest.Builder {
            return classBuilder() as! Apiproto.LoginRequest.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.LoginRequest.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.LoginRequest.Builder()
        }
        public func toBuilder() throws -> Apiproto.LoginRequest.Builder {
            return try Apiproto.LoginRequest.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.LoginRequest) throws -> Apiproto.LoginRequest.Builder {
            return try Apiproto.LoginRequest.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasType {
                jsonMap["type"] = type.toString()
            }
            if hasPhone {
                jsonMap["phone"] = phone
            }
            if hasPassword {
                jsonMap["password"] = password
            }
            if hasOpenid {
                jsonMap["openid"] = openid
            }
            if hasAccessToken {
                jsonMap["accessToken"] = accessToken
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.LoginRequest {
            return try Apiproto.LoginRequest.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.LoginRequest {
            return try Apiproto.LoginRequest.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if (hasType) {
                output += "\(indent) type: \(type.description)\n"
            }
            if hasPhone {
                output += "\(indent) phone: \(phone) \n"
            }
            if hasPassword {
                output += "\(indent) password: \(password) \n"
            }
            if hasOpenid {
                output += "\(indent) openid: \(openid) \n"
            }
            if hasAccessToken {
                output += "\(indent) accessToken: \(accessToken) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasType {
                     hashCode = (hashCode &* 31) &+ type.hashValue
                }
                if hasPhone {
                    hashCode = (hashCode &* 31) &+ phone.hashValue
                }
                if hasPassword {
                    hashCode = (hashCode &* 31) &+ password.hashValue
                }
                if hasOpenid {
                    hashCode = (hashCode &* 31) &+ openid.hashValue
                }
                if hasAccessToken {
                    hashCode = (hashCode &* 31) &+ accessToken.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.LoginRequest"
        }
        override public func className() -> String {
            return "Apiproto.LoginRequest"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.LoginRequest = Apiproto.LoginRequest()
            public func getMessage() -> Apiproto.LoginRequest {
                return builderResult
            }

            required override public init () {
                super.init()
            }
                public var type:Apiproto.UserType {
                    get {
                        return builderResult.type
                    }
                    set (value) {
                        builderResult.hasType = true
                        builderResult.type = value
                    }
                }
                public var hasType:Bool{
                    get {
                        return builderResult.hasType
                    }
                }
            @discardableResult
                public func setType(_ value:Apiproto.UserType) -> Apiproto.LoginRequest.Builder {
                  self.type = value
                  return self
                }
            @discardableResult
                public func clearType() -> Apiproto.LoginRequest.Builder {
                   builderResult.hasType = false
                   builderResult.type = .phone
                   return self
                }
            public var phone:String {
                get {
                    return builderResult.phone
                }
                set (value) {
                    builderResult.hasPhone = true
                    builderResult.phone = value
                }
            }
            public var hasPhone:Bool {
                get {
                    return builderResult.hasPhone
                }
            }
            @discardableResult
            public func setPhone(_ value:String) -> Apiproto.LoginRequest.Builder {
                self.phone = value
                return self
            }
            @discardableResult
            public func clearPhone() -> Apiproto.LoginRequest.Builder{
                builderResult.hasPhone = false
                builderResult.phone = ""
                return self
            }
            public var password:String {
                get {
                    return builderResult.password
                }
                set (value) {
                    builderResult.hasPassword = true
                    builderResult.password = value
                }
            }
            public var hasPassword:Bool {
                get {
                    return builderResult.hasPassword
                }
            }
            @discardableResult
            public func setPassword(_ value:String) -> Apiproto.LoginRequest.Builder {
                self.password = value
                return self
            }
            @discardableResult
            public func clearPassword() -> Apiproto.LoginRequest.Builder{
                builderResult.hasPassword = false
                builderResult.password = ""
                return self
            }
            public var openid:String {
                get {
                    return builderResult.openid
                }
                set (value) {
                    builderResult.hasOpenid = true
                    builderResult.openid = value
                }
            }
            public var hasOpenid:Bool {
                get {
                    return builderResult.hasOpenid
                }
            }
            @discardableResult
            public func setOpenid(_ value:String) -> Apiproto.LoginRequest.Builder {
                self.openid = value
                return self
            }
            @discardableResult
            public func clearOpenid() -> Apiproto.LoginRequest.Builder{
                builderResult.hasOpenid = false
                builderResult.openid = ""
                return self
            }
            public var accessToken:String {
                get {
                    return builderResult.accessToken
                }
                set (value) {
                    builderResult.hasAccessToken = true
                    builderResult.accessToken = value
                }
            }
            public var hasAccessToken:Bool {
                get {
                    return builderResult.hasAccessToken
                }
            }
            @discardableResult
            public func setAccessToken(_ value:String) -> Apiproto.LoginRequest.Builder {
                self.accessToken = value
                return self
            }
            @discardableResult
            public func clearAccessToken() -> Apiproto.LoginRequest.Builder{
                builderResult.hasAccessToken = false
                builderResult.accessToken = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.LoginRequest.Builder {
                builderResult = Apiproto.LoginRequest()
                return self
            }
            override public func clone() throws -> Apiproto.LoginRequest.Builder {
                return try Apiproto.LoginRequest.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.LoginRequest {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.LoginRequest {
                let returnMe:Apiproto.LoginRequest = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.LoginRequest) throws -> Apiproto.LoginRequest.Builder {
                if other == Apiproto.LoginRequest() {
                    return self
                }
                if other.hasType {
                    type = other.type
                }
                if other.hasPhone {
                    phone = other.phone
                }
                if other.hasPassword {
                    password = other.password
                }
                if other.hasOpenid {
                    openid = other.openid
                }
                if other.hasAccessToken {
                    accessToken = other.accessToken
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.LoginRequest.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.LoginRequest.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        let valueInttype = try codedInputStream.readEnum()
                        if let enumstype = Apiproto.UserType(rawValue:valueInttype){
                            type = enumstype
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 1, value:Int64(valueInttype))
                        }

                    case 18:
                        phone = try codedInputStream.readString()

                    case 26:
                        password = try codedInputStream.readString()

                    case 34:
                        openid = try codedInputStream.readString()

                    case 42:
                        accessToken = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.LoginRequest.Builder {
                let resultDecodedBuilder = Apiproto.LoginRequest.Builder()
                if let jsonValueType = jsonMap["type"] as? String {
                    resultDecodedBuilder.type = try Apiproto.UserType.fromString(str: jsonValueType)
                }
                if let jsonValuePhone = jsonMap["phone"] as? String {
                    resultDecodedBuilder.phone = jsonValuePhone
                }
                if let jsonValuePassword = jsonMap["password"] as? String {
                    resultDecodedBuilder.password = jsonValuePassword
                }
                if let jsonValueOpenid = jsonMap["openid"] as? String {
                    resultDecodedBuilder.openid = jsonValueOpenid
                }
                if let jsonValueAccessToken = jsonMap["accessToken"] as? String {
                    resultDecodedBuilder.accessToken = jsonValueAccessToken
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.LoginRequest.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.LoginRequest.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class LoginReply : GeneratedMessage {

        public static func == (lhs: Apiproto.LoginReply, rhs: Apiproto.LoginReply) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasUser == rhs.hasUser) && (!lhs.hasUser || lhs.user == rhs.user)
            fieldCheck = fieldCheck && (lhs.hasFund == rhs.hasFund) && (!lhs.hasFund || lhs.fund == rhs.fund)
            fieldCheck = fieldCheck && (lhs.hasBankcard == rhs.hasBankcard) && (!lhs.hasBankcard || lhs.bankcard == rhs.bankcard)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var user:Apiproto.UserInfo!
        public fileprivate(set) var hasUser:Bool = false
        public fileprivate(set) var fund:Apiproto.FundInfo!
        public fileprivate(set) var hasFund:Bool = false
        public fileprivate(set) var bankcard:Apiproto.Bankcard!
        public fileprivate(set) var hasBankcard:Bool = false
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasUser {
                try codedOutputStream.writeMessage(fieldNumber: 1, value:user)
            }
            if hasFund {
                try codedOutputStream.writeMessage(fieldNumber: 2, value:fund)
            }
            if hasBankcard {
                try codedOutputStream.writeMessage(fieldNumber: 3, value:bankcard)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasUser {
                if let varSizeuser = user?.computeMessageSize(fieldNumber: 1) {
                    serialize_size += varSizeuser
                }
            }
            if hasFund {
                if let varSizefund = fund?.computeMessageSize(fieldNumber: 2) {
                    serialize_size += varSizefund
                }
            }
            if hasBankcard {
                if let varSizebankcard = bankcard?.computeMessageSize(fieldNumber: 3) {
                    serialize_size += varSizebankcard
                }
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.LoginReply.Builder {
            return Apiproto.LoginReply.classBuilder() as! Apiproto.LoginReply.Builder
        }
        public func getBuilder() -> Apiproto.LoginReply.Builder {
            return classBuilder() as! Apiproto.LoginReply.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.LoginReply.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.LoginReply.Builder()
        }
        public func toBuilder() throws -> Apiproto.LoginReply.Builder {
            return try Apiproto.LoginReply.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.LoginReply) throws -> Apiproto.LoginReply.Builder {
            return try Apiproto.LoginReply.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasUser {
                jsonMap["user"] = try user.encode()
            }
            if hasFund {
                jsonMap["fund"] = try fund.encode()
            }
            if hasBankcard {
                jsonMap["bankcard"] = try bankcard.encode()
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.LoginReply {
            return try Apiproto.LoginReply.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.LoginReply {
            return try Apiproto.LoginReply.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasUser {
                output += "\(indent) user {\n"
                if let outDescUser = user {
                    output += try outDescUser.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            if hasFund {
                output += "\(indent) fund {\n"
                if let outDescFund = fund {
                    output += try outDescFund.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            if hasBankcard {
                output += "\(indent) bankcard {\n"
                if let outDescBankcard = bankcard {
                    output += try outDescBankcard.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasUser {
                    if let hashValueuser = user?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValueuser
                    }
                }
                if hasFund {
                    if let hashValuefund = fund?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValuefund
                    }
                }
                if hasBankcard {
                    if let hashValuebankcard = bankcard?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValuebankcard
                    }
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.LoginReply"
        }
        override public func className() -> String {
            return "Apiproto.LoginReply"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.LoginReply = Apiproto.LoginReply()
            public func getMessage() -> Apiproto.LoginReply {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            /// 用户信息 
            public var user:Apiproto.UserInfo! {
                get {
                    if userBuilder_ != nil {
                        builderResult.user = userBuilder_.getMessage()
                    }
                    return builderResult.user
                }
                set (value) {
                    builderResult.hasUser = true
                    builderResult.user = value
                }
            }
            public var hasUser:Bool {
                get {
                    return builderResult.hasUser
                }
            }
            fileprivate var userBuilder_:Apiproto.UserInfo.Builder! {
                didSet {
                    builderResult.hasUser = true
                }
            }
            public func getUserBuilder() -> Apiproto.UserInfo.Builder {
                if userBuilder_ == nil {
                    userBuilder_ = Apiproto.UserInfo.Builder()
                    builderResult.user = userBuilder_.getMessage()
                    if user != nil {
                        try! userBuilder_.mergeFrom(other: user)
                    }
                }
                return userBuilder_
            }
            @discardableResult
            public func setUser(_ value:Apiproto.UserInfo!) -> Apiproto.LoginReply.Builder {
                self.user = value
                return self
            }
            @discardableResult
            public func mergeUser(value:Apiproto.UserInfo) throws -> Apiproto.LoginReply.Builder {
                if builderResult.hasUser {
                    builderResult.user = try Apiproto.UserInfo.builderWithPrototype(prototype:builderResult.user).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.user = value
                }
                builderResult.hasUser = true
                return self
            }
            @discardableResult
            public func clearUser() -> Apiproto.LoginReply.Builder {
                userBuilder_ = nil
                builderResult.hasUser = false
                builderResult.user = nil
                return self
            }
            /// 资产信息
            public var fund:Apiproto.FundInfo! {
                get {
                    if fundBuilder_ != nil {
                        builderResult.fund = fundBuilder_.getMessage()
                    }
                    return builderResult.fund
                }
                set (value) {
                    builderResult.hasFund = true
                    builderResult.fund = value
                }
            }
            public var hasFund:Bool {
                get {
                    return builderResult.hasFund
                }
            }
            fileprivate var fundBuilder_:Apiproto.FundInfo.Builder! {
                didSet {
                    builderResult.hasFund = true
                }
            }
            public func getFundBuilder() -> Apiproto.FundInfo.Builder {
                if fundBuilder_ == nil {
                    fundBuilder_ = Apiproto.FundInfo.Builder()
                    builderResult.fund = fundBuilder_.getMessage()
                    if fund != nil {
                        try! fundBuilder_.mergeFrom(other: fund)
                    }
                }
                return fundBuilder_
            }
            @discardableResult
            public func setFund(_ value:Apiproto.FundInfo!) -> Apiproto.LoginReply.Builder {
                self.fund = value
                return self
            }
            @discardableResult
            public func mergeFund(value:Apiproto.FundInfo) throws -> Apiproto.LoginReply.Builder {
                if builderResult.hasFund {
                    builderResult.fund = try Apiproto.FundInfo.builderWithPrototype(prototype:builderResult.fund).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.fund = value
                }
                builderResult.hasFund = true
                return self
            }
            @discardableResult
            public func clearFund() -> Apiproto.LoginReply.Builder {
                fundBuilder_ = nil
                builderResult.hasFund = false
                builderResult.fund = nil
                return self
            }
            /// 绑定银行卡
            public var bankcard:Apiproto.Bankcard! {
                get {
                    if bankcardBuilder_ != nil {
                        builderResult.bankcard = bankcardBuilder_.getMessage()
                    }
                    return builderResult.bankcard
                }
                set (value) {
                    builderResult.hasBankcard = true
                    builderResult.bankcard = value
                }
            }
            public var hasBankcard:Bool {
                get {
                    return builderResult.hasBankcard
                }
            }
            fileprivate var bankcardBuilder_:Apiproto.Bankcard.Builder! {
                didSet {
                    builderResult.hasBankcard = true
                }
            }
            public func getBankcardBuilder() -> Apiproto.Bankcard.Builder {
                if bankcardBuilder_ == nil {
                    bankcardBuilder_ = Apiproto.Bankcard.Builder()
                    builderResult.bankcard = bankcardBuilder_.getMessage()
                    if bankcard != nil {
                        try! bankcardBuilder_.mergeFrom(other: bankcard)
                    }
                }
                return bankcardBuilder_
            }
            @discardableResult
            public func setBankcard(_ value:Apiproto.Bankcard!) -> Apiproto.LoginReply.Builder {
                self.bankcard = value
                return self
            }
            @discardableResult
            public func mergeBankcard(value:Apiproto.Bankcard) throws -> Apiproto.LoginReply.Builder {
                if builderResult.hasBankcard {
                    builderResult.bankcard = try Apiproto.Bankcard.builderWithPrototype(prototype:builderResult.bankcard).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.bankcard = value
                }
                builderResult.hasBankcard = true
                return self
            }
            @discardableResult
            public func clearBankcard() -> Apiproto.LoginReply.Builder {
                bankcardBuilder_ = nil
                builderResult.hasBankcard = false
                builderResult.bankcard = nil
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.LoginReply.Builder {
                builderResult = Apiproto.LoginReply()
                return self
            }
            override public func clone() throws -> Apiproto.LoginReply.Builder {
                return try Apiproto.LoginReply.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.LoginReply {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.LoginReply {
                let returnMe:Apiproto.LoginReply = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.LoginReply) throws -> Apiproto.LoginReply.Builder {
                if other == Apiproto.LoginReply() {
                    return self
                }
                if (other.hasUser) {
                    try mergeUser(value: other.user)
                }
                if (other.hasFund) {
                    try mergeFund(value: other.fund)
                }
                if (other.hasBankcard) {
                    try mergeBankcard(value: other.bankcard)
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.LoginReply.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.LoginReply.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        let subBuilder:Apiproto.UserInfo.Builder = Apiproto.UserInfo.Builder()
                        if hasUser {
                            try subBuilder.mergeFrom(other: user)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        user = subBuilder.buildPartial()

                    case 18:
                        let subBuilder:Apiproto.FundInfo.Builder = Apiproto.FundInfo.Builder()
                        if hasFund {
                            try subBuilder.mergeFrom(other: fund)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        fund = subBuilder.buildPartial()

                    case 26:
                        let subBuilder:Apiproto.Bankcard.Builder = Apiproto.Bankcard.Builder()
                        if hasBankcard {
                            try subBuilder.mergeFrom(other: bankcard)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        bankcard = subBuilder.buildPartial()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.LoginReply.Builder {
                let resultDecodedBuilder = Apiproto.LoginReply.Builder()
                if let jsonValueUser = jsonMap["user"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.user = try Apiproto.UserInfo.Builder.decodeToBuilder(jsonMap:jsonValueUser).build()

                }
                if let jsonValueFund = jsonMap["fund"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.fund = try Apiproto.FundInfo.Builder.decodeToBuilder(jsonMap:jsonValueFund).build()

                }
                if let jsonValueBankcard = jsonMap["bankcard"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.bankcard = try Apiproto.Bankcard.Builder.decodeToBuilder(jsonMap:jsonValueBankcard).build()

                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.LoginReply.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.LoginReply.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class ForgotPwdRequest : GeneratedMessage {

        public static func == (lhs: Apiproto.ForgotPwdRequest, rhs: Apiproto.ForgotPwdRequest) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasPhone == rhs.hasPhone) && (!lhs.hasPhone || lhs.phone == rhs.phone)
            fieldCheck = fieldCheck && (lhs.hasCode == rhs.hasCode) && (!lhs.hasCode || lhs.code == rhs.code)
            fieldCheck = fieldCheck && (lhs.hasPassword == rhs.hasPassword) && (!lhs.hasPassword || lhs.password == rhs.password)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var phone:String = ""
        public fileprivate(set) var hasPhone:Bool = false

        public fileprivate(set) var code:String = ""
        public fileprivate(set) var hasCode:Bool = false

        public fileprivate(set) var password:String = ""
        public fileprivate(set) var hasPassword:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasPhone {
                try codedOutputStream.writeString(fieldNumber: 1, value:phone)
            }
            if hasCode {
                try codedOutputStream.writeString(fieldNumber: 2, value:code)
            }
            if hasPassword {
                try codedOutputStream.writeString(fieldNumber: 3, value:password)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasPhone {
                serialize_size += phone.computeStringSize(fieldNumber: 1)
            }
            if hasCode {
                serialize_size += code.computeStringSize(fieldNumber: 2)
            }
            if hasPassword {
                serialize_size += password.computeStringSize(fieldNumber: 3)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.ForgotPwdRequest.Builder {
            return Apiproto.ForgotPwdRequest.classBuilder() as! Apiproto.ForgotPwdRequest.Builder
        }
        public func getBuilder() -> Apiproto.ForgotPwdRequest.Builder {
            return classBuilder() as! Apiproto.ForgotPwdRequest.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.ForgotPwdRequest.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.ForgotPwdRequest.Builder()
        }
        public func toBuilder() throws -> Apiproto.ForgotPwdRequest.Builder {
            return try Apiproto.ForgotPwdRequest.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.ForgotPwdRequest) throws -> Apiproto.ForgotPwdRequest.Builder {
            return try Apiproto.ForgotPwdRequest.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasPhone {
                jsonMap["phone"] = phone
            }
            if hasCode {
                jsonMap["code"] = code
            }
            if hasPassword {
                jsonMap["password"] = password
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.ForgotPwdRequest {
            return try Apiproto.ForgotPwdRequest.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.ForgotPwdRequest {
            return try Apiproto.ForgotPwdRequest.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasPhone {
                output += "\(indent) phone: \(phone) \n"
            }
            if hasCode {
                output += "\(indent) code: \(code) \n"
            }
            if hasPassword {
                output += "\(indent) password: \(password) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasPhone {
                    hashCode = (hashCode &* 31) &+ phone.hashValue
                }
                if hasCode {
                    hashCode = (hashCode &* 31) &+ code.hashValue
                }
                if hasPassword {
                    hashCode = (hashCode &* 31) &+ password.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.ForgotPwdRequest"
        }
        override public func className() -> String {
            return "Apiproto.ForgotPwdRequest"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.ForgotPwdRequest = Apiproto.ForgotPwdRequest()
            public func getMessage() -> Apiproto.ForgotPwdRequest {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var phone:String {
                get {
                    return builderResult.phone
                }
                set (value) {
                    builderResult.hasPhone = true
                    builderResult.phone = value
                }
            }
            public var hasPhone:Bool {
                get {
                    return builderResult.hasPhone
                }
            }
            @discardableResult
            public func setPhone(_ value:String) -> Apiproto.ForgotPwdRequest.Builder {
                self.phone = value
                return self
            }
            @discardableResult
            public func clearPhone() -> Apiproto.ForgotPwdRequest.Builder{
                builderResult.hasPhone = false
                builderResult.phone = ""
                return self
            }
            public var code:String {
                get {
                    return builderResult.code
                }
                set (value) {
                    builderResult.hasCode = true
                    builderResult.code = value
                }
            }
            public var hasCode:Bool {
                get {
                    return builderResult.hasCode
                }
            }
            @discardableResult
            public func setCode(_ value:String) -> Apiproto.ForgotPwdRequest.Builder {
                self.code = value
                return self
            }
            @discardableResult
            public func clearCode() -> Apiproto.ForgotPwdRequest.Builder{
                builderResult.hasCode = false
                builderResult.code = ""
                return self
            }
            public var password:String {
                get {
                    return builderResult.password
                }
                set (value) {
                    builderResult.hasPassword = true
                    builderResult.password = value
                }
            }
            public var hasPassword:Bool {
                get {
                    return builderResult.hasPassword
                }
            }
            @discardableResult
            public func setPassword(_ value:String) -> Apiproto.ForgotPwdRequest.Builder {
                self.password = value
                return self
            }
            @discardableResult
            public func clearPassword() -> Apiproto.ForgotPwdRequest.Builder{
                builderResult.hasPassword = false
                builderResult.password = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.ForgotPwdRequest.Builder {
                builderResult = Apiproto.ForgotPwdRequest()
                return self
            }
            override public func clone() throws -> Apiproto.ForgotPwdRequest.Builder {
                return try Apiproto.ForgotPwdRequest.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.ForgotPwdRequest {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.ForgotPwdRequest {
                let returnMe:Apiproto.ForgotPwdRequest = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.ForgotPwdRequest) throws -> Apiproto.ForgotPwdRequest.Builder {
                if other == Apiproto.ForgotPwdRequest() {
                    return self
                }
                if other.hasPhone {
                    phone = other.phone
                }
                if other.hasCode {
                    code = other.code
                }
                if other.hasPassword {
                    password = other.password
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.ForgotPwdRequest.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.ForgotPwdRequest.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        phone = try codedInputStream.readString()

                    case 18:
                        code = try codedInputStream.readString()

                    case 26:
                        password = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.ForgotPwdRequest.Builder {
                let resultDecodedBuilder = Apiproto.ForgotPwdRequest.Builder()
                if let jsonValuePhone = jsonMap["phone"] as? String {
                    resultDecodedBuilder.phone = jsonValuePhone
                }
                if let jsonValueCode = jsonMap["code"] as? String {
                    resultDecodedBuilder.code = jsonValueCode
                }
                if let jsonValuePassword = jsonMap["password"] as? String {
                    resultDecodedBuilder.password = jsonValuePassword
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.ForgotPwdRequest.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.ForgotPwdRequest.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class ForgotPayPwdRequest : GeneratedMessage {

        public static func == (lhs: Apiproto.ForgotPayPwdRequest, rhs: Apiproto.ForgotPayPwdRequest) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasPhone == rhs.hasPhone) && (!lhs.hasPhone || lhs.phone == rhs.phone)
            fieldCheck = fieldCheck && (lhs.hasLoginPassword == rhs.hasLoginPassword) && (!lhs.hasLoginPassword || lhs.loginPassword == rhs.loginPassword)
            fieldCheck = fieldCheck && (lhs.hasCode == rhs.hasCode) && (!lhs.hasCode || lhs.code == rhs.code)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        /// 绑定手机号
        public fileprivate(set) var phone:String = ""
        public fileprivate(set) var hasPhone:Bool = false

        /// 登录密码
        public fileprivate(set) var loginPassword:String = ""
        public fileprivate(set) var hasLoginPassword:Bool = false

        /// 验证码
        public fileprivate(set) var code:String = ""
        public fileprivate(set) var hasCode:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasPhone {
                try codedOutputStream.writeString(fieldNumber: 1, value:phone)
            }
            if hasLoginPassword {
                try codedOutputStream.writeString(fieldNumber: 2, value:loginPassword)
            }
            if hasCode {
                try codedOutputStream.writeString(fieldNumber: 3, value:code)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasPhone {
                serialize_size += phone.computeStringSize(fieldNumber: 1)
            }
            if hasLoginPassword {
                serialize_size += loginPassword.computeStringSize(fieldNumber: 2)
            }
            if hasCode {
                serialize_size += code.computeStringSize(fieldNumber: 3)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.ForgotPayPwdRequest.Builder {
            return Apiproto.ForgotPayPwdRequest.classBuilder() as! Apiproto.ForgotPayPwdRequest.Builder
        }
        public func getBuilder() -> Apiproto.ForgotPayPwdRequest.Builder {
            return classBuilder() as! Apiproto.ForgotPayPwdRequest.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.ForgotPayPwdRequest.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.ForgotPayPwdRequest.Builder()
        }
        public func toBuilder() throws -> Apiproto.ForgotPayPwdRequest.Builder {
            return try Apiproto.ForgotPayPwdRequest.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.ForgotPayPwdRequest) throws -> Apiproto.ForgotPayPwdRequest.Builder {
            return try Apiproto.ForgotPayPwdRequest.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasPhone {
                jsonMap["phone"] = phone
            }
            if hasLoginPassword {
                jsonMap["loginPassword"] = loginPassword
            }
            if hasCode {
                jsonMap["code"] = code
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.ForgotPayPwdRequest {
            return try Apiproto.ForgotPayPwdRequest.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.ForgotPayPwdRequest {
            return try Apiproto.ForgotPayPwdRequest.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasPhone {
                output += "\(indent) phone: \(phone) \n"
            }
            if hasLoginPassword {
                output += "\(indent) loginPassword: \(loginPassword) \n"
            }
            if hasCode {
                output += "\(indent) code: \(code) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasPhone {
                    hashCode = (hashCode &* 31) &+ phone.hashValue
                }
                if hasLoginPassword {
                    hashCode = (hashCode &* 31) &+ loginPassword.hashValue
                }
                if hasCode {
                    hashCode = (hashCode &* 31) &+ code.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.ForgotPayPwdRequest"
        }
        override public func className() -> String {
            return "Apiproto.ForgotPayPwdRequest"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.ForgotPayPwdRequest = Apiproto.ForgotPayPwdRequest()
            public func getMessage() -> Apiproto.ForgotPayPwdRequest {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            /// 绑定手机号
            public var phone:String {
                get {
                    return builderResult.phone
                }
                set (value) {
                    builderResult.hasPhone = true
                    builderResult.phone = value
                }
            }
            public var hasPhone:Bool {
                get {
                    return builderResult.hasPhone
                }
            }
            @discardableResult
            public func setPhone(_ value:String) -> Apiproto.ForgotPayPwdRequest.Builder {
                self.phone = value
                return self
            }
            @discardableResult
            public func clearPhone() -> Apiproto.ForgotPayPwdRequest.Builder{
                builderResult.hasPhone = false
                builderResult.phone = ""
                return self
            }
            /// 登录密码
            public var loginPassword:String {
                get {
                    return builderResult.loginPassword
                }
                set (value) {
                    builderResult.hasLoginPassword = true
                    builderResult.loginPassword = value
                }
            }
            public var hasLoginPassword:Bool {
                get {
                    return builderResult.hasLoginPassword
                }
            }
            @discardableResult
            public func setLoginPassword(_ value:String) -> Apiproto.ForgotPayPwdRequest.Builder {
                self.loginPassword = value
                return self
            }
            @discardableResult
            public func clearLoginPassword() -> Apiproto.ForgotPayPwdRequest.Builder{
                builderResult.hasLoginPassword = false
                builderResult.loginPassword = ""
                return self
            }
            /// 验证码
            public var code:String {
                get {
                    return builderResult.code
                }
                set (value) {
                    builderResult.hasCode = true
                    builderResult.code = value
                }
            }
            public var hasCode:Bool {
                get {
                    return builderResult.hasCode
                }
            }
            @discardableResult
            public func setCode(_ value:String) -> Apiproto.ForgotPayPwdRequest.Builder {
                self.code = value
                return self
            }
            @discardableResult
            public func clearCode() -> Apiproto.ForgotPayPwdRequest.Builder{
                builderResult.hasCode = false
                builderResult.code = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.ForgotPayPwdRequest.Builder {
                builderResult = Apiproto.ForgotPayPwdRequest()
                return self
            }
            override public func clone() throws -> Apiproto.ForgotPayPwdRequest.Builder {
                return try Apiproto.ForgotPayPwdRequest.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.ForgotPayPwdRequest {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.ForgotPayPwdRequest {
                let returnMe:Apiproto.ForgotPayPwdRequest = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.ForgotPayPwdRequest) throws -> Apiproto.ForgotPayPwdRequest.Builder {
                if other == Apiproto.ForgotPayPwdRequest() {
                    return self
                }
                if other.hasPhone {
                    phone = other.phone
                }
                if other.hasLoginPassword {
                    loginPassword = other.loginPassword
                }
                if other.hasCode {
                    code = other.code
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.ForgotPayPwdRequest.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.ForgotPayPwdRequest.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        phone = try codedInputStream.readString()

                    case 18:
                        loginPassword = try codedInputStream.readString()

                    case 26:
                        code = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.ForgotPayPwdRequest.Builder {
                let resultDecodedBuilder = Apiproto.ForgotPayPwdRequest.Builder()
                if let jsonValuePhone = jsonMap["phone"] as? String {
                    resultDecodedBuilder.phone = jsonValuePhone
                }
                if let jsonValueLoginPassword = jsonMap["loginPassword"] as? String {
                    resultDecodedBuilder.loginPassword = jsonValueLoginPassword
                }
                if let jsonValueCode = jsonMap["code"] as? String {
                    resultDecodedBuilder.code = jsonValueCode
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.ForgotPayPwdRequest.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.ForgotPayPwdRequest.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class VerifyPayPwdRequest : GeneratedMessage {

        public static func == (lhs: Apiproto.VerifyPayPwdRequest, rhs: Apiproto.VerifyPayPwdRequest) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasPassword == rhs.hasPassword) && (!lhs.hasPassword || lhs.password == rhs.password)
            fieldCheck = fieldCheck && (lhs.hasApi == rhs.hasApi) && (!lhs.hasApi || lhs.api == rhs.api)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        /// 支付密码
        public fileprivate(set) var password:String = ""
        public fileprivate(set) var hasPassword:Bool = false

        /// 密码验证的后续接口
        public fileprivate(set) var api:String = ""
        public fileprivate(set) var hasApi:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasPassword {
                try codedOutputStream.writeString(fieldNumber: 1, value:password)
            }
            if hasApi {
                try codedOutputStream.writeString(fieldNumber: 2, value:api)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasPassword {
                serialize_size += password.computeStringSize(fieldNumber: 1)
            }
            if hasApi {
                serialize_size += api.computeStringSize(fieldNumber: 2)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.VerifyPayPwdRequest.Builder {
            return Apiproto.VerifyPayPwdRequest.classBuilder() as! Apiproto.VerifyPayPwdRequest.Builder
        }
        public func getBuilder() -> Apiproto.VerifyPayPwdRequest.Builder {
            return classBuilder() as! Apiproto.VerifyPayPwdRequest.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.VerifyPayPwdRequest.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.VerifyPayPwdRequest.Builder()
        }
        public func toBuilder() throws -> Apiproto.VerifyPayPwdRequest.Builder {
            return try Apiproto.VerifyPayPwdRequest.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.VerifyPayPwdRequest) throws -> Apiproto.VerifyPayPwdRequest.Builder {
            return try Apiproto.VerifyPayPwdRequest.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasPassword {
                jsonMap["password"] = password
            }
            if hasApi {
                jsonMap["api"] = api
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.VerifyPayPwdRequest {
            return try Apiproto.VerifyPayPwdRequest.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.VerifyPayPwdRequest {
            return try Apiproto.VerifyPayPwdRequest.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasPassword {
                output += "\(indent) password: \(password) \n"
            }
            if hasApi {
                output += "\(indent) api: \(api) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasPassword {
                    hashCode = (hashCode &* 31) &+ password.hashValue
                }
                if hasApi {
                    hashCode = (hashCode &* 31) &+ api.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.VerifyPayPwdRequest"
        }
        override public func className() -> String {
            return "Apiproto.VerifyPayPwdRequest"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.VerifyPayPwdRequest = Apiproto.VerifyPayPwdRequest()
            public func getMessage() -> Apiproto.VerifyPayPwdRequest {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            /// 支付密码
            public var password:String {
                get {
                    return builderResult.password
                }
                set (value) {
                    builderResult.hasPassword = true
                    builderResult.password = value
                }
            }
            public var hasPassword:Bool {
                get {
                    return builderResult.hasPassword
                }
            }
            @discardableResult
            public func setPassword(_ value:String) -> Apiproto.VerifyPayPwdRequest.Builder {
                self.password = value
                return self
            }
            @discardableResult
            public func clearPassword() -> Apiproto.VerifyPayPwdRequest.Builder{
                builderResult.hasPassword = false
                builderResult.password = ""
                return self
            }
            /// 密码验证的后续接口
            public var api:String {
                get {
                    return builderResult.api
                }
                set (value) {
                    builderResult.hasApi = true
                    builderResult.api = value
                }
            }
            public var hasApi:Bool {
                get {
                    return builderResult.hasApi
                }
            }
            @discardableResult
            public func setApi(_ value:String) -> Apiproto.VerifyPayPwdRequest.Builder {
                self.api = value
                return self
            }
            @discardableResult
            public func clearApi() -> Apiproto.VerifyPayPwdRequest.Builder{
                builderResult.hasApi = false
                builderResult.api = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.VerifyPayPwdRequest.Builder {
                builderResult = Apiproto.VerifyPayPwdRequest()
                return self
            }
            override public func clone() throws -> Apiproto.VerifyPayPwdRequest.Builder {
                return try Apiproto.VerifyPayPwdRequest.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.VerifyPayPwdRequest {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.VerifyPayPwdRequest {
                let returnMe:Apiproto.VerifyPayPwdRequest = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.VerifyPayPwdRequest) throws -> Apiproto.VerifyPayPwdRequest.Builder {
                if other == Apiproto.VerifyPayPwdRequest() {
                    return self
                }
                if other.hasPassword {
                    password = other.password
                }
                if other.hasApi {
                    api = other.api
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.VerifyPayPwdRequest.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.VerifyPayPwdRequest.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        password = try codedInputStream.readString()

                    case 18:
                        api = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.VerifyPayPwdRequest.Builder {
                let resultDecodedBuilder = Apiproto.VerifyPayPwdRequest.Builder()
                if let jsonValuePassword = jsonMap["password"] as? String {
                    resultDecodedBuilder.password = jsonValuePassword
                }
                if let jsonValueApi = jsonMap["api"] as? String {
                    resultDecodedBuilder.api = jsonValueApi
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.VerifyPayPwdRequest.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.VerifyPayPwdRequest.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class SetPwdRequest : GeneratedMessage {

        public static func == (lhs: Apiproto.SetPwdRequest, rhs: Apiproto.SetPwdRequest) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasPassword == rhs.hasPassword) && (!lhs.hasPassword || lhs.password == rhs.password)
            fieldCheck = fieldCheck && (lhs.hasToken == rhs.hasToken) && (!lhs.hasToken || lhs.token == rhs.token)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var password:String = ""
        public fileprivate(set) var hasPassword:Bool = false

        /// 初次设置为空, 忘记支付密码传返回值
        public fileprivate(set) var token:String = ""
        public fileprivate(set) var hasToken:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasPassword {
                try codedOutputStream.writeString(fieldNumber: 1, value:password)
            }
            if hasToken {
                try codedOutputStream.writeString(fieldNumber: 2, value:token)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasPassword {
                serialize_size += password.computeStringSize(fieldNumber: 1)
            }
            if hasToken {
                serialize_size += token.computeStringSize(fieldNumber: 2)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.SetPwdRequest.Builder {
            return Apiproto.SetPwdRequest.classBuilder() as! Apiproto.SetPwdRequest.Builder
        }
        public func getBuilder() -> Apiproto.SetPwdRequest.Builder {
            return classBuilder() as! Apiproto.SetPwdRequest.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.SetPwdRequest.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.SetPwdRequest.Builder()
        }
        public func toBuilder() throws -> Apiproto.SetPwdRequest.Builder {
            return try Apiproto.SetPwdRequest.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.SetPwdRequest) throws -> Apiproto.SetPwdRequest.Builder {
            return try Apiproto.SetPwdRequest.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasPassword {
                jsonMap["password"] = password
            }
            if hasToken {
                jsonMap["token"] = token
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.SetPwdRequest {
            return try Apiproto.SetPwdRequest.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.SetPwdRequest {
            return try Apiproto.SetPwdRequest.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasPassword {
                output += "\(indent) password: \(password) \n"
            }
            if hasToken {
                output += "\(indent) token: \(token) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasPassword {
                    hashCode = (hashCode &* 31) &+ password.hashValue
                }
                if hasToken {
                    hashCode = (hashCode &* 31) &+ token.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.SetPwdRequest"
        }
        override public func className() -> String {
            return "Apiproto.SetPwdRequest"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.SetPwdRequest = Apiproto.SetPwdRequest()
            public func getMessage() -> Apiproto.SetPwdRequest {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var password:String {
                get {
                    return builderResult.password
                }
                set (value) {
                    builderResult.hasPassword = true
                    builderResult.password = value
                }
            }
            public var hasPassword:Bool {
                get {
                    return builderResult.hasPassword
                }
            }
            @discardableResult
            public func setPassword(_ value:String) -> Apiproto.SetPwdRequest.Builder {
                self.password = value
                return self
            }
            @discardableResult
            public func clearPassword() -> Apiproto.SetPwdRequest.Builder{
                builderResult.hasPassword = false
                builderResult.password = ""
                return self
            }
            /// 初次设置为空, 忘记支付密码传返回值
            public var token:String {
                get {
                    return builderResult.token
                }
                set (value) {
                    builderResult.hasToken = true
                    builderResult.token = value
                }
            }
            public var hasToken:Bool {
                get {
                    return builderResult.hasToken
                }
            }
            @discardableResult
            public func setToken(_ value:String) -> Apiproto.SetPwdRequest.Builder {
                self.token = value
                return self
            }
            @discardableResult
            public func clearToken() -> Apiproto.SetPwdRequest.Builder{
                builderResult.hasToken = false
                builderResult.token = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.SetPwdRequest.Builder {
                builderResult = Apiproto.SetPwdRequest()
                return self
            }
            override public func clone() throws -> Apiproto.SetPwdRequest.Builder {
                return try Apiproto.SetPwdRequest.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.SetPwdRequest {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.SetPwdRequest {
                let returnMe:Apiproto.SetPwdRequest = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.SetPwdRequest) throws -> Apiproto.SetPwdRequest.Builder {
                if other == Apiproto.SetPwdRequest() {
                    return self
                }
                if other.hasPassword {
                    password = other.password
                }
                if other.hasToken {
                    token = other.token
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.SetPwdRequest.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.SetPwdRequest.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        password = try codedInputStream.readString()

                    case 18:
                        token = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.SetPwdRequest.Builder {
                let resultDecodedBuilder = Apiproto.SetPwdRequest.Builder()
                if let jsonValuePassword = jsonMap["password"] as? String {
                    resultDecodedBuilder.password = jsonValuePassword
                }
                if let jsonValueToken = jsonMap["token"] as? String {
                    resultDecodedBuilder.token = jsonValueToken
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.SetPwdRequest.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.SetPwdRequest.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class ResetPwdRequest : GeneratedMessage {

        public static func == (lhs: Apiproto.ResetPwdRequest, rhs: Apiproto.ResetPwdRequest) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasPassword == rhs.hasPassword) && (!lhs.hasPassword || lhs.password == rhs.password)
            fieldCheck = fieldCheck && (lhs.hasNewPassword == rhs.hasNewPassword) && (!lhs.hasNewPassword || lhs.newPassword == rhs.newPassword)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var password:String = ""
        public fileprivate(set) var hasPassword:Bool = false

        public fileprivate(set) var newPassword:String = ""
        public fileprivate(set) var hasNewPassword:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasPassword {
                try codedOutputStream.writeString(fieldNumber: 1, value:password)
            }
            if hasNewPassword {
                try codedOutputStream.writeString(fieldNumber: 2, value:newPassword)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasPassword {
                serialize_size += password.computeStringSize(fieldNumber: 1)
            }
            if hasNewPassword {
                serialize_size += newPassword.computeStringSize(fieldNumber: 2)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.ResetPwdRequest.Builder {
            return Apiproto.ResetPwdRequest.classBuilder() as! Apiproto.ResetPwdRequest.Builder
        }
        public func getBuilder() -> Apiproto.ResetPwdRequest.Builder {
            return classBuilder() as! Apiproto.ResetPwdRequest.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.ResetPwdRequest.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.ResetPwdRequest.Builder()
        }
        public func toBuilder() throws -> Apiproto.ResetPwdRequest.Builder {
            return try Apiproto.ResetPwdRequest.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.ResetPwdRequest) throws -> Apiproto.ResetPwdRequest.Builder {
            return try Apiproto.ResetPwdRequest.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasPassword {
                jsonMap["password"] = password
            }
            if hasNewPassword {
                jsonMap["newPassword"] = newPassword
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.ResetPwdRequest {
            return try Apiproto.ResetPwdRequest.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.ResetPwdRequest {
            return try Apiproto.ResetPwdRequest.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasPassword {
                output += "\(indent) password: \(password) \n"
            }
            if hasNewPassword {
                output += "\(indent) newPassword: \(newPassword) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasPassword {
                    hashCode = (hashCode &* 31) &+ password.hashValue
                }
                if hasNewPassword {
                    hashCode = (hashCode &* 31) &+ newPassword.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.ResetPwdRequest"
        }
        override public func className() -> String {
            return "Apiproto.ResetPwdRequest"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.ResetPwdRequest = Apiproto.ResetPwdRequest()
            public func getMessage() -> Apiproto.ResetPwdRequest {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var password:String {
                get {
                    return builderResult.password
                }
                set (value) {
                    builderResult.hasPassword = true
                    builderResult.password = value
                }
            }
            public var hasPassword:Bool {
                get {
                    return builderResult.hasPassword
                }
            }
            @discardableResult
            public func setPassword(_ value:String) -> Apiproto.ResetPwdRequest.Builder {
                self.password = value
                return self
            }
            @discardableResult
            public func clearPassword() -> Apiproto.ResetPwdRequest.Builder{
                builderResult.hasPassword = false
                builderResult.password = ""
                return self
            }
            public var newPassword:String {
                get {
                    return builderResult.newPassword
                }
                set (value) {
                    builderResult.hasNewPassword = true
                    builderResult.newPassword = value
                }
            }
            public var hasNewPassword:Bool {
                get {
                    return builderResult.hasNewPassword
                }
            }
            @discardableResult
            public func setNewPassword(_ value:String) -> Apiproto.ResetPwdRequest.Builder {
                self.newPassword = value
                return self
            }
            @discardableResult
            public func clearNewPassword() -> Apiproto.ResetPwdRequest.Builder{
                builderResult.hasNewPassword = false
                builderResult.newPassword = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.ResetPwdRequest.Builder {
                builderResult = Apiproto.ResetPwdRequest()
                return self
            }
            override public func clone() throws -> Apiproto.ResetPwdRequest.Builder {
                return try Apiproto.ResetPwdRequest.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.ResetPwdRequest {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.ResetPwdRequest {
                let returnMe:Apiproto.ResetPwdRequest = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.ResetPwdRequest) throws -> Apiproto.ResetPwdRequest.Builder {
                if other == Apiproto.ResetPwdRequest() {
                    return self
                }
                if other.hasPassword {
                    password = other.password
                }
                if other.hasNewPassword {
                    newPassword = other.newPassword
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.ResetPwdRequest.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.ResetPwdRequest.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        password = try codedInputStream.readString()

                    case 18:
                        newPassword = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.ResetPwdRequest.Builder {
                let resultDecodedBuilder = Apiproto.ResetPwdRequest.Builder()
                if let jsonValuePassword = jsonMap["password"] as? String {
                    resultDecodedBuilder.password = jsonValuePassword
                }
                if let jsonValueNewPassword = jsonMap["newPassword"] as? String {
                    resultDecodedBuilder.newPassword = jsonValueNewPassword
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.ResetPwdRequest.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.ResetPwdRequest.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class BindPhoneRequest : GeneratedMessage {

        public static func == (lhs: Apiproto.BindPhoneRequest, rhs: Apiproto.BindPhoneRequest) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasPhone == rhs.hasPhone) && (!lhs.hasPhone || lhs.phone == rhs.phone)
            fieldCheck = fieldCheck && (lhs.hasCode == rhs.hasCode) && (!lhs.hasCode || lhs.code == rhs.code)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var phone:String = ""
        public fileprivate(set) var hasPhone:Bool = false

        public fileprivate(set) var code:String = ""
        public fileprivate(set) var hasCode:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasPhone {
                try codedOutputStream.writeString(fieldNumber: 1, value:phone)
            }
            if hasCode {
                try codedOutputStream.writeString(fieldNumber: 2, value:code)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasPhone {
                serialize_size += phone.computeStringSize(fieldNumber: 1)
            }
            if hasCode {
                serialize_size += code.computeStringSize(fieldNumber: 2)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.BindPhoneRequest.Builder {
            return Apiproto.BindPhoneRequest.classBuilder() as! Apiproto.BindPhoneRequest.Builder
        }
        public func getBuilder() -> Apiproto.BindPhoneRequest.Builder {
            return classBuilder() as! Apiproto.BindPhoneRequest.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.BindPhoneRequest.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.BindPhoneRequest.Builder()
        }
        public func toBuilder() throws -> Apiproto.BindPhoneRequest.Builder {
            return try Apiproto.BindPhoneRequest.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.BindPhoneRequest) throws -> Apiproto.BindPhoneRequest.Builder {
            return try Apiproto.BindPhoneRequest.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasPhone {
                jsonMap["phone"] = phone
            }
            if hasCode {
                jsonMap["code"] = code
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.BindPhoneRequest {
            return try Apiproto.BindPhoneRequest.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.BindPhoneRequest {
            return try Apiproto.BindPhoneRequest.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasPhone {
                output += "\(indent) phone: \(phone) \n"
            }
            if hasCode {
                output += "\(indent) code: \(code) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasPhone {
                    hashCode = (hashCode &* 31) &+ phone.hashValue
                }
                if hasCode {
                    hashCode = (hashCode &* 31) &+ code.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.BindPhoneRequest"
        }
        override public func className() -> String {
            return "Apiproto.BindPhoneRequest"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.BindPhoneRequest = Apiproto.BindPhoneRequest()
            public func getMessage() -> Apiproto.BindPhoneRequest {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var phone:String {
                get {
                    return builderResult.phone
                }
                set (value) {
                    builderResult.hasPhone = true
                    builderResult.phone = value
                }
            }
            public var hasPhone:Bool {
                get {
                    return builderResult.hasPhone
                }
            }
            @discardableResult
            public func setPhone(_ value:String) -> Apiproto.BindPhoneRequest.Builder {
                self.phone = value
                return self
            }
            @discardableResult
            public func clearPhone() -> Apiproto.BindPhoneRequest.Builder{
                builderResult.hasPhone = false
                builderResult.phone = ""
                return self
            }
            public var code:String {
                get {
                    return builderResult.code
                }
                set (value) {
                    builderResult.hasCode = true
                    builderResult.code = value
                }
            }
            public var hasCode:Bool {
                get {
                    return builderResult.hasCode
                }
            }
            @discardableResult
            public func setCode(_ value:String) -> Apiproto.BindPhoneRequest.Builder {
                self.code = value
                return self
            }
            @discardableResult
            public func clearCode() -> Apiproto.BindPhoneRequest.Builder{
                builderResult.hasCode = false
                builderResult.code = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.BindPhoneRequest.Builder {
                builderResult = Apiproto.BindPhoneRequest()
                return self
            }
            override public func clone() throws -> Apiproto.BindPhoneRequest.Builder {
                return try Apiproto.BindPhoneRequest.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.BindPhoneRequest {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.BindPhoneRequest {
                let returnMe:Apiproto.BindPhoneRequest = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.BindPhoneRequest) throws -> Apiproto.BindPhoneRequest.Builder {
                if other == Apiproto.BindPhoneRequest() {
                    return self
                }
                if other.hasPhone {
                    phone = other.phone
                }
                if other.hasCode {
                    code = other.code
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.BindPhoneRequest.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BindPhoneRequest.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        phone = try codedInputStream.readString()

                    case 18:
                        code = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.BindPhoneRequest.Builder {
                let resultDecodedBuilder = Apiproto.BindPhoneRequest.Builder()
                if let jsonValuePhone = jsonMap["phone"] as? String {
                    resultDecodedBuilder.phone = jsonValuePhone
                }
                if let jsonValueCode = jsonMap["code"] as? String {
                    resultDecodedBuilder.code = jsonValueCode
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.BindPhoneRequest.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.BindPhoneRequest.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class ChangePhoneRequest : GeneratedMessage {

        public static func == (lhs: Apiproto.ChangePhoneRequest, rhs: Apiproto.ChangePhoneRequest) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasPhone == rhs.hasPhone) && (!lhs.hasPhone || lhs.phone == rhs.phone)
            fieldCheck = fieldCheck && (lhs.hasNewPhone == rhs.hasNewPhone) && (!lhs.hasNewPhone || lhs.newPhone == rhs.newPhone)
            fieldCheck = fieldCheck && (lhs.hasCode == rhs.hasCode) && (!lhs.hasCode || lhs.code == rhs.code)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var phone:String = ""
        public fileprivate(set) var hasPhone:Bool = false

        public fileprivate(set) var newPhone:String = ""
        public fileprivate(set) var hasNewPhone:Bool = false

        public fileprivate(set) var code:String = ""
        public fileprivate(set) var hasCode:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasPhone {
                try codedOutputStream.writeString(fieldNumber: 1, value:phone)
            }
            if hasNewPhone {
                try codedOutputStream.writeString(fieldNumber: 2, value:newPhone)
            }
            if hasCode {
                try codedOutputStream.writeString(fieldNumber: 3, value:code)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasPhone {
                serialize_size += phone.computeStringSize(fieldNumber: 1)
            }
            if hasNewPhone {
                serialize_size += newPhone.computeStringSize(fieldNumber: 2)
            }
            if hasCode {
                serialize_size += code.computeStringSize(fieldNumber: 3)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.ChangePhoneRequest.Builder {
            return Apiproto.ChangePhoneRequest.classBuilder() as! Apiproto.ChangePhoneRequest.Builder
        }
        public func getBuilder() -> Apiproto.ChangePhoneRequest.Builder {
            return classBuilder() as! Apiproto.ChangePhoneRequest.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.ChangePhoneRequest.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.ChangePhoneRequest.Builder()
        }
        public func toBuilder() throws -> Apiproto.ChangePhoneRequest.Builder {
            return try Apiproto.ChangePhoneRequest.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.ChangePhoneRequest) throws -> Apiproto.ChangePhoneRequest.Builder {
            return try Apiproto.ChangePhoneRequest.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasPhone {
                jsonMap["phone"] = phone
            }
            if hasNewPhone {
                jsonMap["newPhone"] = newPhone
            }
            if hasCode {
                jsonMap["code"] = code
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.ChangePhoneRequest {
            return try Apiproto.ChangePhoneRequest.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.ChangePhoneRequest {
            return try Apiproto.ChangePhoneRequest.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasPhone {
                output += "\(indent) phone: \(phone) \n"
            }
            if hasNewPhone {
                output += "\(indent) newPhone: \(newPhone) \n"
            }
            if hasCode {
                output += "\(indent) code: \(code) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasPhone {
                    hashCode = (hashCode &* 31) &+ phone.hashValue
                }
                if hasNewPhone {
                    hashCode = (hashCode &* 31) &+ newPhone.hashValue
                }
                if hasCode {
                    hashCode = (hashCode &* 31) &+ code.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.ChangePhoneRequest"
        }
        override public func className() -> String {
            return "Apiproto.ChangePhoneRequest"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.ChangePhoneRequest = Apiproto.ChangePhoneRequest()
            public func getMessage() -> Apiproto.ChangePhoneRequest {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var phone:String {
                get {
                    return builderResult.phone
                }
                set (value) {
                    builderResult.hasPhone = true
                    builderResult.phone = value
                }
            }
            public var hasPhone:Bool {
                get {
                    return builderResult.hasPhone
                }
            }
            @discardableResult
            public func setPhone(_ value:String) -> Apiproto.ChangePhoneRequest.Builder {
                self.phone = value
                return self
            }
            @discardableResult
            public func clearPhone() -> Apiproto.ChangePhoneRequest.Builder{
                builderResult.hasPhone = false
                builderResult.phone = ""
                return self
            }
            public var newPhone:String {
                get {
                    return builderResult.newPhone
                }
                set (value) {
                    builderResult.hasNewPhone = true
                    builderResult.newPhone = value
                }
            }
            public var hasNewPhone:Bool {
                get {
                    return builderResult.hasNewPhone
                }
            }
            @discardableResult
            public func setNewPhone(_ value:String) -> Apiproto.ChangePhoneRequest.Builder {
                self.newPhone = value
                return self
            }
            @discardableResult
            public func clearNewPhone() -> Apiproto.ChangePhoneRequest.Builder{
                builderResult.hasNewPhone = false
                builderResult.newPhone = ""
                return self
            }
            public var code:String {
                get {
                    return builderResult.code
                }
                set (value) {
                    builderResult.hasCode = true
                    builderResult.code = value
                }
            }
            public var hasCode:Bool {
                get {
                    return builderResult.hasCode
                }
            }
            @discardableResult
            public func setCode(_ value:String) -> Apiproto.ChangePhoneRequest.Builder {
                self.code = value
                return self
            }
            @discardableResult
            public func clearCode() -> Apiproto.ChangePhoneRequest.Builder{
                builderResult.hasCode = false
                builderResult.code = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.ChangePhoneRequest.Builder {
                builderResult = Apiproto.ChangePhoneRequest()
                return self
            }
            override public func clone() throws -> Apiproto.ChangePhoneRequest.Builder {
                return try Apiproto.ChangePhoneRequest.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.ChangePhoneRequest {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.ChangePhoneRequest {
                let returnMe:Apiproto.ChangePhoneRequest = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.ChangePhoneRequest) throws -> Apiproto.ChangePhoneRequest.Builder {
                if other == Apiproto.ChangePhoneRequest() {
                    return self
                }
                if other.hasPhone {
                    phone = other.phone
                }
                if other.hasNewPhone {
                    newPhone = other.newPhone
                }
                if other.hasCode {
                    code = other.code
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.ChangePhoneRequest.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.ChangePhoneRequest.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        phone = try codedInputStream.readString()

                    case 18:
                        newPhone = try codedInputStream.readString()

                    case 26:
                        code = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.ChangePhoneRequest.Builder {
                let resultDecodedBuilder = Apiproto.ChangePhoneRequest.Builder()
                if let jsonValuePhone = jsonMap["phone"] as? String {
                    resultDecodedBuilder.phone = jsonValuePhone
                }
                if let jsonValueNewPhone = jsonMap["newPhone"] as? String {
                    resultDecodedBuilder.newPhone = jsonValueNewPhone
                }
                if let jsonValueCode = jsonMap["code"] as? String {
                    resultDecodedBuilder.code = jsonValueCode
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.ChangePhoneRequest.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.ChangePhoneRequest.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class BindWeixinRequest : GeneratedMessage {

        public static func == (lhs: Apiproto.BindWeixinRequest, rhs: Apiproto.BindWeixinRequest) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasOpenid == rhs.hasOpenid) && (!lhs.hasOpenid || lhs.openid == rhs.openid)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var openid:String = ""
        public fileprivate(set) var hasOpenid:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasOpenid {
                try codedOutputStream.writeString(fieldNumber: 1, value:openid)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasOpenid {
                serialize_size += openid.computeStringSize(fieldNumber: 1)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.BindWeixinRequest.Builder {
            return Apiproto.BindWeixinRequest.classBuilder() as! Apiproto.BindWeixinRequest.Builder
        }
        public func getBuilder() -> Apiproto.BindWeixinRequest.Builder {
            return classBuilder() as! Apiproto.BindWeixinRequest.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.BindWeixinRequest.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.BindWeixinRequest.Builder()
        }
        public func toBuilder() throws -> Apiproto.BindWeixinRequest.Builder {
            return try Apiproto.BindWeixinRequest.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.BindWeixinRequest) throws -> Apiproto.BindWeixinRequest.Builder {
            return try Apiproto.BindWeixinRequest.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasOpenid {
                jsonMap["openid"] = openid
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.BindWeixinRequest {
            return try Apiproto.BindWeixinRequest.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.BindWeixinRequest {
            return try Apiproto.BindWeixinRequest.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasOpenid {
                output += "\(indent) openid: \(openid) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasOpenid {
                    hashCode = (hashCode &* 31) &+ openid.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.BindWeixinRequest"
        }
        override public func className() -> String {
            return "Apiproto.BindWeixinRequest"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.BindWeixinRequest = Apiproto.BindWeixinRequest()
            public func getMessage() -> Apiproto.BindWeixinRequest {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var openid:String {
                get {
                    return builderResult.openid
                }
                set (value) {
                    builderResult.hasOpenid = true
                    builderResult.openid = value
                }
            }
            public var hasOpenid:Bool {
                get {
                    return builderResult.hasOpenid
                }
            }
            @discardableResult
            public func setOpenid(_ value:String) -> Apiproto.BindWeixinRequest.Builder {
                self.openid = value
                return self
            }
            @discardableResult
            public func clearOpenid() -> Apiproto.BindWeixinRequest.Builder{
                builderResult.hasOpenid = false
                builderResult.openid = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.BindWeixinRequest.Builder {
                builderResult = Apiproto.BindWeixinRequest()
                return self
            }
            override public func clone() throws -> Apiproto.BindWeixinRequest.Builder {
                return try Apiproto.BindWeixinRequest.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.BindWeixinRequest {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.BindWeixinRequest {
                let returnMe:Apiproto.BindWeixinRequest = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.BindWeixinRequest) throws -> Apiproto.BindWeixinRequest.Builder {
                if other == Apiproto.BindWeixinRequest() {
                    return self
                }
                if other.hasOpenid {
                    openid = other.openid
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.BindWeixinRequest.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BindWeixinRequest.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        openid = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.BindWeixinRequest.Builder {
                let resultDecodedBuilder = Apiproto.BindWeixinRequest.Builder()
                if let jsonValueOpenid = jsonMap["openid"] as? String {
                    resultDecodedBuilder.openid = jsonValueOpenid
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.BindWeixinRequest.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.BindWeixinRequest.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class BindQqrequest : GeneratedMessage {

        public static func == (lhs: Apiproto.BindQqrequest, rhs: Apiproto.BindQqrequest) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasOpenid == rhs.hasOpenid) && (!lhs.hasOpenid || lhs.openid == rhs.openid)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var openid:String = ""
        public fileprivate(set) var hasOpenid:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasOpenid {
                try codedOutputStream.writeString(fieldNumber: 1, value:openid)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasOpenid {
                serialize_size += openid.computeStringSize(fieldNumber: 1)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.BindQqrequest.Builder {
            return Apiproto.BindQqrequest.classBuilder() as! Apiproto.BindQqrequest.Builder
        }
        public func getBuilder() -> Apiproto.BindQqrequest.Builder {
            return classBuilder() as! Apiproto.BindQqrequest.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.BindQqrequest.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.BindQqrequest.Builder()
        }
        public func toBuilder() throws -> Apiproto.BindQqrequest.Builder {
            return try Apiproto.BindQqrequest.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.BindQqrequest) throws -> Apiproto.BindQqrequest.Builder {
            return try Apiproto.BindQqrequest.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasOpenid {
                jsonMap["openid"] = openid
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.BindQqrequest {
            return try Apiproto.BindQqrequest.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.BindQqrequest {
            return try Apiproto.BindQqrequest.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasOpenid {
                output += "\(indent) openid: \(openid) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasOpenid {
                    hashCode = (hashCode &* 31) &+ openid.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.BindQqrequest"
        }
        override public func className() -> String {
            return "Apiproto.BindQqrequest"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.BindQqrequest = Apiproto.BindQqrequest()
            public func getMessage() -> Apiproto.BindQqrequest {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var openid:String {
                get {
                    return builderResult.openid
                }
                set (value) {
                    builderResult.hasOpenid = true
                    builderResult.openid = value
                }
            }
            public var hasOpenid:Bool {
                get {
                    return builderResult.hasOpenid
                }
            }
            @discardableResult
            public func setOpenid(_ value:String) -> Apiproto.BindQqrequest.Builder {
                self.openid = value
                return self
            }
            @discardableResult
            public func clearOpenid() -> Apiproto.BindQqrequest.Builder{
                builderResult.hasOpenid = false
                builderResult.openid = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.BindQqrequest.Builder {
                builderResult = Apiproto.BindQqrequest()
                return self
            }
            override public func clone() throws -> Apiproto.BindQqrequest.Builder {
                return try Apiproto.BindQqrequest.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.BindQqrequest {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.BindQqrequest {
                let returnMe:Apiproto.BindQqrequest = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.BindQqrequest) throws -> Apiproto.BindQqrequest.Builder {
                if other == Apiproto.BindQqrequest() {
                    return self
                }
                if other.hasOpenid {
                    openid = other.openid
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.BindQqrequest.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BindQqrequest.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        openid = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.BindQqrequest.Builder {
                let resultDecodedBuilder = Apiproto.BindQqrequest.Builder()
                if let jsonValueOpenid = jsonMap["openid"] as? String {
                    resultDecodedBuilder.openid = jsonValueOpenid
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.BindQqrequest.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.BindQqrequest.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class SetIconRequest : GeneratedMessage {

        public static func == (lhs: Apiproto.SetIconRequest, rhs: Apiproto.SetIconRequest) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasValue == rhs.hasValue) && (!lhs.hasValue || lhs.value == rhs.value)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var value:String = ""
        public fileprivate(set) var hasValue:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasValue {
                try codedOutputStream.writeString(fieldNumber: 1, value:value)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasValue {
                serialize_size += value.computeStringSize(fieldNumber: 1)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.SetIconRequest.Builder {
            return Apiproto.SetIconRequest.classBuilder() as! Apiproto.SetIconRequest.Builder
        }
        public func getBuilder() -> Apiproto.SetIconRequest.Builder {
            return classBuilder() as! Apiproto.SetIconRequest.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.SetIconRequest.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.SetIconRequest.Builder()
        }
        public func toBuilder() throws -> Apiproto.SetIconRequest.Builder {
            return try Apiproto.SetIconRequest.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.SetIconRequest) throws -> Apiproto.SetIconRequest.Builder {
            return try Apiproto.SetIconRequest.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasValue {
                jsonMap["value"] = value
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.SetIconRequest {
            return try Apiproto.SetIconRequest.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.SetIconRequest {
            return try Apiproto.SetIconRequest.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasValue {
                output += "\(indent) value: \(value) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasValue {
                    hashCode = (hashCode &* 31) &+ value.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.SetIconRequest"
        }
        override public func className() -> String {
            return "Apiproto.SetIconRequest"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.SetIconRequest = Apiproto.SetIconRequest()
            public func getMessage() -> Apiproto.SetIconRequest {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var value:String {
                get {
                    return builderResult.value
                }
                set (value) {
                    builderResult.hasValue = true
                    builderResult.value = value
                }
            }
            public var hasValue:Bool {
                get {
                    return builderResult.hasValue
                }
            }
            @discardableResult
            public func setValue(_ value:String) -> Apiproto.SetIconRequest.Builder {
                self.value = value
                return self
            }
            @discardableResult
            public func clearValue() -> Apiproto.SetIconRequest.Builder{
                builderResult.hasValue = false
                builderResult.value = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.SetIconRequest.Builder {
                builderResult = Apiproto.SetIconRequest()
                return self
            }
            override public func clone() throws -> Apiproto.SetIconRequest.Builder {
                return try Apiproto.SetIconRequest.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.SetIconRequest {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.SetIconRequest {
                let returnMe:Apiproto.SetIconRequest = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.SetIconRequest) throws -> Apiproto.SetIconRequest.Builder {
                if other == Apiproto.SetIconRequest() {
                    return self
                }
                if other.hasValue {
                    value = other.value
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.SetIconRequest.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.SetIconRequest.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        value = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.SetIconRequest.Builder {
                let resultDecodedBuilder = Apiproto.SetIconRequest.Builder()
                if let jsonValueValue = jsonMap["value"] as? String {
                    resultDecodedBuilder.value = jsonValueValue
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.SetIconRequest.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.SetIconRequest.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class SetNicknameRequest : GeneratedMessage {

        public static func == (lhs: Apiproto.SetNicknameRequest, rhs: Apiproto.SetNicknameRequest) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasValue == rhs.hasValue) && (!lhs.hasValue || lhs.value == rhs.value)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var value:String = ""
        public fileprivate(set) var hasValue:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasValue {
                try codedOutputStream.writeString(fieldNumber: 1, value:value)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasValue {
                serialize_size += value.computeStringSize(fieldNumber: 1)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.SetNicknameRequest.Builder {
            return Apiproto.SetNicknameRequest.classBuilder() as! Apiproto.SetNicknameRequest.Builder
        }
        public func getBuilder() -> Apiproto.SetNicknameRequest.Builder {
            return classBuilder() as! Apiproto.SetNicknameRequest.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.SetNicknameRequest.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.SetNicknameRequest.Builder()
        }
        public func toBuilder() throws -> Apiproto.SetNicknameRequest.Builder {
            return try Apiproto.SetNicknameRequest.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.SetNicknameRequest) throws -> Apiproto.SetNicknameRequest.Builder {
            return try Apiproto.SetNicknameRequest.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasValue {
                jsonMap["value"] = value
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.SetNicknameRequest {
            return try Apiproto.SetNicknameRequest.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.SetNicknameRequest {
            return try Apiproto.SetNicknameRequest.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasValue {
                output += "\(indent) value: \(value) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasValue {
                    hashCode = (hashCode &* 31) &+ value.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.SetNicknameRequest"
        }
        override public func className() -> String {
            return "Apiproto.SetNicknameRequest"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.SetNicknameRequest = Apiproto.SetNicknameRequest()
            public func getMessage() -> Apiproto.SetNicknameRequest {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var value:String {
                get {
                    return builderResult.value
                }
                set (value) {
                    builderResult.hasValue = true
                    builderResult.value = value
                }
            }
            public var hasValue:Bool {
                get {
                    return builderResult.hasValue
                }
            }
            @discardableResult
            public func setValue(_ value:String) -> Apiproto.SetNicknameRequest.Builder {
                self.value = value
                return self
            }
            @discardableResult
            public func clearValue() -> Apiproto.SetNicknameRequest.Builder{
                builderResult.hasValue = false
                builderResult.value = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.SetNicknameRequest.Builder {
                builderResult = Apiproto.SetNicknameRequest()
                return self
            }
            override public func clone() throws -> Apiproto.SetNicknameRequest.Builder {
                return try Apiproto.SetNicknameRequest.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.SetNicknameRequest {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.SetNicknameRequest {
                let returnMe:Apiproto.SetNicknameRequest = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.SetNicknameRequest) throws -> Apiproto.SetNicknameRequest.Builder {
                if other == Apiproto.SetNicknameRequest() {
                    return self
                }
                if other.hasValue {
                    value = other.value
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.SetNicknameRequest.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.SetNicknameRequest.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        value = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.SetNicknameRequest.Builder {
                let resultDecodedBuilder = Apiproto.SetNicknameRequest.Builder()
                if let jsonValueValue = jsonMap["value"] as? String {
                    resultDecodedBuilder.value = jsonValueValue
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.SetNicknameRequest.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.SetNicknameRequest.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class SetSexRequest : GeneratedMessage {

        public static func == (lhs: Apiproto.SetSexRequest, rhs: Apiproto.SetSexRequest) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasValue == rhs.hasValue) && (!lhs.hasValue || lhs.value == rhs.value)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var value:Apiproto.Sex = Apiproto.Sex.unknown
        public fileprivate(set) var hasValue:Bool = false
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasValue {
                try codedOutputStream.writeEnum(fieldNumber: 1, value:value.rawValue)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if (hasValue) {
                serialize_size += value.rawValue.computeEnumSize(fieldNumber: 1)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.SetSexRequest.Builder {
            return Apiproto.SetSexRequest.classBuilder() as! Apiproto.SetSexRequest.Builder
        }
        public func getBuilder() -> Apiproto.SetSexRequest.Builder {
            return classBuilder() as! Apiproto.SetSexRequest.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.SetSexRequest.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.SetSexRequest.Builder()
        }
        public func toBuilder() throws -> Apiproto.SetSexRequest.Builder {
            return try Apiproto.SetSexRequest.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.SetSexRequest) throws -> Apiproto.SetSexRequest.Builder {
            return try Apiproto.SetSexRequest.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasValue {
                jsonMap["value"] = value.toString()
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.SetSexRequest {
            return try Apiproto.SetSexRequest.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.SetSexRequest {
            return try Apiproto.SetSexRequest.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if (hasValue) {
                output += "\(indent) value: \(value.description)\n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasValue {
                     hashCode = (hashCode &* 31) &+ value.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.SetSexRequest"
        }
        override public func className() -> String {
            return "Apiproto.SetSexRequest"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.SetSexRequest = Apiproto.SetSexRequest()
            public func getMessage() -> Apiproto.SetSexRequest {
                return builderResult
            }

            required override public init () {
                super.init()
            }
                public var value:Apiproto.Sex {
                    get {
                        return builderResult.value
                    }
                    set (value) {
                        builderResult.hasValue = true
                        builderResult.value = value
                    }
                }
                public var hasValue:Bool{
                    get {
                        return builderResult.hasValue
                    }
                }
            @discardableResult
                public func setValue(_ value:Apiproto.Sex) -> Apiproto.SetSexRequest.Builder {
                  self.value = value
                  return self
                }
            @discardableResult
                public func clearValue() -> Apiproto.SetSexRequest.Builder {
                   builderResult.hasValue = false
                   builderResult.value = .unknown
                   return self
                }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.SetSexRequest.Builder {
                builderResult = Apiproto.SetSexRequest()
                return self
            }
            override public func clone() throws -> Apiproto.SetSexRequest.Builder {
                return try Apiproto.SetSexRequest.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.SetSexRequest {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.SetSexRequest {
                let returnMe:Apiproto.SetSexRequest = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.SetSexRequest) throws -> Apiproto.SetSexRequest.Builder {
                if other == Apiproto.SetSexRequest() {
                    return self
                }
                if other.hasValue {
                    value = other.value
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.SetSexRequest.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.SetSexRequest.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        let valueIntvalue = try codedInputStream.readEnum()
                        if let enumsvalue = Apiproto.Sex(rawValue:valueIntvalue){
                            value = enumsvalue
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 1, value:Int64(valueIntvalue))
                        }

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.SetSexRequest.Builder {
                let resultDecodedBuilder = Apiproto.SetSexRequest.Builder()
                if let jsonValueValue = jsonMap["value"] as? String {
                    resultDecodedBuilder.value = try Apiproto.Sex.fromString(str: jsonValueValue)
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.SetSexRequest.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.SetSexRequest.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class SetBoolRequest : GeneratedMessage {

        public static func == (lhs: Apiproto.SetBoolRequest, rhs: Apiproto.SetBoolRequest) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasValue == rhs.hasValue) && (!lhs.hasValue || lhs.value == rhs.value)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var value:Bool = false
        public fileprivate(set) var hasValue:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasValue {
                try codedOutputStream.writeBool(fieldNumber: 1, value:value)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasValue {
                serialize_size += value.computeBoolSize(fieldNumber: 1)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.SetBoolRequest.Builder {
            return Apiproto.SetBoolRequest.classBuilder() as! Apiproto.SetBoolRequest.Builder
        }
        public func getBuilder() -> Apiproto.SetBoolRequest.Builder {
            return classBuilder() as! Apiproto.SetBoolRequest.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.SetBoolRequest.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.SetBoolRequest.Builder()
        }
        public func toBuilder() throws -> Apiproto.SetBoolRequest.Builder {
            return try Apiproto.SetBoolRequest.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.SetBoolRequest) throws -> Apiproto.SetBoolRequest.Builder {
            return try Apiproto.SetBoolRequest.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasValue {
                jsonMap["value"] = value
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.SetBoolRequest {
            return try Apiproto.SetBoolRequest.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.SetBoolRequest {
            return try Apiproto.SetBoolRequest.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasValue {
                output += "\(indent) value: \(value) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasValue {
                    hashCode = (hashCode &* 31) &+ value.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.SetBoolRequest"
        }
        override public func className() -> String {
            return "Apiproto.SetBoolRequest"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.SetBoolRequest = Apiproto.SetBoolRequest()
            public func getMessage() -> Apiproto.SetBoolRequest {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var value:Bool {
                get {
                    return builderResult.value
                }
                set (value) {
                    builderResult.hasValue = true
                    builderResult.value = value
                }
            }
            public var hasValue:Bool {
                get {
                    return builderResult.hasValue
                }
            }
            @discardableResult
            public func setValue(_ value:Bool) -> Apiproto.SetBoolRequest.Builder {
                self.value = value
                return self
            }
            @discardableResult
            public func clearValue() -> Apiproto.SetBoolRequest.Builder{
                builderResult.hasValue = false
                builderResult.value = false
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.SetBoolRequest.Builder {
                builderResult = Apiproto.SetBoolRequest()
                return self
            }
            override public func clone() throws -> Apiproto.SetBoolRequest.Builder {
                return try Apiproto.SetBoolRequest.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.SetBoolRequest {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.SetBoolRequest {
                let returnMe:Apiproto.SetBoolRequest = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.SetBoolRequest) throws -> Apiproto.SetBoolRequest.Builder {
                if other == Apiproto.SetBoolRequest() {
                    return self
                }
                if other.hasValue {
                    value = other.value
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.SetBoolRequest.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.SetBoolRequest.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        value = try codedInputStream.readBool()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.SetBoolRequest.Builder {
                let resultDecodedBuilder = Apiproto.SetBoolRequest.Builder()
                if let jsonValueValue = jsonMap["value"] as? Bool {
                    resultDecodedBuilder.value = jsonValueValue
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.SetBoolRequest.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.SetBoolRequest.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class SetIntRequest : GeneratedMessage {

        public static func == (lhs: Apiproto.SetIntRequest, rhs: Apiproto.SetIntRequest) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasValue == rhs.hasValue) && (!lhs.hasValue || lhs.value == rhs.value)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var value:Int64 = Int64(0)
        public fileprivate(set) var hasValue:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasValue {
                try codedOutputStream.writeInt64(fieldNumber: 1, value:value)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasValue {
                serialize_size += value.computeInt64Size(fieldNumber: 1)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.SetIntRequest.Builder {
            return Apiproto.SetIntRequest.classBuilder() as! Apiproto.SetIntRequest.Builder
        }
        public func getBuilder() -> Apiproto.SetIntRequest.Builder {
            return classBuilder() as! Apiproto.SetIntRequest.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.SetIntRequest.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.SetIntRequest.Builder()
        }
        public func toBuilder() throws -> Apiproto.SetIntRequest.Builder {
            return try Apiproto.SetIntRequest.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.SetIntRequest) throws -> Apiproto.SetIntRequest.Builder {
            return try Apiproto.SetIntRequest.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasValue {
                jsonMap["value"] = "\(value)"
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.SetIntRequest {
            return try Apiproto.SetIntRequest.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.SetIntRequest {
            return try Apiproto.SetIntRequest.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasValue {
                output += "\(indent) value: \(value) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasValue {
                    hashCode = (hashCode &* 31) &+ value.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.SetIntRequest"
        }
        override public func className() -> String {
            return "Apiproto.SetIntRequest"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.SetIntRequest = Apiproto.SetIntRequest()
            public func getMessage() -> Apiproto.SetIntRequest {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var value:Int64 {
                get {
                    return builderResult.value
                }
                set (value) {
                    builderResult.hasValue = true
                    builderResult.value = value
                }
            }
            public var hasValue:Bool {
                get {
                    return builderResult.hasValue
                }
            }
            @discardableResult
            public func setValue(_ value:Int64) -> Apiproto.SetIntRequest.Builder {
                self.value = value
                return self
            }
            @discardableResult
            public func clearValue() -> Apiproto.SetIntRequest.Builder{
                builderResult.hasValue = false
                builderResult.value = Int64(0)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.SetIntRequest.Builder {
                builderResult = Apiproto.SetIntRequest()
                return self
            }
            override public func clone() throws -> Apiproto.SetIntRequest.Builder {
                return try Apiproto.SetIntRequest.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.SetIntRequest {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.SetIntRequest {
                let returnMe:Apiproto.SetIntRequest = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.SetIntRequest) throws -> Apiproto.SetIntRequest.Builder {
                if other == Apiproto.SetIntRequest() {
                    return self
                }
                if other.hasValue {
                    value = other.value
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.SetIntRequest.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.SetIntRequest.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        value = try codedInputStream.readInt64()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.SetIntRequest.Builder {
                let resultDecodedBuilder = Apiproto.SetIntRequest.Builder()
                if let jsonValueValue = jsonMap["value"] as? String {
                    resultDecodedBuilder.value = Int64(jsonValueValue)!
                } else if let jsonValueValue = jsonMap["value"] as? Int {
                    resultDecodedBuilder.value = Int64(jsonValueValue)
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.SetIntRequest.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.SetIntRequest.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    /// 实名认证
    final public class AuthRealnameRequest : GeneratedMessage {

        public static func == (lhs: Apiproto.AuthRealnameRequest, rhs: Apiproto.AuthRealnameRequest) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasRealname == rhs.hasRealname) && (!lhs.hasRealname || lhs.realname == rhs.realname)
            fieldCheck = fieldCheck && (lhs.hasIdno == rhs.hasIdno) && (!lhs.hasIdno || lhs.idno == rhs.idno)
            fieldCheck = fieldCheck && (lhs.hasPhone == rhs.hasPhone) && (!lhs.hasPhone || lhs.phone == rhs.phone)
            fieldCheck = fieldCheck && (lhs.hasSmsCode == rhs.hasSmsCode) && (!lhs.hasSmsCode || lhs.smsCode == rhs.smsCode)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var realname:String = ""
        public fileprivate(set) var hasRealname:Bool = false

        public fileprivate(set) var idno:String = ""
        public fileprivate(set) var hasIdno:Bool = false

        public fileprivate(set) var phone:String = ""
        public fileprivate(set) var hasPhone:Bool = false

        public fileprivate(set) var smsCode:String = ""
        public fileprivate(set) var hasSmsCode:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasRealname {
                try codedOutputStream.writeString(fieldNumber: 1, value:realname)
            }
            if hasIdno {
                try codedOutputStream.writeString(fieldNumber: 2, value:idno)
            }
            if hasPhone {
                try codedOutputStream.writeString(fieldNumber: 3, value:phone)
            }
            if hasSmsCode {
                try codedOutputStream.writeString(fieldNumber: 4, value:smsCode)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasRealname {
                serialize_size += realname.computeStringSize(fieldNumber: 1)
            }
            if hasIdno {
                serialize_size += idno.computeStringSize(fieldNumber: 2)
            }
            if hasPhone {
                serialize_size += phone.computeStringSize(fieldNumber: 3)
            }
            if hasSmsCode {
                serialize_size += smsCode.computeStringSize(fieldNumber: 4)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.AuthRealnameRequest.Builder {
            return Apiproto.AuthRealnameRequest.classBuilder() as! Apiproto.AuthRealnameRequest.Builder
        }
        public func getBuilder() -> Apiproto.AuthRealnameRequest.Builder {
            return classBuilder() as! Apiproto.AuthRealnameRequest.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.AuthRealnameRequest.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.AuthRealnameRequest.Builder()
        }
        public func toBuilder() throws -> Apiproto.AuthRealnameRequest.Builder {
            return try Apiproto.AuthRealnameRequest.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.AuthRealnameRequest) throws -> Apiproto.AuthRealnameRequest.Builder {
            return try Apiproto.AuthRealnameRequest.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasRealname {
                jsonMap["realname"] = realname
            }
            if hasIdno {
                jsonMap["idno"] = idno
            }
            if hasPhone {
                jsonMap["phone"] = phone
            }
            if hasSmsCode {
                jsonMap["smsCode"] = smsCode
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.AuthRealnameRequest {
            return try Apiproto.AuthRealnameRequest.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.AuthRealnameRequest {
            return try Apiproto.AuthRealnameRequest.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasRealname {
                output += "\(indent) realname: \(realname) \n"
            }
            if hasIdno {
                output += "\(indent) idno: \(idno) \n"
            }
            if hasPhone {
                output += "\(indent) phone: \(phone) \n"
            }
            if hasSmsCode {
                output += "\(indent) smsCode: \(smsCode) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasRealname {
                    hashCode = (hashCode &* 31) &+ realname.hashValue
                }
                if hasIdno {
                    hashCode = (hashCode &* 31) &+ idno.hashValue
                }
                if hasPhone {
                    hashCode = (hashCode &* 31) &+ phone.hashValue
                }
                if hasSmsCode {
                    hashCode = (hashCode &* 31) &+ smsCode.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.AuthRealnameRequest"
        }
        override public func className() -> String {
            return "Apiproto.AuthRealnameRequest"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.AuthRealnameRequest = Apiproto.AuthRealnameRequest()
            public func getMessage() -> Apiproto.AuthRealnameRequest {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var realname:String {
                get {
                    return builderResult.realname
                }
                set (value) {
                    builderResult.hasRealname = true
                    builderResult.realname = value
                }
            }
            public var hasRealname:Bool {
                get {
                    return builderResult.hasRealname
                }
            }
            @discardableResult
            public func setRealname(_ value:String) -> Apiproto.AuthRealnameRequest.Builder {
                self.realname = value
                return self
            }
            @discardableResult
            public func clearRealname() -> Apiproto.AuthRealnameRequest.Builder{
                builderResult.hasRealname = false
                builderResult.realname = ""
                return self
            }
            public var idno:String {
                get {
                    return builderResult.idno
                }
                set (value) {
                    builderResult.hasIdno = true
                    builderResult.idno = value
                }
            }
            public var hasIdno:Bool {
                get {
                    return builderResult.hasIdno
                }
            }
            @discardableResult
            public func setIdno(_ value:String) -> Apiproto.AuthRealnameRequest.Builder {
                self.idno = value
                return self
            }
            @discardableResult
            public func clearIdno() -> Apiproto.AuthRealnameRequest.Builder{
                builderResult.hasIdno = false
                builderResult.idno = ""
                return self
            }
            public var phone:String {
                get {
                    return builderResult.phone
                }
                set (value) {
                    builderResult.hasPhone = true
                    builderResult.phone = value
                }
            }
            public var hasPhone:Bool {
                get {
                    return builderResult.hasPhone
                }
            }
            @discardableResult
            public func setPhone(_ value:String) -> Apiproto.AuthRealnameRequest.Builder {
                self.phone = value
                return self
            }
            @discardableResult
            public func clearPhone() -> Apiproto.AuthRealnameRequest.Builder{
                builderResult.hasPhone = false
                builderResult.phone = ""
                return self
            }
            public var smsCode:String {
                get {
                    return builderResult.smsCode
                }
                set (value) {
                    builderResult.hasSmsCode = true
                    builderResult.smsCode = value
                }
            }
            public var hasSmsCode:Bool {
                get {
                    return builderResult.hasSmsCode
                }
            }
            @discardableResult
            public func setSmsCode(_ value:String) -> Apiproto.AuthRealnameRequest.Builder {
                self.smsCode = value
                return self
            }
            @discardableResult
            public func clearSmsCode() -> Apiproto.AuthRealnameRequest.Builder{
                builderResult.hasSmsCode = false
                builderResult.smsCode = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.AuthRealnameRequest.Builder {
                builderResult = Apiproto.AuthRealnameRequest()
                return self
            }
            override public func clone() throws -> Apiproto.AuthRealnameRequest.Builder {
                return try Apiproto.AuthRealnameRequest.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.AuthRealnameRequest {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.AuthRealnameRequest {
                let returnMe:Apiproto.AuthRealnameRequest = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.AuthRealnameRequest) throws -> Apiproto.AuthRealnameRequest.Builder {
                if other == Apiproto.AuthRealnameRequest() {
                    return self
                }
                if other.hasRealname {
                    realname = other.realname
                }
                if other.hasIdno {
                    idno = other.idno
                }
                if other.hasPhone {
                    phone = other.phone
                }
                if other.hasSmsCode {
                    smsCode = other.smsCode
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.AuthRealnameRequest.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.AuthRealnameRequest.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        realname = try codedInputStream.readString()

                    case 18:
                        idno = try codedInputStream.readString()

                    case 26:
                        phone = try codedInputStream.readString()

                    case 34:
                        smsCode = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.AuthRealnameRequest.Builder {
                let resultDecodedBuilder = Apiproto.AuthRealnameRequest.Builder()
                if let jsonValueRealname = jsonMap["realname"] as? String {
                    resultDecodedBuilder.realname = jsonValueRealname
                }
                if let jsonValueIdno = jsonMap["idno"] as? String {
                    resultDecodedBuilder.idno = jsonValueIdno
                }
                if let jsonValuePhone = jsonMap["phone"] as? String {
                    resultDecodedBuilder.phone = jsonValuePhone
                }
                if let jsonValueSmsCode = jsonMap["smsCode"] as? String {
                    resultDecodedBuilder.smsCode = jsonValueSmsCode
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.AuthRealnameRequest.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.AuthRealnameRequest.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    /// 每日签到
    final public class DailyCheckReply : GeneratedMessage {

        public static func == (lhs: Apiproto.DailyCheckReply, rhs: Apiproto.DailyCheckReply) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasContCheckDays == rhs.hasContCheckDays) && (!lhs.hasContCheckDays || lhs.contCheckDays == rhs.contCheckDays)
            fieldCheck = fieldCheck && (lhs.hasExp == rhs.hasExp) && (!lhs.hasExp || lhs.exp == rhs.exp)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        /// 连续签到天数
        public fileprivate(set) var contCheckDays:Int32 = Int32(0)
        public fileprivate(set) var hasContCheckDays:Bool = false

        /// 本次签到获得经验值
        public fileprivate(set) var exp:Int32 = Int32(0)
        public fileprivate(set) var hasExp:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasContCheckDays {
                try codedOutputStream.writeInt32(fieldNumber: 1, value:contCheckDays)
            }
            if hasExp {
                try codedOutputStream.writeInt32(fieldNumber: 2, value:exp)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasContCheckDays {
                serialize_size += contCheckDays.computeInt32Size(fieldNumber: 1)
            }
            if hasExp {
                serialize_size += exp.computeInt32Size(fieldNumber: 2)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.DailyCheckReply.Builder {
            return Apiproto.DailyCheckReply.classBuilder() as! Apiproto.DailyCheckReply.Builder
        }
        public func getBuilder() -> Apiproto.DailyCheckReply.Builder {
            return classBuilder() as! Apiproto.DailyCheckReply.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.DailyCheckReply.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.DailyCheckReply.Builder()
        }
        public func toBuilder() throws -> Apiproto.DailyCheckReply.Builder {
            return try Apiproto.DailyCheckReply.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.DailyCheckReply) throws -> Apiproto.DailyCheckReply.Builder {
            return try Apiproto.DailyCheckReply.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasContCheckDays {
                jsonMap["contCheckDays"] = Int(contCheckDays)
            }
            if hasExp {
                jsonMap["exp"] = Int(exp)
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.DailyCheckReply {
            return try Apiproto.DailyCheckReply.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.DailyCheckReply {
            return try Apiproto.DailyCheckReply.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasContCheckDays {
                output += "\(indent) contCheckDays: \(contCheckDays) \n"
            }
            if hasExp {
                output += "\(indent) exp: \(exp) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasContCheckDays {
                    hashCode = (hashCode &* 31) &+ contCheckDays.hashValue
                }
                if hasExp {
                    hashCode = (hashCode &* 31) &+ exp.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.DailyCheckReply"
        }
        override public func className() -> String {
            return "Apiproto.DailyCheckReply"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.DailyCheckReply = Apiproto.DailyCheckReply()
            public func getMessage() -> Apiproto.DailyCheckReply {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            /// 连续签到天数
            public var contCheckDays:Int32 {
                get {
                    return builderResult.contCheckDays
                }
                set (value) {
                    builderResult.hasContCheckDays = true
                    builderResult.contCheckDays = value
                }
            }
            public var hasContCheckDays:Bool {
                get {
                    return builderResult.hasContCheckDays
                }
            }
            @discardableResult
            public func setContCheckDays(_ value:Int32) -> Apiproto.DailyCheckReply.Builder {
                self.contCheckDays = value
                return self
            }
            @discardableResult
            public func clearContCheckDays() -> Apiproto.DailyCheckReply.Builder{
                builderResult.hasContCheckDays = false
                builderResult.contCheckDays = Int32(0)
                return self
            }
            /// 本次签到获得经验值
            public var exp:Int32 {
                get {
                    return builderResult.exp
                }
                set (value) {
                    builderResult.hasExp = true
                    builderResult.exp = value
                }
            }
            public var hasExp:Bool {
                get {
                    return builderResult.hasExp
                }
            }
            @discardableResult
            public func setExp(_ value:Int32) -> Apiproto.DailyCheckReply.Builder {
                self.exp = value
                return self
            }
            @discardableResult
            public func clearExp() -> Apiproto.DailyCheckReply.Builder{
                builderResult.hasExp = false
                builderResult.exp = Int32(0)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.DailyCheckReply.Builder {
                builderResult = Apiproto.DailyCheckReply()
                return self
            }
            override public func clone() throws -> Apiproto.DailyCheckReply.Builder {
                return try Apiproto.DailyCheckReply.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.DailyCheckReply {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.DailyCheckReply {
                let returnMe:Apiproto.DailyCheckReply = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.DailyCheckReply) throws -> Apiproto.DailyCheckReply.Builder {
                if other == Apiproto.DailyCheckReply() {
                    return self
                }
                if other.hasContCheckDays {
                    contCheckDays = other.contCheckDays
                }
                if other.hasExp {
                    exp = other.exp
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.DailyCheckReply.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.DailyCheckReply.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        contCheckDays = try codedInputStream.readInt32()

                    case 16:
                        exp = try codedInputStream.readInt32()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.DailyCheckReply.Builder {
                let resultDecodedBuilder = Apiproto.DailyCheckReply.Builder()
                if let jsonValueContCheckDays = jsonMap["contCheckDays"] as? Int {
                    resultDecodedBuilder.contCheckDays = Int32(jsonValueContCheckDays)
                } else if let jsonValueContCheckDays = jsonMap["contCheckDays"] as? String {
                    resultDecodedBuilder.contCheckDays = Int32(jsonValueContCheckDays)!
                }
                if let jsonValueExp = jsonMap["exp"] as? Int {
                    resultDecodedBuilder.exp = Int32(jsonValueExp)
                } else if let jsonValueExp = jsonMap["exp"] as? String {
                    resultDecodedBuilder.exp = Int32(jsonValueExp)!
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.DailyCheckReply.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.DailyCheckReply.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

}
extension Apiproto.UserInfo: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.UserInfo> {
        var mergedArray = Array<Apiproto.UserInfo>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.UserInfo? {
        return try Apiproto.UserInfo.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.UserInfo {
        return try Apiproto.UserInfo.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.UserRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.UserInfo {
        return try Apiproto.UserInfo.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.UserInfo {
        return try Apiproto.UserInfo.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.UserInfo {
        return try Apiproto.UserInfo.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.UserInfo {
        return try Apiproto.UserInfo.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.UserInfo {
        return try Apiproto.UserInfo.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "accountId": return self.accountId
        case "nickname": return self.nickname
        case "icon": return self.icon
        case "idno": return self.idno
        case "sex": return self.sex
        case "exp": return self.exp
        case "level": return self.level
        case "realname": return self.realname
        case "bindphone": return self.bindphone
        case "bindqq": return self.bindqq
        case "bindwx": return self.bindwx
        case "invitationCode": return self.invitationCode
        case "payPassword": return self.payPassword
        case "payOpenPassword": return self.payOpenPassword
        case "loginPassword": return self.loginPassword
        case "userInviteStatus": return self.userInviteStatus
        case "isDailyCheck": return self.isDailyCheck
        default: return nil
        }
    }
}
extension Apiproto.UserInfo.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "accountId": return self.accountId
            case "nickname": return self.nickname
            case "icon": return self.icon
            case "idno": return self.idno
            case "sex": return self.sex
            case "exp": return self.exp
            case "level": return self.level
            case "realname": return self.realname
            case "bindphone": return self.bindphone
            case "bindqq": return self.bindqq
            case "bindwx": return self.bindwx
            case "invitationCode": return self.invitationCode
            case "payPassword": return self.payPassword
            case "payOpenPassword": return self.payOpenPassword
            case "loginPassword": return self.loginPassword
            case "userInviteStatus": return self.userInviteStatus
            case "isDailyCheck": return self.isDailyCheck
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "accountId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.accountId = newSubscriptValue
            case "nickname":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.nickname = newSubscriptValue
            case "icon":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.icon = newSubscriptValue
            case "idno":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.idno = newSubscriptValue
            case "sex":
                guard let newSubscriptValue = newSubscriptValue as? Apiproto.Sex else {
                    return
                }
                self.sex = newSubscriptValue
            case "exp":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.exp = newSubscriptValue
            case "level":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.level = newSubscriptValue
            case "realname":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.realname = newSubscriptValue
            case "bindphone":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.bindphone = newSubscriptValue
            case "bindqq":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.bindqq = newSubscriptValue
            case "bindwx":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.bindwx = newSubscriptValue
            case "invitationCode":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.invitationCode = newSubscriptValue
            case "payPassword":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.payPassword = newSubscriptValue
            case "payOpenPassword":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.payOpenPassword = newSubscriptValue
            case "loginPassword":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.loginPassword = newSubscriptValue
            case "userInviteStatus":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.userInviteStatus = newSubscriptValue
            case "isDailyCheck":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.isDailyCheck = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.RegistRequest: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.RegistRequest> {
        var mergedArray = Array<Apiproto.RegistRequest>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.RegistRequest? {
        return try Apiproto.RegistRequest.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.RegistRequest {
        return try Apiproto.RegistRequest.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.UserRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.RegistRequest {
        return try Apiproto.RegistRequest.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.RegistRequest {
        return try Apiproto.RegistRequest.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.RegistRequest {
        return try Apiproto.RegistRequest.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.RegistRequest {
        return try Apiproto.RegistRequest.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.RegistRequest {
        return try Apiproto.RegistRequest.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "phone": return self.phone
        case "code": return self.code
        case "password": return self.password
        default: return nil
        }
    }
}
extension Apiproto.RegistRequest.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "phone": return self.phone
            case "code": return self.code
            case "password": return self.password
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "phone":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.phone = newSubscriptValue
            case "code":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.code = newSubscriptValue
            case "password":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.password = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.LoginRequest: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.LoginRequest> {
        var mergedArray = Array<Apiproto.LoginRequest>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.LoginRequest? {
        return try Apiproto.LoginRequest.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.LoginRequest {
        return try Apiproto.LoginRequest.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.UserRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.LoginRequest {
        return try Apiproto.LoginRequest.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.LoginRequest {
        return try Apiproto.LoginRequest.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.LoginRequest {
        return try Apiproto.LoginRequest.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.LoginRequest {
        return try Apiproto.LoginRequest.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.LoginRequest {
        return try Apiproto.LoginRequest.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "type": return self.type
        case "phone": return self.phone
        case "password": return self.password
        case "openid": return self.openid
        case "accessToken": return self.accessToken
        default: return nil
        }
    }
}
extension Apiproto.LoginRequest.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "type": return self.type
            case "phone": return self.phone
            case "password": return self.password
            case "openid": return self.openid
            case "accessToken": return self.accessToken
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "type":
                guard let newSubscriptValue = newSubscriptValue as? Apiproto.UserType else {
                    return
                }
                self.type = newSubscriptValue
            case "phone":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.phone = newSubscriptValue
            case "password":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.password = newSubscriptValue
            case "openid":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.openid = newSubscriptValue
            case "accessToken":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.accessToken = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.LoginReply: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.LoginReply> {
        var mergedArray = Array<Apiproto.LoginReply>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.LoginReply? {
        return try Apiproto.LoginReply.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.LoginReply {
        return try Apiproto.LoginReply.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.UserRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.LoginReply {
        return try Apiproto.LoginReply.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.LoginReply {
        return try Apiproto.LoginReply.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.LoginReply {
        return try Apiproto.LoginReply.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.LoginReply {
        return try Apiproto.LoginReply.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.LoginReply {
        return try Apiproto.LoginReply.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "user": return self.user
        case "fund": return self.fund
        case "bankcard": return self.bankcard
        default: return nil
        }
    }
}
extension Apiproto.LoginReply.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "user": return self.user
            case "fund": return self.fund
            case "bankcard": return self.bankcard
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "user":
                guard let newSubscriptValue = newSubscriptValue as? Apiproto.UserInfo else {
                    return
                }
                self.user = newSubscriptValue
            case "fund":
                guard let newSubscriptValue = newSubscriptValue as? Apiproto.FundInfo else {
                    return
                }
                self.fund = newSubscriptValue
            case "bankcard":
                guard let newSubscriptValue = newSubscriptValue as? Apiproto.Bankcard else {
                    return
                }
                self.bankcard = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.ForgotPwdRequest: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.ForgotPwdRequest> {
        var mergedArray = Array<Apiproto.ForgotPwdRequest>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.ForgotPwdRequest? {
        return try Apiproto.ForgotPwdRequest.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.ForgotPwdRequest {
        return try Apiproto.ForgotPwdRequest.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.UserRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.ForgotPwdRequest {
        return try Apiproto.ForgotPwdRequest.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.ForgotPwdRequest {
        return try Apiproto.ForgotPwdRequest.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.ForgotPwdRequest {
        return try Apiproto.ForgotPwdRequest.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.ForgotPwdRequest {
        return try Apiproto.ForgotPwdRequest.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.ForgotPwdRequest {
        return try Apiproto.ForgotPwdRequest.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "phone": return self.phone
        case "code": return self.code
        case "password": return self.password
        default: return nil
        }
    }
}
extension Apiproto.ForgotPwdRequest.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "phone": return self.phone
            case "code": return self.code
            case "password": return self.password
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "phone":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.phone = newSubscriptValue
            case "code":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.code = newSubscriptValue
            case "password":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.password = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.ForgotPayPwdRequest: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.ForgotPayPwdRequest> {
        var mergedArray = Array<Apiproto.ForgotPayPwdRequest>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.ForgotPayPwdRequest? {
        return try Apiproto.ForgotPayPwdRequest.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.ForgotPayPwdRequest {
        return try Apiproto.ForgotPayPwdRequest.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.UserRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.ForgotPayPwdRequest {
        return try Apiproto.ForgotPayPwdRequest.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.ForgotPayPwdRequest {
        return try Apiproto.ForgotPayPwdRequest.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.ForgotPayPwdRequest {
        return try Apiproto.ForgotPayPwdRequest.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.ForgotPayPwdRequest {
        return try Apiproto.ForgotPayPwdRequest.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.ForgotPayPwdRequest {
        return try Apiproto.ForgotPayPwdRequest.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "phone": return self.phone
        case "loginPassword": return self.loginPassword
        case "code": return self.code
        default: return nil
        }
    }
}
extension Apiproto.ForgotPayPwdRequest.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "phone": return self.phone
            case "loginPassword": return self.loginPassword
            case "code": return self.code
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "phone":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.phone = newSubscriptValue
            case "loginPassword":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.loginPassword = newSubscriptValue
            case "code":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.code = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.VerifyPayPwdRequest: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.VerifyPayPwdRequest> {
        var mergedArray = Array<Apiproto.VerifyPayPwdRequest>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.VerifyPayPwdRequest? {
        return try Apiproto.VerifyPayPwdRequest.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.VerifyPayPwdRequest {
        return try Apiproto.VerifyPayPwdRequest.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.UserRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.VerifyPayPwdRequest {
        return try Apiproto.VerifyPayPwdRequest.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.VerifyPayPwdRequest {
        return try Apiproto.VerifyPayPwdRequest.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.VerifyPayPwdRequest {
        return try Apiproto.VerifyPayPwdRequest.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.VerifyPayPwdRequest {
        return try Apiproto.VerifyPayPwdRequest.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.VerifyPayPwdRequest {
        return try Apiproto.VerifyPayPwdRequest.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "password": return self.password
        case "api": return self.api
        default: return nil
        }
    }
}
extension Apiproto.VerifyPayPwdRequest.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "password": return self.password
            case "api": return self.api
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "password":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.password = newSubscriptValue
            case "api":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.api = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.SetPwdRequest: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.SetPwdRequest> {
        var mergedArray = Array<Apiproto.SetPwdRequest>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.SetPwdRequest? {
        return try Apiproto.SetPwdRequest.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.SetPwdRequest {
        return try Apiproto.SetPwdRequest.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.UserRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.SetPwdRequest {
        return try Apiproto.SetPwdRequest.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.SetPwdRequest {
        return try Apiproto.SetPwdRequest.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.SetPwdRequest {
        return try Apiproto.SetPwdRequest.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.SetPwdRequest {
        return try Apiproto.SetPwdRequest.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.SetPwdRequest {
        return try Apiproto.SetPwdRequest.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "password": return self.password
        case "token": return self.token
        default: return nil
        }
    }
}
extension Apiproto.SetPwdRequest.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "password": return self.password
            case "token": return self.token
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "password":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.password = newSubscriptValue
            case "token":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.token = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.ResetPwdRequest: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.ResetPwdRequest> {
        var mergedArray = Array<Apiproto.ResetPwdRequest>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.ResetPwdRequest? {
        return try Apiproto.ResetPwdRequest.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.ResetPwdRequest {
        return try Apiproto.ResetPwdRequest.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.UserRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.ResetPwdRequest {
        return try Apiproto.ResetPwdRequest.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.ResetPwdRequest {
        return try Apiproto.ResetPwdRequest.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.ResetPwdRequest {
        return try Apiproto.ResetPwdRequest.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.ResetPwdRequest {
        return try Apiproto.ResetPwdRequest.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.ResetPwdRequest {
        return try Apiproto.ResetPwdRequest.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "password": return self.password
        case "newPassword": return self.newPassword
        default: return nil
        }
    }
}
extension Apiproto.ResetPwdRequest.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "password": return self.password
            case "newPassword": return self.newPassword
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "password":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.password = newSubscriptValue
            case "newPassword":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.newPassword = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.BindPhoneRequest: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.BindPhoneRequest> {
        var mergedArray = Array<Apiproto.BindPhoneRequest>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.BindPhoneRequest? {
        return try Apiproto.BindPhoneRequest.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.BindPhoneRequest {
        return try Apiproto.BindPhoneRequest.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.UserRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BindPhoneRequest {
        return try Apiproto.BindPhoneRequest.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.BindPhoneRequest {
        return try Apiproto.BindPhoneRequest.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BindPhoneRequest {
        return try Apiproto.BindPhoneRequest.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.BindPhoneRequest {
        return try Apiproto.BindPhoneRequest.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BindPhoneRequest {
        return try Apiproto.BindPhoneRequest.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "phone": return self.phone
        case "code": return self.code
        default: return nil
        }
    }
}
extension Apiproto.BindPhoneRequest.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "phone": return self.phone
            case "code": return self.code
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "phone":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.phone = newSubscriptValue
            case "code":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.code = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.ChangePhoneRequest: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.ChangePhoneRequest> {
        var mergedArray = Array<Apiproto.ChangePhoneRequest>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.ChangePhoneRequest? {
        return try Apiproto.ChangePhoneRequest.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.ChangePhoneRequest {
        return try Apiproto.ChangePhoneRequest.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.UserRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.ChangePhoneRequest {
        return try Apiproto.ChangePhoneRequest.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.ChangePhoneRequest {
        return try Apiproto.ChangePhoneRequest.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.ChangePhoneRequest {
        return try Apiproto.ChangePhoneRequest.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.ChangePhoneRequest {
        return try Apiproto.ChangePhoneRequest.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.ChangePhoneRequest {
        return try Apiproto.ChangePhoneRequest.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "phone": return self.phone
        case "newPhone": return self.newPhone
        case "code": return self.code
        default: return nil
        }
    }
}
extension Apiproto.ChangePhoneRequest.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "phone": return self.phone
            case "newPhone": return self.newPhone
            case "code": return self.code
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "phone":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.phone = newSubscriptValue
            case "newPhone":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.newPhone = newSubscriptValue
            case "code":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.code = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.BindWeixinRequest: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.BindWeixinRequest> {
        var mergedArray = Array<Apiproto.BindWeixinRequest>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.BindWeixinRequest? {
        return try Apiproto.BindWeixinRequest.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.BindWeixinRequest {
        return try Apiproto.BindWeixinRequest.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.UserRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BindWeixinRequest {
        return try Apiproto.BindWeixinRequest.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.BindWeixinRequest {
        return try Apiproto.BindWeixinRequest.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BindWeixinRequest {
        return try Apiproto.BindWeixinRequest.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.BindWeixinRequest {
        return try Apiproto.BindWeixinRequest.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BindWeixinRequest {
        return try Apiproto.BindWeixinRequest.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "openid": return self.openid
        default: return nil
        }
    }
}
extension Apiproto.BindWeixinRequest.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "openid": return self.openid
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "openid":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.openid = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.BindQqrequest: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.BindQqrequest> {
        var mergedArray = Array<Apiproto.BindQqrequest>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.BindQqrequest? {
        return try Apiproto.BindQqrequest.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.BindQqrequest {
        return try Apiproto.BindQqrequest.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.UserRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BindQqrequest {
        return try Apiproto.BindQqrequest.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.BindQqrequest {
        return try Apiproto.BindQqrequest.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BindQqrequest {
        return try Apiproto.BindQqrequest.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.BindQqrequest {
        return try Apiproto.BindQqrequest.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BindQqrequest {
        return try Apiproto.BindQqrequest.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "openid": return self.openid
        default: return nil
        }
    }
}
extension Apiproto.BindQqrequest.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "openid": return self.openid
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "openid":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.openid = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.SetIconRequest: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.SetIconRequest> {
        var mergedArray = Array<Apiproto.SetIconRequest>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.SetIconRequest? {
        return try Apiproto.SetIconRequest.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.SetIconRequest {
        return try Apiproto.SetIconRequest.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.UserRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.SetIconRequest {
        return try Apiproto.SetIconRequest.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.SetIconRequest {
        return try Apiproto.SetIconRequest.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.SetIconRequest {
        return try Apiproto.SetIconRequest.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.SetIconRequest {
        return try Apiproto.SetIconRequest.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.SetIconRequest {
        return try Apiproto.SetIconRequest.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "value": return self.value
        default: return nil
        }
    }
}
extension Apiproto.SetIconRequest.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "value": return self.value
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "value":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.value = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.SetNicknameRequest: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.SetNicknameRequest> {
        var mergedArray = Array<Apiproto.SetNicknameRequest>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.SetNicknameRequest? {
        return try Apiproto.SetNicknameRequest.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.SetNicknameRequest {
        return try Apiproto.SetNicknameRequest.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.UserRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.SetNicknameRequest {
        return try Apiproto.SetNicknameRequest.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.SetNicknameRequest {
        return try Apiproto.SetNicknameRequest.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.SetNicknameRequest {
        return try Apiproto.SetNicknameRequest.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.SetNicknameRequest {
        return try Apiproto.SetNicknameRequest.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.SetNicknameRequest {
        return try Apiproto.SetNicknameRequest.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "value": return self.value
        default: return nil
        }
    }
}
extension Apiproto.SetNicknameRequest.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "value": return self.value
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "value":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.value = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.SetSexRequest: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.SetSexRequest> {
        var mergedArray = Array<Apiproto.SetSexRequest>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.SetSexRequest? {
        return try Apiproto.SetSexRequest.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.SetSexRequest {
        return try Apiproto.SetSexRequest.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.UserRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.SetSexRequest {
        return try Apiproto.SetSexRequest.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.SetSexRequest {
        return try Apiproto.SetSexRequest.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.SetSexRequest {
        return try Apiproto.SetSexRequest.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.SetSexRequest {
        return try Apiproto.SetSexRequest.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.SetSexRequest {
        return try Apiproto.SetSexRequest.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "value": return self.value
        default: return nil
        }
    }
}
extension Apiproto.SetSexRequest.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "value": return self.value
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "value":
                guard let newSubscriptValue = newSubscriptValue as? Apiproto.Sex else {
                    return
                }
                self.value = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.SetBoolRequest: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.SetBoolRequest> {
        var mergedArray = Array<Apiproto.SetBoolRequest>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.SetBoolRequest? {
        return try Apiproto.SetBoolRequest.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.SetBoolRequest {
        return try Apiproto.SetBoolRequest.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.UserRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.SetBoolRequest {
        return try Apiproto.SetBoolRequest.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.SetBoolRequest {
        return try Apiproto.SetBoolRequest.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.SetBoolRequest {
        return try Apiproto.SetBoolRequest.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.SetBoolRequest {
        return try Apiproto.SetBoolRequest.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.SetBoolRequest {
        return try Apiproto.SetBoolRequest.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "value": return self.value
        default: return nil
        }
    }
}
extension Apiproto.SetBoolRequest.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "value": return self.value
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "value":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.value = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.SetIntRequest: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.SetIntRequest> {
        var mergedArray = Array<Apiproto.SetIntRequest>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.SetIntRequest? {
        return try Apiproto.SetIntRequest.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.SetIntRequest {
        return try Apiproto.SetIntRequest.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.UserRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.SetIntRequest {
        return try Apiproto.SetIntRequest.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.SetIntRequest {
        return try Apiproto.SetIntRequest.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.SetIntRequest {
        return try Apiproto.SetIntRequest.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.SetIntRequest {
        return try Apiproto.SetIntRequest.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.SetIntRequest {
        return try Apiproto.SetIntRequest.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "value": return self.value
        default: return nil
        }
    }
}
extension Apiproto.SetIntRequest.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "value": return self.value
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "value":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.value = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.AuthRealnameRequest: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.AuthRealnameRequest> {
        var mergedArray = Array<Apiproto.AuthRealnameRequest>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.AuthRealnameRequest? {
        return try Apiproto.AuthRealnameRequest.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.AuthRealnameRequest {
        return try Apiproto.AuthRealnameRequest.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.UserRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.AuthRealnameRequest {
        return try Apiproto.AuthRealnameRequest.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.AuthRealnameRequest {
        return try Apiproto.AuthRealnameRequest.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.AuthRealnameRequest {
        return try Apiproto.AuthRealnameRequest.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.AuthRealnameRequest {
        return try Apiproto.AuthRealnameRequest.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.AuthRealnameRequest {
        return try Apiproto.AuthRealnameRequest.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "realname": return self.realname
        case "idno": return self.idno
        case "phone": return self.phone
        case "smsCode": return self.smsCode
        default: return nil
        }
    }
}
extension Apiproto.AuthRealnameRequest.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "realname": return self.realname
            case "idno": return self.idno
            case "phone": return self.phone
            case "smsCode": return self.smsCode
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "realname":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.realname = newSubscriptValue
            case "idno":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.idno = newSubscriptValue
            case "phone":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.phone = newSubscriptValue
            case "smsCode":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.smsCode = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.DailyCheckReply: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.DailyCheckReply> {
        var mergedArray = Array<Apiproto.DailyCheckReply>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.DailyCheckReply? {
        return try Apiproto.DailyCheckReply.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.DailyCheckReply {
        return try Apiproto.DailyCheckReply.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.UserRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.DailyCheckReply {
        return try Apiproto.DailyCheckReply.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.DailyCheckReply {
        return try Apiproto.DailyCheckReply.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.DailyCheckReply {
        return try Apiproto.DailyCheckReply.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.DailyCheckReply {
        return try Apiproto.DailyCheckReply.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.DailyCheckReply {
        return try Apiproto.DailyCheckReply.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "contCheckDays": return self.contCheckDays
        case "exp": return self.exp
        default: return nil
        }
    }
}
extension Apiproto.DailyCheckReply.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "contCheckDays": return self.contCheckDays
            case "exp": return self.exp
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "contCheckDays":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.contCheckDays = newSubscriptValue
            case "exp":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.exp = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
