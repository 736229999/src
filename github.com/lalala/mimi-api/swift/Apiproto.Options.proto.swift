/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "options.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public extension Apiproto{}

public extension Apiproto {
    public struct OptionsRoot {
        public static let `default` = OptionsRoot()
        public var extensionRegistry:ExtensionRegistry

        init() {
            extensionRegistry = ExtensionRegistry()
            registerAllExtensions(registry: extensionRegistry)
        }
        public func registerAllExtensions(registry: ExtensionRegistry) {
        }
    }

    final public class LotteryOptions : GeneratedMessage {

        public static func == (lhs: Apiproto.LotteryOptions, rhs: Apiproto.LotteryOptions) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
            fieldCheck = fieldCheck && (lhs.hasLotteryName == rhs.hasLotteryName) && (!lhs.hasLotteryName || lhs.lotteryName == rhs.lotteryName)
            fieldCheck = fieldCheck && (lhs.hasIsPlusAward == rhs.hasIsPlusAward) && (!lhs.hasIsPlusAward || lhs.isPlusAward == rhs.isPlusAward)
            fieldCheck = fieldCheck && (lhs.hasInfo == rhs.hasInfo) && (!lhs.hasInfo || lhs.info == rhs.info)
            fieldCheck = fieldCheck && (lhs.hasStopSale == rhs.hasStopSale) && (!lhs.hasStopSale || lhs.stopSale == rhs.stopSale)
            fieldCheck = fieldCheck && (lhs.hasCreateTime == rhs.hasCreateTime) && (!lhs.hasCreateTime || lhs.createTime == rhs.createTime)
            fieldCheck = fieldCheck && (lhs.hasUpdateTime == rhs.hasUpdateTime) && (!lhs.hasUpdateTime || lhs.updateTime == rhs.updateTime)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var id:Int64 = Int64(0)
        public fileprivate(set) var hasId:Bool = false

        public fileprivate(set) var lotteryName:String = ""
        public fileprivate(set) var hasLotteryName:Bool = false

        public fileprivate(set) var isPlusAward:Bool = false
        public fileprivate(set) var hasIsPlusAward:Bool = false

        public fileprivate(set) var info:String = ""
        public fileprivate(set) var hasInfo:Bool = false

        public fileprivate(set) var stopSale:Bool = false
        public fileprivate(set) var hasStopSale:Bool = false

        public fileprivate(set) var createTime:Int64 = Int64(0)
        public fileprivate(set) var hasCreateTime:Bool = false

        public fileprivate(set) var updateTime:Int64 = Int64(0)
        public fileprivate(set) var hasUpdateTime:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasId {
                try codedOutputStream.writeInt64(fieldNumber: 1, value:id)
            }
            if hasLotteryName {
                try codedOutputStream.writeString(fieldNumber: 2, value:lotteryName)
            }
            if hasIsPlusAward {
                try codedOutputStream.writeBool(fieldNumber: 3, value:isPlusAward)
            }
            if hasInfo {
                try codedOutputStream.writeString(fieldNumber: 4, value:info)
            }
            if hasStopSale {
                try codedOutputStream.writeBool(fieldNumber: 5, value:stopSale)
            }
            if hasCreateTime {
                try codedOutputStream.writeInt64(fieldNumber: 6, value:createTime)
            }
            if hasUpdateTime {
                try codedOutputStream.writeInt64(fieldNumber: 7, value:updateTime)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasId {
                serialize_size += id.computeInt64Size(fieldNumber: 1)
            }
            if hasLotteryName {
                serialize_size += lotteryName.computeStringSize(fieldNumber: 2)
            }
            if hasIsPlusAward {
                serialize_size += isPlusAward.computeBoolSize(fieldNumber: 3)
            }
            if hasInfo {
                serialize_size += info.computeStringSize(fieldNumber: 4)
            }
            if hasStopSale {
                serialize_size += stopSale.computeBoolSize(fieldNumber: 5)
            }
            if hasCreateTime {
                serialize_size += createTime.computeInt64Size(fieldNumber: 6)
            }
            if hasUpdateTime {
                serialize_size += updateTime.computeInt64Size(fieldNumber: 7)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.LotteryOptions.Builder {
            return Apiproto.LotteryOptions.classBuilder() as! Apiproto.LotteryOptions.Builder
        }
        public func getBuilder() -> Apiproto.LotteryOptions.Builder {
            return classBuilder() as! Apiproto.LotteryOptions.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.LotteryOptions.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.LotteryOptions.Builder()
        }
        public func toBuilder() throws -> Apiproto.LotteryOptions.Builder {
            return try Apiproto.LotteryOptions.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.LotteryOptions) throws -> Apiproto.LotteryOptions.Builder {
            return try Apiproto.LotteryOptions.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasId {
                jsonMap["id"] = "\(id)"
            }
            if hasLotteryName {
                jsonMap["lotteryName"] = lotteryName
            }
            if hasIsPlusAward {
                jsonMap["isPlusAward"] = isPlusAward
            }
            if hasInfo {
                jsonMap["info"] = info
            }
            if hasStopSale {
                jsonMap["stopSale"] = stopSale
            }
            if hasCreateTime {
                jsonMap["createTime"] = "\(createTime)"
            }
            if hasUpdateTime {
                jsonMap["updateTime"] = "\(updateTime)"
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.LotteryOptions {
            return try Apiproto.LotteryOptions.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.LotteryOptions {
            return try Apiproto.LotteryOptions.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasId {
                output += "\(indent) id: \(id) \n"
            }
            if hasLotteryName {
                output += "\(indent) lotteryName: \(lotteryName) \n"
            }
            if hasIsPlusAward {
                output += "\(indent) isPlusAward: \(isPlusAward) \n"
            }
            if hasInfo {
                output += "\(indent) info: \(info) \n"
            }
            if hasStopSale {
                output += "\(indent) stopSale: \(stopSale) \n"
            }
            if hasCreateTime {
                output += "\(indent) createTime: \(createTime) \n"
            }
            if hasUpdateTime {
                output += "\(indent) updateTime: \(updateTime) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasId {
                    hashCode = (hashCode &* 31) &+ id.hashValue
                }
                if hasLotteryName {
                    hashCode = (hashCode &* 31) &+ lotteryName.hashValue
                }
                if hasIsPlusAward {
                    hashCode = (hashCode &* 31) &+ isPlusAward.hashValue
                }
                if hasInfo {
                    hashCode = (hashCode &* 31) &+ info.hashValue
                }
                if hasStopSale {
                    hashCode = (hashCode &* 31) &+ stopSale.hashValue
                }
                if hasCreateTime {
                    hashCode = (hashCode &* 31) &+ createTime.hashValue
                }
                if hasUpdateTime {
                    hashCode = (hashCode &* 31) &+ updateTime.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.LotteryOptions"
        }
        override public func className() -> String {
            return "Apiproto.LotteryOptions"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.LotteryOptions = Apiproto.LotteryOptions()
            public func getMessage() -> Apiproto.LotteryOptions {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var id:Int64 {
                get {
                    return builderResult.id
                }
                set (value) {
                    builderResult.hasId = true
                    builderResult.id = value
                }
            }
            public var hasId:Bool {
                get {
                    return builderResult.hasId
                }
            }
            @discardableResult
            public func setId(_ value:Int64) -> Apiproto.LotteryOptions.Builder {
                self.id = value
                return self
            }
            @discardableResult
            public func clearId() -> Apiproto.LotteryOptions.Builder{
                builderResult.hasId = false
                builderResult.id = Int64(0)
                return self
            }
            public var lotteryName:String {
                get {
                    return builderResult.lotteryName
                }
                set (value) {
                    builderResult.hasLotteryName = true
                    builderResult.lotteryName = value
                }
            }
            public var hasLotteryName:Bool {
                get {
                    return builderResult.hasLotteryName
                }
            }
            @discardableResult
            public func setLotteryName(_ value:String) -> Apiproto.LotteryOptions.Builder {
                self.lotteryName = value
                return self
            }
            @discardableResult
            public func clearLotteryName() -> Apiproto.LotteryOptions.Builder{
                builderResult.hasLotteryName = false
                builderResult.lotteryName = ""
                return self
            }
            public var isPlusAward:Bool {
                get {
                    return builderResult.isPlusAward
                }
                set (value) {
                    builderResult.hasIsPlusAward = true
                    builderResult.isPlusAward = value
                }
            }
            public var hasIsPlusAward:Bool {
                get {
                    return builderResult.hasIsPlusAward
                }
            }
            @discardableResult
            public func setIsPlusAward(_ value:Bool) -> Apiproto.LotteryOptions.Builder {
                self.isPlusAward = value
                return self
            }
            @discardableResult
            public func clearIsPlusAward() -> Apiproto.LotteryOptions.Builder{
                builderResult.hasIsPlusAward = false
                builderResult.isPlusAward = false
                return self
            }
            public var info:String {
                get {
                    return builderResult.info
                }
                set (value) {
                    builderResult.hasInfo = true
                    builderResult.info = value
                }
            }
            public var hasInfo:Bool {
                get {
                    return builderResult.hasInfo
                }
            }
            @discardableResult
            public func setInfo(_ value:String) -> Apiproto.LotteryOptions.Builder {
                self.info = value
                return self
            }
            @discardableResult
            public func clearInfo() -> Apiproto.LotteryOptions.Builder{
                builderResult.hasInfo = false
                builderResult.info = ""
                return self
            }
            public var stopSale:Bool {
                get {
                    return builderResult.stopSale
                }
                set (value) {
                    builderResult.hasStopSale = true
                    builderResult.stopSale = value
                }
            }
            public var hasStopSale:Bool {
                get {
                    return builderResult.hasStopSale
                }
            }
            @discardableResult
            public func setStopSale(_ value:Bool) -> Apiproto.LotteryOptions.Builder {
                self.stopSale = value
                return self
            }
            @discardableResult
            public func clearStopSale() -> Apiproto.LotteryOptions.Builder{
                builderResult.hasStopSale = false
                builderResult.stopSale = false
                return self
            }
            public var createTime:Int64 {
                get {
                    return builderResult.createTime
                }
                set (value) {
                    builderResult.hasCreateTime = true
                    builderResult.createTime = value
                }
            }
            public var hasCreateTime:Bool {
                get {
                    return builderResult.hasCreateTime
                }
            }
            @discardableResult
            public func setCreateTime(_ value:Int64) -> Apiproto.LotteryOptions.Builder {
                self.createTime = value
                return self
            }
            @discardableResult
            public func clearCreateTime() -> Apiproto.LotteryOptions.Builder{
                builderResult.hasCreateTime = false
                builderResult.createTime = Int64(0)
                return self
            }
            public var updateTime:Int64 {
                get {
                    return builderResult.updateTime
                }
                set (value) {
                    builderResult.hasUpdateTime = true
                    builderResult.updateTime = value
                }
            }
            public var hasUpdateTime:Bool {
                get {
                    return builderResult.hasUpdateTime
                }
            }
            @discardableResult
            public func setUpdateTime(_ value:Int64) -> Apiproto.LotteryOptions.Builder {
                self.updateTime = value
                return self
            }
            @discardableResult
            public func clearUpdateTime() -> Apiproto.LotteryOptions.Builder{
                builderResult.hasUpdateTime = false
                builderResult.updateTime = Int64(0)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.LotteryOptions.Builder {
                builderResult = Apiproto.LotteryOptions()
                return self
            }
            override public func clone() throws -> Apiproto.LotteryOptions.Builder {
                return try Apiproto.LotteryOptions.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.LotteryOptions {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.LotteryOptions {
                let returnMe:Apiproto.LotteryOptions = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.LotteryOptions) throws -> Apiproto.LotteryOptions.Builder {
                if other == Apiproto.LotteryOptions() {
                    return self
                }
                if other.hasId {
                    id = other.id
                }
                if other.hasLotteryName {
                    lotteryName = other.lotteryName
                }
                if other.hasIsPlusAward {
                    isPlusAward = other.isPlusAward
                }
                if other.hasInfo {
                    info = other.info
                }
                if other.hasStopSale {
                    stopSale = other.stopSale
                }
                if other.hasCreateTime {
                    createTime = other.createTime
                }
                if other.hasUpdateTime {
                    updateTime = other.updateTime
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.LotteryOptions.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.LotteryOptions.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        id = try codedInputStream.readInt64()

                    case 18:
                        lotteryName = try codedInputStream.readString()

                    case 24:
                        isPlusAward = try codedInputStream.readBool()

                    case 34:
                        info = try codedInputStream.readString()

                    case 40:
                        stopSale = try codedInputStream.readBool()

                    case 48:
                        createTime = try codedInputStream.readInt64()

                    case 56:
                        updateTime = try codedInputStream.readInt64()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.LotteryOptions.Builder {
                let resultDecodedBuilder = Apiproto.LotteryOptions.Builder()
                if let jsonValueId = jsonMap["id"] as? String {
                    resultDecodedBuilder.id = Int64(jsonValueId)!
                } else if let jsonValueId = jsonMap["id"] as? Int {
                    resultDecodedBuilder.id = Int64(jsonValueId)
                }
                if let jsonValueLotteryName = jsonMap["lotteryName"] as? String {
                    resultDecodedBuilder.lotteryName = jsonValueLotteryName
                }
                if let jsonValueIsPlusAward = jsonMap["isPlusAward"] as? Bool {
                    resultDecodedBuilder.isPlusAward = jsonValueIsPlusAward
                }
                if let jsonValueInfo = jsonMap["info"] as? String {
                    resultDecodedBuilder.info = jsonValueInfo
                }
                if let jsonValueStopSale = jsonMap["stopSale"] as? Bool {
                    resultDecodedBuilder.stopSale = jsonValueStopSale
                }
                if let jsonValueCreateTime = jsonMap["createTime"] as? String {
                    resultDecodedBuilder.createTime = Int64(jsonValueCreateTime)!
                } else if let jsonValueCreateTime = jsonMap["createTime"] as? Int {
                    resultDecodedBuilder.createTime = Int64(jsonValueCreateTime)
                }
                if let jsonValueUpdateTime = jsonMap["updateTime"] as? String {
                    resultDecodedBuilder.updateTime = Int64(jsonValueUpdateTime)!
                } else if let jsonValueUpdateTime = jsonMap["updateTime"] as? Int {
                    resultDecodedBuilder.updateTime = Int64(jsonValueUpdateTime)
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.LotteryOptions.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.LotteryOptions.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class WiningList : GeneratedMessage {

        public static func == (lhs: Apiproto.WiningList, rhs: Apiproto.WiningList) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
            fieldCheck = fieldCheck && (lhs.hasInfo == rhs.hasInfo) && (!lhs.hasInfo || lhs.info == rhs.info)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var id:Int64 = Int64(0)
        public fileprivate(set) var hasId:Bool = false

        public fileprivate(set) var info:String = ""
        public fileprivate(set) var hasInfo:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasId {
                try codedOutputStream.writeInt64(fieldNumber: 1, value:id)
            }
            if hasInfo {
                try codedOutputStream.writeString(fieldNumber: 2, value:info)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasId {
                serialize_size += id.computeInt64Size(fieldNumber: 1)
            }
            if hasInfo {
                serialize_size += info.computeStringSize(fieldNumber: 2)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.WiningList.Builder {
            return Apiproto.WiningList.classBuilder() as! Apiproto.WiningList.Builder
        }
        public func getBuilder() -> Apiproto.WiningList.Builder {
            return classBuilder() as! Apiproto.WiningList.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.WiningList.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.WiningList.Builder()
        }
        public func toBuilder() throws -> Apiproto.WiningList.Builder {
            return try Apiproto.WiningList.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.WiningList) throws -> Apiproto.WiningList.Builder {
            return try Apiproto.WiningList.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasId {
                jsonMap["id"] = "\(id)"
            }
            if hasInfo {
                jsonMap["info"] = info
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.WiningList {
            return try Apiproto.WiningList.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.WiningList {
            return try Apiproto.WiningList.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasId {
                output += "\(indent) id: \(id) \n"
            }
            if hasInfo {
                output += "\(indent) info: \(info) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasId {
                    hashCode = (hashCode &* 31) &+ id.hashValue
                }
                if hasInfo {
                    hashCode = (hashCode &* 31) &+ info.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.WiningList"
        }
        override public func className() -> String {
            return "Apiproto.WiningList"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.WiningList = Apiproto.WiningList()
            public func getMessage() -> Apiproto.WiningList {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var id:Int64 {
                get {
                    return builderResult.id
                }
                set (value) {
                    builderResult.hasId = true
                    builderResult.id = value
                }
            }
            public var hasId:Bool {
                get {
                    return builderResult.hasId
                }
            }
            @discardableResult
            public func setId(_ value:Int64) -> Apiproto.WiningList.Builder {
                self.id = value
                return self
            }
            @discardableResult
            public func clearId() -> Apiproto.WiningList.Builder{
                builderResult.hasId = false
                builderResult.id = Int64(0)
                return self
            }
            public var info:String {
                get {
                    return builderResult.info
                }
                set (value) {
                    builderResult.hasInfo = true
                    builderResult.info = value
                }
            }
            public var hasInfo:Bool {
                get {
                    return builderResult.hasInfo
                }
            }
            @discardableResult
            public func setInfo(_ value:String) -> Apiproto.WiningList.Builder {
                self.info = value
                return self
            }
            @discardableResult
            public func clearInfo() -> Apiproto.WiningList.Builder{
                builderResult.hasInfo = false
                builderResult.info = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.WiningList.Builder {
                builderResult = Apiproto.WiningList()
                return self
            }
            override public func clone() throws -> Apiproto.WiningList.Builder {
                return try Apiproto.WiningList.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.WiningList {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.WiningList {
                let returnMe:Apiproto.WiningList = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.WiningList) throws -> Apiproto.WiningList.Builder {
                if other == Apiproto.WiningList() {
                    return self
                }
                if other.hasId {
                    id = other.id
                }
                if other.hasInfo {
                    info = other.info
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.WiningList.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.WiningList.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        id = try codedInputStream.readInt64()

                    case 18:
                        info = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.WiningList.Builder {
                let resultDecodedBuilder = Apiproto.WiningList.Builder()
                if let jsonValueId = jsonMap["id"] as? String {
                    resultDecodedBuilder.id = Int64(jsonValueId)!
                } else if let jsonValueId = jsonMap["id"] as? Int {
                    resultDecodedBuilder.id = Int64(jsonValueId)
                }
                if let jsonValueInfo = jsonMap["info"] as? String {
                    resultDecodedBuilder.info = jsonValueInfo
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.WiningList.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.WiningList.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class Banner : GeneratedMessage {

        public static func == (lhs: Apiproto.Banner, rhs: Apiproto.Banner) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
            fieldCheck = fieldCheck && (lhs.hasUrl == rhs.hasUrl) && (!lhs.hasUrl || lhs.url == rhs.url)
            fieldCheck = fieldCheck && (lhs.hasTargetLink == rhs.hasTargetLink) && (!lhs.hasTargetLink || lhs.targetLink == rhs.targetLink)
            fieldCheck = fieldCheck && (lhs.hasIsVisible == rhs.hasIsVisible) && (!lhs.hasIsVisible || lhs.isVisible == rhs.isVisible)
            fieldCheck = fieldCheck && (lhs.hasDescription == rhs.hasDescription) && (!lhs.hasDescription || lhs.description_ == rhs.description_)
            fieldCheck = fieldCheck && (lhs.hasCreated == rhs.hasCreated) && (!lhs.hasCreated || lhs.created == rhs.created)
            fieldCheck = fieldCheck && (lhs.hasSort == rhs.hasSort) && (!lhs.hasSort || lhs.sort == rhs.sort)
            fieldCheck = fieldCheck && (lhs.hasTargetId == rhs.hasTargetId) && (!lhs.hasTargetId || lhs.targetId == rhs.targetId)
            fieldCheck = fieldCheck && (lhs.hasTargetType == rhs.hasTargetType) && (!lhs.hasTargetType || lhs.targetType == rhs.targetType)
            fieldCheck = fieldCheck && (lhs.hasLocation == rhs.hasLocation) && (!lhs.hasLocation || lhs.location == rhs.location)
            fieldCheck = fieldCheck && (lhs.hasUpdated == rhs.hasUpdated) && (!lhs.hasUpdated || lhs.updated == rhs.updated)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }



            //Enum type declaration start 

            public enum TargetType:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
                /// 全部
                case targetTypeAll = 0

                ///新闻
                case targetTypeNews = 1

                ///活动
                case targetTypeActivity = 2

                ///链接
                case targetTypeLink = 3
                public func toString() -> String {
                    switch self {
                    case .targetTypeAll: return "TargetType_All"
                    case .targetTypeNews: return "TargetType_News"
                    case .targetTypeActivity: return "TargetType_Activity"
                    case .targetTypeLink: return "TargetType_Link"
                    }
                }
                public static func fromString(str:String) throws -> Apiproto.Banner.TargetType {
                    switch str {
                    case "TargetType_All":    return .targetTypeAll
                    case "TargetType_News":    return .targetTypeNews
                    case "TargetType_Activity":    return .targetTypeActivity
                    case "TargetType_Link":    return .targetTypeLink
                    default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
                    }
                }
                public var debugDescription:String { return getDescription() }
                public var description:String { return getDescription() }
                private func getDescription() -> String { 
                    switch self {
                    case .targetTypeAll: return ".targetTypeAll"
                    case .targetTypeNews: return ".targetTypeNews"
                    case .targetTypeActivity: return ".targetTypeActivity"
                    case .targetTypeLink: return ".targetTypeLink"
                    }
                }
                public var hashValue:Int {
                    return self.rawValue.hashValue
                }
                public static func ==(lhs:TargetType, rhs:TargetType) -> Bool {
                    return lhs.hashValue == rhs.hashValue
                }
            }

            //Enum type declaration end 



            //Enum type declaration start 

            public enum Location:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
                /// 全部
                case locationAll = 0

                /// 首页
                case locationHome = 1

                /// 发现
                case locationDiscover = 2
                public func toString() -> String {
                    switch self {
                    case .locationAll: return "Location_All"
                    case .locationHome: return "Location_Home"
                    case .locationDiscover: return "Location_Discover"
                    }
                }
                public static func fromString(str:String) throws -> Apiproto.Banner.Location {
                    switch str {
                    case "Location_All":    return .locationAll
                    case "Location_Home":    return .locationHome
                    case "Location_Discover":    return .locationDiscover
                    default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
                    }
                }
                public var debugDescription:String { return getDescription() }
                public var description:String { return getDescription() }
                private func getDescription() -> String { 
                    switch self {
                    case .locationAll: return ".locationAll"
                    case .locationHome: return ".locationHome"
                    case .locationDiscover: return ".locationDiscover"
                    }
                }
                public var hashValue:Int {
                    return self.rawValue.hashValue
                }
                public static func ==(lhs:Location, rhs:Location) -> Bool {
                    return lhs.hashValue == rhs.hashValue
                }
            }

            //Enum type declaration end 

        public fileprivate(set) var id:Int64 = Int64(0)
        public fileprivate(set) var hasId:Bool = false

        public fileprivate(set) var url:String = ""
        public fileprivate(set) var hasUrl:Bool = false

        public fileprivate(set) var targetLink:String = ""
        public fileprivate(set) var hasTargetLink:Bool = false

        public fileprivate(set) var isVisible:Bool = false
        public fileprivate(set) var hasIsVisible:Bool = false

        public fileprivate(set) var description_:String = ""
        public fileprivate(set) var hasDescription:Bool = false

        public fileprivate(set) var created:Int64 = Int64(0)
        public fileprivate(set) var hasCreated:Bool = false

        public fileprivate(set) var sort:Int64 = Int64(0)
        public fileprivate(set) var hasSort:Bool = false

        public fileprivate(set) var targetId:Int64 = Int64(0)
        public fileprivate(set) var hasTargetId:Bool = false

        public fileprivate(set) var targetType:Apiproto.Banner.TargetType = Apiproto.Banner.TargetType.targetTypeAll
        public fileprivate(set) var hasTargetType:Bool = false
        public fileprivate(set) var location:Apiproto.Banner.Location = Apiproto.Banner.Location.locationAll
        public fileprivate(set) var hasLocation:Bool = false
        public fileprivate(set) var updated:Int64 = Int64(0)
        public fileprivate(set) var hasUpdated:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasId {
                try codedOutputStream.writeInt64(fieldNumber: 1, value:id)
            }
            if hasUrl {
                try codedOutputStream.writeString(fieldNumber: 2, value:url)
            }
            if hasTargetLink {
                try codedOutputStream.writeString(fieldNumber: 3, value:targetLink)
            }
            if hasIsVisible {
                try codedOutputStream.writeBool(fieldNumber: 4, value:isVisible)
            }
            if hasDescription {
                try codedOutputStream.writeString(fieldNumber: 5, value:description_)
            }
            if hasCreated {
                try codedOutputStream.writeInt64(fieldNumber: 6, value:created)
            }
            if hasSort {
                try codedOutputStream.writeInt64(fieldNumber: 7, value:sort)
            }
            if hasTargetId {
                try codedOutputStream.writeInt64(fieldNumber: 8, value:targetId)
            }
            if hasTargetType {
                try codedOutputStream.writeEnum(fieldNumber: 9, value:targetType.rawValue)
            }
            if hasLocation {
                try codedOutputStream.writeEnum(fieldNumber: 10, value:location.rawValue)
            }
            if hasUpdated {
                try codedOutputStream.writeInt64(fieldNumber: 11, value:updated)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasId {
                serialize_size += id.computeInt64Size(fieldNumber: 1)
            }
            if hasUrl {
                serialize_size += url.computeStringSize(fieldNumber: 2)
            }
            if hasTargetLink {
                serialize_size += targetLink.computeStringSize(fieldNumber: 3)
            }
            if hasIsVisible {
                serialize_size += isVisible.computeBoolSize(fieldNumber: 4)
            }
            if hasDescription {
                serialize_size += description_.computeStringSize(fieldNumber: 5)
            }
            if hasCreated {
                serialize_size += created.computeInt64Size(fieldNumber: 6)
            }
            if hasSort {
                serialize_size += sort.computeInt64Size(fieldNumber: 7)
            }
            if hasTargetId {
                serialize_size += targetId.computeInt64Size(fieldNumber: 8)
            }
            if (hasTargetType) {
                serialize_size += targetType.rawValue.computeEnumSize(fieldNumber: 9)
            }
            if (hasLocation) {
                serialize_size += location.rawValue.computeEnumSize(fieldNumber: 10)
            }
            if hasUpdated {
                serialize_size += updated.computeInt64Size(fieldNumber: 11)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.Banner.Builder {
            return Apiproto.Banner.classBuilder() as! Apiproto.Banner.Builder
        }
        public func getBuilder() -> Apiproto.Banner.Builder {
            return classBuilder() as! Apiproto.Banner.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.Banner.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.Banner.Builder()
        }
        public func toBuilder() throws -> Apiproto.Banner.Builder {
            return try Apiproto.Banner.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.Banner) throws -> Apiproto.Banner.Builder {
            return try Apiproto.Banner.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasId {
                jsonMap["id"] = "\(id)"
            }
            if hasUrl {
                jsonMap["url"] = url
            }
            if hasTargetLink {
                jsonMap["targetLink"] = targetLink
            }
            if hasIsVisible {
                jsonMap["isVisible"] = isVisible
            }
            if hasDescription {
                jsonMap["description"] = description_
            }
            if hasCreated {
                jsonMap["created"] = "\(created)"
            }
            if hasSort {
                jsonMap["sort"] = "\(sort)"
            }
            if hasTargetId {
                jsonMap["targetId"] = "\(targetId)"
            }
            if hasTargetType {
                jsonMap["targetType"] = targetType.toString()
            }
            if hasLocation {
                jsonMap["location"] = location.toString()
            }
            if hasUpdated {
                jsonMap["updated"] = "\(updated)"
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.Banner {
            return try Apiproto.Banner.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.Banner {
            return try Apiproto.Banner.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasId {
                output += "\(indent) id: \(id) \n"
            }
            if hasUrl {
                output += "\(indent) url: \(url) \n"
            }
            if hasTargetLink {
                output += "\(indent) targetLink: \(targetLink) \n"
            }
            if hasIsVisible {
                output += "\(indent) isVisible: \(isVisible) \n"
            }
            if hasDescription {
                output += "\(indent) description: \(description_) \n"
            }
            if hasCreated {
                output += "\(indent) created: \(created) \n"
            }
            if hasSort {
                output += "\(indent) sort: \(sort) \n"
            }
            if hasTargetId {
                output += "\(indent) targetId: \(targetId) \n"
            }
            if (hasTargetType) {
                output += "\(indent) targetType: \(targetType.description)\n"
            }
            if (hasLocation) {
                output += "\(indent) location: \(location.description)\n"
            }
            if hasUpdated {
                output += "\(indent) updated: \(updated) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasId {
                    hashCode = (hashCode &* 31) &+ id.hashValue
                }
                if hasUrl {
                    hashCode = (hashCode &* 31) &+ url.hashValue
                }
                if hasTargetLink {
                    hashCode = (hashCode &* 31) &+ targetLink.hashValue
                }
                if hasIsVisible {
                    hashCode = (hashCode &* 31) &+ isVisible.hashValue
                }
                if hasDescription {
                    hashCode = (hashCode &* 31) &+ description_.hashValue
                }
                if hasCreated {
                    hashCode = (hashCode &* 31) &+ created.hashValue
                }
                if hasSort {
                    hashCode = (hashCode &* 31) &+ sort.hashValue
                }
                if hasTargetId {
                    hashCode = (hashCode &* 31) &+ targetId.hashValue
                }
                if hasTargetType {
                     hashCode = (hashCode &* 31) &+ targetType.hashValue
                }
                if hasLocation {
                     hashCode = (hashCode &* 31) &+ location.hashValue
                }
                if hasUpdated {
                    hashCode = (hashCode &* 31) &+ updated.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.Banner"
        }
        override public func className() -> String {
            return "Apiproto.Banner"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.Banner = Apiproto.Banner()
            public func getMessage() -> Apiproto.Banner {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var id:Int64 {
                get {
                    return builderResult.id
                }
                set (value) {
                    builderResult.hasId = true
                    builderResult.id = value
                }
            }
            public var hasId:Bool {
                get {
                    return builderResult.hasId
                }
            }
            @discardableResult
            public func setId(_ value:Int64) -> Apiproto.Banner.Builder {
                self.id = value
                return self
            }
            @discardableResult
            public func clearId() -> Apiproto.Banner.Builder{
                builderResult.hasId = false
                builderResult.id = Int64(0)
                return self
            }
            public var url:String {
                get {
                    return builderResult.url
                }
                set (value) {
                    builderResult.hasUrl = true
                    builderResult.url = value
                }
            }
            public var hasUrl:Bool {
                get {
                    return builderResult.hasUrl
                }
            }
            @discardableResult
            public func setUrl(_ value:String) -> Apiproto.Banner.Builder {
                self.url = value
                return self
            }
            @discardableResult
            public func clearUrl() -> Apiproto.Banner.Builder{
                builderResult.hasUrl = false
                builderResult.url = ""
                return self
            }
            public var targetLink:String {
                get {
                    return builderResult.targetLink
                }
                set (value) {
                    builderResult.hasTargetLink = true
                    builderResult.targetLink = value
                }
            }
            public var hasTargetLink:Bool {
                get {
                    return builderResult.hasTargetLink
                }
            }
            @discardableResult
            public func setTargetLink(_ value:String) -> Apiproto.Banner.Builder {
                self.targetLink = value
                return self
            }
            @discardableResult
            public func clearTargetLink() -> Apiproto.Banner.Builder{
                builderResult.hasTargetLink = false
                builderResult.targetLink = ""
                return self
            }
            public var isVisible:Bool {
                get {
                    return builderResult.isVisible
                }
                set (value) {
                    builderResult.hasIsVisible = true
                    builderResult.isVisible = value
                }
            }
            public var hasIsVisible:Bool {
                get {
                    return builderResult.hasIsVisible
                }
            }
            @discardableResult
            public func setIsVisible(_ value:Bool) -> Apiproto.Banner.Builder {
                self.isVisible = value
                return self
            }
            @discardableResult
            public func clearIsVisible() -> Apiproto.Banner.Builder{
                builderResult.hasIsVisible = false
                builderResult.isVisible = false
                return self
            }
            public var description_:String {
                get {
                    return builderResult.description_
                }
                set (value) {
                    builderResult.hasDescription = true
                    builderResult.description_ = value
                }
            }
            public var hasDescription:Bool {
                get {
                    return builderResult.hasDescription
                }
            }
            @discardableResult
            public func setDescription(_ value:String) -> Apiproto.Banner.Builder {
                self.description_ = value
                return self
            }
            @discardableResult
            public func clearDescription() -> Apiproto.Banner.Builder{
                builderResult.hasDescription = false
                builderResult.description_ = ""
                return self
            }
            public var created:Int64 {
                get {
                    return builderResult.created
                }
                set (value) {
                    builderResult.hasCreated = true
                    builderResult.created = value
                }
            }
            public var hasCreated:Bool {
                get {
                    return builderResult.hasCreated
                }
            }
            @discardableResult
            public func setCreated(_ value:Int64) -> Apiproto.Banner.Builder {
                self.created = value
                return self
            }
            @discardableResult
            public func clearCreated() -> Apiproto.Banner.Builder{
                builderResult.hasCreated = false
                builderResult.created = Int64(0)
                return self
            }
            public var sort:Int64 {
                get {
                    return builderResult.sort
                }
                set (value) {
                    builderResult.hasSort = true
                    builderResult.sort = value
                }
            }
            public var hasSort:Bool {
                get {
                    return builderResult.hasSort
                }
            }
            @discardableResult
            public func setSort(_ value:Int64) -> Apiproto.Banner.Builder {
                self.sort = value
                return self
            }
            @discardableResult
            public func clearSort() -> Apiproto.Banner.Builder{
                builderResult.hasSort = false
                builderResult.sort = Int64(0)
                return self
            }
            public var targetId:Int64 {
                get {
                    return builderResult.targetId
                }
                set (value) {
                    builderResult.hasTargetId = true
                    builderResult.targetId = value
                }
            }
            public var hasTargetId:Bool {
                get {
                    return builderResult.hasTargetId
                }
            }
            @discardableResult
            public func setTargetId(_ value:Int64) -> Apiproto.Banner.Builder {
                self.targetId = value
                return self
            }
            @discardableResult
            public func clearTargetId() -> Apiproto.Banner.Builder{
                builderResult.hasTargetId = false
                builderResult.targetId = Int64(0)
                return self
            }
                public var targetType:Apiproto.Banner.TargetType {
                    get {
                        return builderResult.targetType
                    }
                    set (value) {
                        builderResult.hasTargetType = true
                        builderResult.targetType = value
                    }
                }
                public var hasTargetType:Bool{
                    get {
                        return builderResult.hasTargetType
                    }
                }
            @discardableResult
                public func setTargetType(_ value:Apiproto.Banner.TargetType) -> Apiproto.Banner.Builder {
                  self.targetType = value
                  return self
                }
            @discardableResult
                public func clearTargetType() -> Apiproto.Banner.Builder {
                   builderResult.hasTargetType = false
                   builderResult.targetType = .targetTypeAll
                   return self
                }
                public var location:Apiproto.Banner.Location {
                    get {
                        return builderResult.location
                    }
                    set (value) {
                        builderResult.hasLocation = true
                        builderResult.location = value
                    }
                }
                public var hasLocation:Bool{
                    get {
                        return builderResult.hasLocation
                    }
                }
            @discardableResult
                public func setLocation(_ value:Apiproto.Banner.Location) -> Apiproto.Banner.Builder {
                  self.location = value
                  return self
                }
            @discardableResult
                public func clearLocation() -> Apiproto.Banner.Builder {
                   builderResult.hasLocation = false
                   builderResult.location = .locationAll
                   return self
                }
            public var updated:Int64 {
                get {
                    return builderResult.updated
                }
                set (value) {
                    builderResult.hasUpdated = true
                    builderResult.updated = value
                }
            }
            public var hasUpdated:Bool {
                get {
                    return builderResult.hasUpdated
                }
            }
            @discardableResult
            public func setUpdated(_ value:Int64) -> Apiproto.Banner.Builder {
                self.updated = value
                return self
            }
            @discardableResult
            public func clearUpdated() -> Apiproto.Banner.Builder{
                builderResult.hasUpdated = false
                builderResult.updated = Int64(0)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.Banner.Builder {
                builderResult = Apiproto.Banner()
                return self
            }
            override public func clone() throws -> Apiproto.Banner.Builder {
                return try Apiproto.Banner.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.Banner {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.Banner {
                let returnMe:Apiproto.Banner = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.Banner) throws -> Apiproto.Banner.Builder {
                if other == Apiproto.Banner() {
                    return self
                }
                if other.hasId {
                    id = other.id
                }
                if other.hasUrl {
                    url = other.url
                }
                if other.hasTargetLink {
                    targetLink = other.targetLink
                }
                if other.hasIsVisible {
                    isVisible = other.isVisible
                }
                if other.hasDescription {
                    description_ = other.description_
                }
                if other.hasCreated {
                    created = other.created
                }
                if other.hasSort {
                    sort = other.sort
                }
                if other.hasTargetId {
                    targetId = other.targetId
                }
                if other.hasTargetType {
                    targetType = other.targetType
                }
                if other.hasLocation {
                    location = other.location
                }
                if other.hasUpdated {
                    updated = other.updated
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.Banner.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.Banner.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        id = try codedInputStream.readInt64()

                    case 18:
                        url = try codedInputStream.readString()

                    case 26:
                        targetLink = try codedInputStream.readString()

                    case 32:
                        isVisible = try codedInputStream.readBool()

                    case 42:
                        description_ = try codedInputStream.readString()

                    case 48:
                        created = try codedInputStream.readInt64()

                    case 56:
                        sort = try codedInputStream.readInt64()

                    case 64:
                        targetId = try codedInputStream.readInt64()

                    case 72:
                        let valueInttargetType = try codedInputStream.readEnum()
                        if let enumstargetType = Apiproto.Banner.TargetType(rawValue:valueInttargetType){
                            targetType = enumstargetType
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 9, value:Int64(valueInttargetType))
                        }

                    case 80:
                        let valueIntlocation = try codedInputStream.readEnum()
                        if let enumslocation = Apiproto.Banner.Location(rawValue:valueIntlocation){
                            location = enumslocation
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 10, value:Int64(valueIntlocation))
                        }

                    case 88:
                        updated = try codedInputStream.readInt64()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.Banner.Builder {
                let resultDecodedBuilder = Apiproto.Banner.Builder()
                if let jsonValueId = jsonMap["id"] as? String {
                    resultDecodedBuilder.id = Int64(jsonValueId)!
                } else if let jsonValueId = jsonMap["id"] as? Int {
                    resultDecodedBuilder.id = Int64(jsonValueId)
                }
                if let jsonValueUrl = jsonMap["url"] as? String {
                    resultDecodedBuilder.url = jsonValueUrl
                }
                if let jsonValueTargetLink = jsonMap["targetLink"] as? String {
                    resultDecodedBuilder.targetLink = jsonValueTargetLink
                }
                if let jsonValueIsVisible = jsonMap["isVisible"] as? Bool {
                    resultDecodedBuilder.isVisible = jsonValueIsVisible
                }
                if let jsonValueDescription = jsonMap["description"] as? String {
                    resultDecodedBuilder.description_ = jsonValueDescription
                }
                if let jsonValueCreated = jsonMap["created"] as? String {
                    resultDecodedBuilder.created = Int64(jsonValueCreated)!
                } else if let jsonValueCreated = jsonMap["created"] as? Int {
                    resultDecodedBuilder.created = Int64(jsonValueCreated)
                }
                if let jsonValueSort = jsonMap["sort"] as? String {
                    resultDecodedBuilder.sort = Int64(jsonValueSort)!
                } else if let jsonValueSort = jsonMap["sort"] as? Int {
                    resultDecodedBuilder.sort = Int64(jsonValueSort)
                }
                if let jsonValueTargetId = jsonMap["targetId"] as? String {
                    resultDecodedBuilder.targetId = Int64(jsonValueTargetId)!
                } else if let jsonValueTargetId = jsonMap["targetId"] as? Int {
                    resultDecodedBuilder.targetId = Int64(jsonValueTargetId)
                }
                if let jsonValueTargetType = jsonMap["targetType"] as? String {
                    resultDecodedBuilder.targetType = try Apiproto.Banner.TargetType.fromString(str: jsonValueTargetType)
                }
                if let jsonValueLocation = jsonMap["location"] as? String {
                    resultDecodedBuilder.location = try Apiproto.Banner.Location.fromString(str: jsonValueLocation)
                }
                if let jsonValueUpdated = jsonMap["updated"] as? String {
                    resultDecodedBuilder.updated = Int64(jsonValueUpdated)!
                } else if let jsonValueUpdated = jsonMap["updated"] as? Int {
                    resultDecodedBuilder.updated = Int64(jsonValueUpdated)
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.Banner.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.Banner.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class BannerList : GeneratedMessage {

        public static func == (lhs: Apiproto.BannerList, rhs: Apiproto.BannerList) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.list == rhs.list)
            fieldCheck = fieldCheck && (lhs.hasTotal == rhs.hasTotal) && (!lhs.hasTotal || lhs.total == rhs.total)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var list:Array<Apiproto.Banner>  = Array<Apiproto.Banner>()
        public fileprivate(set) var total:Int64 = Int64(0)
        public fileprivate(set) var hasTotal:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            for oneElementList in list {
                  try codedOutputStream.writeMessage(fieldNumber: 1, value:oneElementList)
            }
            if hasTotal {
                try codedOutputStream.writeInt64(fieldNumber: 2, value:total)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            for oneElementList in list {
                serialize_size += oneElementList.computeMessageSize(fieldNumber: 1)
            }
            if hasTotal {
                serialize_size += total.computeInt64Size(fieldNumber: 2)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.BannerList.Builder {
            return Apiproto.BannerList.classBuilder() as! Apiproto.BannerList.Builder
        }
        public func getBuilder() -> Apiproto.BannerList.Builder {
            return classBuilder() as! Apiproto.BannerList.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.BannerList.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.BannerList.Builder()
        }
        public func toBuilder() throws -> Apiproto.BannerList.Builder {
            return try Apiproto.BannerList.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.BannerList) throws -> Apiproto.BannerList.Builder {
            return try Apiproto.BannerList.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if !list.isEmpty {
                var jsonArrayList:Array<Dictionary<String,Any>> = []
                for oneValueList in list {
                    let ecodedMessageList = try oneValueList.encode()
                    jsonArrayList.append(ecodedMessageList)
                }
                jsonMap["list"] = jsonArrayList
            }
            if hasTotal {
                jsonMap["total"] = "\(total)"
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.BannerList {
            return try Apiproto.BannerList.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.BannerList {
            return try Apiproto.BannerList.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            var listElementIndex:Int = 0
            for oneElementList in list {
                output += "\(indent) list[\(listElementIndex)] {\n"
                output += try oneElementList.getDescription(indent: "\(indent)  ")
                output += "\(indent)}\n"
                listElementIndex += 1
            }
            if hasTotal {
                output += "\(indent) total: \(total) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                for oneElementList in list {
                    hashCode = (hashCode &* 31) &+ oneElementList.hashValue
                }
                if hasTotal {
                    hashCode = (hashCode &* 31) &+ total.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.BannerList"
        }
        override public func className() -> String {
            return "Apiproto.BannerList"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.BannerList = Apiproto.BannerList()
            public func getMessage() -> Apiproto.BannerList {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var list:Array<Apiproto.Banner> {
                get {
                    return builderResult.list
                }
                set (value) {
                    builderResult.list = value
                }
            }
            @discardableResult
            public func setList(_ value:Array<Apiproto.Banner>) -> Apiproto.BannerList.Builder {
                self.list = value
                return self
            }
            @discardableResult
            public func clearList() -> Apiproto.BannerList.Builder {
                builderResult.list.removeAll(keepingCapacity: false)
                return self
            }
            public var total:Int64 {
                get {
                    return builderResult.total
                }
                set (value) {
                    builderResult.hasTotal = true
                    builderResult.total = value
                }
            }
            public var hasTotal:Bool {
                get {
                    return builderResult.hasTotal
                }
            }
            @discardableResult
            public func setTotal(_ value:Int64) -> Apiproto.BannerList.Builder {
                self.total = value
                return self
            }
            @discardableResult
            public func clearTotal() -> Apiproto.BannerList.Builder{
                builderResult.hasTotal = false
                builderResult.total = Int64(0)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.BannerList.Builder {
                builderResult = Apiproto.BannerList()
                return self
            }
            override public func clone() throws -> Apiproto.BannerList.Builder {
                return try Apiproto.BannerList.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.BannerList {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.BannerList {
                let returnMe:Apiproto.BannerList = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.BannerList) throws -> Apiproto.BannerList.Builder {
                if other == Apiproto.BannerList() {
                    return self
                }
                if !other.list.isEmpty  {
                     builderResult.list += other.list
                }
                if other.hasTotal {
                    total = other.total
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.BannerList.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BannerList.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        let subBuilder = Apiproto.Banner.Builder()
                        try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                        list.append(subBuilder.buildPartial())

                    case 16:
                        total = try codedInputStream.readInt64()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.BannerList.Builder {
                let resultDecodedBuilder = Apiproto.BannerList.Builder()
                if let jsonValueList = jsonMap["list"] as? Array<Dictionary<String,Any>> {
                    var jsonArrayList:Array<Apiproto.Banner> = []
                    for oneValueList in jsonValueList {
                        let messageFromStringList = try Apiproto.Banner.Builder.decodeToBuilder(jsonMap:oneValueList).build()

                        jsonArrayList.append(messageFromStringList)
                    }
                    resultDecodedBuilder.list = jsonArrayList
                }
                if let jsonValueTotal = jsonMap["total"] as? String {
                    resultDecodedBuilder.total = Int64(jsonValueTotal)!
                } else if let jsonValueTotal = jsonMap["total"] as? Int {
                    resultDecodedBuilder.total = Int64(jsonValueTotal)
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.BannerList.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.BannerList.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class HomeParams : GeneratedMessage {

        public static func == (lhs: Apiproto.HomeParams, rhs: Apiproto.HomeParams) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasLotteryOptions == rhs.hasLotteryOptions) && (!lhs.hasLotteryOptions || lhs.lotteryOptions == rhs.lotteryOptions)
            fieldCheck = fieldCheck && (lhs.winList == rhs.winList)
            fieldCheck = fieldCheck && (lhs.banner == rhs.banner)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }



        //Nested type declaration start

        final public class LotteryOptionsEntry : GeneratedMessage {

            public static func == (lhs: Apiproto.HomeParams.LotteryOptionsEntry, rhs: Apiproto.HomeParams.LotteryOptionsEntry) -> Bool {
                if lhs === rhs {
                    return true
                }
                var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                fieldCheck = fieldCheck && (lhs.hasKey == rhs.hasKey) && (!lhs.hasKey || lhs.key == rhs.key)
                fieldCheck = fieldCheck && (lhs.hasValue == rhs.hasValue) && (!lhs.hasValue || lhs.value == rhs.value)
                fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                return fieldCheck
            }

            public fileprivate(set) var key:Int32 = Int32(0)
            public fileprivate(set) var hasKey:Bool = false

            public fileprivate(set) var value:Apiproto.LotteryOptions!
            public fileprivate(set) var hasValue:Bool = false
            required public init() {
                super.init()
            }
            override public func isInitialized() -> Bool {
                return true
            }
            override public func writeTo(codedOutputStream: CodedOutputStream) throws {
                if hasKey {
                    try codedOutputStream.writeInt32(fieldNumber: 1, value:key)
                }
                if hasValue {
                    try codedOutputStream.writeMessage(fieldNumber: 2, value:value)
                }
                try unknownFields.writeTo(codedOutputStream: codedOutputStream)
            }
            override public func serializedSize() -> Int32 {
                var serialize_size:Int32 = memoizedSerializedSize
                if serialize_size != -1 {
                 return serialize_size
                }

                serialize_size = 0
                if hasKey {
                    serialize_size += key.computeInt32Size(fieldNumber: 1)
                }
                if hasValue {
                    if let varSizevalue = value?.computeMessageSize(fieldNumber: 2) {
                        serialize_size += varSizevalue
                    }
                }
                serialize_size += unknownFields.serializedSize()
                memoizedSerializedSize = serialize_size
                return serialize_size
            }
            public class func getBuilder() -> Apiproto.HomeParams.LotteryOptionsEntry.Builder {
                return Apiproto.HomeParams.LotteryOptionsEntry.classBuilder() as! Apiproto.HomeParams.LotteryOptionsEntry.Builder
            }
            public func getBuilder() -> Apiproto.HomeParams.LotteryOptionsEntry.Builder {
                return classBuilder() as! Apiproto.HomeParams.LotteryOptionsEntry.Builder
            }
            override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
                return Apiproto.HomeParams.LotteryOptionsEntry.Builder()
            }
            override public func classBuilder() -> ProtocolBuffersMessageBuilder {
                return Apiproto.HomeParams.LotteryOptionsEntry.Builder()
            }
            public func toBuilder() throws -> Apiproto.HomeParams.LotteryOptionsEntry.Builder {
                return try Apiproto.HomeParams.LotteryOptionsEntry.builderWithPrototype(prototype:self)
            }
            public class func builderWithPrototype(prototype:Apiproto.HomeParams.LotteryOptionsEntry) throws -> Apiproto.HomeParams.LotteryOptionsEntry.Builder {
                return try Apiproto.HomeParams.LotteryOptionsEntry.Builder().mergeFrom(other:prototype)
            }
            override public func encode() throws -> Dictionary<String,Any> {
                guard isInitialized() else {
                    throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
                }

                var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
                if hasKey {
                    jsonMap["key"] = Int(key)
                }
                if hasValue {
                    jsonMap["value"] = try value.encode()
                }
                return jsonMap
            }
            override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.HomeParams.LotteryOptionsEntry {
                return try Apiproto.HomeParams.LotteryOptionsEntry.Builder.decodeToBuilder(jsonMap:jsonMap).build()
            }
            override class public func fromJSON(data:Data) throws -> Apiproto.HomeParams.LotteryOptionsEntry {
                return try Apiproto.HomeParams.LotteryOptionsEntry.Builder.fromJSONToBuilder(data:data).build()
            }
            override public func getDescription(indent:String) throws -> String {
                var output = ""
                if hasKey {
                    output += "\(indent) key: \(key) \n"
                }
                if hasValue {
                    output += "\(indent) value {\n"
                    if let outDescValue = value {
                        output += try outDescValue.getDescription(indent: "\(indent)  ")
                    }
                    output += "\(indent) }\n"
                }
                output += unknownFields.getDescription(indent: indent)
                return output
            }
            override public var hashValue:Int {
                get {
                    var hashCode:Int = 7
                    if hasKey {
                        hashCode = (hashCode &* 31) &+ key.hashValue
                    }
                    if hasValue {
                        if let hashValuevalue = value?.hashValue {
                            hashCode = (hashCode &* 31) &+ hashValuevalue
                        }
                    }
                    hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                    return hashCode
                }
            }


            //Meta information declaration start

            override public class func className() -> String {
                return "Apiproto.HomeParams.LotteryOptionsEntry"
            }
            override public func className() -> String {
                return "Apiproto.HomeParams.LotteryOptionsEntry"
            }
            //Meta information declaration end

            final public class Builder : GeneratedMessageBuilder {
                fileprivate var builderResult:Apiproto.HomeParams.LotteryOptionsEntry = Apiproto.HomeParams.LotteryOptionsEntry()
                public func getMessage() -> Apiproto.HomeParams.LotteryOptionsEntry {
                    return builderResult
                }

                required override public init () {
                    super.init()
                }
                public var key:Int32 {
                    get {
                        return builderResult.key
                    }
                    set (value) {
                        builderResult.hasKey = true
                        builderResult.key = value
                    }
                }
                public var hasKey:Bool {
                    get {
                        return builderResult.hasKey
                    }
                }
                @discardableResult
                public func setKey(_ value:Int32) -> Apiproto.HomeParams.LotteryOptionsEntry.Builder {
                    self.key = value
                    return self
                }
                @discardableResult
                public func clearKey() -> Apiproto.HomeParams.LotteryOptionsEntry.Builder{
                    builderResult.hasKey = false
                    builderResult.key = Int32(0)
                    return self
                }
                public var value:Apiproto.LotteryOptions! {
                    get {
                        if valueBuilder_ != nil {
                            builderResult.value = valueBuilder_.getMessage()
                        }
                        return builderResult.value
                    }
                    set (value) {
                        builderResult.hasValue = true
                        builderResult.value = value
                    }
                }
                public var hasValue:Bool {
                    get {
                        return builderResult.hasValue
                    }
                }
                fileprivate var valueBuilder_:Apiproto.LotteryOptions.Builder! {
                    didSet {
                        builderResult.hasValue = true
                    }
                }
                public func getValueBuilder() -> Apiproto.LotteryOptions.Builder {
                    if valueBuilder_ == nil {
                        valueBuilder_ = Apiproto.LotteryOptions.Builder()
                        builderResult.value = valueBuilder_.getMessage()
                        if value != nil {
                            try! valueBuilder_.mergeFrom(other: value)
                        }
                    }
                    return valueBuilder_
                }
                @discardableResult
                public func setValue(_ value:Apiproto.LotteryOptions!) -> Apiproto.HomeParams.LotteryOptionsEntry.Builder {
                    self.value = value
                    return self
                }
                @discardableResult
                public func mergeValue(value:Apiproto.LotteryOptions) throws -> Apiproto.HomeParams.LotteryOptionsEntry.Builder {
                    if builderResult.hasValue {
                        builderResult.value = try Apiproto.LotteryOptions.builderWithPrototype(prototype:builderResult.value).mergeFrom(other: value).buildPartial()
                    } else {
                        builderResult.value = value
                    }
                    builderResult.hasValue = true
                    return self
                }
                @discardableResult
                public func clearValue() -> Apiproto.HomeParams.LotteryOptionsEntry.Builder {
                    valueBuilder_ = nil
                    builderResult.hasValue = false
                    builderResult.value = nil
                    return self
                }
                override public var internalGetResult:GeneratedMessage {
                    get {
                        return builderResult
                    }
                }
                @discardableResult
                override public func clear() -> Apiproto.HomeParams.LotteryOptionsEntry.Builder {
                    builderResult = Apiproto.HomeParams.LotteryOptionsEntry()
                    return self
                }
                override public func clone() throws -> Apiproto.HomeParams.LotteryOptionsEntry.Builder {
                    return try Apiproto.HomeParams.LotteryOptionsEntry.builderWithPrototype(prototype:builderResult)
                }
                override public func build() throws -> Apiproto.HomeParams.LotteryOptionsEntry {
                    try checkInitialized()
                    return buildPartial()
                }
                public func buildPartial() -> Apiproto.HomeParams.LotteryOptionsEntry {
                    let returnMe:Apiproto.HomeParams.LotteryOptionsEntry = builderResult
                    return returnMe
                }
                @discardableResult
                public func mergeFrom(other:Apiproto.HomeParams.LotteryOptionsEntry) throws -> Apiproto.HomeParams.LotteryOptionsEntry.Builder {
                    if other == Apiproto.HomeParams.LotteryOptionsEntry() {
                        return self
                    }
                    if other.hasKey {
                        key = other.key
                    }
                    if (other.hasValue) {
                        try mergeValue(value: other.value)
                    }
                    try merge(unknownField: other.unknownFields)
                    return self
                }
                @discardableResult
                override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.HomeParams.LotteryOptionsEntry.Builder {
                    return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
                }
                @discardableResult
                override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.HomeParams.LotteryOptionsEntry.Builder {
                    let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                    while (true) {
                        let protobufTag = try codedInputStream.readTag()
                        switch protobufTag {
                        case 0: 
                            self.unknownFields = try unknownFieldsBuilder.build()
                            return self

                        case 8:
                            key = try codedInputStream.readInt32()

                        case 18:
                            let subBuilder:Apiproto.LotteryOptions.Builder = Apiproto.LotteryOptions.Builder()
                            if hasValue {
                                try subBuilder.mergeFrom(other: value)
                            }
                            try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                            value = subBuilder.buildPartial()

                        default:
                            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                                unknownFields = try unknownFieldsBuilder.build()
                                return self
                            }
                        }
                    }
                }
                class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.HomeParams.LotteryOptionsEntry.Builder {
                    let resultDecodedBuilder = Apiproto.HomeParams.LotteryOptionsEntry.Builder()
                    if let jsonValueKey = jsonMap["key"] as? Int {
                        resultDecodedBuilder.key = Int32(jsonValueKey)
                    } else if let jsonValueKey = jsonMap["key"] as? String {
                        resultDecodedBuilder.key = Int32(jsonValueKey)!
                    }
                    if let jsonValueValue = jsonMap["value"] as? Dictionary<String,Any> {
                        resultDecodedBuilder.value = try Apiproto.LotteryOptions.Builder.decodeToBuilder(jsonMap:jsonValueValue).build()

                    }
                    return resultDecodedBuilder
                }
                override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.HomeParams.LotteryOptionsEntry.Builder {
                    let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                    guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                      throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                    }
                    return try Apiproto.HomeParams.LotteryOptionsEntry.Builder.decodeToBuilder(jsonMap:jsDataCast)
                }
            }

        }

        //Nested type declaration end

        public fileprivate(set) var lotteryOptions:Dictionary<Int32,Apiproto.LotteryOptions> = Dictionary<Int32,Apiproto.LotteryOptions>()

        public fileprivate(set) var hasLotteryOptions:Bool = false
        public fileprivate(set) var winList:Array<String> = Array<String>()
        public fileprivate(set) var banner:Array<Apiproto.Banner>  = Array<Apiproto.Banner>()
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasLotteryOptions {
                for (keyLotteryOptions, valueLotteryOptions) in lotteryOptions {
                    let valueOfLotteryOptions = try! Apiproto.HomeParams.LotteryOptionsEntry.Builder().setKey(keyLotteryOptions).setValue(valueLotteryOptions).build()
                      try codedOutputStream.writeMessage(fieldNumber: 1, value:valueOfLotteryOptions)
                  }
            }
            if !winList.isEmpty {
                for oneValuewinList in winList {
                    try codedOutputStream.writeString(fieldNumber: 2, value:oneValuewinList)
                }
            }
            for oneElementBanner in banner {
                  try codedOutputStream.writeMessage(fieldNumber: 3, value:oneElementBanner)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasLotteryOptions {
                  for (keyLotteryOptions, valueLotteryOptions) in lotteryOptions {
                      let valueOfLotteryOptions = try! Apiproto.HomeParams.LotteryOptionsEntry.Builder().setKey(keyLotteryOptions).setValue(valueLotteryOptions).build()
                serialize_size += valueOfLotteryOptions.computeMessageSize(fieldNumber: 1)
                }
            }
            var dataSizeWinList:Int32 = 0
            for oneValuewinList in winList {
                dataSizeWinList += oneValuewinList.computeStringSizeNoTag()
            }
            serialize_size += dataSizeWinList
            serialize_size += 1 * Int32(winList.count)
            for oneElementBanner in banner {
                serialize_size += oneElementBanner.computeMessageSize(fieldNumber: 3)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.HomeParams.Builder {
            return Apiproto.HomeParams.classBuilder() as! Apiproto.HomeParams.Builder
        }
        public func getBuilder() -> Apiproto.HomeParams.Builder {
            return classBuilder() as! Apiproto.HomeParams.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.HomeParams.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.HomeParams.Builder()
        }
        public func toBuilder() throws -> Apiproto.HomeParams.Builder {
            return try Apiproto.HomeParams.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.HomeParams) throws -> Apiproto.HomeParams.Builder {
            return try Apiproto.HomeParams.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasLotteryOptions {
                var mapLotteryOptions = Dictionary<String, Dictionary<String,Any>>()
                for (keyLotteryOptions, valueLotteryOptions) in lotteryOptions {
                    mapLotteryOptions["\(keyLotteryOptions)"] = try valueLotteryOptions.encode()
                }
                jsonMap["lotteryOptions"] = mapLotteryOptions
            }
            if !winList.isEmpty {
                var jsonArrayWinList:Array<String> = []
                for oneValueWinList in winList {
                    jsonArrayWinList.append(oneValueWinList)
                }
                jsonMap["winList"] = jsonArrayWinList
            }
            if !banner.isEmpty {
                var jsonArrayBanner:Array<Dictionary<String,Any>> = []
                for oneValueBanner in banner {
                    let ecodedMessageBanner = try oneValueBanner.encode()
                    jsonArrayBanner.append(ecodedMessageBanner)
                }
                jsonMap["banner"] = jsonArrayBanner
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.HomeParams {
            return try Apiproto.HomeParams.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.HomeParams {
            return try Apiproto.HomeParams.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasLotteryOptions {
                output += "\(indent) lotteryOptions: \(lotteryOptions) \n"
            }
            var winListElementIndex:Int = 0
            for oneValueWinList in winList  {
                output += "\(indent) winList[\(winListElementIndex)]: \(oneValueWinList)\n"
                winListElementIndex += 1
            }
            var bannerElementIndex:Int = 0
            for oneElementBanner in banner {
                output += "\(indent) banner[\(bannerElementIndex)] {\n"
                output += try oneElementBanner.getDescription(indent: "\(indent)  ")
                output += "\(indent)}\n"
                bannerElementIndex += 1
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasLotteryOptions {
                    for (keyLotteryOptions, valueLotteryOptions) in lotteryOptions {
                        hashCode = (hashCode &* 31) &+ keyLotteryOptions.hashValue
                        hashCode = (hashCode &* 31) &+ valueLotteryOptions.hashValue
                    }
                }
                for oneValueWinList in winList {
                    hashCode = (hashCode &* 31) &+ oneValueWinList.hashValue
                }
                for oneElementBanner in banner {
                    hashCode = (hashCode &* 31) &+ oneElementBanner.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.HomeParams"
        }
        override public func className() -> String {
            return "Apiproto.HomeParams"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.HomeParams = Apiproto.HomeParams()
            public func getMessage() -> Apiproto.HomeParams {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var hasLotteryOptions:Bool {
                get {
                    return builderResult.hasLotteryOptions
                }
            }
            public var lotteryOptions:Dictionary<Int32,Apiproto.LotteryOptions> {
                get {
                    return builderResult.lotteryOptions
                }
                set (value) {
                    builderResult.hasLotteryOptions = true
                    builderResult.lotteryOptions = value
                }
            }
            @discardableResult
            public func setLotteryOptions(_ value:Dictionary<Int32,Apiproto.LotteryOptions>) -> Apiproto.HomeParams.Builder {
                self.lotteryOptions = value
                return self
            }
            @discardableResult
            public func clearLotteryOptions() -> Apiproto.HomeParams.Builder{
                builderResult.hasLotteryOptions = false
                builderResult.lotteryOptions = Dictionary<Int32,Apiproto.LotteryOptions>()
                return self
            }
            public var winList:Array<String> {
                get {
                    return builderResult.winList
                }
                set (array) {
                    builderResult.winList = array
                }
            }
            @discardableResult
            public func setWinList(_ value:Array<String>) -> Apiproto.HomeParams.Builder {
                self.winList = value
                return self
            }
            @discardableResult
            public func clearWinList() -> Apiproto.HomeParams.Builder {
                builderResult.winList.removeAll(keepingCapacity: false)
                return self
            }
            public var banner:Array<Apiproto.Banner> {
                get {
                    return builderResult.banner
                }
                set (value) {
                    builderResult.banner = value
                }
            }
            @discardableResult
            public func setBanner(_ value:Array<Apiproto.Banner>) -> Apiproto.HomeParams.Builder {
                self.banner = value
                return self
            }
            @discardableResult
            public func clearBanner() -> Apiproto.HomeParams.Builder {
                builderResult.banner.removeAll(keepingCapacity: false)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.HomeParams.Builder {
                builderResult = Apiproto.HomeParams()
                return self
            }
            override public func clone() throws -> Apiproto.HomeParams.Builder {
                return try Apiproto.HomeParams.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.HomeParams {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.HomeParams {
                let returnMe:Apiproto.HomeParams = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.HomeParams) throws -> Apiproto.HomeParams.Builder {
                if other == Apiproto.HomeParams() {
                    return self
                }
                if other.hasLotteryOptions {
                    lotteryOptions = other.lotteryOptions
                }
                if !other.winList.isEmpty {
                    builderResult.winList += other.winList
                }
                if !other.banner.isEmpty  {
                     builderResult.banner += other.banner
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.HomeParams.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.HomeParams.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        let subBuilder = Apiproto.HomeParams.LotteryOptionsEntry.Builder()
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        let buildOfLotteryOptions = subBuilder.buildPartial()
                        lotteryOptions[buildOfLotteryOptions.key] = buildOfLotteryOptions.value

                    case 18:
                        winList += [try codedInputStream.readString()]

                    case 26:
                        let subBuilder = Apiproto.Banner.Builder()
                        try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                        banner.append(subBuilder.buildPartial())

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.HomeParams.Builder {
                let resultDecodedBuilder = Apiproto.HomeParams.Builder()
                if let jsonValueLotteryOptions = jsonMap["lotteryOptions"] as? Dictionary<String, Dictionary<String,Any>> {
                    var mapLotteryOptions = Dictionary<Int32, Apiproto.LotteryOptions>()
                    for (keyLotteryOptions, valueLotteryOptions) in jsonValueLotteryOptions {
                        guard let keyFromLotteryOptions = Int32(keyLotteryOptions) else {
                            throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                        }
                        mapLotteryOptions[keyFromLotteryOptions] = try Apiproto.LotteryOptions.Builder.decodeToBuilder(jsonMap:valueLotteryOptions).build()

                    }
                    resultDecodedBuilder.lotteryOptions = mapLotteryOptions
                }
                if let jsonValueWinList = jsonMap["winList"] as? Array<String> {
                    var jsonArrayWinList:Array<String> = []
                    for oneValueWinList in jsonValueWinList {
                        jsonArrayWinList.append(oneValueWinList)
                    }
                    resultDecodedBuilder.winList = jsonArrayWinList
                }
                if let jsonValueBanner = jsonMap["banner"] as? Array<Dictionary<String,Any>> {
                    var jsonArrayBanner:Array<Apiproto.Banner> = []
                    for oneValueBanner in jsonValueBanner {
                        let messageFromStringBanner = try Apiproto.Banner.Builder.decodeToBuilder(jsonMap:oneValueBanner).build()

                        jsonArrayBanner.append(messageFromStringBanner)
                    }
                    resultDecodedBuilder.banner = jsonArrayBanner
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.HomeParams.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.HomeParams.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class Contact : GeneratedMessage {

        public static func == (lhs: Apiproto.Contact, rhs: Apiproto.Contact) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
            fieldCheck = fieldCheck && (lhs.hasQq == rhs.hasQq) && (!lhs.hasQq || lhs.qq == rhs.qq)
            fieldCheck = fieldCheck && (lhs.hasWechat == rhs.hasWechat) && (!lhs.hasWechat || lhs.wechat == rhs.wechat)
            fieldCheck = fieldCheck && (lhs.hasEmail == rhs.hasEmail) && (!lhs.hasEmail || lhs.email == rhs.email)
            fieldCheck = fieldCheck && (lhs.hasTelphone == rhs.hasTelphone) && (!lhs.hasTelphone || lhs.telphone == rhs.telphone)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var id:Int64 = Int64(0)
        public fileprivate(set) var hasId:Bool = false

        public fileprivate(set) var qq:String = ""
        public fileprivate(set) var hasQq:Bool = false

        public fileprivate(set) var wechat:String = ""
        public fileprivate(set) var hasWechat:Bool = false

        public fileprivate(set) var email:String = ""
        public fileprivate(set) var hasEmail:Bool = false

        public fileprivate(set) var telphone:String = ""
        public fileprivate(set) var hasTelphone:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasId {
                try codedOutputStream.writeInt64(fieldNumber: 1, value:id)
            }
            if hasQq {
                try codedOutputStream.writeString(fieldNumber: 2, value:qq)
            }
            if hasWechat {
                try codedOutputStream.writeString(fieldNumber: 3, value:wechat)
            }
            if hasEmail {
                try codedOutputStream.writeString(fieldNumber: 4, value:email)
            }
            if hasTelphone {
                try codedOutputStream.writeString(fieldNumber: 5, value:telphone)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasId {
                serialize_size += id.computeInt64Size(fieldNumber: 1)
            }
            if hasQq {
                serialize_size += qq.computeStringSize(fieldNumber: 2)
            }
            if hasWechat {
                serialize_size += wechat.computeStringSize(fieldNumber: 3)
            }
            if hasEmail {
                serialize_size += email.computeStringSize(fieldNumber: 4)
            }
            if hasTelphone {
                serialize_size += telphone.computeStringSize(fieldNumber: 5)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.Contact.Builder {
            return Apiproto.Contact.classBuilder() as! Apiproto.Contact.Builder
        }
        public func getBuilder() -> Apiproto.Contact.Builder {
            return classBuilder() as! Apiproto.Contact.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.Contact.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.Contact.Builder()
        }
        public func toBuilder() throws -> Apiproto.Contact.Builder {
            return try Apiproto.Contact.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.Contact) throws -> Apiproto.Contact.Builder {
            return try Apiproto.Contact.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasId {
                jsonMap["id"] = "\(id)"
            }
            if hasQq {
                jsonMap["qq"] = qq
            }
            if hasWechat {
                jsonMap["wechat"] = wechat
            }
            if hasEmail {
                jsonMap["email"] = email
            }
            if hasTelphone {
                jsonMap["telphone"] = telphone
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.Contact {
            return try Apiproto.Contact.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.Contact {
            return try Apiproto.Contact.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasId {
                output += "\(indent) id: \(id) \n"
            }
            if hasQq {
                output += "\(indent) qq: \(qq) \n"
            }
            if hasWechat {
                output += "\(indent) wechat: \(wechat) \n"
            }
            if hasEmail {
                output += "\(indent) email: \(email) \n"
            }
            if hasTelphone {
                output += "\(indent) telphone: \(telphone) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasId {
                    hashCode = (hashCode &* 31) &+ id.hashValue
                }
                if hasQq {
                    hashCode = (hashCode &* 31) &+ qq.hashValue
                }
                if hasWechat {
                    hashCode = (hashCode &* 31) &+ wechat.hashValue
                }
                if hasEmail {
                    hashCode = (hashCode &* 31) &+ email.hashValue
                }
                if hasTelphone {
                    hashCode = (hashCode &* 31) &+ telphone.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.Contact"
        }
        override public func className() -> String {
            return "Apiproto.Contact"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.Contact = Apiproto.Contact()
            public func getMessage() -> Apiproto.Contact {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var id:Int64 {
                get {
                    return builderResult.id
                }
                set (value) {
                    builderResult.hasId = true
                    builderResult.id = value
                }
            }
            public var hasId:Bool {
                get {
                    return builderResult.hasId
                }
            }
            @discardableResult
            public func setId(_ value:Int64) -> Apiproto.Contact.Builder {
                self.id = value
                return self
            }
            @discardableResult
            public func clearId() -> Apiproto.Contact.Builder{
                builderResult.hasId = false
                builderResult.id = Int64(0)
                return self
            }
            public var qq:String {
                get {
                    return builderResult.qq
                }
                set (value) {
                    builderResult.hasQq = true
                    builderResult.qq = value
                }
            }
            public var hasQq:Bool {
                get {
                    return builderResult.hasQq
                }
            }
            @discardableResult
            public func setQq(_ value:String) -> Apiproto.Contact.Builder {
                self.qq = value
                return self
            }
            @discardableResult
            public func clearQq() -> Apiproto.Contact.Builder{
                builderResult.hasQq = false
                builderResult.qq = ""
                return self
            }
            public var wechat:String {
                get {
                    return builderResult.wechat
                }
                set (value) {
                    builderResult.hasWechat = true
                    builderResult.wechat = value
                }
            }
            public var hasWechat:Bool {
                get {
                    return builderResult.hasWechat
                }
            }
            @discardableResult
            public func setWechat(_ value:String) -> Apiproto.Contact.Builder {
                self.wechat = value
                return self
            }
            @discardableResult
            public func clearWechat() -> Apiproto.Contact.Builder{
                builderResult.hasWechat = false
                builderResult.wechat = ""
                return self
            }
            public var email:String {
                get {
                    return builderResult.email
                }
                set (value) {
                    builderResult.hasEmail = true
                    builderResult.email = value
                }
            }
            public var hasEmail:Bool {
                get {
                    return builderResult.hasEmail
                }
            }
            @discardableResult
            public func setEmail(_ value:String) -> Apiproto.Contact.Builder {
                self.email = value
                return self
            }
            @discardableResult
            public func clearEmail() -> Apiproto.Contact.Builder{
                builderResult.hasEmail = false
                builderResult.email = ""
                return self
            }
            public var telphone:String {
                get {
                    return builderResult.telphone
                }
                set (value) {
                    builderResult.hasTelphone = true
                    builderResult.telphone = value
                }
            }
            public var hasTelphone:Bool {
                get {
                    return builderResult.hasTelphone
                }
            }
            @discardableResult
            public func setTelphone(_ value:String) -> Apiproto.Contact.Builder {
                self.telphone = value
                return self
            }
            @discardableResult
            public func clearTelphone() -> Apiproto.Contact.Builder{
                builderResult.hasTelphone = false
                builderResult.telphone = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.Contact.Builder {
                builderResult = Apiproto.Contact()
                return self
            }
            override public func clone() throws -> Apiproto.Contact.Builder {
                return try Apiproto.Contact.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.Contact {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.Contact {
                let returnMe:Apiproto.Contact = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.Contact) throws -> Apiproto.Contact.Builder {
                if other == Apiproto.Contact() {
                    return self
                }
                if other.hasId {
                    id = other.id
                }
                if other.hasQq {
                    qq = other.qq
                }
                if other.hasWechat {
                    wechat = other.wechat
                }
                if other.hasEmail {
                    email = other.email
                }
                if other.hasTelphone {
                    telphone = other.telphone
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.Contact.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.Contact.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        id = try codedInputStream.readInt64()

                    case 18:
                        qq = try codedInputStream.readString()

                    case 26:
                        wechat = try codedInputStream.readString()

                    case 34:
                        email = try codedInputStream.readString()

                    case 42:
                        telphone = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.Contact.Builder {
                let resultDecodedBuilder = Apiproto.Contact.Builder()
                if let jsonValueId = jsonMap["id"] as? String {
                    resultDecodedBuilder.id = Int64(jsonValueId)!
                } else if let jsonValueId = jsonMap["id"] as? Int {
                    resultDecodedBuilder.id = Int64(jsonValueId)
                }
                if let jsonValueQq = jsonMap["qq"] as? String {
                    resultDecodedBuilder.qq = jsonValueQq
                }
                if let jsonValueWechat = jsonMap["wechat"] as? String {
                    resultDecodedBuilder.wechat = jsonValueWechat
                }
                if let jsonValueEmail = jsonMap["email"] as? String {
                    resultDecodedBuilder.email = jsonValueEmail
                }
                if let jsonValueTelphone = jsonMap["telphone"] as? String {
                    resultDecodedBuilder.telphone = jsonValueTelphone
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.Contact.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.Contact.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class Faq : GeneratedMessage {

        public static func == (lhs: Apiproto.Faq, rhs: Apiproto.Faq) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
            fieldCheck = fieldCheck && (lhs.hasTitle == rhs.hasTitle) && (!lhs.hasTitle || lhs.title == rhs.title)
            fieldCheck = fieldCheck && (lhs.hasContent == rhs.hasContent) && (!lhs.hasContent || lhs.content == rhs.content)
            fieldCheck = fieldCheck && (lhs.hasContentUrl == rhs.hasContentUrl) && (!lhs.hasContentUrl || lhs.contentUrl == rhs.contentUrl)
            fieldCheck = fieldCheck && (lhs.hasHtml == rhs.hasHtml) && (!lhs.hasHtml || lhs.html == rhs.html)
            fieldCheck = fieldCheck && (lhs.hasIsVisible == rhs.hasIsVisible) && (!lhs.hasIsVisible || lhs.isVisible == rhs.isVisible)
            fieldCheck = fieldCheck && (lhs.hasCreateTime == rhs.hasCreateTime) && (!lhs.hasCreateTime || lhs.createTime == rhs.createTime)
            fieldCheck = fieldCheck && (lhs.hasUpdateTime == rhs.hasUpdateTime) && (!lhs.hasUpdateTime || lhs.updateTime == rhs.updateTime)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var id:Int64 = Int64(0)
        public fileprivate(set) var hasId:Bool = false

        public fileprivate(set) var title:String = ""
        public fileprivate(set) var hasTitle:Bool = false

        public fileprivate(set) var content:String = ""
        public fileprivate(set) var hasContent:Bool = false

        public fileprivate(set) var contentUrl:String = ""
        public fileprivate(set) var hasContentUrl:Bool = false

        public fileprivate(set) var html:String = ""
        public fileprivate(set) var hasHtml:Bool = false

        public fileprivate(set) var isVisible:Bool = false
        public fileprivate(set) var hasIsVisible:Bool = false

        public fileprivate(set) var createTime:Int64 = Int64(0)
        public fileprivate(set) var hasCreateTime:Bool = false

        public fileprivate(set) var updateTime:Int64 = Int64(0)
        public fileprivate(set) var hasUpdateTime:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasId {
                try codedOutputStream.writeInt64(fieldNumber: 1, value:id)
            }
            if hasTitle {
                try codedOutputStream.writeString(fieldNumber: 2, value:title)
            }
            if hasContent {
                try codedOutputStream.writeString(fieldNumber: 3, value:content)
            }
            if hasContentUrl {
                try codedOutputStream.writeString(fieldNumber: 4, value:contentUrl)
            }
            if hasHtml {
                try codedOutputStream.writeString(fieldNumber: 5, value:html)
            }
            if hasIsVisible {
                try codedOutputStream.writeBool(fieldNumber: 6, value:isVisible)
            }
            if hasCreateTime {
                try codedOutputStream.writeInt64(fieldNumber: 7, value:createTime)
            }
            if hasUpdateTime {
                try codedOutputStream.writeInt64(fieldNumber: 8, value:updateTime)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasId {
                serialize_size += id.computeInt64Size(fieldNumber: 1)
            }
            if hasTitle {
                serialize_size += title.computeStringSize(fieldNumber: 2)
            }
            if hasContent {
                serialize_size += content.computeStringSize(fieldNumber: 3)
            }
            if hasContentUrl {
                serialize_size += contentUrl.computeStringSize(fieldNumber: 4)
            }
            if hasHtml {
                serialize_size += html.computeStringSize(fieldNumber: 5)
            }
            if hasIsVisible {
                serialize_size += isVisible.computeBoolSize(fieldNumber: 6)
            }
            if hasCreateTime {
                serialize_size += createTime.computeInt64Size(fieldNumber: 7)
            }
            if hasUpdateTime {
                serialize_size += updateTime.computeInt64Size(fieldNumber: 8)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.Faq.Builder {
            return Apiproto.Faq.classBuilder() as! Apiproto.Faq.Builder
        }
        public func getBuilder() -> Apiproto.Faq.Builder {
            return classBuilder() as! Apiproto.Faq.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.Faq.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.Faq.Builder()
        }
        public func toBuilder() throws -> Apiproto.Faq.Builder {
            return try Apiproto.Faq.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.Faq) throws -> Apiproto.Faq.Builder {
            return try Apiproto.Faq.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasId {
                jsonMap["id"] = "\(id)"
            }
            if hasTitle {
                jsonMap["title"] = title
            }
            if hasContent {
                jsonMap["content"] = content
            }
            if hasContentUrl {
                jsonMap["contentUrl"] = contentUrl
            }
            if hasHtml {
                jsonMap["html"] = html
            }
            if hasIsVisible {
                jsonMap["isVisible"] = isVisible
            }
            if hasCreateTime {
                jsonMap["createTime"] = "\(createTime)"
            }
            if hasUpdateTime {
                jsonMap["updateTime"] = "\(updateTime)"
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.Faq {
            return try Apiproto.Faq.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.Faq {
            return try Apiproto.Faq.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasId {
                output += "\(indent) id: \(id) \n"
            }
            if hasTitle {
                output += "\(indent) title: \(title) \n"
            }
            if hasContent {
                output += "\(indent) content: \(content) \n"
            }
            if hasContentUrl {
                output += "\(indent) contentUrl: \(contentUrl) \n"
            }
            if hasHtml {
                output += "\(indent) html: \(html) \n"
            }
            if hasIsVisible {
                output += "\(indent) isVisible: \(isVisible) \n"
            }
            if hasCreateTime {
                output += "\(indent) createTime: \(createTime) \n"
            }
            if hasUpdateTime {
                output += "\(indent) updateTime: \(updateTime) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasId {
                    hashCode = (hashCode &* 31) &+ id.hashValue
                }
                if hasTitle {
                    hashCode = (hashCode &* 31) &+ title.hashValue
                }
                if hasContent {
                    hashCode = (hashCode &* 31) &+ content.hashValue
                }
                if hasContentUrl {
                    hashCode = (hashCode &* 31) &+ contentUrl.hashValue
                }
                if hasHtml {
                    hashCode = (hashCode &* 31) &+ html.hashValue
                }
                if hasIsVisible {
                    hashCode = (hashCode &* 31) &+ isVisible.hashValue
                }
                if hasCreateTime {
                    hashCode = (hashCode &* 31) &+ createTime.hashValue
                }
                if hasUpdateTime {
                    hashCode = (hashCode &* 31) &+ updateTime.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.Faq"
        }
        override public func className() -> String {
            return "Apiproto.Faq"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.Faq = Apiproto.Faq()
            public func getMessage() -> Apiproto.Faq {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var id:Int64 {
                get {
                    return builderResult.id
                }
                set (value) {
                    builderResult.hasId = true
                    builderResult.id = value
                }
            }
            public var hasId:Bool {
                get {
                    return builderResult.hasId
                }
            }
            @discardableResult
            public func setId(_ value:Int64) -> Apiproto.Faq.Builder {
                self.id = value
                return self
            }
            @discardableResult
            public func clearId() -> Apiproto.Faq.Builder{
                builderResult.hasId = false
                builderResult.id = Int64(0)
                return self
            }
            public var title:String {
                get {
                    return builderResult.title
                }
                set (value) {
                    builderResult.hasTitle = true
                    builderResult.title = value
                }
            }
            public var hasTitle:Bool {
                get {
                    return builderResult.hasTitle
                }
            }
            @discardableResult
            public func setTitle(_ value:String) -> Apiproto.Faq.Builder {
                self.title = value
                return self
            }
            @discardableResult
            public func clearTitle() -> Apiproto.Faq.Builder{
                builderResult.hasTitle = false
                builderResult.title = ""
                return self
            }
            public var content:String {
                get {
                    return builderResult.content
                }
                set (value) {
                    builderResult.hasContent = true
                    builderResult.content = value
                }
            }
            public var hasContent:Bool {
                get {
                    return builderResult.hasContent
                }
            }
            @discardableResult
            public func setContent(_ value:String) -> Apiproto.Faq.Builder {
                self.content = value
                return self
            }
            @discardableResult
            public func clearContent() -> Apiproto.Faq.Builder{
                builderResult.hasContent = false
                builderResult.content = ""
                return self
            }
            public var contentUrl:String {
                get {
                    return builderResult.contentUrl
                }
                set (value) {
                    builderResult.hasContentUrl = true
                    builderResult.contentUrl = value
                }
            }
            public var hasContentUrl:Bool {
                get {
                    return builderResult.hasContentUrl
                }
            }
            @discardableResult
            public func setContentUrl(_ value:String) -> Apiproto.Faq.Builder {
                self.contentUrl = value
                return self
            }
            @discardableResult
            public func clearContentUrl() -> Apiproto.Faq.Builder{
                builderResult.hasContentUrl = false
                builderResult.contentUrl = ""
                return self
            }
            public var html:String {
                get {
                    return builderResult.html
                }
                set (value) {
                    builderResult.hasHtml = true
                    builderResult.html = value
                }
            }
            public var hasHtml:Bool {
                get {
                    return builderResult.hasHtml
                }
            }
            @discardableResult
            public func setHtml(_ value:String) -> Apiproto.Faq.Builder {
                self.html = value
                return self
            }
            @discardableResult
            public func clearHtml() -> Apiproto.Faq.Builder{
                builderResult.hasHtml = false
                builderResult.html = ""
                return self
            }
            public var isVisible:Bool {
                get {
                    return builderResult.isVisible
                }
                set (value) {
                    builderResult.hasIsVisible = true
                    builderResult.isVisible = value
                }
            }
            public var hasIsVisible:Bool {
                get {
                    return builderResult.hasIsVisible
                }
            }
            @discardableResult
            public func setIsVisible(_ value:Bool) -> Apiproto.Faq.Builder {
                self.isVisible = value
                return self
            }
            @discardableResult
            public func clearIsVisible() -> Apiproto.Faq.Builder{
                builderResult.hasIsVisible = false
                builderResult.isVisible = false
                return self
            }
            public var createTime:Int64 {
                get {
                    return builderResult.createTime
                }
                set (value) {
                    builderResult.hasCreateTime = true
                    builderResult.createTime = value
                }
            }
            public var hasCreateTime:Bool {
                get {
                    return builderResult.hasCreateTime
                }
            }
            @discardableResult
            public func setCreateTime(_ value:Int64) -> Apiproto.Faq.Builder {
                self.createTime = value
                return self
            }
            @discardableResult
            public func clearCreateTime() -> Apiproto.Faq.Builder{
                builderResult.hasCreateTime = false
                builderResult.createTime = Int64(0)
                return self
            }
            public var updateTime:Int64 {
                get {
                    return builderResult.updateTime
                }
                set (value) {
                    builderResult.hasUpdateTime = true
                    builderResult.updateTime = value
                }
            }
            public var hasUpdateTime:Bool {
                get {
                    return builderResult.hasUpdateTime
                }
            }
            @discardableResult
            public func setUpdateTime(_ value:Int64) -> Apiproto.Faq.Builder {
                self.updateTime = value
                return self
            }
            @discardableResult
            public func clearUpdateTime() -> Apiproto.Faq.Builder{
                builderResult.hasUpdateTime = false
                builderResult.updateTime = Int64(0)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.Faq.Builder {
                builderResult = Apiproto.Faq()
                return self
            }
            override public func clone() throws -> Apiproto.Faq.Builder {
                return try Apiproto.Faq.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.Faq {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.Faq {
                let returnMe:Apiproto.Faq = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.Faq) throws -> Apiproto.Faq.Builder {
                if other == Apiproto.Faq() {
                    return self
                }
                if other.hasId {
                    id = other.id
                }
                if other.hasTitle {
                    title = other.title
                }
                if other.hasContent {
                    content = other.content
                }
                if other.hasContentUrl {
                    contentUrl = other.contentUrl
                }
                if other.hasHtml {
                    html = other.html
                }
                if other.hasIsVisible {
                    isVisible = other.isVisible
                }
                if other.hasCreateTime {
                    createTime = other.createTime
                }
                if other.hasUpdateTime {
                    updateTime = other.updateTime
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.Faq.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.Faq.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        id = try codedInputStream.readInt64()

                    case 18:
                        title = try codedInputStream.readString()

                    case 26:
                        content = try codedInputStream.readString()

                    case 34:
                        contentUrl = try codedInputStream.readString()

                    case 42:
                        html = try codedInputStream.readString()

                    case 48:
                        isVisible = try codedInputStream.readBool()

                    case 56:
                        createTime = try codedInputStream.readInt64()

                    case 64:
                        updateTime = try codedInputStream.readInt64()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.Faq.Builder {
                let resultDecodedBuilder = Apiproto.Faq.Builder()
                if let jsonValueId = jsonMap["id"] as? String {
                    resultDecodedBuilder.id = Int64(jsonValueId)!
                } else if let jsonValueId = jsonMap["id"] as? Int {
                    resultDecodedBuilder.id = Int64(jsonValueId)
                }
                if let jsonValueTitle = jsonMap["title"] as? String {
                    resultDecodedBuilder.title = jsonValueTitle
                }
                if let jsonValueContent = jsonMap["content"] as? String {
                    resultDecodedBuilder.content = jsonValueContent
                }
                if let jsonValueContentUrl = jsonMap["contentUrl"] as? String {
                    resultDecodedBuilder.contentUrl = jsonValueContentUrl
                }
                if let jsonValueHtml = jsonMap["html"] as? String {
                    resultDecodedBuilder.html = jsonValueHtml
                }
                if let jsonValueIsVisible = jsonMap["isVisible"] as? Bool {
                    resultDecodedBuilder.isVisible = jsonValueIsVisible
                }
                if let jsonValueCreateTime = jsonMap["createTime"] as? String {
                    resultDecodedBuilder.createTime = Int64(jsonValueCreateTime)!
                } else if let jsonValueCreateTime = jsonMap["createTime"] as? Int {
                    resultDecodedBuilder.createTime = Int64(jsonValueCreateTime)
                }
                if let jsonValueUpdateTime = jsonMap["updateTime"] as? String {
                    resultDecodedBuilder.updateTime = Int64(jsonValueUpdateTime)!
                } else if let jsonValueUpdateTime = jsonMap["updateTime"] as? Int {
                    resultDecodedBuilder.updateTime = Int64(jsonValueUpdateTime)
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.Faq.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.Faq.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class FaqId : GeneratedMessage {

        public static func == (lhs: Apiproto.FaqId, rhs: Apiproto.FaqId) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var id:Int64 = Int64(0)
        public fileprivate(set) var hasId:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasId {
                try codedOutputStream.writeInt64(fieldNumber: 1, value:id)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasId {
                serialize_size += id.computeInt64Size(fieldNumber: 1)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.FaqId.Builder {
            return Apiproto.FaqId.classBuilder() as! Apiproto.FaqId.Builder
        }
        public func getBuilder() -> Apiproto.FaqId.Builder {
            return classBuilder() as! Apiproto.FaqId.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.FaqId.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.FaqId.Builder()
        }
        public func toBuilder() throws -> Apiproto.FaqId.Builder {
            return try Apiproto.FaqId.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.FaqId) throws -> Apiproto.FaqId.Builder {
            return try Apiproto.FaqId.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasId {
                jsonMap["id"] = "\(id)"
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.FaqId {
            return try Apiproto.FaqId.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.FaqId {
            return try Apiproto.FaqId.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasId {
                output += "\(indent) id: \(id) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasId {
                    hashCode = (hashCode &* 31) &+ id.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.FaqId"
        }
        override public func className() -> String {
            return "Apiproto.FaqId"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.FaqId = Apiproto.FaqId()
            public func getMessage() -> Apiproto.FaqId {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var id:Int64 {
                get {
                    return builderResult.id
                }
                set (value) {
                    builderResult.hasId = true
                    builderResult.id = value
                }
            }
            public var hasId:Bool {
                get {
                    return builderResult.hasId
                }
            }
            @discardableResult
            public func setId(_ value:Int64) -> Apiproto.FaqId.Builder {
                self.id = value
                return self
            }
            @discardableResult
            public func clearId() -> Apiproto.FaqId.Builder{
                builderResult.hasId = false
                builderResult.id = Int64(0)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.FaqId.Builder {
                builderResult = Apiproto.FaqId()
                return self
            }
            override public func clone() throws -> Apiproto.FaqId.Builder {
                return try Apiproto.FaqId.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.FaqId {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.FaqId {
                let returnMe:Apiproto.FaqId = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.FaqId) throws -> Apiproto.FaqId.Builder {
                if other == Apiproto.FaqId() {
                    return self
                }
                if other.hasId {
                    id = other.id
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.FaqId.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.FaqId.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        id = try codedInputStream.readInt64()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.FaqId.Builder {
                let resultDecodedBuilder = Apiproto.FaqId.Builder()
                if let jsonValueId = jsonMap["id"] as? String {
                    resultDecodedBuilder.id = Int64(jsonValueId)!
                } else if let jsonValueId = jsonMap["id"] as? Int {
                    resultDecodedBuilder.id = Int64(jsonValueId)
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.FaqId.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.FaqId.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class FaqList : GeneratedMessage {

        public static func == (lhs: Apiproto.FaqList, rhs: Apiproto.FaqList) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.list == rhs.list)
            fieldCheck = fieldCheck && (lhs.hasTotal == rhs.hasTotal) && (!lhs.hasTotal || lhs.total == rhs.total)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var list:Array<Apiproto.Faq>  = Array<Apiproto.Faq>()
        public fileprivate(set) var total:Int64 = Int64(0)
        public fileprivate(set) var hasTotal:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            for oneElementList in list {
                  try codedOutputStream.writeMessage(fieldNumber: 1, value:oneElementList)
            }
            if hasTotal {
                try codedOutputStream.writeInt64(fieldNumber: 2, value:total)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            for oneElementList in list {
                serialize_size += oneElementList.computeMessageSize(fieldNumber: 1)
            }
            if hasTotal {
                serialize_size += total.computeInt64Size(fieldNumber: 2)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.FaqList.Builder {
            return Apiproto.FaqList.classBuilder() as! Apiproto.FaqList.Builder
        }
        public func getBuilder() -> Apiproto.FaqList.Builder {
            return classBuilder() as! Apiproto.FaqList.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.FaqList.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.FaqList.Builder()
        }
        public func toBuilder() throws -> Apiproto.FaqList.Builder {
            return try Apiproto.FaqList.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.FaqList) throws -> Apiproto.FaqList.Builder {
            return try Apiproto.FaqList.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if !list.isEmpty {
                var jsonArrayList:Array<Dictionary<String,Any>> = []
                for oneValueList in list {
                    let ecodedMessageList = try oneValueList.encode()
                    jsonArrayList.append(ecodedMessageList)
                }
                jsonMap["list"] = jsonArrayList
            }
            if hasTotal {
                jsonMap["total"] = "\(total)"
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.FaqList {
            return try Apiproto.FaqList.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.FaqList {
            return try Apiproto.FaqList.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            var listElementIndex:Int = 0
            for oneElementList in list {
                output += "\(indent) list[\(listElementIndex)] {\n"
                output += try oneElementList.getDescription(indent: "\(indent)  ")
                output += "\(indent)}\n"
                listElementIndex += 1
            }
            if hasTotal {
                output += "\(indent) total: \(total) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                for oneElementList in list {
                    hashCode = (hashCode &* 31) &+ oneElementList.hashValue
                }
                if hasTotal {
                    hashCode = (hashCode &* 31) &+ total.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.FaqList"
        }
        override public func className() -> String {
            return "Apiproto.FaqList"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.FaqList = Apiproto.FaqList()
            public func getMessage() -> Apiproto.FaqList {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var list:Array<Apiproto.Faq> {
                get {
                    return builderResult.list
                }
                set (value) {
                    builderResult.list = value
                }
            }
            @discardableResult
            public func setList(_ value:Array<Apiproto.Faq>) -> Apiproto.FaqList.Builder {
                self.list = value
                return self
            }
            @discardableResult
            public func clearList() -> Apiproto.FaqList.Builder {
                builderResult.list.removeAll(keepingCapacity: false)
                return self
            }
            public var total:Int64 {
                get {
                    return builderResult.total
                }
                set (value) {
                    builderResult.hasTotal = true
                    builderResult.total = value
                }
            }
            public var hasTotal:Bool {
                get {
                    return builderResult.hasTotal
                }
            }
            @discardableResult
            public func setTotal(_ value:Int64) -> Apiproto.FaqList.Builder {
                self.total = value
                return self
            }
            @discardableResult
            public func clearTotal() -> Apiproto.FaqList.Builder{
                builderResult.hasTotal = false
                builderResult.total = Int64(0)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.FaqList.Builder {
                builderResult = Apiproto.FaqList()
                return self
            }
            override public func clone() throws -> Apiproto.FaqList.Builder {
                return try Apiproto.FaqList.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.FaqList {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.FaqList {
                let returnMe:Apiproto.FaqList = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.FaqList) throws -> Apiproto.FaqList.Builder {
                if other == Apiproto.FaqList() {
                    return self
                }
                if !other.list.isEmpty  {
                     builderResult.list += other.list
                }
                if other.hasTotal {
                    total = other.total
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.FaqList.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.FaqList.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        let subBuilder = Apiproto.Faq.Builder()
                        try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                        list.append(subBuilder.buildPartial())

                    case 16:
                        total = try codedInputStream.readInt64()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.FaqList.Builder {
                let resultDecodedBuilder = Apiproto.FaqList.Builder()
                if let jsonValueList = jsonMap["list"] as? Array<Dictionary<String,Any>> {
                    var jsonArrayList:Array<Apiproto.Faq> = []
                    for oneValueList in jsonValueList {
                        let messageFromStringList = try Apiproto.Faq.Builder.decodeToBuilder(jsonMap:oneValueList).build()

                        jsonArrayList.append(messageFromStringList)
                    }
                    resultDecodedBuilder.list = jsonArrayList
                }
                if let jsonValueTotal = jsonMap["total"] as? String {
                    resultDecodedBuilder.total = Int64(jsonValueTotal)!
                } else if let jsonValueTotal = jsonMap["total"] as? Int {
                    resultDecodedBuilder.total = Int64(jsonValueTotal)
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.FaqList.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.FaqList.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

}
extension Apiproto.LotteryOptions: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.LotteryOptions> {
        var mergedArray = Array<Apiproto.LotteryOptions>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.LotteryOptions? {
        return try Apiproto.LotteryOptions.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.LotteryOptions {
        return try Apiproto.LotteryOptions.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.OptionsRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.LotteryOptions {
        return try Apiproto.LotteryOptions.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.LotteryOptions {
        return try Apiproto.LotteryOptions.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.LotteryOptions {
        return try Apiproto.LotteryOptions.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.LotteryOptions {
        return try Apiproto.LotteryOptions.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.LotteryOptions {
        return try Apiproto.LotteryOptions.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "id": return self.id
        case "lotteryName": return self.lotteryName
        case "isPlusAward": return self.isPlusAward
        case "info": return self.info
        case "stopSale": return self.stopSale
        case "createTime": return self.createTime
        case "updateTime": return self.updateTime
        default: return nil
        }
    }
}
extension Apiproto.LotteryOptions.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "id": return self.id
            case "lotteryName": return self.lotteryName
            case "isPlusAward": return self.isPlusAward
            case "info": return self.info
            case "stopSale": return self.stopSale
            case "createTime": return self.createTime
            case "updateTime": return self.updateTime
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "id":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.id = newSubscriptValue
            case "lotteryName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.lotteryName = newSubscriptValue
            case "isPlusAward":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.isPlusAward = newSubscriptValue
            case "info":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.info = newSubscriptValue
            case "stopSale":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.stopSale = newSubscriptValue
            case "createTime":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.createTime = newSubscriptValue
            case "updateTime":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.updateTime = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.WiningList: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.WiningList> {
        var mergedArray = Array<Apiproto.WiningList>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.WiningList? {
        return try Apiproto.WiningList.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.WiningList {
        return try Apiproto.WiningList.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.OptionsRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.WiningList {
        return try Apiproto.WiningList.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.WiningList {
        return try Apiproto.WiningList.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.WiningList {
        return try Apiproto.WiningList.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.WiningList {
        return try Apiproto.WiningList.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.WiningList {
        return try Apiproto.WiningList.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "id": return self.id
        case "info": return self.info
        default: return nil
        }
    }
}
extension Apiproto.WiningList.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "id": return self.id
            case "info": return self.info
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "id":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.id = newSubscriptValue
            case "info":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.info = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.Banner: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.Banner> {
        var mergedArray = Array<Apiproto.Banner>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.Banner? {
        return try Apiproto.Banner.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.Banner {
        return try Apiproto.Banner.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.OptionsRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.Banner {
        return try Apiproto.Banner.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.Banner {
        return try Apiproto.Banner.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.Banner {
        return try Apiproto.Banner.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.Banner {
        return try Apiproto.Banner.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.Banner {
        return try Apiproto.Banner.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "id": return self.id
        case "url": return self.url
        case "targetLink": return self.targetLink
        case "isVisible": return self.isVisible
        case "description_": return self.description_
        case "created": return self.created
        case "sort": return self.sort
        case "targetId": return self.targetId
        case "targetType": return self.targetType
        case "location": return self.location
        case "updated": return self.updated
        default: return nil
        }
    }
}
extension Apiproto.Banner.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "id": return self.id
            case "url": return self.url
            case "targetLink": return self.targetLink
            case "isVisible": return self.isVisible
            case "description_": return self.description_
            case "created": return self.created
            case "sort": return self.sort
            case "targetId": return self.targetId
            case "targetType": return self.targetType
            case "location": return self.location
            case "updated": return self.updated
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "id":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.id = newSubscriptValue
            case "url":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.url = newSubscriptValue
            case "targetLink":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.targetLink = newSubscriptValue
            case "isVisible":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.isVisible = newSubscriptValue
            case "description_":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.description_ = newSubscriptValue
            case "created":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.created = newSubscriptValue
            case "sort":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.sort = newSubscriptValue
            case "targetId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.targetId = newSubscriptValue
            case "targetType":
                guard let newSubscriptValue = newSubscriptValue as? Apiproto.Banner.TargetType else {
                    return
                }
                self.targetType = newSubscriptValue
            case "location":
                guard let newSubscriptValue = newSubscriptValue as? Apiproto.Banner.Location else {
                    return
                }
                self.location = newSubscriptValue
            case "updated":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.updated = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.BannerList: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.BannerList> {
        var mergedArray = Array<Apiproto.BannerList>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.BannerList? {
        return try Apiproto.BannerList.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.BannerList {
        return try Apiproto.BannerList.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.OptionsRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BannerList {
        return try Apiproto.BannerList.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.BannerList {
        return try Apiproto.BannerList.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BannerList {
        return try Apiproto.BannerList.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.BannerList {
        return try Apiproto.BannerList.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BannerList {
        return try Apiproto.BannerList.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "list": return self.list
        case "total": return self.total
        default: return nil
        }
    }
}
extension Apiproto.BannerList.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "list": return self.list
            case "total": return self.total
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "list":
                guard let newSubscriptValue = newSubscriptValue as? Array<Apiproto.Banner> else {
                    return
                }
                self.list = newSubscriptValue
            case "total":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.total = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.HomeParams: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.HomeParams> {
        var mergedArray = Array<Apiproto.HomeParams>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.HomeParams? {
        return try Apiproto.HomeParams.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.HomeParams {
        return try Apiproto.HomeParams.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.OptionsRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.HomeParams {
        return try Apiproto.HomeParams.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.HomeParams {
        return try Apiproto.HomeParams.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.HomeParams {
        return try Apiproto.HomeParams.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.HomeParams {
        return try Apiproto.HomeParams.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.HomeParams {
        return try Apiproto.HomeParams.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "lotteryOptions": return self.lotteryOptions
        case "winList": return self.winList
        case "banner": return self.banner
        default: return nil
        }
    }
}
extension Apiproto.HomeParams.LotteryOptionsEntry: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.HomeParams.LotteryOptionsEntry> {
        var mergedArray = Array<Apiproto.HomeParams.LotteryOptionsEntry>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.HomeParams.LotteryOptionsEntry? {
        return try Apiproto.HomeParams.LotteryOptionsEntry.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.HomeParams.LotteryOptionsEntry {
        return try Apiproto.HomeParams.LotteryOptionsEntry.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.OptionsRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.HomeParams.LotteryOptionsEntry {
        return try Apiproto.HomeParams.LotteryOptionsEntry.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.HomeParams.LotteryOptionsEntry {
        return try Apiproto.HomeParams.LotteryOptionsEntry.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.HomeParams.LotteryOptionsEntry {
        return try Apiproto.HomeParams.LotteryOptionsEntry.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.HomeParams.LotteryOptionsEntry {
        return try Apiproto.HomeParams.LotteryOptionsEntry.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.HomeParams.LotteryOptionsEntry {
        return try Apiproto.HomeParams.LotteryOptionsEntry.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "key": return self.key
        case "value": return self.value
        default: return nil
        }
    }
}
extension Apiproto.HomeParams.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "lotteryOptions": return self.lotteryOptions
            case "winList": return self.winList
            case "banner": return self.banner
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "lotteryOptions":
                guard let newSubscriptValue = newSubscriptValue as? Dictionary<Int32,Apiproto.LotteryOptions> else {
                    return
                }
                self.lotteryOptions = newSubscriptValue
            case "winList":
                guard let newSubscriptValue = newSubscriptValue as? Array<String> else {
                    return
                }
                self.winList = newSubscriptValue
            case "banner":
                guard let newSubscriptValue = newSubscriptValue as? Array<Apiproto.Banner> else {
                    return
                }
                self.banner = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.HomeParams.LotteryOptionsEntry.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "key": return self.key
            case "value": return self.value
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "key":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.key = newSubscriptValue
            case "value":
                guard let newSubscriptValue = newSubscriptValue as? Apiproto.LotteryOptions else {
                    return
                }
                self.value = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.Contact: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.Contact> {
        var mergedArray = Array<Apiproto.Contact>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.Contact? {
        return try Apiproto.Contact.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.Contact {
        return try Apiproto.Contact.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.OptionsRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.Contact {
        return try Apiproto.Contact.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.Contact {
        return try Apiproto.Contact.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.Contact {
        return try Apiproto.Contact.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.Contact {
        return try Apiproto.Contact.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.Contact {
        return try Apiproto.Contact.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "id": return self.id
        case "qq": return self.qq
        case "wechat": return self.wechat
        case "email": return self.email
        case "telphone": return self.telphone
        default: return nil
        }
    }
}
extension Apiproto.Contact.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "id": return self.id
            case "qq": return self.qq
            case "wechat": return self.wechat
            case "email": return self.email
            case "telphone": return self.telphone
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "id":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.id = newSubscriptValue
            case "qq":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.qq = newSubscriptValue
            case "wechat":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.wechat = newSubscriptValue
            case "email":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.email = newSubscriptValue
            case "telphone":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.telphone = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.Faq: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.Faq> {
        var mergedArray = Array<Apiproto.Faq>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.Faq? {
        return try Apiproto.Faq.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.Faq {
        return try Apiproto.Faq.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.OptionsRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.Faq {
        return try Apiproto.Faq.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.Faq {
        return try Apiproto.Faq.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.Faq {
        return try Apiproto.Faq.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.Faq {
        return try Apiproto.Faq.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.Faq {
        return try Apiproto.Faq.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "id": return self.id
        case "title": return self.title
        case "content": return self.content
        case "contentUrl": return self.contentUrl
        case "html": return self.html
        case "isVisible": return self.isVisible
        case "createTime": return self.createTime
        case "updateTime": return self.updateTime
        default: return nil
        }
    }
}
extension Apiproto.Faq.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "id": return self.id
            case "title": return self.title
            case "content": return self.content
            case "contentUrl": return self.contentUrl
            case "html": return self.html
            case "isVisible": return self.isVisible
            case "createTime": return self.createTime
            case "updateTime": return self.updateTime
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "id":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.id = newSubscriptValue
            case "title":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.title = newSubscriptValue
            case "content":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.content = newSubscriptValue
            case "contentUrl":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.contentUrl = newSubscriptValue
            case "html":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.html = newSubscriptValue
            case "isVisible":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.isVisible = newSubscriptValue
            case "createTime":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.createTime = newSubscriptValue
            case "updateTime":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.updateTime = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.FaqId: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.FaqId> {
        var mergedArray = Array<Apiproto.FaqId>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.FaqId? {
        return try Apiproto.FaqId.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.FaqId {
        return try Apiproto.FaqId.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.OptionsRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.FaqId {
        return try Apiproto.FaqId.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.FaqId {
        return try Apiproto.FaqId.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.FaqId {
        return try Apiproto.FaqId.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.FaqId {
        return try Apiproto.FaqId.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.FaqId {
        return try Apiproto.FaqId.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "id": return self.id
        default: return nil
        }
    }
}
extension Apiproto.FaqId.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "id": return self.id
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "id":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.id = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.FaqList: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.FaqList> {
        var mergedArray = Array<Apiproto.FaqList>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.FaqList? {
        return try Apiproto.FaqList.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.FaqList {
        return try Apiproto.FaqList.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.OptionsRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.FaqList {
        return try Apiproto.FaqList.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.FaqList {
        return try Apiproto.FaqList.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.FaqList {
        return try Apiproto.FaqList.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.FaqList {
        return try Apiproto.FaqList.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.FaqList {
        return try Apiproto.FaqList.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "list": return self.list
        case "total": return self.total
        default: return nil
        }
    }
}
extension Apiproto.FaqList.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "list": return self.list
            case "total": return self.total
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "list":
                guard let newSubscriptValue = newSubscriptValue as? Array<Apiproto.Faq> else {
                    return
                }
                self.list = newSubscriptValue
            case "total":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.total = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
