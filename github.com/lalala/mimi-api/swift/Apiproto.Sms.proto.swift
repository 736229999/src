/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "sms.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public extension Apiproto{}

public extension Apiproto {
    public struct SmsRoot {
        public static let `default` = SmsRoot()
        public var extensionRegistry:ExtensionRegistry

        init() {
            extensionRegistry = ExtensionRegistry()
            registerAllExtensions(registry: extensionRegistry)
        }
        public func registerAllExtensions(registry: ExtensionRegistry) {
        }
    }



    //Enum type declaration start 

    public enum SmsType:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
        /// 注册验证
        case regist = 0

        /// 重置密码
        case resetPwd = 1

        /// 绑定手机号
        case bindPhone = 2

        /// 绑定银行卡
        case bindBankcard = 3

        /// 忘记支付密码
        case forgotPayPwd = 4
        public func toString() -> String {
            switch self {
            case .regist: return "Regist"
            case .resetPwd: return "ResetPwd"
            case .bindPhone: return "BindPhone"
            case .bindBankcard: return "BindBankcard"
            case .forgotPayPwd: return "ForgotPayPwd"
            }
        }
        public static func fromString(str:String) throws -> Apiproto.SmsType {
            switch str {
            case "Regist":    return .regist
            case "ResetPwd":    return .resetPwd
            case "BindPhone":    return .bindPhone
            case "BindBankcard":    return .bindBankcard
            case "ForgotPayPwd":    return .forgotPayPwd
            default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
            }
        }
        public var debugDescription:String { return getDescription() }
        public var description:String { return getDescription() }
        private func getDescription() -> String { 
            switch self {
            case .regist: return ".regist"
            case .resetPwd: return ".resetPwd"
            case .bindPhone: return ".bindPhone"
            case .bindBankcard: return ".bindBankcard"
            case .forgotPayPwd: return ".forgotPayPwd"
            }
        }
        public var hashValue:Int {
            return self.rawValue.hashValue
        }
        public static func ==(lhs:SmsType, rhs:SmsType) -> Bool {
            return lhs.hashValue == rhs.hashValue
        }
    }

    //Enum type declaration end 

    final public class SmsRequest : GeneratedMessage {

        public static func == (lhs: Apiproto.SmsRequest, rhs: Apiproto.SmsRequest) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasPhone == rhs.hasPhone) && (!lhs.hasPhone || lhs.phone == rhs.phone)
            fieldCheck = fieldCheck && (lhs.hasType == rhs.hasType) && (!lhs.hasType || lhs.type == rhs.type)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var phone:String = ""
        public fileprivate(set) var hasPhone:Bool = false

        public fileprivate(set) var type:Apiproto.SmsType = Apiproto.SmsType.regist
        public fileprivate(set) var hasType:Bool = false
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasPhone {
                try codedOutputStream.writeString(fieldNumber: 1, value:phone)
            }
            if hasType {
                try codedOutputStream.writeEnum(fieldNumber: 2, value:type.rawValue)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasPhone {
                serialize_size += phone.computeStringSize(fieldNumber: 1)
            }
            if (hasType) {
                serialize_size += type.rawValue.computeEnumSize(fieldNumber: 2)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.SmsRequest.Builder {
            return Apiproto.SmsRequest.classBuilder() as! Apiproto.SmsRequest.Builder
        }
        public func getBuilder() -> Apiproto.SmsRequest.Builder {
            return classBuilder() as! Apiproto.SmsRequest.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.SmsRequest.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.SmsRequest.Builder()
        }
        public func toBuilder() throws -> Apiproto.SmsRequest.Builder {
            return try Apiproto.SmsRequest.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.SmsRequest) throws -> Apiproto.SmsRequest.Builder {
            return try Apiproto.SmsRequest.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasPhone {
                jsonMap["phone"] = phone
            }
            if hasType {
                jsonMap["type"] = type.toString()
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.SmsRequest {
            return try Apiproto.SmsRequest.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.SmsRequest {
            return try Apiproto.SmsRequest.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasPhone {
                output += "\(indent) phone: \(phone) \n"
            }
            if (hasType) {
                output += "\(indent) type: \(type.description)\n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasPhone {
                    hashCode = (hashCode &* 31) &+ phone.hashValue
                }
                if hasType {
                     hashCode = (hashCode &* 31) &+ type.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.SmsRequest"
        }
        override public func className() -> String {
            return "Apiproto.SmsRequest"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.SmsRequest = Apiproto.SmsRequest()
            public func getMessage() -> Apiproto.SmsRequest {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var phone:String {
                get {
                    return builderResult.phone
                }
                set (value) {
                    builderResult.hasPhone = true
                    builderResult.phone = value
                }
            }
            public var hasPhone:Bool {
                get {
                    return builderResult.hasPhone
                }
            }
            @discardableResult
            public func setPhone(_ value:String) -> Apiproto.SmsRequest.Builder {
                self.phone = value
                return self
            }
            @discardableResult
            public func clearPhone() -> Apiproto.SmsRequest.Builder{
                builderResult.hasPhone = false
                builderResult.phone = ""
                return self
            }
                public var type:Apiproto.SmsType {
                    get {
                        return builderResult.type
                    }
                    set (value) {
                        builderResult.hasType = true
                        builderResult.type = value
                    }
                }
                public var hasType:Bool{
                    get {
                        return builderResult.hasType
                    }
                }
            @discardableResult
                public func setType(_ value:Apiproto.SmsType) -> Apiproto.SmsRequest.Builder {
                  self.type = value
                  return self
                }
            @discardableResult
                public func clearType() -> Apiproto.SmsRequest.Builder {
                   builderResult.hasType = false
                   builderResult.type = .regist
                   return self
                }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.SmsRequest.Builder {
                builderResult = Apiproto.SmsRequest()
                return self
            }
            override public func clone() throws -> Apiproto.SmsRequest.Builder {
                return try Apiproto.SmsRequest.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.SmsRequest {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.SmsRequest {
                let returnMe:Apiproto.SmsRequest = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.SmsRequest) throws -> Apiproto.SmsRequest.Builder {
                if other == Apiproto.SmsRequest() {
                    return self
                }
                if other.hasPhone {
                    phone = other.phone
                }
                if other.hasType {
                    type = other.type
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.SmsRequest.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.SmsRequest.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        phone = try codedInputStream.readString()

                    case 16:
                        let valueInttype = try codedInputStream.readEnum()
                        if let enumstype = Apiproto.SmsType(rawValue:valueInttype){
                            type = enumstype
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 2, value:Int64(valueInttype))
                        }

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.SmsRequest.Builder {
                let resultDecodedBuilder = Apiproto.SmsRequest.Builder()
                if let jsonValuePhone = jsonMap["phone"] as? String {
                    resultDecodedBuilder.phone = jsonValuePhone
                }
                if let jsonValueType = jsonMap["type"] as? String {
                    resultDecodedBuilder.type = try Apiproto.SmsType.fromString(str: jsonValueType)
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.SmsRequest.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.SmsRequest.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

}
extension Apiproto.SmsRequest: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.SmsRequest> {
        var mergedArray = Array<Apiproto.SmsRequest>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.SmsRequest? {
        return try Apiproto.SmsRequest.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.SmsRequest {
        return try Apiproto.SmsRequest.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.SmsRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.SmsRequest {
        return try Apiproto.SmsRequest.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.SmsRequest {
        return try Apiproto.SmsRequest.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.SmsRequest {
        return try Apiproto.SmsRequest.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.SmsRequest {
        return try Apiproto.SmsRequest.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.SmsRequest {
        return try Apiproto.SmsRequest.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "phone": return self.phone
        case "type": return self.type
        default: return nil
        }
    }
}
extension Apiproto.SmsRequest.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "phone": return self.phone
            case "type": return self.type
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "phone":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.phone = newSubscriptValue
            case "type":
                guard let newSubscriptValue = newSubscriptValue as? Apiproto.SmsType else {
                    return
                }
                self.type = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
