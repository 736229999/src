/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "credits.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public extension Apiproto{}

public extension Apiproto {
    public struct CreditsRoot {
        public static let `default` = CreditsRoot()
        public var extensionRegistry:ExtensionRegistry

        init() {
            extensionRegistry = ExtensionRegistry()
            registerAllExtensions(registry: extensionRegistry)
        }
        public func registerAllExtensions(registry: ExtensionRegistry) {
        }
    }

    final public class CreditsTask : GeneratedMessage {

        public static func == (lhs: Apiproto.CreditsTask, rhs: Apiproto.CreditsTask) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasAwardCredits == rhs.hasAwardCredits) && (!lhs.hasAwardCredits || lhs.awardCredits == rhs.awardCredits)
            fieldCheck = fieldCheck && (lhs.hasType == rhs.hasType) && (!lhs.hasType || lhs.type == rhs.type)
            fieldCheck = fieldCheck && (lhs.hasTitle == rhs.hasTitle) && (!lhs.hasTitle || lhs.title == rhs.title)
            fieldCheck = fieldCheck && (lhs.hasDesc == rhs.hasDesc) && (!lhs.hasDesc || lhs.desc == rhs.desc)
            fieldCheck = fieldCheck && (lhs.hasIsFinish == rhs.hasIsFinish) && (!lhs.hasIsFinish || lhs.isFinish == rhs.isFinish)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }



            //Enum type declaration start 

            public enum TaskType:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
                /// 购彩
                case buycai = 0

                /// 邀请好友
                case inviteFriend = 1

                /// 首次中奖
                case firstWin = 2

                /// 首次购彩
                case firstBuycai = 3

                /// 实名认证
                case authRealname = 4

                /// 绑定手机
                case bindPhone = 5

                /// 新用户注册
                case registAccount = 6
                public func toString() -> String {
                    switch self {
                    case .buycai: return "Buycai"
                    case .inviteFriend: return "InviteFriend"
                    case .firstWin: return "FirstWin"
                    case .firstBuycai: return "FirstBuycai"
                    case .authRealname: return "AuthRealname"
                    case .bindPhone: return "BindPhone"
                    case .registAccount: return "RegistAccount"
                    }
                }
                public static func fromString(str:String) throws -> Apiproto.CreditsTask.TaskType {
                    switch str {
                    case "Buycai":    return .buycai
                    case "InviteFriend":    return .inviteFriend
                    case "FirstWin":    return .firstWin
                    case "FirstBuycai":    return .firstBuycai
                    case "AuthRealname":    return .authRealname
                    case "BindPhone":    return .bindPhone
                    case "RegistAccount":    return .registAccount
                    default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
                    }
                }
                public var debugDescription:String { return getDescription() }
                public var description:String { return getDescription() }
                private func getDescription() -> String { 
                    switch self {
                    case .buycai: return ".buycai"
                    case .inviteFriend: return ".inviteFriend"
                    case .firstWin: return ".firstWin"
                    case .firstBuycai: return ".firstBuycai"
                    case .authRealname: return ".authRealname"
                    case .bindPhone: return ".bindPhone"
                    case .registAccount: return ".registAccount"
                    }
                }
                public var hashValue:Int {
                    return self.rawValue.hashValue
                }
                public static func ==(lhs:TaskType, rhs:TaskType) -> Bool {
                    return lhs.hashValue == rhs.hashValue
                }
            }

            //Enum type declaration end 

        public fileprivate(set) var awardCredits:Int32 = Int32(0)
        public fileprivate(set) var hasAwardCredits:Bool = false

        public fileprivate(set) var type:Apiproto.CreditsTask.TaskType = Apiproto.CreditsTask.TaskType.buycai
        public fileprivate(set) var hasType:Bool = false
        public fileprivate(set) var title:String = ""
        public fileprivate(set) var hasTitle:Bool = false

        public fileprivate(set) var desc:String = ""
        public fileprivate(set) var hasDesc:Bool = false

        public fileprivate(set) var isFinish:Bool = false
        public fileprivate(set) var hasIsFinish:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasAwardCredits {
                try codedOutputStream.writeInt32(fieldNumber: 1, value:awardCredits)
            }
            if hasType {
                try codedOutputStream.writeEnum(fieldNumber: 2, value:type.rawValue)
            }
            if hasTitle {
                try codedOutputStream.writeString(fieldNumber: 3, value:title)
            }
            if hasDesc {
                try codedOutputStream.writeString(fieldNumber: 4, value:desc)
            }
            if hasIsFinish {
                try codedOutputStream.writeBool(fieldNumber: 5, value:isFinish)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasAwardCredits {
                serialize_size += awardCredits.computeInt32Size(fieldNumber: 1)
            }
            if (hasType) {
                serialize_size += type.rawValue.computeEnumSize(fieldNumber: 2)
            }
            if hasTitle {
                serialize_size += title.computeStringSize(fieldNumber: 3)
            }
            if hasDesc {
                serialize_size += desc.computeStringSize(fieldNumber: 4)
            }
            if hasIsFinish {
                serialize_size += isFinish.computeBoolSize(fieldNumber: 5)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.CreditsTask.Builder {
            return Apiproto.CreditsTask.classBuilder() as! Apiproto.CreditsTask.Builder
        }
        public func getBuilder() -> Apiproto.CreditsTask.Builder {
            return classBuilder() as! Apiproto.CreditsTask.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.CreditsTask.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.CreditsTask.Builder()
        }
        public func toBuilder() throws -> Apiproto.CreditsTask.Builder {
            return try Apiproto.CreditsTask.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.CreditsTask) throws -> Apiproto.CreditsTask.Builder {
            return try Apiproto.CreditsTask.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasAwardCredits {
                jsonMap["awardCredits"] = Int(awardCredits)
            }
            if hasType {
                jsonMap["type"] = type.toString()
            }
            if hasTitle {
                jsonMap["title"] = title
            }
            if hasDesc {
                jsonMap["desc"] = desc
            }
            if hasIsFinish {
                jsonMap["isFinish"] = isFinish
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.CreditsTask {
            return try Apiproto.CreditsTask.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.CreditsTask {
            return try Apiproto.CreditsTask.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasAwardCredits {
                output += "\(indent) awardCredits: \(awardCredits) \n"
            }
            if (hasType) {
                output += "\(indent) type: \(type.description)\n"
            }
            if hasTitle {
                output += "\(indent) title: \(title) \n"
            }
            if hasDesc {
                output += "\(indent) desc: \(desc) \n"
            }
            if hasIsFinish {
                output += "\(indent) isFinish: \(isFinish) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasAwardCredits {
                    hashCode = (hashCode &* 31) &+ awardCredits.hashValue
                }
                if hasType {
                     hashCode = (hashCode &* 31) &+ type.hashValue
                }
                if hasTitle {
                    hashCode = (hashCode &* 31) &+ title.hashValue
                }
                if hasDesc {
                    hashCode = (hashCode &* 31) &+ desc.hashValue
                }
                if hasIsFinish {
                    hashCode = (hashCode &* 31) &+ isFinish.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.CreditsTask"
        }
        override public func className() -> String {
            return "Apiproto.CreditsTask"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.CreditsTask = Apiproto.CreditsTask()
            public func getMessage() -> Apiproto.CreditsTask {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var awardCredits:Int32 {
                get {
                    return builderResult.awardCredits
                }
                set (value) {
                    builderResult.hasAwardCredits = true
                    builderResult.awardCredits = value
                }
            }
            public var hasAwardCredits:Bool {
                get {
                    return builderResult.hasAwardCredits
                }
            }
            @discardableResult
            public func setAwardCredits(_ value:Int32) -> Apiproto.CreditsTask.Builder {
                self.awardCredits = value
                return self
            }
            @discardableResult
            public func clearAwardCredits() -> Apiproto.CreditsTask.Builder{
                builderResult.hasAwardCredits = false
                builderResult.awardCredits = Int32(0)
                return self
            }
                public var type:Apiproto.CreditsTask.TaskType {
                    get {
                        return builderResult.type
                    }
                    set (value) {
                        builderResult.hasType = true
                        builderResult.type = value
                    }
                }
                public var hasType:Bool{
                    get {
                        return builderResult.hasType
                    }
                }
            @discardableResult
                public func setType(_ value:Apiproto.CreditsTask.TaskType) -> Apiproto.CreditsTask.Builder {
                  self.type = value
                  return self
                }
            @discardableResult
                public func clearType() -> Apiproto.CreditsTask.Builder {
                   builderResult.hasType = false
                   builderResult.type = .buycai
                   return self
                }
            public var title:String {
                get {
                    return builderResult.title
                }
                set (value) {
                    builderResult.hasTitle = true
                    builderResult.title = value
                }
            }
            public var hasTitle:Bool {
                get {
                    return builderResult.hasTitle
                }
            }
            @discardableResult
            public func setTitle(_ value:String) -> Apiproto.CreditsTask.Builder {
                self.title = value
                return self
            }
            @discardableResult
            public func clearTitle() -> Apiproto.CreditsTask.Builder{
                builderResult.hasTitle = false
                builderResult.title = ""
                return self
            }
            public var desc:String {
                get {
                    return builderResult.desc
                }
                set (value) {
                    builderResult.hasDesc = true
                    builderResult.desc = value
                }
            }
            public var hasDesc:Bool {
                get {
                    return builderResult.hasDesc
                }
            }
            @discardableResult
            public func setDesc(_ value:String) -> Apiproto.CreditsTask.Builder {
                self.desc = value
                return self
            }
            @discardableResult
            public func clearDesc() -> Apiproto.CreditsTask.Builder{
                builderResult.hasDesc = false
                builderResult.desc = ""
                return self
            }
            public var isFinish:Bool {
                get {
                    return builderResult.isFinish
                }
                set (value) {
                    builderResult.hasIsFinish = true
                    builderResult.isFinish = value
                }
            }
            public var hasIsFinish:Bool {
                get {
                    return builderResult.hasIsFinish
                }
            }
            @discardableResult
            public func setIsFinish(_ value:Bool) -> Apiproto.CreditsTask.Builder {
                self.isFinish = value
                return self
            }
            @discardableResult
            public func clearIsFinish() -> Apiproto.CreditsTask.Builder{
                builderResult.hasIsFinish = false
                builderResult.isFinish = false
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.CreditsTask.Builder {
                builderResult = Apiproto.CreditsTask()
                return self
            }
            override public func clone() throws -> Apiproto.CreditsTask.Builder {
                return try Apiproto.CreditsTask.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.CreditsTask {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.CreditsTask {
                let returnMe:Apiproto.CreditsTask = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.CreditsTask) throws -> Apiproto.CreditsTask.Builder {
                if other == Apiproto.CreditsTask() {
                    return self
                }
                if other.hasAwardCredits {
                    awardCredits = other.awardCredits
                }
                if other.hasType {
                    type = other.type
                }
                if other.hasTitle {
                    title = other.title
                }
                if other.hasDesc {
                    desc = other.desc
                }
                if other.hasIsFinish {
                    isFinish = other.isFinish
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.CreditsTask.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.CreditsTask.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        awardCredits = try codedInputStream.readInt32()

                    case 16:
                        let valueInttype = try codedInputStream.readEnum()
                        if let enumstype = Apiproto.CreditsTask.TaskType(rawValue:valueInttype){
                            type = enumstype
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 2, value:Int64(valueInttype))
                        }

                    case 26:
                        title = try codedInputStream.readString()

                    case 34:
                        desc = try codedInputStream.readString()

                    case 40:
                        isFinish = try codedInputStream.readBool()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.CreditsTask.Builder {
                let resultDecodedBuilder = Apiproto.CreditsTask.Builder()
                if let jsonValueAwardCredits = jsonMap["awardCredits"] as? Int {
                    resultDecodedBuilder.awardCredits = Int32(jsonValueAwardCredits)
                } else if let jsonValueAwardCredits = jsonMap["awardCredits"] as? String {
                    resultDecodedBuilder.awardCredits = Int32(jsonValueAwardCredits)!
                }
                if let jsonValueType = jsonMap["type"] as? String {
                    resultDecodedBuilder.type = try Apiproto.CreditsTask.TaskType.fromString(str: jsonValueType)
                }
                if let jsonValueTitle = jsonMap["title"] as? String {
                    resultDecodedBuilder.title = jsonValueTitle
                }
                if let jsonValueDesc = jsonMap["desc"] as? String {
                    resultDecodedBuilder.desc = jsonValueDesc
                }
                if let jsonValueIsFinish = jsonMap["isFinish"] as? Bool {
                    resultDecodedBuilder.isFinish = jsonValueIsFinish
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.CreditsTask.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.CreditsTask.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class CreditsTaskInfo : GeneratedMessage {

        public static func == (lhs: Apiproto.CreditsTaskInfo, rhs: Apiproto.CreditsTaskInfo) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasCredits == rhs.hasCredits) && (!lhs.hasCredits || lhs.credits == rhs.credits)
            fieldCheck = fieldCheck && (lhs.taskList == rhs.taskList)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var credits:Int32 = Int32(0)
        public fileprivate(set) var hasCredits:Bool = false

        public fileprivate(set) var taskList:Array<Apiproto.CreditsTask>  = Array<Apiproto.CreditsTask>()
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasCredits {
                try codedOutputStream.writeInt32(fieldNumber: 1, value:credits)
            }
            for oneElementTaskList in taskList {
                  try codedOutputStream.writeMessage(fieldNumber: 2, value:oneElementTaskList)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasCredits {
                serialize_size += credits.computeInt32Size(fieldNumber: 1)
            }
            for oneElementTaskList in taskList {
                serialize_size += oneElementTaskList.computeMessageSize(fieldNumber: 2)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.CreditsTaskInfo.Builder {
            return Apiproto.CreditsTaskInfo.classBuilder() as! Apiproto.CreditsTaskInfo.Builder
        }
        public func getBuilder() -> Apiproto.CreditsTaskInfo.Builder {
            return classBuilder() as! Apiproto.CreditsTaskInfo.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.CreditsTaskInfo.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.CreditsTaskInfo.Builder()
        }
        public func toBuilder() throws -> Apiproto.CreditsTaskInfo.Builder {
            return try Apiproto.CreditsTaskInfo.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.CreditsTaskInfo) throws -> Apiproto.CreditsTaskInfo.Builder {
            return try Apiproto.CreditsTaskInfo.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasCredits {
                jsonMap["credits"] = Int(credits)
            }
            if !taskList.isEmpty {
                var jsonArrayTaskList:Array<Dictionary<String,Any>> = []
                for oneValueTaskList in taskList {
                    let ecodedMessageTaskList = try oneValueTaskList.encode()
                    jsonArrayTaskList.append(ecodedMessageTaskList)
                }
                jsonMap["taskList"] = jsonArrayTaskList
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.CreditsTaskInfo {
            return try Apiproto.CreditsTaskInfo.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.CreditsTaskInfo {
            return try Apiproto.CreditsTaskInfo.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasCredits {
                output += "\(indent) credits: \(credits) \n"
            }
            var taskListElementIndex:Int = 0
            for oneElementTaskList in taskList {
                output += "\(indent) taskList[\(taskListElementIndex)] {\n"
                output += try oneElementTaskList.getDescription(indent: "\(indent)  ")
                output += "\(indent)}\n"
                taskListElementIndex += 1
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasCredits {
                    hashCode = (hashCode &* 31) &+ credits.hashValue
                }
                for oneElementTaskList in taskList {
                    hashCode = (hashCode &* 31) &+ oneElementTaskList.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.CreditsTaskInfo"
        }
        override public func className() -> String {
            return "Apiproto.CreditsTaskInfo"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.CreditsTaskInfo = Apiproto.CreditsTaskInfo()
            public func getMessage() -> Apiproto.CreditsTaskInfo {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var credits:Int32 {
                get {
                    return builderResult.credits
                }
                set (value) {
                    builderResult.hasCredits = true
                    builderResult.credits = value
                }
            }
            public var hasCredits:Bool {
                get {
                    return builderResult.hasCredits
                }
            }
            @discardableResult
            public func setCredits(_ value:Int32) -> Apiproto.CreditsTaskInfo.Builder {
                self.credits = value
                return self
            }
            @discardableResult
            public func clearCredits() -> Apiproto.CreditsTaskInfo.Builder{
                builderResult.hasCredits = false
                builderResult.credits = Int32(0)
                return self
            }
            public var taskList:Array<Apiproto.CreditsTask> {
                get {
                    return builderResult.taskList
                }
                set (value) {
                    builderResult.taskList = value
                }
            }
            @discardableResult
            public func setTaskList(_ value:Array<Apiproto.CreditsTask>) -> Apiproto.CreditsTaskInfo.Builder {
                self.taskList = value
                return self
            }
            @discardableResult
            public func clearTaskList() -> Apiproto.CreditsTaskInfo.Builder {
                builderResult.taskList.removeAll(keepingCapacity: false)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.CreditsTaskInfo.Builder {
                builderResult = Apiproto.CreditsTaskInfo()
                return self
            }
            override public func clone() throws -> Apiproto.CreditsTaskInfo.Builder {
                return try Apiproto.CreditsTaskInfo.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.CreditsTaskInfo {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.CreditsTaskInfo {
                let returnMe:Apiproto.CreditsTaskInfo = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.CreditsTaskInfo) throws -> Apiproto.CreditsTaskInfo.Builder {
                if other == Apiproto.CreditsTaskInfo() {
                    return self
                }
                if other.hasCredits {
                    credits = other.credits
                }
                if !other.taskList.isEmpty  {
                     builderResult.taskList += other.taskList
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.CreditsTaskInfo.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.CreditsTaskInfo.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        credits = try codedInputStream.readInt32()

                    case 18:
                        let subBuilder = Apiproto.CreditsTask.Builder()
                        try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                        taskList.append(subBuilder.buildPartial())

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.CreditsTaskInfo.Builder {
                let resultDecodedBuilder = Apiproto.CreditsTaskInfo.Builder()
                if let jsonValueCredits = jsonMap["credits"] as? Int {
                    resultDecodedBuilder.credits = Int32(jsonValueCredits)
                } else if let jsonValueCredits = jsonMap["credits"] as? String {
                    resultDecodedBuilder.credits = Int32(jsonValueCredits)!
                }
                if let jsonValueTaskList = jsonMap["taskList"] as? Array<Dictionary<String,Any>> {
                    var jsonArrayTaskList:Array<Apiproto.CreditsTask> = []
                    for oneValueTaskList in jsonValueTaskList {
                        let messageFromStringTaskList = try Apiproto.CreditsTask.Builder.decodeToBuilder(jsonMap:oneValueTaskList).build()

                        jsonArrayTaskList.append(messageFromStringTaskList)
                    }
                    resultDecodedBuilder.taskList = jsonArrayTaskList
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.CreditsTaskInfo.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.CreditsTaskInfo.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

}
extension Apiproto.CreditsTask: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.CreditsTask> {
        var mergedArray = Array<Apiproto.CreditsTask>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.CreditsTask? {
        return try Apiproto.CreditsTask.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.CreditsTask {
        return try Apiproto.CreditsTask.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.CreditsRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.CreditsTask {
        return try Apiproto.CreditsTask.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.CreditsTask {
        return try Apiproto.CreditsTask.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.CreditsTask {
        return try Apiproto.CreditsTask.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.CreditsTask {
        return try Apiproto.CreditsTask.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.CreditsTask {
        return try Apiproto.CreditsTask.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "awardCredits": return self.awardCredits
        case "type": return self.type
        case "title": return self.title
        case "desc": return self.desc
        case "isFinish": return self.isFinish
        default: return nil
        }
    }
}
extension Apiproto.CreditsTask.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "awardCredits": return self.awardCredits
            case "type": return self.type
            case "title": return self.title
            case "desc": return self.desc
            case "isFinish": return self.isFinish
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "awardCredits":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.awardCredits = newSubscriptValue
            case "type":
                guard let newSubscriptValue = newSubscriptValue as? Apiproto.CreditsTask.TaskType else {
                    return
                }
                self.type = newSubscriptValue
            case "title":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.title = newSubscriptValue
            case "desc":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.desc = newSubscriptValue
            case "isFinish":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.isFinish = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.CreditsTaskInfo: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.CreditsTaskInfo> {
        var mergedArray = Array<Apiproto.CreditsTaskInfo>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.CreditsTaskInfo? {
        return try Apiproto.CreditsTaskInfo.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.CreditsTaskInfo {
        return try Apiproto.CreditsTaskInfo.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.CreditsRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.CreditsTaskInfo {
        return try Apiproto.CreditsTaskInfo.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.CreditsTaskInfo {
        return try Apiproto.CreditsTaskInfo.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.CreditsTaskInfo {
        return try Apiproto.CreditsTaskInfo.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.CreditsTaskInfo {
        return try Apiproto.CreditsTaskInfo.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.CreditsTaskInfo {
        return try Apiproto.CreditsTaskInfo.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "credits": return self.credits
        case "taskList": return self.taskList
        default: return nil
        }
    }
}
extension Apiproto.CreditsTaskInfo.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "credits": return self.credits
            case "taskList": return self.taskList
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "credits":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.credits = newSubscriptValue
            case "taskList":
                guard let newSubscriptValue = newSubscriptValue as? Array<Apiproto.CreditsTask> else {
                    return
                }
                self.taskList = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
