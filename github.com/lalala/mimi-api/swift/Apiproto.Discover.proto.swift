/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "discover.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public extension Apiproto{}

public extension Apiproto {
    public struct DiscoverRoot {
        public static let `default` = DiscoverRoot()
        public var extensionRegistry:ExtensionRegistry

        init() {
            extensionRegistry = ExtensionRegistry()
            registerAllExtensions(registry: extensionRegistry)
        }
        public func registerAllExtensions(registry: ExtensionRegistry) {
        }
    }

    final public class News : GeneratedMessage {

        public static func == (lhs: Apiproto.News, rhs: Apiproto.News) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
            fieldCheck = fieldCheck && (lhs.hasTitle == rhs.hasTitle) && (!lhs.hasTitle || lhs.title == rhs.title)
            fieldCheck = fieldCheck && (lhs.hasDescription == rhs.hasDescription) && (!lhs.hasDescription || lhs.description_ == rhs.description_)
            fieldCheck = fieldCheck && (lhs.hasCover == rhs.hasCover) && (!lhs.hasCover || lhs.cover == rhs.cover)
            fieldCheck = fieldCheck && (lhs.hasContent == rhs.hasContent) && (!lhs.hasContent || lhs.content == rhs.content)
            fieldCheck = fieldCheck && (lhs.hasHtml == rhs.hasHtml) && (!lhs.hasHtml || lhs.html == rhs.html)
            fieldCheck = fieldCheck && (lhs.hasAuthor == rhs.hasAuthor) && (!lhs.hasAuthor || lhs.author == rhs.author)
            fieldCheck = fieldCheck && (lhs.hasCreated == rhs.hasCreated) && (!lhs.hasCreated || lhs.created == rhs.created)
            fieldCheck = fieldCheck && (lhs.hasNewsClass == rhs.hasNewsClass) && (!lhs.hasNewsClass || lhs.newsClass == rhs.newsClass)
            fieldCheck = fieldCheck && (lhs.hasIsVisible == rhs.hasIsVisible) && (!lhs.hasIsVisible || lhs.isVisible == rhs.isVisible)
            fieldCheck = fieldCheck && (lhs.hasUpdated == rhs.hasUpdated) && (!lhs.hasUpdated || lhs.updated == rhs.updated)
            fieldCheck = fieldCheck && (lhs.hasPageViews == rhs.hasPageViews) && (!lhs.hasPageViews || lhs.pageViews == rhs.pageViews)
            fieldCheck = fieldCheck && (lhs.hasContentUrl == rhs.hasContentUrl) && (!lhs.hasContentUrl || lhs.contentUrl == rhs.contentUrl)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var id:Int64 = Int64(0)
        public fileprivate(set) var hasId:Bool = false

        public fileprivate(set) var title:String = ""
        public fileprivate(set) var hasTitle:Bool = false

        public fileprivate(set) var description_:String = ""
        public fileprivate(set) var hasDescription:Bool = false

        public fileprivate(set) var cover:String = ""
        public fileprivate(set) var hasCover:Bool = false

        public fileprivate(set) var content:String = ""
        public fileprivate(set) var hasContent:Bool = false

        public fileprivate(set) var html:String = ""
        public fileprivate(set) var hasHtml:Bool = false

        public fileprivate(set) var author:String = ""
        public fileprivate(set) var hasAuthor:Bool = false

        public fileprivate(set) var created:Int64 = Int64(0)
        public fileprivate(set) var hasCreated:Bool = false

        public fileprivate(set) var newsClass:Int64 = Int64(0)
        public fileprivate(set) var hasNewsClass:Bool = false

        public fileprivate(set) var isVisible:Bool = false
        public fileprivate(set) var hasIsVisible:Bool = false

        public fileprivate(set) var updated:Int64 = Int64(0)
        public fileprivate(set) var hasUpdated:Bool = false

        public fileprivate(set) var pageViews:Int64 = Int64(0)
        public fileprivate(set) var hasPageViews:Bool = false

        public fileprivate(set) var contentUrl:String = ""
        public fileprivate(set) var hasContentUrl:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasId {
                try codedOutputStream.writeInt64(fieldNumber: 1, value:id)
            }
            if hasTitle {
                try codedOutputStream.writeString(fieldNumber: 2, value:title)
            }
            if hasDescription {
                try codedOutputStream.writeString(fieldNumber: 3, value:description_)
            }
            if hasCover {
                try codedOutputStream.writeString(fieldNumber: 4, value:cover)
            }
            if hasContent {
                try codedOutputStream.writeString(fieldNumber: 5, value:content)
            }
            if hasHtml {
                try codedOutputStream.writeString(fieldNumber: 6, value:html)
            }
            if hasAuthor {
                try codedOutputStream.writeString(fieldNumber: 7, value:author)
            }
            if hasCreated {
                try codedOutputStream.writeInt64(fieldNumber: 8, value:created)
            }
            if hasNewsClass {
                try codedOutputStream.writeInt64(fieldNumber: 9, value:newsClass)
            }
            if hasIsVisible {
                try codedOutputStream.writeBool(fieldNumber: 10, value:isVisible)
            }
            if hasUpdated {
                try codedOutputStream.writeInt64(fieldNumber: 11, value:updated)
            }
            if hasPageViews {
                try codedOutputStream.writeInt64(fieldNumber: 12, value:pageViews)
            }
            if hasContentUrl {
                try codedOutputStream.writeString(fieldNumber: 13, value:contentUrl)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasId {
                serialize_size += id.computeInt64Size(fieldNumber: 1)
            }
            if hasTitle {
                serialize_size += title.computeStringSize(fieldNumber: 2)
            }
            if hasDescription {
                serialize_size += description_.computeStringSize(fieldNumber: 3)
            }
            if hasCover {
                serialize_size += cover.computeStringSize(fieldNumber: 4)
            }
            if hasContent {
                serialize_size += content.computeStringSize(fieldNumber: 5)
            }
            if hasHtml {
                serialize_size += html.computeStringSize(fieldNumber: 6)
            }
            if hasAuthor {
                serialize_size += author.computeStringSize(fieldNumber: 7)
            }
            if hasCreated {
                serialize_size += created.computeInt64Size(fieldNumber: 8)
            }
            if hasNewsClass {
                serialize_size += newsClass.computeInt64Size(fieldNumber: 9)
            }
            if hasIsVisible {
                serialize_size += isVisible.computeBoolSize(fieldNumber: 10)
            }
            if hasUpdated {
                serialize_size += updated.computeInt64Size(fieldNumber: 11)
            }
            if hasPageViews {
                serialize_size += pageViews.computeInt64Size(fieldNumber: 12)
            }
            if hasContentUrl {
                serialize_size += contentUrl.computeStringSize(fieldNumber: 13)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.News.Builder {
            return Apiproto.News.classBuilder() as! Apiproto.News.Builder
        }
        public func getBuilder() -> Apiproto.News.Builder {
            return classBuilder() as! Apiproto.News.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.News.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.News.Builder()
        }
        public func toBuilder() throws -> Apiproto.News.Builder {
            return try Apiproto.News.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.News) throws -> Apiproto.News.Builder {
            return try Apiproto.News.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasId {
                jsonMap["id"] = "\(id)"
            }
            if hasTitle {
                jsonMap["title"] = title
            }
            if hasDescription {
                jsonMap["description"] = description_
            }
            if hasCover {
                jsonMap["cover"] = cover
            }
            if hasContent {
                jsonMap["content"] = content
            }
            if hasHtml {
                jsonMap["html"] = html
            }
            if hasAuthor {
                jsonMap["author"] = author
            }
            if hasCreated {
                jsonMap["created"] = "\(created)"
            }
            if hasNewsClass {
                jsonMap["newsClass"] = "\(newsClass)"
            }
            if hasIsVisible {
                jsonMap["isVisible"] = isVisible
            }
            if hasUpdated {
                jsonMap["updated"] = "\(updated)"
            }
            if hasPageViews {
                jsonMap["pageViews"] = "\(pageViews)"
            }
            if hasContentUrl {
                jsonMap["contentUrl"] = contentUrl
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.News {
            return try Apiproto.News.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.News {
            return try Apiproto.News.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasId {
                output += "\(indent) id: \(id) \n"
            }
            if hasTitle {
                output += "\(indent) title: \(title) \n"
            }
            if hasDescription {
                output += "\(indent) description: \(description_) \n"
            }
            if hasCover {
                output += "\(indent) cover: \(cover) \n"
            }
            if hasContent {
                output += "\(indent) content: \(content) \n"
            }
            if hasHtml {
                output += "\(indent) html: \(html) \n"
            }
            if hasAuthor {
                output += "\(indent) author: \(author) \n"
            }
            if hasCreated {
                output += "\(indent) created: \(created) \n"
            }
            if hasNewsClass {
                output += "\(indent) newsClass: \(newsClass) \n"
            }
            if hasIsVisible {
                output += "\(indent) isVisible: \(isVisible) \n"
            }
            if hasUpdated {
                output += "\(indent) updated: \(updated) \n"
            }
            if hasPageViews {
                output += "\(indent) pageViews: \(pageViews) \n"
            }
            if hasContentUrl {
                output += "\(indent) contentUrl: \(contentUrl) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasId {
                    hashCode = (hashCode &* 31) &+ id.hashValue
                }
                if hasTitle {
                    hashCode = (hashCode &* 31) &+ title.hashValue
                }
                if hasDescription {
                    hashCode = (hashCode &* 31) &+ description_.hashValue
                }
                if hasCover {
                    hashCode = (hashCode &* 31) &+ cover.hashValue
                }
                if hasContent {
                    hashCode = (hashCode &* 31) &+ content.hashValue
                }
                if hasHtml {
                    hashCode = (hashCode &* 31) &+ html.hashValue
                }
                if hasAuthor {
                    hashCode = (hashCode &* 31) &+ author.hashValue
                }
                if hasCreated {
                    hashCode = (hashCode &* 31) &+ created.hashValue
                }
                if hasNewsClass {
                    hashCode = (hashCode &* 31) &+ newsClass.hashValue
                }
                if hasIsVisible {
                    hashCode = (hashCode &* 31) &+ isVisible.hashValue
                }
                if hasUpdated {
                    hashCode = (hashCode &* 31) &+ updated.hashValue
                }
                if hasPageViews {
                    hashCode = (hashCode &* 31) &+ pageViews.hashValue
                }
                if hasContentUrl {
                    hashCode = (hashCode &* 31) &+ contentUrl.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.News"
        }
        override public func className() -> String {
            return "Apiproto.News"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.News = Apiproto.News()
            public func getMessage() -> Apiproto.News {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var id:Int64 {
                get {
                    return builderResult.id
                }
                set (value) {
                    builderResult.hasId = true
                    builderResult.id = value
                }
            }
            public var hasId:Bool {
                get {
                    return builderResult.hasId
                }
            }
            @discardableResult
            public func setId(_ value:Int64) -> Apiproto.News.Builder {
                self.id = value
                return self
            }
            @discardableResult
            public func clearId() -> Apiproto.News.Builder{
                builderResult.hasId = false
                builderResult.id = Int64(0)
                return self
            }
            public var title:String {
                get {
                    return builderResult.title
                }
                set (value) {
                    builderResult.hasTitle = true
                    builderResult.title = value
                }
            }
            public var hasTitle:Bool {
                get {
                    return builderResult.hasTitle
                }
            }
            @discardableResult
            public func setTitle(_ value:String) -> Apiproto.News.Builder {
                self.title = value
                return self
            }
            @discardableResult
            public func clearTitle() -> Apiproto.News.Builder{
                builderResult.hasTitle = false
                builderResult.title = ""
                return self
            }
            public var description_:String {
                get {
                    return builderResult.description_
                }
                set (value) {
                    builderResult.hasDescription = true
                    builderResult.description_ = value
                }
            }
            public var hasDescription:Bool {
                get {
                    return builderResult.hasDescription
                }
            }
            @discardableResult
            public func setDescription(_ value:String) -> Apiproto.News.Builder {
                self.description_ = value
                return self
            }
            @discardableResult
            public func clearDescription() -> Apiproto.News.Builder{
                builderResult.hasDescription = false
                builderResult.description_ = ""
                return self
            }
            public var cover:String {
                get {
                    return builderResult.cover
                }
                set (value) {
                    builderResult.hasCover = true
                    builderResult.cover = value
                }
            }
            public var hasCover:Bool {
                get {
                    return builderResult.hasCover
                }
            }
            @discardableResult
            public func setCover(_ value:String) -> Apiproto.News.Builder {
                self.cover = value
                return self
            }
            @discardableResult
            public func clearCover() -> Apiproto.News.Builder{
                builderResult.hasCover = false
                builderResult.cover = ""
                return self
            }
            public var content:String {
                get {
                    return builderResult.content
                }
                set (value) {
                    builderResult.hasContent = true
                    builderResult.content = value
                }
            }
            public var hasContent:Bool {
                get {
                    return builderResult.hasContent
                }
            }
            @discardableResult
            public func setContent(_ value:String) -> Apiproto.News.Builder {
                self.content = value
                return self
            }
            @discardableResult
            public func clearContent() -> Apiproto.News.Builder{
                builderResult.hasContent = false
                builderResult.content = ""
                return self
            }
            public var html:String {
                get {
                    return builderResult.html
                }
                set (value) {
                    builderResult.hasHtml = true
                    builderResult.html = value
                }
            }
            public var hasHtml:Bool {
                get {
                    return builderResult.hasHtml
                }
            }
            @discardableResult
            public func setHtml(_ value:String) -> Apiproto.News.Builder {
                self.html = value
                return self
            }
            @discardableResult
            public func clearHtml() -> Apiproto.News.Builder{
                builderResult.hasHtml = false
                builderResult.html = ""
                return self
            }
            public var author:String {
                get {
                    return builderResult.author
                }
                set (value) {
                    builderResult.hasAuthor = true
                    builderResult.author = value
                }
            }
            public var hasAuthor:Bool {
                get {
                    return builderResult.hasAuthor
                }
            }
            @discardableResult
            public func setAuthor(_ value:String) -> Apiproto.News.Builder {
                self.author = value
                return self
            }
            @discardableResult
            public func clearAuthor() -> Apiproto.News.Builder{
                builderResult.hasAuthor = false
                builderResult.author = ""
                return self
            }
            public var created:Int64 {
                get {
                    return builderResult.created
                }
                set (value) {
                    builderResult.hasCreated = true
                    builderResult.created = value
                }
            }
            public var hasCreated:Bool {
                get {
                    return builderResult.hasCreated
                }
            }
            @discardableResult
            public func setCreated(_ value:Int64) -> Apiproto.News.Builder {
                self.created = value
                return self
            }
            @discardableResult
            public func clearCreated() -> Apiproto.News.Builder{
                builderResult.hasCreated = false
                builderResult.created = Int64(0)
                return self
            }
            public var newsClass:Int64 {
                get {
                    return builderResult.newsClass
                }
                set (value) {
                    builderResult.hasNewsClass = true
                    builderResult.newsClass = value
                }
            }
            public var hasNewsClass:Bool {
                get {
                    return builderResult.hasNewsClass
                }
            }
            @discardableResult
            public func setNewsClass(_ value:Int64) -> Apiproto.News.Builder {
                self.newsClass = value
                return self
            }
            @discardableResult
            public func clearNewsClass() -> Apiproto.News.Builder{
                builderResult.hasNewsClass = false
                builderResult.newsClass = Int64(0)
                return self
            }
            public var isVisible:Bool {
                get {
                    return builderResult.isVisible
                }
                set (value) {
                    builderResult.hasIsVisible = true
                    builderResult.isVisible = value
                }
            }
            public var hasIsVisible:Bool {
                get {
                    return builderResult.hasIsVisible
                }
            }
            @discardableResult
            public func setIsVisible(_ value:Bool) -> Apiproto.News.Builder {
                self.isVisible = value
                return self
            }
            @discardableResult
            public func clearIsVisible() -> Apiproto.News.Builder{
                builderResult.hasIsVisible = false
                builderResult.isVisible = false
                return self
            }
            public var updated:Int64 {
                get {
                    return builderResult.updated
                }
                set (value) {
                    builderResult.hasUpdated = true
                    builderResult.updated = value
                }
            }
            public var hasUpdated:Bool {
                get {
                    return builderResult.hasUpdated
                }
            }
            @discardableResult
            public func setUpdated(_ value:Int64) -> Apiproto.News.Builder {
                self.updated = value
                return self
            }
            @discardableResult
            public func clearUpdated() -> Apiproto.News.Builder{
                builderResult.hasUpdated = false
                builderResult.updated = Int64(0)
                return self
            }
            public var pageViews:Int64 {
                get {
                    return builderResult.pageViews
                }
                set (value) {
                    builderResult.hasPageViews = true
                    builderResult.pageViews = value
                }
            }
            public var hasPageViews:Bool {
                get {
                    return builderResult.hasPageViews
                }
            }
            @discardableResult
            public func setPageViews(_ value:Int64) -> Apiproto.News.Builder {
                self.pageViews = value
                return self
            }
            @discardableResult
            public func clearPageViews() -> Apiproto.News.Builder{
                builderResult.hasPageViews = false
                builderResult.pageViews = Int64(0)
                return self
            }
            public var contentUrl:String {
                get {
                    return builderResult.contentUrl
                }
                set (value) {
                    builderResult.hasContentUrl = true
                    builderResult.contentUrl = value
                }
            }
            public var hasContentUrl:Bool {
                get {
                    return builderResult.hasContentUrl
                }
            }
            @discardableResult
            public func setContentUrl(_ value:String) -> Apiproto.News.Builder {
                self.contentUrl = value
                return self
            }
            @discardableResult
            public func clearContentUrl() -> Apiproto.News.Builder{
                builderResult.hasContentUrl = false
                builderResult.contentUrl = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.News.Builder {
                builderResult = Apiproto.News()
                return self
            }
            override public func clone() throws -> Apiproto.News.Builder {
                return try Apiproto.News.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.News {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.News {
                let returnMe:Apiproto.News = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.News) throws -> Apiproto.News.Builder {
                if other == Apiproto.News() {
                    return self
                }
                if other.hasId {
                    id = other.id
                }
                if other.hasTitle {
                    title = other.title
                }
                if other.hasDescription {
                    description_ = other.description_
                }
                if other.hasCover {
                    cover = other.cover
                }
                if other.hasContent {
                    content = other.content
                }
                if other.hasHtml {
                    html = other.html
                }
                if other.hasAuthor {
                    author = other.author
                }
                if other.hasCreated {
                    created = other.created
                }
                if other.hasNewsClass {
                    newsClass = other.newsClass
                }
                if other.hasIsVisible {
                    isVisible = other.isVisible
                }
                if other.hasUpdated {
                    updated = other.updated
                }
                if other.hasPageViews {
                    pageViews = other.pageViews
                }
                if other.hasContentUrl {
                    contentUrl = other.contentUrl
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.News.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.News.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        id = try codedInputStream.readInt64()

                    case 18:
                        title = try codedInputStream.readString()

                    case 26:
                        description_ = try codedInputStream.readString()

                    case 34:
                        cover = try codedInputStream.readString()

                    case 42:
                        content = try codedInputStream.readString()

                    case 50:
                        html = try codedInputStream.readString()

                    case 58:
                        author = try codedInputStream.readString()

                    case 64:
                        created = try codedInputStream.readInt64()

                    case 72:
                        newsClass = try codedInputStream.readInt64()

                    case 80:
                        isVisible = try codedInputStream.readBool()

                    case 88:
                        updated = try codedInputStream.readInt64()

                    case 96:
                        pageViews = try codedInputStream.readInt64()

                    case 106:
                        contentUrl = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.News.Builder {
                let resultDecodedBuilder = Apiproto.News.Builder()
                if let jsonValueId = jsonMap["id"] as? String {
                    resultDecodedBuilder.id = Int64(jsonValueId)!
                } else if let jsonValueId = jsonMap["id"] as? Int {
                    resultDecodedBuilder.id = Int64(jsonValueId)
                }
                if let jsonValueTitle = jsonMap["title"] as? String {
                    resultDecodedBuilder.title = jsonValueTitle
                }
                if let jsonValueDescription = jsonMap["description"] as? String {
                    resultDecodedBuilder.description_ = jsonValueDescription
                }
                if let jsonValueCover = jsonMap["cover"] as? String {
                    resultDecodedBuilder.cover = jsonValueCover
                }
                if let jsonValueContent = jsonMap["content"] as? String {
                    resultDecodedBuilder.content = jsonValueContent
                }
                if let jsonValueHtml = jsonMap["html"] as? String {
                    resultDecodedBuilder.html = jsonValueHtml
                }
                if let jsonValueAuthor = jsonMap["author"] as? String {
                    resultDecodedBuilder.author = jsonValueAuthor
                }
                if let jsonValueCreated = jsonMap["created"] as? String {
                    resultDecodedBuilder.created = Int64(jsonValueCreated)!
                } else if let jsonValueCreated = jsonMap["created"] as? Int {
                    resultDecodedBuilder.created = Int64(jsonValueCreated)
                }
                if let jsonValueNewsClass = jsonMap["newsClass"] as? String {
                    resultDecodedBuilder.newsClass = Int64(jsonValueNewsClass)!
                } else if let jsonValueNewsClass = jsonMap["newsClass"] as? Int {
                    resultDecodedBuilder.newsClass = Int64(jsonValueNewsClass)
                }
                if let jsonValueIsVisible = jsonMap["isVisible"] as? Bool {
                    resultDecodedBuilder.isVisible = jsonValueIsVisible
                }
                if let jsonValueUpdated = jsonMap["updated"] as? String {
                    resultDecodedBuilder.updated = Int64(jsonValueUpdated)!
                } else if let jsonValueUpdated = jsonMap["updated"] as? Int {
                    resultDecodedBuilder.updated = Int64(jsonValueUpdated)
                }
                if let jsonValuePageViews = jsonMap["pageViews"] as? String {
                    resultDecodedBuilder.pageViews = Int64(jsonValuePageViews)!
                } else if let jsonValuePageViews = jsonMap["pageViews"] as? Int {
                    resultDecodedBuilder.pageViews = Int64(jsonValuePageViews)
                }
                if let jsonValueContentUrl = jsonMap["contentUrl"] as? String {
                    resultDecodedBuilder.contentUrl = jsonValueContentUrl
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.News.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.News.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class QueryNewsArg : GeneratedMessage {

        public static func == (lhs: Apiproto.QueryNewsArg, rhs: Apiproto.QueryNewsArg) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasPage == rhs.hasPage) && (!lhs.hasPage || lhs.page == rhs.page)
            fieldCheck = fieldCheck && (lhs.hasPageSize == rhs.hasPageSize) && (!lhs.hasPageSize || lhs.pageSize == rhs.pageSize)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var page:Int64 = Int64(0)
        public fileprivate(set) var hasPage:Bool = false

        public fileprivate(set) var pageSize:Int64 = Int64(0)
        public fileprivate(set) var hasPageSize:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasPage {
                try codedOutputStream.writeInt64(fieldNumber: 1, value:page)
            }
            if hasPageSize {
                try codedOutputStream.writeInt64(fieldNumber: 2, value:pageSize)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasPage {
                serialize_size += page.computeInt64Size(fieldNumber: 1)
            }
            if hasPageSize {
                serialize_size += pageSize.computeInt64Size(fieldNumber: 2)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.QueryNewsArg.Builder {
            return Apiproto.QueryNewsArg.classBuilder() as! Apiproto.QueryNewsArg.Builder
        }
        public func getBuilder() -> Apiproto.QueryNewsArg.Builder {
            return classBuilder() as! Apiproto.QueryNewsArg.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.QueryNewsArg.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.QueryNewsArg.Builder()
        }
        public func toBuilder() throws -> Apiproto.QueryNewsArg.Builder {
            return try Apiproto.QueryNewsArg.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.QueryNewsArg) throws -> Apiproto.QueryNewsArg.Builder {
            return try Apiproto.QueryNewsArg.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasPage {
                jsonMap["page"] = "\(page)"
            }
            if hasPageSize {
                jsonMap["pageSize"] = "\(pageSize)"
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.QueryNewsArg {
            return try Apiproto.QueryNewsArg.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.QueryNewsArg {
            return try Apiproto.QueryNewsArg.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasPage {
                output += "\(indent) page: \(page) \n"
            }
            if hasPageSize {
                output += "\(indent) pageSize: \(pageSize) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasPage {
                    hashCode = (hashCode &* 31) &+ page.hashValue
                }
                if hasPageSize {
                    hashCode = (hashCode &* 31) &+ pageSize.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.QueryNewsArg"
        }
        override public func className() -> String {
            return "Apiproto.QueryNewsArg"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.QueryNewsArg = Apiproto.QueryNewsArg()
            public func getMessage() -> Apiproto.QueryNewsArg {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var page:Int64 {
                get {
                    return builderResult.page
                }
                set (value) {
                    builderResult.hasPage = true
                    builderResult.page = value
                }
            }
            public var hasPage:Bool {
                get {
                    return builderResult.hasPage
                }
            }
            @discardableResult
            public func setPage(_ value:Int64) -> Apiproto.QueryNewsArg.Builder {
                self.page = value
                return self
            }
            @discardableResult
            public func clearPage() -> Apiproto.QueryNewsArg.Builder{
                builderResult.hasPage = false
                builderResult.page = Int64(0)
                return self
            }
            public var pageSize:Int64 {
                get {
                    return builderResult.pageSize
                }
                set (value) {
                    builderResult.hasPageSize = true
                    builderResult.pageSize = value
                }
            }
            public var hasPageSize:Bool {
                get {
                    return builderResult.hasPageSize
                }
            }
            @discardableResult
            public func setPageSize(_ value:Int64) -> Apiproto.QueryNewsArg.Builder {
                self.pageSize = value
                return self
            }
            @discardableResult
            public func clearPageSize() -> Apiproto.QueryNewsArg.Builder{
                builderResult.hasPageSize = false
                builderResult.pageSize = Int64(0)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.QueryNewsArg.Builder {
                builderResult = Apiproto.QueryNewsArg()
                return self
            }
            override public func clone() throws -> Apiproto.QueryNewsArg.Builder {
                return try Apiproto.QueryNewsArg.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.QueryNewsArg {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.QueryNewsArg {
                let returnMe:Apiproto.QueryNewsArg = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.QueryNewsArg) throws -> Apiproto.QueryNewsArg.Builder {
                if other == Apiproto.QueryNewsArg() {
                    return self
                }
                if other.hasPage {
                    page = other.page
                }
                if other.hasPageSize {
                    pageSize = other.pageSize
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.QueryNewsArg.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.QueryNewsArg.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        page = try codedInputStream.readInt64()

                    case 16:
                        pageSize = try codedInputStream.readInt64()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.QueryNewsArg.Builder {
                let resultDecodedBuilder = Apiproto.QueryNewsArg.Builder()
                if let jsonValuePage = jsonMap["page"] as? String {
                    resultDecodedBuilder.page = Int64(jsonValuePage)!
                } else if let jsonValuePage = jsonMap["page"] as? Int {
                    resultDecodedBuilder.page = Int64(jsonValuePage)
                }
                if let jsonValuePageSize = jsonMap["pageSize"] as? String {
                    resultDecodedBuilder.pageSize = Int64(jsonValuePageSize)!
                } else if let jsonValuePageSize = jsonMap["pageSize"] as? Int {
                    resultDecodedBuilder.pageSize = Int64(jsonValuePageSize)
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.QueryNewsArg.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.QueryNewsArg.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class NewsList : GeneratedMessage {

        public static func == (lhs: Apiproto.NewsList, rhs: Apiproto.NewsList) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.list == rhs.list)
            fieldCheck = fieldCheck && (lhs.hasTotal == rhs.hasTotal) && (!lhs.hasTotal || lhs.total == rhs.total)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var list:Array<Apiproto.News>  = Array<Apiproto.News>()
        public fileprivate(set) var total:Int64 = Int64(0)
        public fileprivate(set) var hasTotal:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            for oneElementList in list {
                  try codedOutputStream.writeMessage(fieldNumber: 1, value:oneElementList)
            }
            if hasTotal {
                try codedOutputStream.writeInt64(fieldNumber: 2, value:total)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            for oneElementList in list {
                serialize_size += oneElementList.computeMessageSize(fieldNumber: 1)
            }
            if hasTotal {
                serialize_size += total.computeInt64Size(fieldNumber: 2)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.NewsList.Builder {
            return Apiproto.NewsList.classBuilder() as! Apiproto.NewsList.Builder
        }
        public func getBuilder() -> Apiproto.NewsList.Builder {
            return classBuilder() as! Apiproto.NewsList.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.NewsList.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.NewsList.Builder()
        }
        public func toBuilder() throws -> Apiproto.NewsList.Builder {
            return try Apiproto.NewsList.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.NewsList) throws -> Apiproto.NewsList.Builder {
            return try Apiproto.NewsList.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if !list.isEmpty {
                var jsonArrayList:Array<Dictionary<String,Any>> = []
                for oneValueList in list {
                    let ecodedMessageList = try oneValueList.encode()
                    jsonArrayList.append(ecodedMessageList)
                }
                jsonMap["list"] = jsonArrayList
            }
            if hasTotal {
                jsonMap["total"] = "\(total)"
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.NewsList {
            return try Apiproto.NewsList.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.NewsList {
            return try Apiproto.NewsList.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            var listElementIndex:Int = 0
            for oneElementList in list {
                output += "\(indent) list[\(listElementIndex)] {\n"
                output += try oneElementList.getDescription(indent: "\(indent)  ")
                output += "\(indent)}\n"
                listElementIndex += 1
            }
            if hasTotal {
                output += "\(indent) total: \(total) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                for oneElementList in list {
                    hashCode = (hashCode &* 31) &+ oneElementList.hashValue
                }
                if hasTotal {
                    hashCode = (hashCode &* 31) &+ total.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.NewsList"
        }
        override public func className() -> String {
            return "Apiproto.NewsList"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.NewsList = Apiproto.NewsList()
            public func getMessage() -> Apiproto.NewsList {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var list:Array<Apiproto.News> {
                get {
                    return builderResult.list
                }
                set (value) {
                    builderResult.list = value
                }
            }
            @discardableResult
            public func setList(_ value:Array<Apiproto.News>) -> Apiproto.NewsList.Builder {
                self.list = value
                return self
            }
            @discardableResult
            public func clearList() -> Apiproto.NewsList.Builder {
                builderResult.list.removeAll(keepingCapacity: false)
                return self
            }
            public var total:Int64 {
                get {
                    return builderResult.total
                }
                set (value) {
                    builderResult.hasTotal = true
                    builderResult.total = value
                }
            }
            public var hasTotal:Bool {
                get {
                    return builderResult.hasTotal
                }
            }
            @discardableResult
            public func setTotal(_ value:Int64) -> Apiproto.NewsList.Builder {
                self.total = value
                return self
            }
            @discardableResult
            public func clearTotal() -> Apiproto.NewsList.Builder{
                builderResult.hasTotal = false
                builderResult.total = Int64(0)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.NewsList.Builder {
                builderResult = Apiproto.NewsList()
                return self
            }
            override public func clone() throws -> Apiproto.NewsList.Builder {
                return try Apiproto.NewsList.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.NewsList {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.NewsList {
                let returnMe:Apiproto.NewsList = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.NewsList) throws -> Apiproto.NewsList.Builder {
                if other == Apiproto.NewsList() {
                    return self
                }
                if !other.list.isEmpty  {
                     builderResult.list += other.list
                }
                if other.hasTotal {
                    total = other.total
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.NewsList.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.NewsList.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        let subBuilder = Apiproto.News.Builder()
                        try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                        list.append(subBuilder.buildPartial())

                    case 16:
                        total = try codedInputStream.readInt64()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.NewsList.Builder {
                let resultDecodedBuilder = Apiproto.NewsList.Builder()
                if let jsonValueList = jsonMap["list"] as? Array<Dictionary<String,Any>> {
                    var jsonArrayList:Array<Apiproto.News> = []
                    for oneValueList in jsonValueList {
                        let messageFromStringList = try Apiproto.News.Builder.decodeToBuilder(jsonMap:oneValueList).build()

                        jsonArrayList.append(messageFromStringList)
                    }
                    resultDecodedBuilder.list = jsonArrayList
                }
                if let jsonValueTotal = jsonMap["total"] as? String {
                    resultDecodedBuilder.total = Int64(jsonValueTotal)!
                } else if let jsonValueTotal = jsonMap["total"] as? Int {
                    resultDecodedBuilder.total = Int64(jsonValueTotal)
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.NewsList.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.NewsList.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class NewsId : GeneratedMessage {

        public static func == (lhs: Apiproto.NewsId, rhs: Apiproto.NewsId) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var id:Int64 = Int64(0)
        public fileprivate(set) var hasId:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasId {
                try codedOutputStream.writeInt64(fieldNumber: 1, value:id)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasId {
                serialize_size += id.computeInt64Size(fieldNumber: 1)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.NewsId.Builder {
            return Apiproto.NewsId.classBuilder() as! Apiproto.NewsId.Builder
        }
        public func getBuilder() -> Apiproto.NewsId.Builder {
            return classBuilder() as! Apiproto.NewsId.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.NewsId.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.NewsId.Builder()
        }
        public func toBuilder() throws -> Apiproto.NewsId.Builder {
            return try Apiproto.NewsId.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.NewsId) throws -> Apiproto.NewsId.Builder {
            return try Apiproto.NewsId.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasId {
                jsonMap["id"] = "\(id)"
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.NewsId {
            return try Apiproto.NewsId.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.NewsId {
            return try Apiproto.NewsId.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasId {
                output += "\(indent) id: \(id) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasId {
                    hashCode = (hashCode &* 31) &+ id.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.NewsId"
        }
        override public func className() -> String {
            return "Apiproto.NewsId"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.NewsId = Apiproto.NewsId()
            public func getMessage() -> Apiproto.NewsId {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var id:Int64 {
                get {
                    return builderResult.id
                }
                set (value) {
                    builderResult.hasId = true
                    builderResult.id = value
                }
            }
            public var hasId:Bool {
                get {
                    return builderResult.hasId
                }
            }
            @discardableResult
            public func setId(_ value:Int64) -> Apiproto.NewsId.Builder {
                self.id = value
                return self
            }
            @discardableResult
            public func clearId() -> Apiproto.NewsId.Builder{
                builderResult.hasId = false
                builderResult.id = Int64(0)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.NewsId.Builder {
                builderResult = Apiproto.NewsId()
                return self
            }
            override public func clone() throws -> Apiproto.NewsId.Builder {
                return try Apiproto.NewsId.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.NewsId {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.NewsId {
                let returnMe:Apiproto.NewsId = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.NewsId) throws -> Apiproto.NewsId.Builder {
                if other == Apiproto.NewsId() {
                    return self
                }
                if other.hasId {
                    id = other.id
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.NewsId.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.NewsId.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        id = try codedInputStream.readInt64()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.NewsId.Builder {
                let resultDecodedBuilder = Apiproto.NewsId.Builder()
                if let jsonValueId = jsonMap["id"] as? String {
                    resultDecodedBuilder.id = Int64(jsonValueId)!
                } else if let jsonValueId = jsonMap["id"] as? Int {
                    resultDecodedBuilder.id = Int64(jsonValueId)
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.NewsId.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.NewsId.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

}
extension Apiproto.News: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.News> {
        var mergedArray = Array<Apiproto.News>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.News? {
        return try Apiproto.News.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.News {
        return try Apiproto.News.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.DiscoverRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.News {
        return try Apiproto.News.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.News {
        return try Apiproto.News.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.News {
        return try Apiproto.News.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.News {
        return try Apiproto.News.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.News {
        return try Apiproto.News.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "id": return self.id
        case "title": return self.title
        case "description_": return self.description_
        case "cover": return self.cover
        case "content": return self.content
        case "html": return self.html
        case "author": return self.author
        case "created": return self.created
        case "newsClass": return self.newsClass
        case "isVisible": return self.isVisible
        case "updated": return self.updated
        case "pageViews": return self.pageViews
        case "contentUrl": return self.contentUrl
        default: return nil
        }
    }
}
extension Apiproto.News.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "id": return self.id
            case "title": return self.title
            case "description_": return self.description_
            case "cover": return self.cover
            case "content": return self.content
            case "html": return self.html
            case "author": return self.author
            case "created": return self.created
            case "newsClass": return self.newsClass
            case "isVisible": return self.isVisible
            case "updated": return self.updated
            case "pageViews": return self.pageViews
            case "contentUrl": return self.contentUrl
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "id":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.id = newSubscriptValue
            case "title":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.title = newSubscriptValue
            case "description_":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.description_ = newSubscriptValue
            case "cover":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.cover = newSubscriptValue
            case "content":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.content = newSubscriptValue
            case "html":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.html = newSubscriptValue
            case "author":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.author = newSubscriptValue
            case "created":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.created = newSubscriptValue
            case "newsClass":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.newsClass = newSubscriptValue
            case "isVisible":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.isVisible = newSubscriptValue
            case "updated":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.updated = newSubscriptValue
            case "pageViews":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.pageViews = newSubscriptValue
            case "contentUrl":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.contentUrl = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.QueryNewsArg: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.QueryNewsArg> {
        var mergedArray = Array<Apiproto.QueryNewsArg>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.QueryNewsArg? {
        return try Apiproto.QueryNewsArg.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.QueryNewsArg {
        return try Apiproto.QueryNewsArg.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.DiscoverRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.QueryNewsArg {
        return try Apiproto.QueryNewsArg.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.QueryNewsArg {
        return try Apiproto.QueryNewsArg.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.QueryNewsArg {
        return try Apiproto.QueryNewsArg.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.QueryNewsArg {
        return try Apiproto.QueryNewsArg.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.QueryNewsArg {
        return try Apiproto.QueryNewsArg.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "page": return self.page
        case "pageSize": return self.pageSize
        default: return nil
        }
    }
}
extension Apiproto.QueryNewsArg.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "page": return self.page
            case "pageSize": return self.pageSize
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "page":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.page = newSubscriptValue
            case "pageSize":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.pageSize = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.NewsList: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.NewsList> {
        var mergedArray = Array<Apiproto.NewsList>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.NewsList? {
        return try Apiproto.NewsList.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.NewsList {
        return try Apiproto.NewsList.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.DiscoverRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.NewsList {
        return try Apiproto.NewsList.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.NewsList {
        return try Apiproto.NewsList.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.NewsList {
        return try Apiproto.NewsList.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.NewsList {
        return try Apiproto.NewsList.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.NewsList {
        return try Apiproto.NewsList.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "list": return self.list
        case "total": return self.total
        default: return nil
        }
    }
}
extension Apiproto.NewsList.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "list": return self.list
            case "total": return self.total
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "list":
                guard let newSubscriptValue = newSubscriptValue as? Array<Apiproto.News> else {
                    return
                }
                self.list = newSubscriptValue
            case "total":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.total = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.NewsId: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.NewsId> {
        var mergedArray = Array<Apiproto.NewsId>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.NewsId? {
        return try Apiproto.NewsId.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.NewsId {
        return try Apiproto.NewsId.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.DiscoverRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.NewsId {
        return try Apiproto.NewsId.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.NewsId {
        return try Apiproto.NewsId.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.NewsId {
        return try Apiproto.NewsId.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.NewsId {
        return try Apiproto.NewsId.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.NewsId {
        return try Apiproto.NewsId.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "id": return self.id
        default: return nil
        }
    }
}
extension Apiproto.NewsId.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "id": return self.id
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "id":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.id = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
