/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "recharge.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public extension Apiproto{}

public extension Apiproto {
    public struct RechargeRoot {
        public static let `default` = RechargeRoot()
        public var extensionRegistry:ExtensionRegistry

        init() {
            extensionRegistry = ExtensionRegistry()
            registerAllExtensions(registry: extensionRegistry)
        }
        public func registerAllExtensions(registry: ExtensionRegistry) {
        }
    }

    final public class RechargeRequest : GeneratedMessage {

        public static func == (lhs: Apiproto.RechargeRequest, rhs: Apiproto.RechargeRequest) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasMoney == rhs.hasMoney) && (!lhs.hasMoney || lhs.money == rhs.money)
            fieldCheck = fieldCheck && (lhs.hasOs == rhs.hasOs) && (!lhs.hasOs || lhs.os == rhs.os)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        ///充值金额，最少1元，且为整数.
        public fileprivate(set) var money:Int64 = Int64(0)
        public fileprivate(set) var hasMoney:Bool = false

        ///请求来源 android iOS.
        public fileprivate(set) var os:String = ""
        public fileprivate(set) var hasOs:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasMoney {
                try codedOutputStream.writeInt64(fieldNumber: 1, value:money)
            }
            if hasOs {
                try codedOutputStream.writeString(fieldNumber: 2, value:os)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasMoney {
                serialize_size += money.computeInt64Size(fieldNumber: 1)
            }
            if hasOs {
                serialize_size += os.computeStringSize(fieldNumber: 2)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.RechargeRequest.Builder {
            return Apiproto.RechargeRequest.classBuilder() as! Apiproto.RechargeRequest.Builder
        }
        public func getBuilder() -> Apiproto.RechargeRequest.Builder {
            return classBuilder() as! Apiproto.RechargeRequest.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.RechargeRequest.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.RechargeRequest.Builder()
        }
        public func toBuilder() throws -> Apiproto.RechargeRequest.Builder {
            return try Apiproto.RechargeRequest.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.RechargeRequest) throws -> Apiproto.RechargeRequest.Builder {
            return try Apiproto.RechargeRequest.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasMoney {
                jsonMap["money"] = "\(money)"
            }
            if hasOs {
                jsonMap["os"] = os
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.RechargeRequest {
            return try Apiproto.RechargeRequest.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.RechargeRequest {
            return try Apiproto.RechargeRequest.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasMoney {
                output += "\(indent) money: \(money) \n"
            }
            if hasOs {
                output += "\(indent) os: \(os) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasMoney {
                    hashCode = (hashCode &* 31) &+ money.hashValue
                }
                if hasOs {
                    hashCode = (hashCode &* 31) &+ os.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.RechargeRequest"
        }
        override public func className() -> String {
            return "Apiproto.RechargeRequest"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.RechargeRequest = Apiproto.RechargeRequest()
            public func getMessage() -> Apiproto.RechargeRequest {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            ///充值金额，最少1元，且为整数.
            public var money:Int64 {
                get {
                    return builderResult.money
                }
                set (value) {
                    builderResult.hasMoney = true
                    builderResult.money = value
                }
            }
            public var hasMoney:Bool {
                get {
                    return builderResult.hasMoney
                }
            }
            @discardableResult
            public func setMoney(_ value:Int64) -> Apiproto.RechargeRequest.Builder {
                self.money = value
                return self
            }
            @discardableResult
            public func clearMoney() -> Apiproto.RechargeRequest.Builder{
                builderResult.hasMoney = false
                builderResult.money = Int64(0)
                return self
            }
            ///请求来源 android iOS.
            public var os:String {
                get {
                    return builderResult.os
                }
                set (value) {
                    builderResult.hasOs = true
                    builderResult.os = value
                }
            }
            public var hasOs:Bool {
                get {
                    return builderResult.hasOs
                }
            }
            @discardableResult
            public func setOs(_ value:String) -> Apiproto.RechargeRequest.Builder {
                self.os = value
                return self
            }
            @discardableResult
            public func clearOs() -> Apiproto.RechargeRequest.Builder{
                builderResult.hasOs = false
                builderResult.os = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.RechargeRequest.Builder {
                builderResult = Apiproto.RechargeRequest()
                return self
            }
            override public func clone() throws -> Apiproto.RechargeRequest.Builder {
                return try Apiproto.RechargeRequest.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.RechargeRequest {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.RechargeRequest {
                let returnMe:Apiproto.RechargeRequest = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.RechargeRequest) throws -> Apiproto.RechargeRequest.Builder {
                if other == Apiproto.RechargeRequest() {
                    return self
                }
                if other.hasMoney {
                    money = other.money
                }
                if other.hasOs {
                    os = other.os
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.RechargeRequest.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.RechargeRequest.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        money = try codedInputStream.readInt64()

                    case 18:
                        os = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.RechargeRequest.Builder {
                let resultDecodedBuilder = Apiproto.RechargeRequest.Builder()
                if let jsonValueMoney = jsonMap["money"] as? String {
                    resultDecodedBuilder.money = Int64(jsonValueMoney)!
                } else if let jsonValueMoney = jsonMap["money"] as? Int {
                    resultDecodedBuilder.money = Int64(jsonValueMoney)
                }
                if let jsonValueOs = jsonMap["os"] as? String {
                    resultDecodedBuilder.os = jsonValueOs
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.RechargeRequest.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.RechargeRequest.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class RechargeResponse : GeneratedMessage {

        public static func == (lhs: Apiproto.RechargeResponse, rhs: Apiproto.RechargeResponse) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasAppId == rhs.hasAppId) && (!lhs.hasAppId || lhs.appId == rhs.appId)
            fieldCheck = fieldCheck && (lhs.hasPartnerId == rhs.hasPartnerId) && (!lhs.hasPartnerId || lhs.partnerId == rhs.partnerId)
            fieldCheck = fieldCheck && (lhs.hasPrepayId == rhs.hasPrepayId) && (!lhs.hasPrepayId || lhs.prepayId == rhs.prepayId)
            fieldCheck = fieldCheck && (lhs.hasPackage == rhs.hasPackage) && (!lhs.hasPackage || lhs.package == rhs.package)
            fieldCheck = fieldCheck && (lhs.hasNonceStr == rhs.hasNonceStr) && (!lhs.hasNonceStr || lhs.nonceStr == rhs.nonceStr)
            fieldCheck = fieldCheck && (lhs.hasTimestamp == rhs.hasTimestamp) && (!lhs.hasTimestamp || lhs.timestamp == rhs.timestamp)
            fieldCheck = fieldCheck && (lhs.hasSign == rhs.hasSign) && (!lhs.hasSign || lhs.sign == rhs.sign)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        ///应用id.
        public fileprivate(set) var appId:String = ""
        public fileprivate(set) var hasAppId:Bool = false

        ///商户号.
        public fileprivate(set) var partnerId:String = ""
        public fileprivate(set) var hasPartnerId:Bool = false

        ///预支付id.
        public fileprivate(set) var prepayId:String = ""
        public fileprivate(set) var hasPrepayId:Bool = false

        ///扩展字段.
        public fileprivate(set) var package:String = ""
        public fileprivate(set) var hasPackage:Bool = false

        ///随机字符串.
        public fileprivate(set) var nonceStr:String = ""
        public fileprivate(set) var hasNonceStr:Bool = false

        ///时间戳.
        public fileprivate(set) var timestamp:Int64 = Int64(0)
        public fileprivate(set) var hasTimestamp:Bool = false

        ///签名.
        public fileprivate(set) var sign:String = ""
        public fileprivate(set) var hasSign:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasAppId {
                try codedOutputStream.writeString(fieldNumber: 1, value:appId)
            }
            if hasPartnerId {
                try codedOutputStream.writeString(fieldNumber: 2, value:partnerId)
            }
            if hasPrepayId {
                try codedOutputStream.writeString(fieldNumber: 3, value:prepayId)
            }
            if hasPackage {
                try codedOutputStream.writeString(fieldNumber: 4, value:package)
            }
            if hasNonceStr {
                try codedOutputStream.writeString(fieldNumber: 5, value:nonceStr)
            }
            if hasTimestamp {
                try codedOutputStream.writeInt64(fieldNumber: 6, value:timestamp)
            }
            if hasSign {
                try codedOutputStream.writeString(fieldNumber: 7, value:sign)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasAppId {
                serialize_size += appId.computeStringSize(fieldNumber: 1)
            }
            if hasPartnerId {
                serialize_size += partnerId.computeStringSize(fieldNumber: 2)
            }
            if hasPrepayId {
                serialize_size += prepayId.computeStringSize(fieldNumber: 3)
            }
            if hasPackage {
                serialize_size += package.computeStringSize(fieldNumber: 4)
            }
            if hasNonceStr {
                serialize_size += nonceStr.computeStringSize(fieldNumber: 5)
            }
            if hasTimestamp {
                serialize_size += timestamp.computeInt64Size(fieldNumber: 6)
            }
            if hasSign {
                serialize_size += sign.computeStringSize(fieldNumber: 7)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.RechargeResponse.Builder {
            return Apiproto.RechargeResponse.classBuilder() as! Apiproto.RechargeResponse.Builder
        }
        public func getBuilder() -> Apiproto.RechargeResponse.Builder {
            return classBuilder() as! Apiproto.RechargeResponse.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.RechargeResponse.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.RechargeResponse.Builder()
        }
        public func toBuilder() throws -> Apiproto.RechargeResponse.Builder {
            return try Apiproto.RechargeResponse.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.RechargeResponse) throws -> Apiproto.RechargeResponse.Builder {
            return try Apiproto.RechargeResponse.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasAppId {
                jsonMap["appId"] = appId
            }
            if hasPartnerId {
                jsonMap["partnerId"] = partnerId
            }
            if hasPrepayId {
                jsonMap["prepayId"] = prepayId
            }
            if hasPackage {
                jsonMap["package"] = package
            }
            if hasNonceStr {
                jsonMap["nonceStr"] = nonceStr
            }
            if hasTimestamp {
                jsonMap["timestamp"] = "\(timestamp)"
            }
            if hasSign {
                jsonMap["sign"] = sign
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.RechargeResponse {
            return try Apiproto.RechargeResponse.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.RechargeResponse {
            return try Apiproto.RechargeResponse.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasAppId {
                output += "\(indent) appId: \(appId) \n"
            }
            if hasPartnerId {
                output += "\(indent) partnerId: \(partnerId) \n"
            }
            if hasPrepayId {
                output += "\(indent) prepayId: \(prepayId) \n"
            }
            if hasPackage {
                output += "\(indent) package: \(package) \n"
            }
            if hasNonceStr {
                output += "\(indent) nonceStr: \(nonceStr) \n"
            }
            if hasTimestamp {
                output += "\(indent) timestamp: \(timestamp) \n"
            }
            if hasSign {
                output += "\(indent) sign: \(sign) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasAppId {
                    hashCode = (hashCode &* 31) &+ appId.hashValue
                }
                if hasPartnerId {
                    hashCode = (hashCode &* 31) &+ partnerId.hashValue
                }
                if hasPrepayId {
                    hashCode = (hashCode &* 31) &+ prepayId.hashValue
                }
                if hasPackage {
                    hashCode = (hashCode &* 31) &+ package.hashValue
                }
                if hasNonceStr {
                    hashCode = (hashCode &* 31) &+ nonceStr.hashValue
                }
                if hasTimestamp {
                    hashCode = (hashCode &* 31) &+ timestamp.hashValue
                }
                if hasSign {
                    hashCode = (hashCode &* 31) &+ sign.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.RechargeResponse"
        }
        override public func className() -> String {
            return "Apiproto.RechargeResponse"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.RechargeResponse = Apiproto.RechargeResponse()
            public func getMessage() -> Apiproto.RechargeResponse {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            ///应用id.
            public var appId:String {
                get {
                    return builderResult.appId
                }
                set (value) {
                    builderResult.hasAppId = true
                    builderResult.appId = value
                }
            }
            public var hasAppId:Bool {
                get {
                    return builderResult.hasAppId
                }
            }
            @discardableResult
            public func setAppId(_ value:String) -> Apiproto.RechargeResponse.Builder {
                self.appId = value
                return self
            }
            @discardableResult
            public func clearAppId() -> Apiproto.RechargeResponse.Builder{
                builderResult.hasAppId = false
                builderResult.appId = ""
                return self
            }
            ///商户号.
            public var partnerId:String {
                get {
                    return builderResult.partnerId
                }
                set (value) {
                    builderResult.hasPartnerId = true
                    builderResult.partnerId = value
                }
            }
            public var hasPartnerId:Bool {
                get {
                    return builderResult.hasPartnerId
                }
            }
            @discardableResult
            public func setPartnerId(_ value:String) -> Apiproto.RechargeResponse.Builder {
                self.partnerId = value
                return self
            }
            @discardableResult
            public func clearPartnerId() -> Apiproto.RechargeResponse.Builder{
                builderResult.hasPartnerId = false
                builderResult.partnerId = ""
                return self
            }
            ///预支付id.
            public var prepayId:String {
                get {
                    return builderResult.prepayId
                }
                set (value) {
                    builderResult.hasPrepayId = true
                    builderResult.prepayId = value
                }
            }
            public var hasPrepayId:Bool {
                get {
                    return builderResult.hasPrepayId
                }
            }
            @discardableResult
            public func setPrepayId(_ value:String) -> Apiproto.RechargeResponse.Builder {
                self.prepayId = value
                return self
            }
            @discardableResult
            public func clearPrepayId() -> Apiproto.RechargeResponse.Builder{
                builderResult.hasPrepayId = false
                builderResult.prepayId = ""
                return self
            }
            ///扩展字段.
            public var package:String {
                get {
                    return builderResult.package
                }
                set (value) {
                    builderResult.hasPackage = true
                    builderResult.package = value
                }
            }
            public var hasPackage:Bool {
                get {
                    return builderResult.hasPackage
                }
            }
            @discardableResult
            public func setPackage(_ value:String) -> Apiproto.RechargeResponse.Builder {
                self.package = value
                return self
            }
            @discardableResult
            public func clearPackage() -> Apiproto.RechargeResponse.Builder{
                builderResult.hasPackage = false
                builderResult.package = ""
                return self
            }
            ///随机字符串.
            public var nonceStr:String {
                get {
                    return builderResult.nonceStr
                }
                set (value) {
                    builderResult.hasNonceStr = true
                    builderResult.nonceStr = value
                }
            }
            public var hasNonceStr:Bool {
                get {
                    return builderResult.hasNonceStr
                }
            }
            @discardableResult
            public func setNonceStr(_ value:String) -> Apiproto.RechargeResponse.Builder {
                self.nonceStr = value
                return self
            }
            @discardableResult
            public func clearNonceStr() -> Apiproto.RechargeResponse.Builder{
                builderResult.hasNonceStr = false
                builderResult.nonceStr = ""
                return self
            }
            ///时间戳.
            public var timestamp:Int64 {
                get {
                    return builderResult.timestamp
                }
                set (value) {
                    builderResult.hasTimestamp = true
                    builderResult.timestamp = value
                }
            }
            public var hasTimestamp:Bool {
                get {
                    return builderResult.hasTimestamp
                }
            }
            @discardableResult
            public func setTimestamp(_ value:Int64) -> Apiproto.RechargeResponse.Builder {
                self.timestamp = value
                return self
            }
            @discardableResult
            public func clearTimestamp() -> Apiproto.RechargeResponse.Builder{
                builderResult.hasTimestamp = false
                builderResult.timestamp = Int64(0)
                return self
            }
            ///签名.
            public var sign:String {
                get {
                    return builderResult.sign
                }
                set (value) {
                    builderResult.hasSign = true
                    builderResult.sign = value
                }
            }
            public var hasSign:Bool {
                get {
                    return builderResult.hasSign
                }
            }
            @discardableResult
            public func setSign(_ value:String) -> Apiproto.RechargeResponse.Builder {
                self.sign = value
                return self
            }
            @discardableResult
            public func clearSign() -> Apiproto.RechargeResponse.Builder{
                builderResult.hasSign = false
                builderResult.sign = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.RechargeResponse.Builder {
                builderResult = Apiproto.RechargeResponse()
                return self
            }
            override public func clone() throws -> Apiproto.RechargeResponse.Builder {
                return try Apiproto.RechargeResponse.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.RechargeResponse {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.RechargeResponse {
                let returnMe:Apiproto.RechargeResponse = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.RechargeResponse) throws -> Apiproto.RechargeResponse.Builder {
                if other == Apiproto.RechargeResponse() {
                    return self
                }
                if other.hasAppId {
                    appId = other.appId
                }
                if other.hasPartnerId {
                    partnerId = other.partnerId
                }
                if other.hasPrepayId {
                    prepayId = other.prepayId
                }
                if other.hasPackage {
                    package = other.package
                }
                if other.hasNonceStr {
                    nonceStr = other.nonceStr
                }
                if other.hasTimestamp {
                    timestamp = other.timestamp
                }
                if other.hasSign {
                    sign = other.sign
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.RechargeResponse.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.RechargeResponse.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        appId = try codedInputStream.readString()

                    case 18:
                        partnerId = try codedInputStream.readString()

                    case 26:
                        prepayId = try codedInputStream.readString()

                    case 34:
                        package = try codedInputStream.readString()

                    case 42:
                        nonceStr = try codedInputStream.readString()

                    case 48:
                        timestamp = try codedInputStream.readInt64()

                    case 58:
                        sign = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.RechargeResponse.Builder {
                let resultDecodedBuilder = Apiproto.RechargeResponse.Builder()
                if let jsonValueAppId = jsonMap["appId"] as? String {
                    resultDecodedBuilder.appId = jsonValueAppId
                }
                if let jsonValuePartnerId = jsonMap["partnerId"] as? String {
                    resultDecodedBuilder.partnerId = jsonValuePartnerId
                }
                if let jsonValuePrepayId = jsonMap["prepayId"] as? String {
                    resultDecodedBuilder.prepayId = jsonValuePrepayId
                }
                if let jsonValuePackage = jsonMap["package"] as? String {
                    resultDecodedBuilder.package = jsonValuePackage
                }
                if let jsonValueNonceStr = jsonMap["nonceStr"] as? String {
                    resultDecodedBuilder.nonceStr = jsonValueNonceStr
                }
                if let jsonValueTimestamp = jsonMap["timestamp"] as? String {
                    resultDecodedBuilder.timestamp = Int64(jsonValueTimestamp)!
                } else if let jsonValueTimestamp = jsonMap["timestamp"] as? Int {
                    resultDecodedBuilder.timestamp = Int64(jsonValueTimestamp)
                }
                if let jsonValueSign = jsonMap["sign"] as? String {
                    resultDecodedBuilder.sign = jsonValueSign
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.RechargeResponse.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.RechargeResponse.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class AlipayRechargeReply : GeneratedMessage {

        public static func == (lhs: Apiproto.AlipayRechargeReply, rhs: Apiproto.AlipayRechargeReply) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasAppId == rhs.hasAppId) && (!lhs.hasAppId || lhs.appId == rhs.appId)
            fieldCheck = fieldCheck && (lhs.hasMethod == rhs.hasMethod) && (!lhs.hasMethod || lhs.method == rhs.method)
            fieldCheck = fieldCheck && (lhs.hasCharset == rhs.hasCharset) && (!lhs.hasCharset || lhs.charset == rhs.charset)
            fieldCheck = fieldCheck && (lhs.hasSignType == rhs.hasSignType) && (!lhs.hasSignType || lhs.signType == rhs.signType)
            fieldCheck = fieldCheck && (lhs.hasTimestamp == rhs.hasTimestamp) && (!lhs.hasTimestamp || lhs.timestamp == rhs.timestamp)
            fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
            fieldCheck = fieldCheck && (lhs.hasBizContent == rhs.hasBizContent) && (!lhs.hasBizContent || lhs.bizContent == rhs.bizContent)
            fieldCheck = fieldCheck && (lhs.hasNotifyUrl == rhs.hasNotifyUrl) && (!lhs.hasNotifyUrl || lhs.notifyUrl == rhs.notifyUrl)
            fieldCheck = fieldCheck && (lhs.hasSign == rhs.hasSign) && (!lhs.hasSign || lhs.sign == rhs.sign)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        ///应用id.
        public fileprivate(set) var appId:String = ""
        public fileprivate(set) var hasAppId:Bool = false

        ///接口名称。
        public fileprivate(set) var method:String = ""
        public fileprivate(set) var hasMethod:Bool = false

        ///编码.
        public fileprivate(set) var charset:String = ""
        public fileprivate(set) var hasCharset:Bool = false

        ///签名算法类型.
        public fileprivate(set) var signType:String = ""
        public fileprivate(set) var hasSignType:Bool = false

        ///时间戳.
        public fileprivate(set) var timestamp:String = ""
        public fileprivate(set) var hasTimestamp:Bool = false

        ///版本号.
        public fileprivate(set) var version:String = ""
        public fileprivate(set) var hasVersion:Bool = false

        ///请求参数的集合.
        public fileprivate(set) var bizContent:String = ""
        public fileprivate(set) var hasBizContent:Bool = false

        ///服务通知地址.
        public fileprivate(set) var notifyUrl:String = ""
        public fileprivate(set) var hasNotifyUrl:Bool = false

        ///签名.
        public fileprivate(set) var sign:String = ""
        public fileprivate(set) var hasSign:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasAppId {
                try codedOutputStream.writeString(fieldNumber: 1, value:appId)
            }
            if hasMethod {
                try codedOutputStream.writeString(fieldNumber: 2, value:method)
            }
            if hasCharset {
                try codedOutputStream.writeString(fieldNumber: 3, value:charset)
            }
            if hasSignType {
                try codedOutputStream.writeString(fieldNumber: 4, value:signType)
            }
            if hasTimestamp {
                try codedOutputStream.writeString(fieldNumber: 5, value:timestamp)
            }
            if hasVersion {
                try codedOutputStream.writeString(fieldNumber: 6, value:version)
            }
            if hasBizContent {
                try codedOutputStream.writeString(fieldNumber: 7, value:bizContent)
            }
            if hasNotifyUrl {
                try codedOutputStream.writeString(fieldNumber: 8, value:notifyUrl)
            }
            if hasSign {
                try codedOutputStream.writeString(fieldNumber: 9, value:sign)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasAppId {
                serialize_size += appId.computeStringSize(fieldNumber: 1)
            }
            if hasMethod {
                serialize_size += method.computeStringSize(fieldNumber: 2)
            }
            if hasCharset {
                serialize_size += charset.computeStringSize(fieldNumber: 3)
            }
            if hasSignType {
                serialize_size += signType.computeStringSize(fieldNumber: 4)
            }
            if hasTimestamp {
                serialize_size += timestamp.computeStringSize(fieldNumber: 5)
            }
            if hasVersion {
                serialize_size += version.computeStringSize(fieldNumber: 6)
            }
            if hasBizContent {
                serialize_size += bizContent.computeStringSize(fieldNumber: 7)
            }
            if hasNotifyUrl {
                serialize_size += notifyUrl.computeStringSize(fieldNumber: 8)
            }
            if hasSign {
                serialize_size += sign.computeStringSize(fieldNumber: 9)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.AlipayRechargeReply.Builder {
            return Apiproto.AlipayRechargeReply.classBuilder() as! Apiproto.AlipayRechargeReply.Builder
        }
        public func getBuilder() -> Apiproto.AlipayRechargeReply.Builder {
            return classBuilder() as! Apiproto.AlipayRechargeReply.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.AlipayRechargeReply.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.AlipayRechargeReply.Builder()
        }
        public func toBuilder() throws -> Apiproto.AlipayRechargeReply.Builder {
            return try Apiproto.AlipayRechargeReply.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.AlipayRechargeReply) throws -> Apiproto.AlipayRechargeReply.Builder {
            return try Apiproto.AlipayRechargeReply.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasAppId {
                jsonMap["AppId"] = appId
            }
            if hasMethod {
                jsonMap["Method"] = method
            }
            if hasCharset {
                jsonMap["Charset"] = charset
            }
            if hasSignType {
                jsonMap["SignType"] = signType
            }
            if hasTimestamp {
                jsonMap["Timestamp"] = timestamp
            }
            if hasVersion {
                jsonMap["Version"] = version
            }
            if hasBizContent {
                jsonMap["BizContent"] = bizContent
            }
            if hasNotifyUrl {
                jsonMap["NotifyUrl"] = notifyUrl
            }
            if hasSign {
                jsonMap["Sign"] = sign
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.AlipayRechargeReply {
            return try Apiproto.AlipayRechargeReply.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.AlipayRechargeReply {
            return try Apiproto.AlipayRechargeReply.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasAppId {
                output += "\(indent) appId: \(appId) \n"
            }
            if hasMethod {
                output += "\(indent) method: \(method) \n"
            }
            if hasCharset {
                output += "\(indent) charset: \(charset) \n"
            }
            if hasSignType {
                output += "\(indent) signType: \(signType) \n"
            }
            if hasTimestamp {
                output += "\(indent) timestamp: \(timestamp) \n"
            }
            if hasVersion {
                output += "\(indent) version: \(version) \n"
            }
            if hasBizContent {
                output += "\(indent) bizContent: \(bizContent) \n"
            }
            if hasNotifyUrl {
                output += "\(indent) notifyUrl: \(notifyUrl) \n"
            }
            if hasSign {
                output += "\(indent) sign: \(sign) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasAppId {
                    hashCode = (hashCode &* 31) &+ appId.hashValue
                }
                if hasMethod {
                    hashCode = (hashCode &* 31) &+ method.hashValue
                }
                if hasCharset {
                    hashCode = (hashCode &* 31) &+ charset.hashValue
                }
                if hasSignType {
                    hashCode = (hashCode &* 31) &+ signType.hashValue
                }
                if hasTimestamp {
                    hashCode = (hashCode &* 31) &+ timestamp.hashValue
                }
                if hasVersion {
                    hashCode = (hashCode &* 31) &+ version.hashValue
                }
                if hasBizContent {
                    hashCode = (hashCode &* 31) &+ bizContent.hashValue
                }
                if hasNotifyUrl {
                    hashCode = (hashCode &* 31) &+ notifyUrl.hashValue
                }
                if hasSign {
                    hashCode = (hashCode &* 31) &+ sign.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.AlipayRechargeReply"
        }
        override public func className() -> String {
            return "Apiproto.AlipayRechargeReply"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.AlipayRechargeReply = Apiproto.AlipayRechargeReply()
            public func getMessage() -> Apiproto.AlipayRechargeReply {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            ///应用id.
            public var appId:String {
                get {
                    return builderResult.appId
                }
                set (value) {
                    builderResult.hasAppId = true
                    builderResult.appId = value
                }
            }
            public var hasAppId:Bool {
                get {
                    return builderResult.hasAppId
                }
            }
            @discardableResult
            public func setAppId(_ value:String) -> Apiproto.AlipayRechargeReply.Builder {
                self.appId = value
                return self
            }
            @discardableResult
            public func clearAppId() -> Apiproto.AlipayRechargeReply.Builder{
                builderResult.hasAppId = false
                builderResult.appId = ""
                return self
            }
            ///接口名称。
            public var method:String {
                get {
                    return builderResult.method
                }
                set (value) {
                    builderResult.hasMethod = true
                    builderResult.method = value
                }
            }
            public var hasMethod:Bool {
                get {
                    return builderResult.hasMethod
                }
            }
            @discardableResult
            public func setMethod(_ value:String) -> Apiproto.AlipayRechargeReply.Builder {
                self.method = value
                return self
            }
            @discardableResult
            public func clearMethod() -> Apiproto.AlipayRechargeReply.Builder{
                builderResult.hasMethod = false
                builderResult.method = ""
                return self
            }
            ///编码.
            public var charset:String {
                get {
                    return builderResult.charset
                }
                set (value) {
                    builderResult.hasCharset = true
                    builderResult.charset = value
                }
            }
            public var hasCharset:Bool {
                get {
                    return builderResult.hasCharset
                }
            }
            @discardableResult
            public func setCharset(_ value:String) -> Apiproto.AlipayRechargeReply.Builder {
                self.charset = value
                return self
            }
            @discardableResult
            public func clearCharset() -> Apiproto.AlipayRechargeReply.Builder{
                builderResult.hasCharset = false
                builderResult.charset = ""
                return self
            }
            ///签名算法类型.
            public var signType:String {
                get {
                    return builderResult.signType
                }
                set (value) {
                    builderResult.hasSignType = true
                    builderResult.signType = value
                }
            }
            public var hasSignType:Bool {
                get {
                    return builderResult.hasSignType
                }
            }
            @discardableResult
            public func setSignType(_ value:String) -> Apiproto.AlipayRechargeReply.Builder {
                self.signType = value
                return self
            }
            @discardableResult
            public func clearSignType() -> Apiproto.AlipayRechargeReply.Builder{
                builderResult.hasSignType = false
                builderResult.signType = ""
                return self
            }
            ///时间戳.
            public var timestamp:String {
                get {
                    return builderResult.timestamp
                }
                set (value) {
                    builderResult.hasTimestamp = true
                    builderResult.timestamp = value
                }
            }
            public var hasTimestamp:Bool {
                get {
                    return builderResult.hasTimestamp
                }
            }
            @discardableResult
            public func setTimestamp(_ value:String) -> Apiproto.AlipayRechargeReply.Builder {
                self.timestamp = value
                return self
            }
            @discardableResult
            public func clearTimestamp() -> Apiproto.AlipayRechargeReply.Builder{
                builderResult.hasTimestamp = false
                builderResult.timestamp = ""
                return self
            }
            ///版本号.
            public var version:String {
                get {
                    return builderResult.version
                }
                set (value) {
                    builderResult.hasVersion = true
                    builderResult.version = value
                }
            }
            public var hasVersion:Bool {
                get {
                    return builderResult.hasVersion
                }
            }
            @discardableResult
            public func setVersion(_ value:String) -> Apiproto.AlipayRechargeReply.Builder {
                self.version = value
                return self
            }
            @discardableResult
            public func clearVersion() -> Apiproto.AlipayRechargeReply.Builder{
                builderResult.hasVersion = false
                builderResult.version = ""
                return self
            }
            ///请求参数的集合.
            public var bizContent:String {
                get {
                    return builderResult.bizContent
                }
                set (value) {
                    builderResult.hasBizContent = true
                    builderResult.bizContent = value
                }
            }
            public var hasBizContent:Bool {
                get {
                    return builderResult.hasBizContent
                }
            }
            @discardableResult
            public func setBizContent(_ value:String) -> Apiproto.AlipayRechargeReply.Builder {
                self.bizContent = value
                return self
            }
            @discardableResult
            public func clearBizContent() -> Apiproto.AlipayRechargeReply.Builder{
                builderResult.hasBizContent = false
                builderResult.bizContent = ""
                return self
            }
            ///服务通知地址.
            public var notifyUrl:String {
                get {
                    return builderResult.notifyUrl
                }
                set (value) {
                    builderResult.hasNotifyUrl = true
                    builderResult.notifyUrl = value
                }
            }
            public var hasNotifyUrl:Bool {
                get {
                    return builderResult.hasNotifyUrl
                }
            }
            @discardableResult
            public func setNotifyUrl(_ value:String) -> Apiproto.AlipayRechargeReply.Builder {
                self.notifyUrl = value
                return self
            }
            @discardableResult
            public func clearNotifyUrl() -> Apiproto.AlipayRechargeReply.Builder{
                builderResult.hasNotifyUrl = false
                builderResult.notifyUrl = ""
                return self
            }
            ///签名.
            public var sign:String {
                get {
                    return builderResult.sign
                }
                set (value) {
                    builderResult.hasSign = true
                    builderResult.sign = value
                }
            }
            public var hasSign:Bool {
                get {
                    return builderResult.hasSign
                }
            }
            @discardableResult
            public func setSign(_ value:String) -> Apiproto.AlipayRechargeReply.Builder {
                self.sign = value
                return self
            }
            @discardableResult
            public func clearSign() -> Apiproto.AlipayRechargeReply.Builder{
                builderResult.hasSign = false
                builderResult.sign = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.AlipayRechargeReply.Builder {
                builderResult = Apiproto.AlipayRechargeReply()
                return self
            }
            override public func clone() throws -> Apiproto.AlipayRechargeReply.Builder {
                return try Apiproto.AlipayRechargeReply.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.AlipayRechargeReply {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.AlipayRechargeReply {
                let returnMe:Apiproto.AlipayRechargeReply = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.AlipayRechargeReply) throws -> Apiproto.AlipayRechargeReply.Builder {
                if other == Apiproto.AlipayRechargeReply() {
                    return self
                }
                if other.hasAppId {
                    appId = other.appId
                }
                if other.hasMethod {
                    method = other.method
                }
                if other.hasCharset {
                    charset = other.charset
                }
                if other.hasSignType {
                    signType = other.signType
                }
                if other.hasTimestamp {
                    timestamp = other.timestamp
                }
                if other.hasVersion {
                    version = other.version
                }
                if other.hasBizContent {
                    bizContent = other.bizContent
                }
                if other.hasNotifyUrl {
                    notifyUrl = other.notifyUrl
                }
                if other.hasSign {
                    sign = other.sign
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.AlipayRechargeReply.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.AlipayRechargeReply.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        appId = try codedInputStream.readString()

                    case 18:
                        method = try codedInputStream.readString()

                    case 26:
                        charset = try codedInputStream.readString()

                    case 34:
                        signType = try codedInputStream.readString()

                    case 42:
                        timestamp = try codedInputStream.readString()

                    case 50:
                        version = try codedInputStream.readString()

                    case 58:
                        bizContent = try codedInputStream.readString()

                    case 66:
                        notifyUrl = try codedInputStream.readString()

                    case 74:
                        sign = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.AlipayRechargeReply.Builder {
                let resultDecodedBuilder = Apiproto.AlipayRechargeReply.Builder()
                if let jsonValueAppId = jsonMap["AppId"] as? String {
                    resultDecodedBuilder.appId = jsonValueAppId
                }
                if let jsonValueMethod = jsonMap["Method"] as? String {
                    resultDecodedBuilder.method = jsonValueMethod
                }
                if let jsonValueCharset = jsonMap["Charset"] as? String {
                    resultDecodedBuilder.charset = jsonValueCharset
                }
                if let jsonValueSignType = jsonMap["SignType"] as? String {
                    resultDecodedBuilder.signType = jsonValueSignType
                }
                if let jsonValueTimestamp = jsonMap["Timestamp"] as? String {
                    resultDecodedBuilder.timestamp = jsonValueTimestamp
                }
                if let jsonValueVersion = jsonMap["Version"] as? String {
                    resultDecodedBuilder.version = jsonValueVersion
                }
                if let jsonValueBizContent = jsonMap["BizContent"] as? String {
                    resultDecodedBuilder.bizContent = jsonValueBizContent
                }
                if let jsonValueNotifyUrl = jsonMap["NotifyUrl"] as? String {
                    resultDecodedBuilder.notifyUrl = jsonValueNotifyUrl
                }
                if let jsonValueSign = jsonMap["Sign"] as? String {
                    resultDecodedBuilder.sign = jsonValueSign
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.AlipayRechargeReply.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.AlipayRechargeReply.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class JdPayRechargeReply : GeneratedMessage {

        public static func == (lhs: Apiproto.JdPayRechargeReply, rhs: Apiproto.JdPayRechargeReply) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasMerchant == rhs.hasMerchant) && (!lhs.hasMerchant || lhs.merchant == rhs.merchant)
            fieldCheck = fieldCheck && (lhs.hasDevice == rhs.hasDevice) && (!lhs.hasDevice || lhs.device == rhs.device)
            fieldCheck = fieldCheck && (lhs.hasOrderId == rhs.hasOrderId) && (!lhs.hasOrderId || lhs.orderId == rhs.orderId)
            fieldCheck = fieldCheck && (lhs.hasSign == rhs.hasSign) && (!lhs.hasSign || lhs.sign == rhs.sign)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        ///商户号.
        public fileprivate(set) var merchant:String = ""
        public fileprivate(set) var hasMerchant:Bool = false

        ///设备号.
        public fileprivate(set) var device:String = ""
        public fileprivate(set) var hasDevice:Bool = false

        ///京东交易单号.
        public fileprivate(set) var orderId:String = ""
        public fileprivate(set) var hasOrderId:Bool = false

        ///签名.
        public fileprivate(set) var sign:String = ""
        public fileprivate(set) var hasSign:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasMerchant {
                try codedOutputStream.writeString(fieldNumber: 1, value:merchant)
            }
            if hasDevice {
                try codedOutputStream.writeString(fieldNumber: 2, value:device)
            }
            if hasOrderId {
                try codedOutputStream.writeString(fieldNumber: 3, value:orderId)
            }
            if hasSign {
                try codedOutputStream.writeString(fieldNumber: 4, value:sign)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasMerchant {
                serialize_size += merchant.computeStringSize(fieldNumber: 1)
            }
            if hasDevice {
                serialize_size += device.computeStringSize(fieldNumber: 2)
            }
            if hasOrderId {
                serialize_size += orderId.computeStringSize(fieldNumber: 3)
            }
            if hasSign {
                serialize_size += sign.computeStringSize(fieldNumber: 4)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.JdPayRechargeReply.Builder {
            return Apiproto.JdPayRechargeReply.classBuilder() as! Apiproto.JdPayRechargeReply.Builder
        }
        public func getBuilder() -> Apiproto.JdPayRechargeReply.Builder {
            return classBuilder() as! Apiproto.JdPayRechargeReply.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.JdPayRechargeReply.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.JdPayRechargeReply.Builder()
        }
        public func toBuilder() throws -> Apiproto.JdPayRechargeReply.Builder {
            return try Apiproto.JdPayRechargeReply.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.JdPayRechargeReply) throws -> Apiproto.JdPayRechargeReply.Builder {
            return try Apiproto.JdPayRechargeReply.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasMerchant {
                jsonMap["Merchant"] = merchant
            }
            if hasDevice {
                jsonMap["Device"] = device
            }
            if hasOrderId {
                jsonMap["OrderId"] = orderId
            }
            if hasSign {
                jsonMap["Sign"] = sign
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.JdPayRechargeReply {
            return try Apiproto.JdPayRechargeReply.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.JdPayRechargeReply {
            return try Apiproto.JdPayRechargeReply.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasMerchant {
                output += "\(indent) merchant: \(merchant) \n"
            }
            if hasDevice {
                output += "\(indent) device: \(device) \n"
            }
            if hasOrderId {
                output += "\(indent) orderId: \(orderId) \n"
            }
            if hasSign {
                output += "\(indent) sign: \(sign) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasMerchant {
                    hashCode = (hashCode &* 31) &+ merchant.hashValue
                }
                if hasDevice {
                    hashCode = (hashCode &* 31) &+ device.hashValue
                }
                if hasOrderId {
                    hashCode = (hashCode &* 31) &+ orderId.hashValue
                }
                if hasSign {
                    hashCode = (hashCode &* 31) &+ sign.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.JdPayRechargeReply"
        }
        override public func className() -> String {
            return "Apiproto.JdPayRechargeReply"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.JdPayRechargeReply = Apiproto.JdPayRechargeReply()
            public func getMessage() -> Apiproto.JdPayRechargeReply {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            ///商户号.
            public var merchant:String {
                get {
                    return builderResult.merchant
                }
                set (value) {
                    builderResult.hasMerchant = true
                    builderResult.merchant = value
                }
            }
            public var hasMerchant:Bool {
                get {
                    return builderResult.hasMerchant
                }
            }
            @discardableResult
            public func setMerchant(_ value:String) -> Apiproto.JdPayRechargeReply.Builder {
                self.merchant = value
                return self
            }
            @discardableResult
            public func clearMerchant() -> Apiproto.JdPayRechargeReply.Builder{
                builderResult.hasMerchant = false
                builderResult.merchant = ""
                return self
            }
            ///设备号.
            public var device:String {
                get {
                    return builderResult.device
                }
                set (value) {
                    builderResult.hasDevice = true
                    builderResult.device = value
                }
            }
            public var hasDevice:Bool {
                get {
                    return builderResult.hasDevice
                }
            }
            @discardableResult
            public func setDevice(_ value:String) -> Apiproto.JdPayRechargeReply.Builder {
                self.device = value
                return self
            }
            @discardableResult
            public func clearDevice() -> Apiproto.JdPayRechargeReply.Builder{
                builderResult.hasDevice = false
                builderResult.device = ""
                return self
            }
            ///京东交易单号.
            public var orderId:String {
                get {
                    return builderResult.orderId
                }
                set (value) {
                    builderResult.hasOrderId = true
                    builderResult.orderId = value
                }
            }
            public var hasOrderId:Bool {
                get {
                    return builderResult.hasOrderId
                }
            }
            @discardableResult
            public func setOrderId(_ value:String) -> Apiproto.JdPayRechargeReply.Builder {
                self.orderId = value
                return self
            }
            @discardableResult
            public func clearOrderId() -> Apiproto.JdPayRechargeReply.Builder{
                builderResult.hasOrderId = false
                builderResult.orderId = ""
                return self
            }
            ///签名.
            public var sign:String {
                get {
                    return builderResult.sign
                }
                set (value) {
                    builderResult.hasSign = true
                    builderResult.sign = value
                }
            }
            public var hasSign:Bool {
                get {
                    return builderResult.hasSign
                }
            }
            @discardableResult
            public func setSign(_ value:String) -> Apiproto.JdPayRechargeReply.Builder {
                self.sign = value
                return self
            }
            @discardableResult
            public func clearSign() -> Apiproto.JdPayRechargeReply.Builder{
                builderResult.hasSign = false
                builderResult.sign = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.JdPayRechargeReply.Builder {
                builderResult = Apiproto.JdPayRechargeReply()
                return self
            }
            override public func clone() throws -> Apiproto.JdPayRechargeReply.Builder {
                return try Apiproto.JdPayRechargeReply.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.JdPayRechargeReply {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.JdPayRechargeReply {
                let returnMe:Apiproto.JdPayRechargeReply = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.JdPayRechargeReply) throws -> Apiproto.JdPayRechargeReply.Builder {
                if other == Apiproto.JdPayRechargeReply() {
                    return self
                }
                if other.hasMerchant {
                    merchant = other.merchant
                }
                if other.hasDevice {
                    device = other.device
                }
                if other.hasOrderId {
                    orderId = other.orderId
                }
                if other.hasSign {
                    sign = other.sign
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.JdPayRechargeReply.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.JdPayRechargeReply.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        merchant = try codedInputStream.readString()

                    case 18:
                        device = try codedInputStream.readString()

                    case 26:
                        orderId = try codedInputStream.readString()

                    case 34:
                        sign = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.JdPayRechargeReply.Builder {
                let resultDecodedBuilder = Apiproto.JdPayRechargeReply.Builder()
                if let jsonValueMerchant = jsonMap["Merchant"] as? String {
                    resultDecodedBuilder.merchant = jsonValueMerchant
                }
                if let jsonValueDevice = jsonMap["Device"] as? String {
                    resultDecodedBuilder.device = jsonValueDevice
                }
                if let jsonValueOrderId = jsonMap["OrderId"] as? String {
                    resultDecodedBuilder.orderId = jsonValueOrderId
                }
                if let jsonValueSign = jsonMap["Sign"] as? String {
                    resultDecodedBuilder.sign = jsonValueSign
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.JdPayRechargeReply.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.JdPayRechargeReply.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

}
extension Apiproto.RechargeRequest: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.RechargeRequest> {
        var mergedArray = Array<Apiproto.RechargeRequest>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.RechargeRequest? {
        return try Apiproto.RechargeRequest.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.RechargeRequest {
        return try Apiproto.RechargeRequest.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.RechargeRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.RechargeRequest {
        return try Apiproto.RechargeRequest.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.RechargeRequest {
        return try Apiproto.RechargeRequest.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.RechargeRequest {
        return try Apiproto.RechargeRequest.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.RechargeRequest {
        return try Apiproto.RechargeRequest.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.RechargeRequest {
        return try Apiproto.RechargeRequest.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "money": return self.money
        case "os": return self.os
        default: return nil
        }
    }
}
extension Apiproto.RechargeRequest.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "money": return self.money
            case "os": return self.os
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "money":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.money = newSubscriptValue
            case "os":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.os = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.RechargeResponse: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.RechargeResponse> {
        var mergedArray = Array<Apiproto.RechargeResponse>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.RechargeResponse? {
        return try Apiproto.RechargeResponse.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.RechargeResponse {
        return try Apiproto.RechargeResponse.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.RechargeRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.RechargeResponse {
        return try Apiproto.RechargeResponse.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.RechargeResponse {
        return try Apiproto.RechargeResponse.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.RechargeResponse {
        return try Apiproto.RechargeResponse.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.RechargeResponse {
        return try Apiproto.RechargeResponse.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.RechargeResponse {
        return try Apiproto.RechargeResponse.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "appId": return self.appId
        case "partnerId": return self.partnerId
        case "prepayId": return self.prepayId
        case "package": return self.package
        case "nonceStr": return self.nonceStr
        case "timestamp": return self.timestamp
        case "sign": return self.sign
        default: return nil
        }
    }
}
extension Apiproto.RechargeResponse.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "appId": return self.appId
            case "partnerId": return self.partnerId
            case "prepayId": return self.prepayId
            case "package": return self.package
            case "nonceStr": return self.nonceStr
            case "timestamp": return self.timestamp
            case "sign": return self.sign
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "appId":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.appId = newSubscriptValue
            case "partnerId":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.partnerId = newSubscriptValue
            case "prepayId":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.prepayId = newSubscriptValue
            case "package":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.package = newSubscriptValue
            case "nonceStr":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.nonceStr = newSubscriptValue
            case "timestamp":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.timestamp = newSubscriptValue
            case "sign":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.sign = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.AlipayRechargeReply: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.AlipayRechargeReply> {
        var mergedArray = Array<Apiproto.AlipayRechargeReply>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.AlipayRechargeReply? {
        return try Apiproto.AlipayRechargeReply.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.AlipayRechargeReply {
        return try Apiproto.AlipayRechargeReply.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.RechargeRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.AlipayRechargeReply {
        return try Apiproto.AlipayRechargeReply.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.AlipayRechargeReply {
        return try Apiproto.AlipayRechargeReply.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.AlipayRechargeReply {
        return try Apiproto.AlipayRechargeReply.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.AlipayRechargeReply {
        return try Apiproto.AlipayRechargeReply.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.AlipayRechargeReply {
        return try Apiproto.AlipayRechargeReply.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "appId": return self.appId
        case "method": return self.method
        case "charset": return self.charset
        case "signType": return self.signType
        case "timestamp": return self.timestamp
        case "version": return self.version
        case "bizContent": return self.bizContent
        case "notifyUrl": return self.notifyUrl
        case "sign": return self.sign
        default: return nil
        }
    }
}
extension Apiproto.AlipayRechargeReply.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "appId": return self.appId
            case "method": return self.method
            case "charset": return self.charset
            case "signType": return self.signType
            case "timestamp": return self.timestamp
            case "version": return self.version
            case "bizContent": return self.bizContent
            case "notifyUrl": return self.notifyUrl
            case "sign": return self.sign
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "appId":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.appId = newSubscriptValue
            case "method":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.method = newSubscriptValue
            case "charset":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.charset = newSubscriptValue
            case "signType":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.signType = newSubscriptValue
            case "timestamp":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.timestamp = newSubscriptValue
            case "version":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.version = newSubscriptValue
            case "bizContent":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.bizContent = newSubscriptValue
            case "notifyUrl":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.notifyUrl = newSubscriptValue
            case "sign":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.sign = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.JdPayRechargeReply: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.JdPayRechargeReply> {
        var mergedArray = Array<Apiproto.JdPayRechargeReply>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.JdPayRechargeReply? {
        return try Apiproto.JdPayRechargeReply.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.JdPayRechargeReply {
        return try Apiproto.JdPayRechargeReply.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.RechargeRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.JdPayRechargeReply {
        return try Apiproto.JdPayRechargeReply.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.JdPayRechargeReply {
        return try Apiproto.JdPayRechargeReply.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.JdPayRechargeReply {
        return try Apiproto.JdPayRechargeReply.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.JdPayRechargeReply {
        return try Apiproto.JdPayRechargeReply.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.JdPayRechargeReply {
        return try Apiproto.JdPayRechargeReply.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "merchant": return self.merchant
        case "device": return self.device
        case "orderId": return self.orderId
        case "sign": return self.sign
        default: return nil
        }
    }
}
extension Apiproto.JdPayRechargeReply.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "merchant": return self.merchant
            case "device": return self.device
            case "orderId": return self.orderId
            case "sign": return self.sign
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "merchant":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.merchant = newSubscriptValue
            case "device":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.device = newSubscriptValue
            case "orderId":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.orderId = newSubscriptValue
            case "sign":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.sign = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
