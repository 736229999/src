/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "fund.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public extension Apiproto{}

public extension Apiproto {
    public struct FundRoot {
        public static let `default` = FundRoot()
        public var extensionRegistry:ExtensionRegistry

        init() {
            extensionRegistry = ExtensionRegistry()
            registerAllExtensions(registry: extensionRegistry)
        }
        public func registerAllExtensions(registry: ExtensionRegistry) {
        }
    }



    //Enum type declaration start 

    public enum Bankname:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
        case unknownBank = 0

        /// 工商银行
        case icbcBank = 1

        /// 光大银行 
        case cebBank = 2

        /// 广发银行
        case cgbChinaBank = 3

        /// 华夏银行
        case hxbBank = 4

        /// 建设银行
        case ccbBank = 5

        /// 交通银行
        case commBank = 6

        /// 民生银行
        case cmbcBank = 7

        /// 中国农业银行
        case abcChinaBank = 8

        /// 平安银行
        case pinganBank = 9

        /// 浦发银行
        case spdBank = 10

        /// 兴业银行
        case cibBank = 11

        /// 中国邮政储蓄银行
        case psbcBank = 12

        /// 招商银行
        case cmbChinaBank = 13

        /// 中国银行
        case bocBank = 14

        /// 中信银行
        case cityBank = 15
        public func toString() -> String {
            switch self {
            case .unknownBank: return "UnknownBank"
            case .icbcBank: return "IcbcBank"
            case .cebBank: return "CebBank"
            case .cgbChinaBank: return "CgbChinaBank"
            case .hxbBank: return "HxbBank"
            case .ccbBank: return "CcbBank"
            case .commBank: return "CommBank"
            case .cmbcBank: return "CmbcBank"
            case .abcChinaBank: return "AbcChinaBank"
            case .pinganBank: return "PinganBank"
            case .spdBank: return "SpdBank"
            case .cibBank: return "CibBank"
            case .psbcBank: return "PsbcBank"
            case .cmbChinaBank: return "CmbChinaBank"
            case .bocBank: return "BocBank"
            case .cityBank: return "CityBank"
            }
        }
        public static func fromString(str:String) throws -> Apiproto.Bankname {
            switch str {
            case "UnknownBank":    return .unknownBank
            case "IcbcBank":    return .icbcBank
            case "CebBank":    return .cebBank
            case "CgbChinaBank":    return .cgbChinaBank
            case "HxbBank":    return .hxbBank
            case "CcbBank":    return .ccbBank
            case "CommBank":    return .commBank
            case "CmbcBank":    return .cmbcBank
            case "AbcChinaBank":    return .abcChinaBank
            case "PinganBank":    return .pinganBank
            case "SpdBank":    return .spdBank
            case "CibBank":    return .cibBank
            case "PsbcBank":    return .psbcBank
            case "CmbChinaBank":    return .cmbChinaBank
            case "BocBank":    return .bocBank
            case "CityBank":    return .cityBank
            default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
            }
        }
        public var debugDescription:String { return getDescription() }
        public var description:String { return getDescription() }
        private func getDescription() -> String { 
            switch self {
            case .unknownBank: return ".unknownBank"
            case .icbcBank: return ".icbcBank"
            case .cebBank: return ".cebBank"
            case .cgbChinaBank: return ".cgbChinaBank"
            case .hxbBank: return ".hxbBank"
            case .ccbBank: return ".ccbBank"
            case .commBank: return ".commBank"
            case .cmbcBank: return ".cmbcBank"
            case .abcChinaBank: return ".abcChinaBank"
            case .pinganBank: return ".pinganBank"
            case .spdBank: return ".spdBank"
            case .cibBank: return ".cibBank"
            case .psbcBank: return ".psbcBank"
            case .cmbChinaBank: return ".cmbChinaBank"
            case .bocBank: return ".bocBank"
            case .cityBank: return ".cityBank"
            }
        }
        public var hashValue:Int {
            return self.rawValue.hashValue
        }
        public static func ==(lhs:Bankname, rhs:Bankname) -> Bool {
            return lhs.hashValue == rhs.hashValue
        }
    }

    //Enum type declaration end 



    //Enum type declaration start 

    public enum TicketStatus:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
        /// 待使用
        case waitUse = 0

        /// 待生效
        case waitValid = 1

        /// 已使用
        case used = 2

        /// 已过期
        case expired = 3
        public func toString() -> String {
            switch self {
            case .waitUse: return "WaitUse"
            case .waitValid: return "WaitValid"
            case .used: return "Used"
            case .expired: return "Expired"
            }
        }
        public static func fromString(str:String) throws -> Apiproto.TicketStatus {
            switch str {
            case "WaitUse":    return .waitUse
            case "WaitValid":    return .waitValid
            case "Used":    return .used
            case "Expired":    return .expired
            default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
            }
        }
        public var debugDescription:String { return getDescription() }
        public var description:String { return getDescription() }
        private func getDescription() -> String { 
            switch self {
            case .waitUse: return ".waitUse"
            case .waitValid: return ".waitValid"
            case .used: return ".used"
            case .expired: return ".expired"
            }
        }
        public var hashValue:Int {
            return self.rawValue.hashValue
        }
        public static func ==(lhs:TicketStatus, rhs:TicketStatus) -> Bool {
            return lhs.hashValue == rhs.hashValue
        }
    }

    //Enum type declaration end 

    final public class FundInfo : GeneratedMessage {

        public static func == (lhs: Apiproto.FundInfo, rhs: Apiproto.FundInfo) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasTotal == rhs.hasTotal) && (!lhs.hasTotal || lhs.total == rhs.total)
            fieldCheck = fieldCheck && (lhs.hasBalance == rhs.hasBalance) && (!lhs.hasBalance || lhs.balance == rhs.balance)
            fieldCheck = fieldCheck && (lhs.hasCai == rhs.hasCai) && (!lhs.hasCai || lhs.cai == rhs.cai)
            fieldCheck = fieldCheck && (lhs.hasFreeze == rhs.hasFreeze) && (!lhs.hasFreeze || lhs.freeze == rhs.freeze)
            fieldCheck = fieldCheck && (lhs.hasCredits == rhs.hasCredits) && (!lhs.hasCredits || lhs.credits == rhs.credits)
            fieldCheck = fieldCheck && (lhs.hasKxd == rhs.hasKxd) && (!lhs.hasKxd || lhs.kxd == rhs.kxd)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        /// 总金额
        public fileprivate(set) var total:Double = Double(0)
        public fileprivate(set) var hasTotal:Bool = false

        /// 余额
        public fileprivate(set) var balance:Double = Double(0)
        public fileprivate(set) var hasBalance:Bool = false

        /// 彩金
        public fileprivate(set) var cai:Double = Double(0)
        public fileprivate(set) var hasCai:Bool = false

        /// 冻结额(冻结余额+冻结彩金)
        public fileprivate(set) var freeze:Double = Double(0)
        public fileprivate(set) var hasFreeze:Bool = false

        /// 消费积分
        public fileprivate(set) var credits:Int32 = Int32(0)
        public fileprivate(set) var hasCredits:Bool = false

        /// 开心豆
        public fileprivate(set) var kxd:Int32 = Int32(0)
        public fileprivate(set) var hasKxd:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasTotal {
                try codedOutputStream.writeDouble(fieldNumber: 1, value:total)
            }
            if hasBalance {
                try codedOutputStream.writeDouble(fieldNumber: 2, value:balance)
            }
            if hasCai {
                try codedOutputStream.writeDouble(fieldNumber: 3, value:cai)
            }
            if hasFreeze {
                try codedOutputStream.writeDouble(fieldNumber: 4, value:freeze)
            }
            if hasCredits {
                try codedOutputStream.writeInt32(fieldNumber: 5, value:credits)
            }
            if hasKxd {
                try codedOutputStream.writeInt32(fieldNumber: 6, value:kxd)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasTotal {
                serialize_size += total.computeDoubleSize(fieldNumber: 1)
            }
            if hasBalance {
                serialize_size += balance.computeDoubleSize(fieldNumber: 2)
            }
            if hasCai {
                serialize_size += cai.computeDoubleSize(fieldNumber: 3)
            }
            if hasFreeze {
                serialize_size += freeze.computeDoubleSize(fieldNumber: 4)
            }
            if hasCredits {
                serialize_size += credits.computeInt32Size(fieldNumber: 5)
            }
            if hasKxd {
                serialize_size += kxd.computeInt32Size(fieldNumber: 6)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.FundInfo.Builder {
            return Apiproto.FundInfo.classBuilder() as! Apiproto.FundInfo.Builder
        }
        public func getBuilder() -> Apiproto.FundInfo.Builder {
            return classBuilder() as! Apiproto.FundInfo.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.FundInfo.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.FundInfo.Builder()
        }
        public func toBuilder() throws -> Apiproto.FundInfo.Builder {
            return try Apiproto.FundInfo.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.FundInfo) throws -> Apiproto.FundInfo.Builder {
            return try Apiproto.FundInfo.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasTotal {
                jsonMap["total"] = Double(total)
            }
            if hasBalance {
                jsonMap["balance"] = Double(balance)
            }
            if hasCai {
                jsonMap["cai"] = Double(cai)
            }
            if hasFreeze {
                jsonMap["freeze"] = Double(freeze)
            }
            if hasCredits {
                jsonMap["credits"] = Int(credits)
            }
            if hasKxd {
                jsonMap["kxd"] = Int(kxd)
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.FundInfo {
            return try Apiproto.FundInfo.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.FundInfo {
            return try Apiproto.FundInfo.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasTotal {
                output += "\(indent) total: \(total) \n"
            }
            if hasBalance {
                output += "\(indent) balance: \(balance) \n"
            }
            if hasCai {
                output += "\(indent) cai: \(cai) \n"
            }
            if hasFreeze {
                output += "\(indent) freeze: \(freeze) \n"
            }
            if hasCredits {
                output += "\(indent) credits: \(credits) \n"
            }
            if hasKxd {
                output += "\(indent) kxd: \(kxd) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasTotal {
                    hashCode = (hashCode &* 31) &+ total.hashValue
                }
                if hasBalance {
                    hashCode = (hashCode &* 31) &+ balance.hashValue
                }
                if hasCai {
                    hashCode = (hashCode &* 31) &+ cai.hashValue
                }
                if hasFreeze {
                    hashCode = (hashCode &* 31) &+ freeze.hashValue
                }
                if hasCredits {
                    hashCode = (hashCode &* 31) &+ credits.hashValue
                }
                if hasKxd {
                    hashCode = (hashCode &* 31) &+ kxd.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.FundInfo"
        }
        override public func className() -> String {
            return "Apiproto.FundInfo"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.FundInfo = Apiproto.FundInfo()
            public func getMessage() -> Apiproto.FundInfo {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            /// 总金额
            public var total:Double {
                get {
                    return builderResult.total
                }
                set (value) {
                    builderResult.hasTotal = true
                    builderResult.total = value
                }
            }
            public var hasTotal:Bool {
                get {
                    return builderResult.hasTotal
                }
            }
            @discardableResult
            public func setTotal(_ value:Double) -> Apiproto.FundInfo.Builder {
                self.total = value
                return self
            }
            @discardableResult
            public func clearTotal() -> Apiproto.FundInfo.Builder{
                builderResult.hasTotal = false
                builderResult.total = Double(0)
                return self
            }
            /// 余额
            public var balance:Double {
                get {
                    return builderResult.balance
                }
                set (value) {
                    builderResult.hasBalance = true
                    builderResult.balance = value
                }
            }
            public var hasBalance:Bool {
                get {
                    return builderResult.hasBalance
                }
            }
            @discardableResult
            public func setBalance(_ value:Double) -> Apiproto.FundInfo.Builder {
                self.balance = value
                return self
            }
            @discardableResult
            public func clearBalance() -> Apiproto.FundInfo.Builder{
                builderResult.hasBalance = false
                builderResult.balance = Double(0)
                return self
            }
            /// 彩金
            public var cai:Double {
                get {
                    return builderResult.cai
                }
                set (value) {
                    builderResult.hasCai = true
                    builderResult.cai = value
                }
            }
            public var hasCai:Bool {
                get {
                    return builderResult.hasCai
                }
            }
            @discardableResult
            public func setCai(_ value:Double) -> Apiproto.FundInfo.Builder {
                self.cai = value
                return self
            }
            @discardableResult
            public func clearCai() -> Apiproto.FundInfo.Builder{
                builderResult.hasCai = false
                builderResult.cai = Double(0)
                return self
            }
            /// 冻结额(冻结余额+冻结彩金)
            public var freeze:Double {
                get {
                    return builderResult.freeze
                }
                set (value) {
                    builderResult.hasFreeze = true
                    builderResult.freeze = value
                }
            }
            public var hasFreeze:Bool {
                get {
                    return builderResult.hasFreeze
                }
            }
            @discardableResult
            public func setFreeze(_ value:Double) -> Apiproto.FundInfo.Builder {
                self.freeze = value
                return self
            }
            @discardableResult
            public func clearFreeze() -> Apiproto.FundInfo.Builder{
                builderResult.hasFreeze = false
                builderResult.freeze = Double(0)
                return self
            }
            /// 消费积分
            public var credits:Int32 {
                get {
                    return builderResult.credits
                }
                set (value) {
                    builderResult.hasCredits = true
                    builderResult.credits = value
                }
            }
            public var hasCredits:Bool {
                get {
                    return builderResult.hasCredits
                }
            }
            @discardableResult
            public func setCredits(_ value:Int32) -> Apiproto.FundInfo.Builder {
                self.credits = value
                return self
            }
            @discardableResult
            public func clearCredits() -> Apiproto.FundInfo.Builder{
                builderResult.hasCredits = false
                builderResult.credits = Int32(0)
                return self
            }
            /// 开心豆
            public var kxd:Int32 {
                get {
                    return builderResult.kxd
                }
                set (value) {
                    builderResult.hasKxd = true
                    builderResult.kxd = value
                }
            }
            public var hasKxd:Bool {
                get {
                    return builderResult.hasKxd
                }
            }
            @discardableResult
            public func setKxd(_ value:Int32) -> Apiproto.FundInfo.Builder {
                self.kxd = value
                return self
            }
            @discardableResult
            public func clearKxd() -> Apiproto.FundInfo.Builder{
                builderResult.hasKxd = false
                builderResult.kxd = Int32(0)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.FundInfo.Builder {
                builderResult = Apiproto.FundInfo()
                return self
            }
            override public func clone() throws -> Apiproto.FundInfo.Builder {
                return try Apiproto.FundInfo.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.FundInfo {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.FundInfo {
                let returnMe:Apiproto.FundInfo = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.FundInfo) throws -> Apiproto.FundInfo.Builder {
                if other == Apiproto.FundInfo() {
                    return self
                }
                if other.hasTotal {
                    total = other.total
                }
                if other.hasBalance {
                    balance = other.balance
                }
                if other.hasCai {
                    cai = other.cai
                }
                if other.hasFreeze {
                    freeze = other.freeze
                }
                if other.hasCredits {
                    credits = other.credits
                }
                if other.hasKxd {
                    kxd = other.kxd
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.FundInfo.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.FundInfo.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 9:
                        total = try codedInputStream.readDouble()

                    case 17:
                        balance = try codedInputStream.readDouble()

                    case 25:
                        cai = try codedInputStream.readDouble()

                    case 33:
                        freeze = try codedInputStream.readDouble()

                    case 40:
                        credits = try codedInputStream.readInt32()

                    case 48:
                        kxd = try codedInputStream.readInt32()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.FundInfo.Builder {
                let resultDecodedBuilder = Apiproto.FundInfo.Builder()
                if let jsonValueTotal = jsonMap["total"] as? Double {
                    resultDecodedBuilder.total = Double(jsonValueTotal)
                } else if let jsonValueTotal = jsonMap["total"] as? String {
                    resultDecodedBuilder.total = Double(jsonValueTotal)!
                }
                if let jsonValueBalance = jsonMap["balance"] as? Double {
                    resultDecodedBuilder.balance = Double(jsonValueBalance)
                } else if let jsonValueBalance = jsonMap["balance"] as? String {
                    resultDecodedBuilder.balance = Double(jsonValueBalance)!
                }
                if let jsonValueCai = jsonMap["cai"] as? Double {
                    resultDecodedBuilder.cai = Double(jsonValueCai)
                } else if let jsonValueCai = jsonMap["cai"] as? String {
                    resultDecodedBuilder.cai = Double(jsonValueCai)!
                }
                if let jsonValueFreeze = jsonMap["freeze"] as? Double {
                    resultDecodedBuilder.freeze = Double(jsonValueFreeze)
                } else if let jsonValueFreeze = jsonMap["freeze"] as? String {
                    resultDecodedBuilder.freeze = Double(jsonValueFreeze)!
                }
                if let jsonValueCredits = jsonMap["credits"] as? Int {
                    resultDecodedBuilder.credits = Int32(jsonValueCredits)
                } else if let jsonValueCredits = jsonMap["credits"] as? String {
                    resultDecodedBuilder.credits = Int32(jsonValueCredits)!
                }
                if let jsonValueKxd = jsonMap["kxd"] as? Int {
                    resultDecodedBuilder.kxd = Int32(jsonValueKxd)
                } else if let jsonValueKxd = jsonMap["kxd"] as? String {
                    resultDecodedBuilder.kxd = Int32(jsonValueKxd)!
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.FundInfo.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.FundInfo.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class Bankcard : GeneratedMessage {

        public static func == (lhs: Apiproto.Bankcard, rhs: Apiproto.Bankcard) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
            fieldCheck = fieldCheck && (lhs.hasCardno == rhs.hasCardno) && (!lhs.hasCardno || lhs.cardno == rhs.cardno)
            fieldCheck = fieldCheck && (lhs.hasBankname == rhs.hasBankname) && (!lhs.hasBankname || lhs.bankname == rhs.bankname)
            fieldCheck = fieldCheck && (lhs.hasCardtype == rhs.hasCardtype) && (!lhs.hasCardtype || lhs.cardtype == rhs.cardtype)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        /// 唯一id
        public fileprivate(set) var id:Int64 = Int64(0)
        public fileprivate(set) var hasId:Bool = false

        /// 卡号
        public fileprivate(set) var cardno:String = ""
        public fileprivate(set) var hasCardno:Bool = false

        public fileprivate(set) var bankname:Apiproto.Bankname = Apiproto.Bankname.unknownBank
        public fileprivate(set) var hasBankname:Bool = false
        /// 卡类型
        public fileprivate(set) var cardtype:String = ""
        public fileprivate(set) var hasCardtype:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasId {
                try codedOutputStream.writeInt64(fieldNumber: 1, value:id)
            }
            if hasCardno {
                try codedOutputStream.writeString(fieldNumber: 2, value:cardno)
            }
            if hasBankname {
                try codedOutputStream.writeEnum(fieldNumber: 3, value:bankname.rawValue)
            }
            if hasCardtype {
                try codedOutputStream.writeString(fieldNumber: 4, value:cardtype)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasId {
                serialize_size += id.computeInt64Size(fieldNumber: 1)
            }
            if hasCardno {
                serialize_size += cardno.computeStringSize(fieldNumber: 2)
            }
            if (hasBankname) {
                serialize_size += bankname.rawValue.computeEnumSize(fieldNumber: 3)
            }
            if hasCardtype {
                serialize_size += cardtype.computeStringSize(fieldNumber: 4)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.Bankcard.Builder {
            return Apiproto.Bankcard.classBuilder() as! Apiproto.Bankcard.Builder
        }
        public func getBuilder() -> Apiproto.Bankcard.Builder {
            return classBuilder() as! Apiproto.Bankcard.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.Bankcard.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.Bankcard.Builder()
        }
        public func toBuilder() throws -> Apiproto.Bankcard.Builder {
            return try Apiproto.Bankcard.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.Bankcard) throws -> Apiproto.Bankcard.Builder {
            return try Apiproto.Bankcard.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasId {
                jsonMap["id"] = "\(id)"
            }
            if hasCardno {
                jsonMap["cardno"] = cardno
            }
            if hasBankname {
                jsonMap["bankname"] = bankname.toString()
            }
            if hasCardtype {
                jsonMap["cardtype"] = cardtype
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.Bankcard {
            return try Apiproto.Bankcard.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.Bankcard {
            return try Apiproto.Bankcard.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasId {
                output += "\(indent) id: \(id) \n"
            }
            if hasCardno {
                output += "\(indent) cardno: \(cardno) \n"
            }
            if (hasBankname) {
                output += "\(indent) bankname: \(bankname.description)\n"
            }
            if hasCardtype {
                output += "\(indent) cardtype: \(cardtype) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasId {
                    hashCode = (hashCode &* 31) &+ id.hashValue
                }
                if hasCardno {
                    hashCode = (hashCode &* 31) &+ cardno.hashValue
                }
                if hasBankname {
                     hashCode = (hashCode &* 31) &+ bankname.hashValue
                }
                if hasCardtype {
                    hashCode = (hashCode &* 31) &+ cardtype.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.Bankcard"
        }
        override public func className() -> String {
            return "Apiproto.Bankcard"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.Bankcard = Apiproto.Bankcard()
            public func getMessage() -> Apiproto.Bankcard {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            /// 唯一id
            public var id:Int64 {
                get {
                    return builderResult.id
                }
                set (value) {
                    builderResult.hasId = true
                    builderResult.id = value
                }
            }
            public var hasId:Bool {
                get {
                    return builderResult.hasId
                }
            }
            @discardableResult
            public func setId(_ value:Int64) -> Apiproto.Bankcard.Builder {
                self.id = value
                return self
            }
            @discardableResult
            public func clearId() -> Apiproto.Bankcard.Builder{
                builderResult.hasId = false
                builderResult.id = Int64(0)
                return self
            }
            /// 卡号
            public var cardno:String {
                get {
                    return builderResult.cardno
                }
                set (value) {
                    builderResult.hasCardno = true
                    builderResult.cardno = value
                }
            }
            public var hasCardno:Bool {
                get {
                    return builderResult.hasCardno
                }
            }
            @discardableResult
            public func setCardno(_ value:String) -> Apiproto.Bankcard.Builder {
                self.cardno = value
                return self
            }
            @discardableResult
            public func clearCardno() -> Apiproto.Bankcard.Builder{
                builderResult.hasCardno = false
                builderResult.cardno = ""
                return self
            }
            /// 开户行
                public var bankname:Apiproto.Bankname {
                    get {
                        return builderResult.bankname
                    }
                    set (value) {
                        builderResult.hasBankname = true
                        builderResult.bankname = value
                    }
                }
                public var hasBankname:Bool{
                    get {
                        return builderResult.hasBankname
                    }
                }
            @discardableResult
                public func setBankname(_ value:Apiproto.Bankname) -> Apiproto.Bankcard.Builder {
                  self.bankname = value
                  return self
                }
            @discardableResult
                public func clearBankname() -> Apiproto.Bankcard.Builder {
                   builderResult.hasBankname = false
                   builderResult.bankname = .unknownBank
                   return self
                }
            /// 卡类型
            public var cardtype:String {
                get {
                    return builderResult.cardtype
                }
                set (value) {
                    builderResult.hasCardtype = true
                    builderResult.cardtype = value
                }
            }
            public var hasCardtype:Bool {
                get {
                    return builderResult.hasCardtype
                }
            }
            @discardableResult
            public func setCardtype(_ value:String) -> Apiproto.Bankcard.Builder {
                self.cardtype = value
                return self
            }
            @discardableResult
            public func clearCardtype() -> Apiproto.Bankcard.Builder{
                builderResult.hasCardtype = false
                builderResult.cardtype = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.Bankcard.Builder {
                builderResult = Apiproto.Bankcard()
                return self
            }
            override public func clone() throws -> Apiproto.Bankcard.Builder {
                return try Apiproto.Bankcard.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.Bankcard {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.Bankcard {
                let returnMe:Apiproto.Bankcard = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.Bankcard) throws -> Apiproto.Bankcard.Builder {
                if other == Apiproto.Bankcard() {
                    return self
                }
                if other.hasId {
                    id = other.id
                }
                if other.hasCardno {
                    cardno = other.cardno
                }
                if other.hasBankname {
                    bankname = other.bankname
                }
                if other.hasCardtype {
                    cardtype = other.cardtype
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.Bankcard.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.Bankcard.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        id = try codedInputStream.readInt64()

                    case 18:
                        cardno = try codedInputStream.readString()

                    case 24:
                        let valueIntbankname = try codedInputStream.readEnum()
                        if let enumsbankname = Apiproto.Bankname(rawValue:valueIntbankname){
                            bankname = enumsbankname
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 3, value:Int64(valueIntbankname))
                        }

                    case 34:
                        cardtype = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.Bankcard.Builder {
                let resultDecodedBuilder = Apiproto.Bankcard.Builder()
                if let jsonValueId = jsonMap["id"] as? String {
                    resultDecodedBuilder.id = Int64(jsonValueId)!
                } else if let jsonValueId = jsonMap["id"] as? Int {
                    resultDecodedBuilder.id = Int64(jsonValueId)
                }
                if let jsonValueCardno = jsonMap["cardno"] as? String {
                    resultDecodedBuilder.cardno = jsonValueCardno
                }
                if let jsonValueBankname = jsonMap["bankname"] as? String {
                    resultDecodedBuilder.bankname = try Apiproto.Bankname.fromString(str: jsonValueBankname)
                }
                if let jsonValueCardtype = jsonMap["cardtype"] as? String {
                    resultDecodedBuilder.cardtype = jsonValueCardtype
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.Bankcard.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.Bankcard.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class AddBankcardRequest : GeneratedMessage {

        public static func == (lhs: Apiproto.AddBankcardRequest, rhs: Apiproto.AddBankcardRequest) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasPhone == rhs.hasPhone) && (!lhs.hasPhone || lhs.phone == rhs.phone)
            fieldCheck = fieldCheck && (lhs.hasSmsCode == rhs.hasSmsCode) && (!lhs.hasSmsCode || lhs.smsCode == rhs.smsCode)
            fieldCheck = fieldCheck && (lhs.hasCardno == rhs.hasCardno) && (!lhs.hasCardno || lhs.cardno == rhs.cardno)
            fieldCheck = fieldCheck && (lhs.hasBankname == rhs.hasBankname) && (!lhs.hasBankname || lhs.bankname == rhs.bankname)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var phone:String = ""
        public fileprivate(set) var hasPhone:Bool = false

        public fileprivate(set) var smsCode:String = ""
        public fileprivate(set) var hasSmsCode:Bool = false

        public fileprivate(set) var cardno:String = ""
        public fileprivate(set) var hasCardno:Bool = false

        public fileprivate(set) var bankname:Apiproto.Bankname = Apiproto.Bankname.unknownBank
        public fileprivate(set) var hasBankname:Bool = false
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasPhone {
                try codedOutputStream.writeString(fieldNumber: 1, value:phone)
            }
            if hasSmsCode {
                try codedOutputStream.writeString(fieldNumber: 2, value:smsCode)
            }
            if hasCardno {
                try codedOutputStream.writeString(fieldNumber: 3, value:cardno)
            }
            if hasBankname {
                try codedOutputStream.writeEnum(fieldNumber: 4, value:bankname.rawValue)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasPhone {
                serialize_size += phone.computeStringSize(fieldNumber: 1)
            }
            if hasSmsCode {
                serialize_size += smsCode.computeStringSize(fieldNumber: 2)
            }
            if hasCardno {
                serialize_size += cardno.computeStringSize(fieldNumber: 3)
            }
            if (hasBankname) {
                serialize_size += bankname.rawValue.computeEnumSize(fieldNumber: 4)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.AddBankcardRequest.Builder {
            return Apiproto.AddBankcardRequest.classBuilder() as! Apiproto.AddBankcardRequest.Builder
        }
        public func getBuilder() -> Apiproto.AddBankcardRequest.Builder {
            return classBuilder() as! Apiproto.AddBankcardRequest.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.AddBankcardRequest.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.AddBankcardRequest.Builder()
        }
        public func toBuilder() throws -> Apiproto.AddBankcardRequest.Builder {
            return try Apiproto.AddBankcardRequest.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.AddBankcardRequest) throws -> Apiproto.AddBankcardRequest.Builder {
            return try Apiproto.AddBankcardRequest.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasPhone {
                jsonMap["phone"] = phone
            }
            if hasSmsCode {
                jsonMap["smsCode"] = smsCode
            }
            if hasCardno {
                jsonMap["cardno"] = cardno
            }
            if hasBankname {
                jsonMap["bankname"] = bankname.toString()
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.AddBankcardRequest {
            return try Apiproto.AddBankcardRequest.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.AddBankcardRequest {
            return try Apiproto.AddBankcardRequest.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasPhone {
                output += "\(indent) phone: \(phone) \n"
            }
            if hasSmsCode {
                output += "\(indent) smsCode: \(smsCode) \n"
            }
            if hasCardno {
                output += "\(indent) cardno: \(cardno) \n"
            }
            if (hasBankname) {
                output += "\(indent) bankname: \(bankname.description)\n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasPhone {
                    hashCode = (hashCode &* 31) &+ phone.hashValue
                }
                if hasSmsCode {
                    hashCode = (hashCode &* 31) &+ smsCode.hashValue
                }
                if hasCardno {
                    hashCode = (hashCode &* 31) &+ cardno.hashValue
                }
                if hasBankname {
                     hashCode = (hashCode &* 31) &+ bankname.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.AddBankcardRequest"
        }
        override public func className() -> String {
            return "Apiproto.AddBankcardRequest"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.AddBankcardRequest = Apiproto.AddBankcardRequest()
            public func getMessage() -> Apiproto.AddBankcardRequest {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var phone:String {
                get {
                    return builderResult.phone
                }
                set (value) {
                    builderResult.hasPhone = true
                    builderResult.phone = value
                }
            }
            public var hasPhone:Bool {
                get {
                    return builderResult.hasPhone
                }
            }
            @discardableResult
            public func setPhone(_ value:String) -> Apiproto.AddBankcardRequest.Builder {
                self.phone = value
                return self
            }
            @discardableResult
            public func clearPhone() -> Apiproto.AddBankcardRequest.Builder{
                builderResult.hasPhone = false
                builderResult.phone = ""
                return self
            }
            public var smsCode:String {
                get {
                    return builderResult.smsCode
                }
                set (value) {
                    builderResult.hasSmsCode = true
                    builderResult.smsCode = value
                }
            }
            public var hasSmsCode:Bool {
                get {
                    return builderResult.hasSmsCode
                }
            }
            @discardableResult
            public func setSmsCode(_ value:String) -> Apiproto.AddBankcardRequest.Builder {
                self.smsCode = value
                return self
            }
            @discardableResult
            public func clearSmsCode() -> Apiproto.AddBankcardRequest.Builder{
                builderResult.hasSmsCode = false
                builderResult.smsCode = ""
                return self
            }
            public var cardno:String {
                get {
                    return builderResult.cardno
                }
                set (value) {
                    builderResult.hasCardno = true
                    builderResult.cardno = value
                }
            }
            public var hasCardno:Bool {
                get {
                    return builderResult.hasCardno
                }
            }
            @discardableResult
            public func setCardno(_ value:String) -> Apiproto.AddBankcardRequest.Builder {
                self.cardno = value
                return self
            }
            @discardableResult
            public func clearCardno() -> Apiproto.AddBankcardRequest.Builder{
                builderResult.hasCardno = false
                builderResult.cardno = ""
                return self
            }
                public var bankname:Apiproto.Bankname {
                    get {
                        return builderResult.bankname
                    }
                    set (value) {
                        builderResult.hasBankname = true
                        builderResult.bankname = value
                    }
                }
                public var hasBankname:Bool{
                    get {
                        return builderResult.hasBankname
                    }
                }
            @discardableResult
                public func setBankname(_ value:Apiproto.Bankname) -> Apiproto.AddBankcardRequest.Builder {
                  self.bankname = value
                  return self
                }
            @discardableResult
                public func clearBankname() -> Apiproto.AddBankcardRequest.Builder {
                   builderResult.hasBankname = false
                   builderResult.bankname = .unknownBank
                   return self
                }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.AddBankcardRequest.Builder {
                builderResult = Apiproto.AddBankcardRequest()
                return self
            }
            override public func clone() throws -> Apiproto.AddBankcardRequest.Builder {
                return try Apiproto.AddBankcardRequest.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.AddBankcardRequest {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.AddBankcardRequest {
                let returnMe:Apiproto.AddBankcardRequest = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.AddBankcardRequest) throws -> Apiproto.AddBankcardRequest.Builder {
                if other == Apiproto.AddBankcardRequest() {
                    return self
                }
                if other.hasPhone {
                    phone = other.phone
                }
                if other.hasSmsCode {
                    smsCode = other.smsCode
                }
                if other.hasCardno {
                    cardno = other.cardno
                }
                if other.hasBankname {
                    bankname = other.bankname
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.AddBankcardRequest.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.AddBankcardRequest.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        phone = try codedInputStream.readString()

                    case 18:
                        smsCode = try codedInputStream.readString()

                    case 26:
                        cardno = try codedInputStream.readString()

                    case 32:
                        let valueIntbankname = try codedInputStream.readEnum()
                        if let enumsbankname = Apiproto.Bankname(rawValue:valueIntbankname){
                            bankname = enumsbankname
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 4, value:Int64(valueIntbankname))
                        }

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.AddBankcardRequest.Builder {
                let resultDecodedBuilder = Apiproto.AddBankcardRequest.Builder()
                if let jsonValuePhone = jsonMap["phone"] as? String {
                    resultDecodedBuilder.phone = jsonValuePhone
                }
                if let jsonValueSmsCode = jsonMap["smsCode"] as? String {
                    resultDecodedBuilder.smsCode = jsonValueSmsCode
                }
                if let jsonValueCardno = jsonMap["cardno"] as? String {
                    resultDecodedBuilder.cardno = jsonValueCardno
                }
                if let jsonValueBankname = jsonMap["bankname"] as? String {
                    resultDecodedBuilder.bankname = try Apiproto.Bankname.fromString(str: jsonValueBankname)
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.AddBankcardRequest.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.AddBankcardRequest.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class BuycaiTicket : GeneratedMessage {

        public static func == (lhs: Apiproto.BuycaiTicket, rhs: Apiproto.BuycaiTicket) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
            fieldCheck = fieldCheck && (lhs.hasUseBase == rhs.hasUseBase) && (!lhs.hasUseBase || lhs.useBase == rhs.useBase)
            fieldCheck = fieldCheck && (lhs.hasUseSub == rhs.hasUseSub) && (!lhs.hasUseSub || lhs.useSub == rhs.useSub)
            fieldCheck = fieldCheck && (lhs.hasMaxStack == rhs.hasMaxStack) && (!lhs.hasMaxStack || lhs.maxStack == rhs.maxStack)
            fieldCheck = fieldCheck && (lhs.hasValidStart == rhs.hasValidStart) && (!lhs.hasValidStart || lhs.validStart == rhs.validStart)
            fieldCheck = fieldCheck && (lhs.hasValidEnd == rhs.hasValidEnd) && (!lhs.hasValidEnd || lhs.validEnd == rhs.validEnd)
            fieldCheck = fieldCheck && (lhs.hasAddtime == rhs.hasAddtime) && (!lhs.hasAddtime || lhs.addtime == rhs.addtime)
            fieldCheck = fieldCheck && (lhs.hasTitle == rhs.hasTitle) && (!lhs.hasTitle || lhs.title == rhs.title)
            fieldCheck = fieldCheck && (lhs.hasRestrictDesc == rhs.hasRestrictDesc) && (!lhs.hasRestrictDesc || lhs.restrictDesc == rhs.restrictDesc)
            fieldCheck = fieldCheck && (lhs.hasRestrictType == rhs.hasRestrictType) && (!lhs.hasRestrictType || lhs.restrictType == rhs.restrictType)
            fieldCheck = fieldCheck && (lhs.hasRestrictId == rhs.hasRestrictId) && (!lhs.hasRestrictId || lhs.restrictId == rhs.restrictId)
            fieldCheck = fieldCheck && (lhs.hasStatus == rhs.hasStatus) && (!lhs.hasStatus || lhs.status == rhs.status)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        /// 唯一id
        public fileprivate(set) var id:Int64 = Int64(0)
        public fileprivate(set) var hasId:Bool = false

        /// 满减基数(例如满50减2，此处为50)
        public fileprivate(set) var useBase:Int32 = Int32(0)
        public fileprivate(set) var hasUseBase:Bool = false

        /// 满减额(例如满50减2，此处为2)
        public fileprivate(set) var useSub:Int32 = Int32(0)
        public fileprivate(set) var hasUseSub:Bool = false

        /// 最大可叠加使用数
        public fileprivate(set) var maxStack:Int32 = Int32(0)
        public fileprivate(set) var hasMaxStack:Bool = false

        /// 有效期开始时间
        public fileprivate(set) var validStart:Int64 = Int64(0)
        public fileprivate(set) var hasValidStart:Bool = false

        /// 有效期结束时间
        public fileprivate(set) var validEnd:Int64 = Int64(0)
        public fileprivate(set) var hasValidEnd:Bool = false

        /// 获得时间
        public fileprivate(set) var addtime:Int64 = Int64(0)
        public fileprivate(set) var hasAddtime:Bool = false

        /// 标题
        public fileprivate(set) var title:String = ""
        public fileprivate(set) var hasTitle:Bool = false

        /// 使用描述
        public fileprivate(set) var restrictDesc:String = ""
        public fileprivate(set) var hasRestrictDesc:Bool = false

        /// 使用限制彩种类型(0:通用, n:仅可用于指定彩种类型, -n:不可用于指定彩种类型)
        public fileprivate(set) var restrictType:Int32 = Int32(0)
        public fileprivate(set) var hasRestrictType:Bool = false

        /// 使用限制彩种id(0:通用，n:仅可用于指定彩种id, -n:不可用于指定彩种id)
        public fileprivate(set) var restrictId:Int32 = Int32(0)
        public fileprivate(set) var hasRestrictId:Bool = false

        public fileprivate(set) var status:Apiproto.TicketStatus = Apiproto.TicketStatus.waitUse
        public fileprivate(set) var hasStatus:Bool = false
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasId {
                try codedOutputStream.writeInt64(fieldNumber: 1, value:id)
            }
            if hasUseBase {
                try codedOutputStream.writeInt32(fieldNumber: 2, value:useBase)
            }
            if hasUseSub {
                try codedOutputStream.writeInt32(fieldNumber: 3, value:useSub)
            }
            if hasMaxStack {
                try codedOutputStream.writeInt32(fieldNumber: 4, value:maxStack)
            }
            if hasValidStart {
                try codedOutputStream.writeInt64(fieldNumber: 5, value:validStart)
            }
            if hasValidEnd {
                try codedOutputStream.writeInt64(fieldNumber: 6, value:validEnd)
            }
            if hasAddtime {
                try codedOutputStream.writeInt64(fieldNumber: 7, value:addtime)
            }
            if hasTitle {
                try codedOutputStream.writeString(fieldNumber: 8, value:title)
            }
            if hasRestrictDesc {
                try codedOutputStream.writeString(fieldNumber: 9, value:restrictDesc)
            }
            if hasRestrictType {
                try codedOutputStream.writeInt32(fieldNumber: 10, value:restrictType)
            }
            if hasRestrictId {
                try codedOutputStream.writeInt32(fieldNumber: 11, value:restrictId)
            }
            if hasStatus {
                try codedOutputStream.writeEnum(fieldNumber: 12, value:status.rawValue)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasId {
                serialize_size += id.computeInt64Size(fieldNumber: 1)
            }
            if hasUseBase {
                serialize_size += useBase.computeInt32Size(fieldNumber: 2)
            }
            if hasUseSub {
                serialize_size += useSub.computeInt32Size(fieldNumber: 3)
            }
            if hasMaxStack {
                serialize_size += maxStack.computeInt32Size(fieldNumber: 4)
            }
            if hasValidStart {
                serialize_size += validStart.computeInt64Size(fieldNumber: 5)
            }
            if hasValidEnd {
                serialize_size += validEnd.computeInt64Size(fieldNumber: 6)
            }
            if hasAddtime {
                serialize_size += addtime.computeInt64Size(fieldNumber: 7)
            }
            if hasTitle {
                serialize_size += title.computeStringSize(fieldNumber: 8)
            }
            if hasRestrictDesc {
                serialize_size += restrictDesc.computeStringSize(fieldNumber: 9)
            }
            if hasRestrictType {
                serialize_size += restrictType.computeInt32Size(fieldNumber: 10)
            }
            if hasRestrictId {
                serialize_size += restrictId.computeInt32Size(fieldNumber: 11)
            }
            if (hasStatus) {
                serialize_size += status.rawValue.computeEnumSize(fieldNumber: 12)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.BuycaiTicket.Builder {
            return Apiproto.BuycaiTicket.classBuilder() as! Apiproto.BuycaiTicket.Builder
        }
        public func getBuilder() -> Apiproto.BuycaiTicket.Builder {
            return classBuilder() as! Apiproto.BuycaiTicket.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.BuycaiTicket.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.BuycaiTicket.Builder()
        }
        public func toBuilder() throws -> Apiproto.BuycaiTicket.Builder {
            return try Apiproto.BuycaiTicket.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.BuycaiTicket) throws -> Apiproto.BuycaiTicket.Builder {
            return try Apiproto.BuycaiTicket.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasId {
                jsonMap["id"] = "\(id)"
            }
            if hasUseBase {
                jsonMap["useBase"] = Int(useBase)
            }
            if hasUseSub {
                jsonMap["useSub"] = Int(useSub)
            }
            if hasMaxStack {
                jsonMap["maxStack"] = Int(maxStack)
            }
            if hasValidStart {
                jsonMap["validStart"] = "\(validStart)"
            }
            if hasValidEnd {
                jsonMap["validEnd"] = "\(validEnd)"
            }
            if hasAddtime {
                jsonMap["addtime"] = "\(addtime)"
            }
            if hasTitle {
                jsonMap["title"] = title
            }
            if hasRestrictDesc {
                jsonMap["restrictDesc"] = restrictDesc
            }
            if hasRestrictType {
                jsonMap["restrictType"] = Int(restrictType)
            }
            if hasRestrictId {
                jsonMap["restrictId"] = Int(restrictId)
            }
            if hasStatus {
                jsonMap["status"] = status.toString()
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.BuycaiTicket {
            return try Apiproto.BuycaiTicket.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.BuycaiTicket {
            return try Apiproto.BuycaiTicket.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasId {
                output += "\(indent) id: \(id) \n"
            }
            if hasUseBase {
                output += "\(indent) useBase: \(useBase) \n"
            }
            if hasUseSub {
                output += "\(indent) useSub: \(useSub) \n"
            }
            if hasMaxStack {
                output += "\(indent) maxStack: \(maxStack) \n"
            }
            if hasValidStart {
                output += "\(indent) validStart: \(validStart) \n"
            }
            if hasValidEnd {
                output += "\(indent) validEnd: \(validEnd) \n"
            }
            if hasAddtime {
                output += "\(indent) addtime: \(addtime) \n"
            }
            if hasTitle {
                output += "\(indent) title: \(title) \n"
            }
            if hasRestrictDesc {
                output += "\(indent) restrictDesc: \(restrictDesc) \n"
            }
            if hasRestrictType {
                output += "\(indent) restrictType: \(restrictType) \n"
            }
            if hasRestrictId {
                output += "\(indent) restrictId: \(restrictId) \n"
            }
            if (hasStatus) {
                output += "\(indent) status: \(status.description)\n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasId {
                    hashCode = (hashCode &* 31) &+ id.hashValue
                }
                if hasUseBase {
                    hashCode = (hashCode &* 31) &+ useBase.hashValue
                }
                if hasUseSub {
                    hashCode = (hashCode &* 31) &+ useSub.hashValue
                }
                if hasMaxStack {
                    hashCode = (hashCode &* 31) &+ maxStack.hashValue
                }
                if hasValidStart {
                    hashCode = (hashCode &* 31) &+ validStart.hashValue
                }
                if hasValidEnd {
                    hashCode = (hashCode &* 31) &+ validEnd.hashValue
                }
                if hasAddtime {
                    hashCode = (hashCode &* 31) &+ addtime.hashValue
                }
                if hasTitle {
                    hashCode = (hashCode &* 31) &+ title.hashValue
                }
                if hasRestrictDesc {
                    hashCode = (hashCode &* 31) &+ restrictDesc.hashValue
                }
                if hasRestrictType {
                    hashCode = (hashCode &* 31) &+ restrictType.hashValue
                }
                if hasRestrictId {
                    hashCode = (hashCode &* 31) &+ restrictId.hashValue
                }
                if hasStatus {
                     hashCode = (hashCode &* 31) &+ status.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.BuycaiTicket"
        }
        override public func className() -> String {
            return "Apiproto.BuycaiTicket"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.BuycaiTicket = Apiproto.BuycaiTicket()
            public func getMessage() -> Apiproto.BuycaiTicket {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            /// 唯一id
            public var id:Int64 {
                get {
                    return builderResult.id
                }
                set (value) {
                    builderResult.hasId = true
                    builderResult.id = value
                }
            }
            public var hasId:Bool {
                get {
                    return builderResult.hasId
                }
            }
            @discardableResult
            public func setId(_ value:Int64) -> Apiproto.BuycaiTicket.Builder {
                self.id = value
                return self
            }
            @discardableResult
            public func clearId() -> Apiproto.BuycaiTicket.Builder{
                builderResult.hasId = false
                builderResult.id = Int64(0)
                return self
            }
            /// 满减基数(例如满50减2，此处为50)
            public var useBase:Int32 {
                get {
                    return builderResult.useBase
                }
                set (value) {
                    builderResult.hasUseBase = true
                    builderResult.useBase = value
                }
            }
            public var hasUseBase:Bool {
                get {
                    return builderResult.hasUseBase
                }
            }
            @discardableResult
            public func setUseBase(_ value:Int32) -> Apiproto.BuycaiTicket.Builder {
                self.useBase = value
                return self
            }
            @discardableResult
            public func clearUseBase() -> Apiproto.BuycaiTicket.Builder{
                builderResult.hasUseBase = false
                builderResult.useBase = Int32(0)
                return self
            }
            /// 满减额(例如满50减2，此处为2)
            public var useSub:Int32 {
                get {
                    return builderResult.useSub
                }
                set (value) {
                    builderResult.hasUseSub = true
                    builderResult.useSub = value
                }
            }
            public var hasUseSub:Bool {
                get {
                    return builderResult.hasUseSub
                }
            }
            @discardableResult
            public func setUseSub(_ value:Int32) -> Apiproto.BuycaiTicket.Builder {
                self.useSub = value
                return self
            }
            @discardableResult
            public func clearUseSub() -> Apiproto.BuycaiTicket.Builder{
                builderResult.hasUseSub = false
                builderResult.useSub = Int32(0)
                return self
            }
            /// 最大可叠加使用数
            public var maxStack:Int32 {
                get {
                    return builderResult.maxStack
                }
                set (value) {
                    builderResult.hasMaxStack = true
                    builderResult.maxStack = value
                }
            }
            public var hasMaxStack:Bool {
                get {
                    return builderResult.hasMaxStack
                }
            }
            @discardableResult
            public func setMaxStack(_ value:Int32) -> Apiproto.BuycaiTicket.Builder {
                self.maxStack = value
                return self
            }
            @discardableResult
            public func clearMaxStack() -> Apiproto.BuycaiTicket.Builder{
                builderResult.hasMaxStack = false
                builderResult.maxStack = Int32(0)
                return self
            }
            /// 有效期开始时间
            public var validStart:Int64 {
                get {
                    return builderResult.validStart
                }
                set (value) {
                    builderResult.hasValidStart = true
                    builderResult.validStart = value
                }
            }
            public var hasValidStart:Bool {
                get {
                    return builderResult.hasValidStart
                }
            }
            @discardableResult
            public func setValidStart(_ value:Int64) -> Apiproto.BuycaiTicket.Builder {
                self.validStart = value
                return self
            }
            @discardableResult
            public func clearValidStart() -> Apiproto.BuycaiTicket.Builder{
                builderResult.hasValidStart = false
                builderResult.validStart = Int64(0)
                return self
            }
            /// 有效期结束时间
            public var validEnd:Int64 {
                get {
                    return builderResult.validEnd
                }
                set (value) {
                    builderResult.hasValidEnd = true
                    builderResult.validEnd = value
                }
            }
            public var hasValidEnd:Bool {
                get {
                    return builderResult.hasValidEnd
                }
            }
            @discardableResult
            public func setValidEnd(_ value:Int64) -> Apiproto.BuycaiTicket.Builder {
                self.validEnd = value
                return self
            }
            @discardableResult
            public func clearValidEnd() -> Apiproto.BuycaiTicket.Builder{
                builderResult.hasValidEnd = false
                builderResult.validEnd = Int64(0)
                return self
            }
            /// 获得时间
            public var addtime:Int64 {
                get {
                    return builderResult.addtime
                }
                set (value) {
                    builderResult.hasAddtime = true
                    builderResult.addtime = value
                }
            }
            public var hasAddtime:Bool {
                get {
                    return builderResult.hasAddtime
                }
            }
            @discardableResult
            public func setAddtime(_ value:Int64) -> Apiproto.BuycaiTicket.Builder {
                self.addtime = value
                return self
            }
            @discardableResult
            public func clearAddtime() -> Apiproto.BuycaiTicket.Builder{
                builderResult.hasAddtime = false
                builderResult.addtime = Int64(0)
                return self
            }
            /// 标题
            public var title:String {
                get {
                    return builderResult.title
                }
                set (value) {
                    builderResult.hasTitle = true
                    builderResult.title = value
                }
            }
            public var hasTitle:Bool {
                get {
                    return builderResult.hasTitle
                }
            }
            @discardableResult
            public func setTitle(_ value:String) -> Apiproto.BuycaiTicket.Builder {
                self.title = value
                return self
            }
            @discardableResult
            public func clearTitle() -> Apiproto.BuycaiTicket.Builder{
                builderResult.hasTitle = false
                builderResult.title = ""
                return self
            }
            /// 使用描述
            public var restrictDesc:String {
                get {
                    return builderResult.restrictDesc
                }
                set (value) {
                    builderResult.hasRestrictDesc = true
                    builderResult.restrictDesc = value
                }
            }
            public var hasRestrictDesc:Bool {
                get {
                    return builderResult.hasRestrictDesc
                }
            }
            @discardableResult
            public func setRestrictDesc(_ value:String) -> Apiproto.BuycaiTicket.Builder {
                self.restrictDesc = value
                return self
            }
            @discardableResult
            public func clearRestrictDesc() -> Apiproto.BuycaiTicket.Builder{
                builderResult.hasRestrictDesc = false
                builderResult.restrictDesc = ""
                return self
            }
            /// 使用限制彩种类型(0:通用, n:仅可用于指定彩种类型, -n:不可用于指定彩种类型)
            public var restrictType:Int32 {
                get {
                    return builderResult.restrictType
                }
                set (value) {
                    builderResult.hasRestrictType = true
                    builderResult.restrictType = value
                }
            }
            public var hasRestrictType:Bool {
                get {
                    return builderResult.hasRestrictType
                }
            }
            @discardableResult
            public func setRestrictType(_ value:Int32) -> Apiproto.BuycaiTicket.Builder {
                self.restrictType = value
                return self
            }
            @discardableResult
            public func clearRestrictType() -> Apiproto.BuycaiTicket.Builder{
                builderResult.hasRestrictType = false
                builderResult.restrictType = Int32(0)
                return self
            }
            /// 使用限制彩种id(0:通用，n:仅可用于指定彩种id, -n:不可用于指定彩种id)
            public var restrictId:Int32 {
                get {
                    return builderResult.restrictId
                }
                set (value) {
                    builderResult.hasRestrictId = true
                    builderResult.restrictId = value
                }
            }
            public var hasRestrictId:Bool {
                get {
                    return builderResult.hasRestrictId
                }
            }
            @discardableResult
            public func setRestrictId(_ value:Int32) -> Apiproto.BuycaiTicket.Builder {
                self.restrictId = value
                return self
            }
            @discardableResult
            public func clearRestrictId() -> Apiproto.BuycaiTicket.Builder{
                builderResult.hasRestrictId = false
                builderResult.restrictId = Int32(0)
                return self
            }
            /// 购彩券状态
                public var status:Apiproto.TicketStatus {
                    get {
                        return builderResult.status
                    }
                    set (value) {
                        builderResult.hasStatus = true
                        builderResult.status = value
                    }
                }
                public var hasStatus:Bool{
                    get {
                        return builderResult.hasStatus
                    }
                }
            @discardableResult
                public func setStatus(_ value:Apiproto.TicketStatus) -> Apiproto.BuycaiTicket.Builder {
                  self.status = value
                  return self
                }
            @discardableResult
                public func clearStatus() -> Apiproto.BuycaiTicket.Builder {
                   builderResult.hasStatus = false
                   builderResult.status = .waitUse
                   return self
                }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.BuycaiTicket.Builder {
                builderResult = Apiproto.BuycaiTicket()
                return self
            }
            override public func clone() throws -> Apiproto.BuycaiTicket.Builder {
                return try Apiproto.BuycaiTicket.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.BuycaiTicket {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.BuycaiTicket {
                let returnMe:Apiproto.BuycaiTicket = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.BuycaiTicket) throws -> Apiproto.BuycaiTicket.Builder {
                if other == Apiproto.BuycaiTicket() {
                    return self
                }
                if other.hasId {
                    id = other.id
                }
                if other.hasUseBase {
                    useBase = other.useBase
                }
                if other.hasUseSub {
                    useSub = other.useSub
                }
                if other.hasMaxStack {
                    maxStack = other.maxStack
                }
                if other.hasValidStart {
                    validStart = other.validStart
                }
                if other.hasValidEnd {
                    validEnd = other.validEnd
                }
                if other.hasAddtime {
                    addtime = other.addtime
                }
                if other.hasTitle {
                    title = other.title
                }
                if other.hasRestrictDesc {
                    restrictDesc = other.restrictDesc
                }
                if other.hasRestrictType {
                    restrictType = other.restrictType
                }
                if other.hasRestrictId {
                    restrictId = other.restrictId
                }
                if other.hasStatus {
                    status = other.status
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.BuycaiTicket.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BuycaiTicket.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        id = try codedInputStream.readInt64()

                    case 16:
                        useBase = try codedInputStream.readInt32()

                    case 24:
                        useSub = try codedInputStream.readInt32()

                    case 32:
                        maxStack = try codedInputStream.readInt32()

                    case 40:
                        validStart = try codedInputStream.readInt64()

                    case 48:
                        validEnd = try codedInputStream.readInt64()

                    case 56:
                        addtime = try codedInputStream.readInt64()

                    case 66:
                        title = try codedInputStream.readString()

                    case 74:
                        restrictDesc = try codedInputStream.readString()

                    case 80:
                        restrictType = try codedInputStream.readInt32()

                    case 88:
                        restrictId = try codedInputStream.readInt32()

                    case 96:
                        let valueIntstatus = try codedInputStream.readEnum()
                        if let enumsstatus = Apiproto.TicketStatus(rawValue:valueIntstatus){
                            status = enumsstatus
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 12, value:Int64(valueIntstatus))
                        }

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.BuycaiTicket.Builder {
                let resultDecodedBuilder = Apiproto.BuycaiTicket.Builder()
                if let jsonValueId = jsonMap["id"] as? String {
                    resultDecodedBuilder.id = Int64(jsonValueId)!
                } else if let jsonValueId = jsonMap["id"] as? Int {
                    resultDecodedBuilder.id = Int64(jsonValueId)
                }
                if let jsonValueUseBase = jsonMap["useBase"] as? Int {
                    resultDecodedBuilder.useBase = Int32(jsonValueUseBase)
                } else if let jsonValueUseBase = jsonMap["useBase"] as? String {
                    resultDecodedBuilder.useBase = Int32(jsonValueUseBase)!
                }
                if let jsonValueUseSub = jsonMap["useSub"] as? Int {
                    resultDecodedBuilder.useSub = Int32(jsonValueUseSub)
                } else if let jsonValueUseSub = jsonMap["useSub"] as? String {
                    resultDecodedBuilder.useSub = Int32(jsonValueUseSub)!
                }
                if let jsonValueMaxStack = jsonMap["maxStack"] as? Int {
                    resultDecodedBuilder.maxStack = Int32(jsonValueMaxStack)
                } else if let jsonValueMaxStack = jsonMap["maxStack"] as? String {
                    resultDecodedBuilder.maxStack = Int32(jsonValueMaxStack)!
                }
                if let jsonValueValidStart = jsonMap["validStart"] as? String {
                    resultDecodedBuilder.validStart = Int64(jsonValueValidStart)!
                } else if let jsonValueValidStart = jsonMap["validStart"] as? Int {
                    resultDecodedBuilder.validStart = Int64(jsonValueValidStart)
                }
                if let jsonValueValidEnd = jsonMap["validEnd"] as? String {
                    resultDecodedBuilder.validEnd = Int64(jsonValueValidEnd)!
                } else if let jsonValueValidEnd = jsonMap["validEnd"] as? Int {
                    resultDecodedBuilder.validEnd = Int64(jsonValueValidEnd)
                }
                if let jsonValueAddtime = jsonMap["addtime"] as? String {
                    resultDecodedBuilder.addtime = Int64(jsonValueAddtime)!
                } else if let jsonValueAddtime = jsonMap["addtime"] as? Int {
                    resultDecodedBuilder.addtime = Int64(jsonValueAddtime)
                }
                if let jsonValueTitle = jsonMap["title"] as? String {
                    resultDecodedBuilder.title = jsonValueTitle
                }
                if let jsonValueRestrictDesc = jsonMap["restrictDesc"] as? String {
                    resultDecodedBuilder.restrictDesc = jsonValueRestrictDesc
                }
                if let jsonValueRestrictType = jsonMap["restrictType"] as? Int {
                    resultDecodedBuilder.restrictType = Int32(jsonValueRestrictType)
                } else if let jsonValueRestrictType = jsonMap["restrictType"] as? String {
                    resultDecodedBuilder.restrictType = Int32(jsonValueRestrictType)!
                }
                if let jsonValueRestrictId = jsonMap["restrictId"] as? Int {
                    resultDecodedBuilder.restrictId = Int32(jsonValueRestrictId)
                } else if let jsonValueRestrictId = jsonMap["restrictId"] as? String {
                    resultDecodedBuilder.restrictId = Int32(jsonValueRestrictId)!
                }
                if let jsonValueStatus = jsonMap["status"] as? String {
                    resultDecodedBuilder.status = try Apiproto.TicketStatus.fromString(str: jsonValueStatus)
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.BuycaiTicket.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.BuycaiTicket.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class BuycaiTicketInfo : GeneratedMessage {

        public static func == (lhs: Apiproto.BuycaiTicketInfo, rhs: Apiproto.BuycaiTicketInfo) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.tickets == rhs.tickets)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var tickets:Array<Apiproto.BuycaiTicket>  = Array<Apiproto.BuycaiTicket>()
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            for oneElementTickets in tickets {
                  try codedOutputStream.writeMessage(fieldNumber: 1, value:oneElementTickets)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            for oneElementTickets in tickets {
                serialize_size += oneElementTickets.computeMessageSize(fieldNumber: 1)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.BuycaiTicketInfo.Builder {
            return Apiproto.BuycaiTicketInfo.classBuilder() as! Apiproto.BuycaiTicketInfo.Builder
        }
        public func getBuilder() -> Apiproto.BuycaiTicketInfo.Builder {
            return classBuilder() as! Apiproto.BuycaiTicketInfo.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.BuycaiTicketInfo.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.BuycaiTicketInfo.Builder()
        }
        public func toBuilder() throws -> Apiproto.BuycaiTicketInfo.Builder {
            return try Apiproto.BuycaiTicketInfo.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.BuycaiTicketInfo) throws -> Apiproto.BuycaiTicketInfo.Builder {
            return try Apiproto.BuycaiTicketInfo.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if !tickets.isEmpty {
                var jsonArrayTickets:Array<Dictionary<String,Any>> = []
                for oneValueTickets in tickets {
                    let ecodedMessageTickets = try oneValueTickets.encode()
                    jsonArrayTickets.append(ecodedMessageTickets)
                }
                jsonMap["tickets"] = jsonArrayTickets
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.BuycaiTicketInfo {
            return try Apiproto.BuycaiTicketInfo.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.BuycaiTicketInfo {
            return try Apiproto.BuycaiTicketInfo.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            var ticketsElementIndex:Int = 0
            for oneElementTickets in tickets {
                output += "\(indent) tickets[\(ticketsElementIndex)] {\n"
                output += try oneElementTickets.getDescription(indent: "\(indent)  ")
                output += "\(indent)}\n"
                ticketsElementIndex += 1
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                for oneElementTickets in tickets {
                    hashCode = (hashCode &* 31) &+ oneElementTickets.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.BuycaiTicketInfo"
        }
        override public func className() -> String {
            return "Apiproto.BuycaiTicketInfo"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.BuycaiTicketInfo = Apiproto.BuycaiTicketInfo()
            public func getMessage() -> Apiproto.BuycaiTicketInfo {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var tickets:Array<Apiproto.BuycaiTicket> {
                get {
                    return builderResult.tickets
                }
                set (value) {
                    builderResult.tickets = value
                }
            }
            @discardableResult
            public func setTickets(_ value:Array<Apiproto.BuycaiTicket>) -> Apiproto.BuycaiTicketInfo.Builder {
                self.tickets = value
                return self
            }
            @discardableResult
            public func clearTickets() -> Apiproto.BuycaiTicketInfo.Builder {
                builderResult.tickets.removeAll(keepingCapacity: false)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.BuycaiTicketInfo.Builder {
                builderResult = Apiproto.BuycaiTicketInfo()
                return self
            }
            override public func clone() throws -> Apiproto.BuycaiTicketInfo.Builder {
                return try Apiproto.BuycaiTicketInfo.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.BuycaiTicketInfo {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.BuycaiTicketInfo {
                let returnMe:Apiproto.BuycaiTicketInfo = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.BuycaiTicketInfo) throws -> Apiproto.BuycaiTicketInfo.Builder {
                if other == Apiproto.BuycaiTicketInfo() {
                    return self
                }
                if !other.tickets.isEmpty  {
                     builderResult.tickets += other.tickets
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.BuycaiTicketInfo.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BuycaiTicketInfo.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        let subBuilder = Apiproto.BuycaiTicket.Builder()
                        try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                        tickets.append(subBuilder.buildPartial())

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.BuycaiTicketInfo.Builder {
                let resultDecodedBuilder = Apiproto.BuycaiTicketInfo.Builder()
                if let jsonValueTickets = jsonMap["tickets"] as? Array<Dictionary<String,Any>> {
                    var jsonArrayTickets:Array<Apiproto.BuycaiTicket> = []
                    for oneValueTickets in jsonValueTickets {
                        let messageFromStringTickets = try Apiproto.BuycaiTicket.Builder.decodeToBuilder(jsonMap:oneValueTickets).build()

                        jsonArrayTickets.append(messageFromStringTickets)
                    }
                    resultDecodedBuilder.tickets = jsonArrayTickets
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.BuycaiTicketInfo.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.BuycaiTicketInfo.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    ///---------------------------------------------------------------------------------------------------------------
    /// 资金变动记录
    final public class FundChangeRecord : GeneratedMessage {

        public static func == (lhs: Apiproto.FundChangeRecord, rhs: Apiproto.FundChangeRecord) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasTitle == rhs.hasTitle) && (!lhs.hasTitle || lhs.title == rhs.title)
            fieldCheck = fieldCheck && (lhs.hasDesc == rhs.hasDesc) && (!lhs.hasDesc || lhs.desc == rhs.desc)
            fieldCheck = fieldCheck && (lhs.hasTime == rhs.hasTime) && (!lhs.hasTime || lhs.time == rhs.time)
            fieldCheck = fieldCheck && (lhs.hasVal == rhs.hasVal) && (!lhs.hasVal || lhs.val == rhs.val)
            fieldCheck = fieldCheck && (lhs.hasRemain == rhs.hasRemain) && (!lhs.hasRemain || lhs.remain == rhs.remain)
            fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
            fieldCheck = fieldCheck && (lhs.hasUserOrderId == rhs.hasUserOrderId) && (!lhs.hasUserOrderId || lhs.userOrderId == rhs.userOrderId)
            fieldCheck = fieldCheck && (lhs.hasVendorOrderId == rhs.hasVendorOrderId) && (!lhs.hasVendorOrderId || lhs.vendorOrderId == rhs.vendorOrderId)
            fieldCheck = fieldCheck && (lhs.hasWithdrawApplyId == rhs.hasWithdrawApplyId) && (!lhs.hasWithdrawApplyId || lhs.withdrawApplyId == rhs.withdrawApplyId)
            fieldCheck = fieldCheck && (lhs.hasDirect == rhs.hasDirect) && (!lhs.hasDirect || lhs.direct == rhs.direct)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        /// 全部|充值|提现|购彩|中奖
        public fileprivate(set) var title:String = ""
        public fileprivate(set) var hasTitle:Bool = false

        /// e.g. 支付宝充值
        public fileprivate(set) var desc:String = ""
        public fileprivate(set) var hasDesc:Bool = false

        /// 时间戳
        public fileprivate(set) var time:Int64 = Int64(0)
        public fileprivate(set) var hasTime:Bool = false

        /// 变动金额
        public fileprivate(set) var val:Double = Double(0)
        public fileprivate(set) var hasVal:Bool = false

        /// 剩余金额 
        public fileprivate(set) var remain:Double = Double(0)
        public fileprivate(set) var hasRemain:Bool = false

        /// 剩余金额名称（余额|彩金)
        public fileprivate(set) var name:String = ""
        public fileprivate(set) var hasName:Bool = false

        /// 用户订单id
        public fileprivate(set) var userOrderId:Int64 = Int64(0)
        public fileprivate(set) var hasUserOrderId:Bool = false

        /// 购彩订单id
        public fileprivate(set) var vendorOrderId:Int64 = Int64(0)
        public fileprivate(set) var hasVendorOrderId:Bool = false

        /// 提现申请单id
        public fileprivate(set) var withdrawApplyId:Int64 = Int64(0)
        public fileprivate(set) var hasWithdrawApplyId:Bool = false

        ///资金流向 0:冻结/解冻, 1: 入, 2: 出
        public fileprivate(set) var direct:Int32 = Int32(0)
        public fileprivate(set) var hasDirect:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasTitle {
                try codedOutputStream.writeString(fieldNumber: 1, value:title)
            }
            if hasDesc {
                try codedOutputStream.writeString(fieldNumber: 2, value:desc)
            }
            if hasTime {
                try codedOutputStream.writeInt64(fieldNumber: 3, value:time)
            }
            if hasVal {
                try codedOutputStream.writeDouble(fieldNumber: 4, value:val)
            }
            if hasRemain {
                try codedOutputStream.writeDouble(fieldNumber: 5, value:remain)
            }
            if hasName {
                try codedOutputStream.writeString(fieldNumber: 6, value:name)
            }
            if hasUserOrderId {
                try codedOutputStream.writeInt64(fieldNumber: 7, value:userOrderId)
            }
            if hasVendorOrderId {
                try codedOutputStream.writeInt64(fieldNumber: 8, value:vendorOrderId)
            }
            if hasWithdrawApplyId {
                try codedOutputStream.writeInt64(fieldNumber: 9, value:withdrawApplyId)
            }
            if hasDirect {
                try codedOutputStream.writeInt32(fieldNumber: 10, value:direct)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasTitle {
                serialize_size += title.computeStringSize(fieldNumber: 1)
            }
            if hasDesc {
                serialize_size += desc.computeStringSize(fieldNumber: 2)
            }
            if hasTime {
                serialize_size += time.computeInt64Size(fieldNumber: 3)
            }
            if hasVal {
                serialize_size += val.computeDoubleSize(fieldNumber: 4)
            }
            if hasRemain {
                serialize_size += remain.computeDoubleSize(fieldNumber: 5)
            }
            if hasName {
                serialize_size += name.computeStringSize(fieldNumber: 6)
            }
            if hasUserOrderId {
                serialize_size += userOrderId.computeInt64Size(fieldNumber: 7)
            }
            if hasVendorOrderId {
                serialize_size += vendorOrderId.computeInt64Size(fieldNumber: 8)
            }
            if hasWithdrawApplyId {
                serialize_size += withdrawApplyId.computeInt64Size(fieldNumber: 9)
            }
            if hasDirect {
                serialize_size += direct.computeInt32Size(fieldNumber: 10)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.FundChangeRecord.Builder {
            return Apiproto.FundChangeRecord.classBuilder() as! Apiproto.FundChangeRecord.Builder
        }
        public func getBuilder() -> Apiproto.FundChangeRecord.Builder {
            return classBuilder() as! Apiproto.FundChangeRecord.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.FundChangeRecord.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.FundChangeRecord.Builder()
        }
        public func toBuilder() throws -> Apiproto.FundChangeRecord.Builder {
            return try Apiproto.FundChangeRecord.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.FundChangeRecord) throws -> Apiproto.FundChangeRecord.Builder {
            return try Apiproto.FundChangeRecord.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasTitle {
                jsonMap["title"] = title
            }
            if hasDesc {
                jsonMap["desc"] = desc
            }
            if hasTime {
                jsonMap["time"] = "\(time)"
            }
            if hasVal {
                jsonMap["val"] = Double(val)
            }
            if hasRemain {
                jsonMap["remain"] = Double(remain)
            }
            if hasName {
                jsonMap["name"] = name
            }
            if hasUserOrderId {
                jsonMap["userOrderId"] = "\(userOrderId)"
            }
            if hasVendorOrderId {
                jsonMap["vendorOrderId"] = "\(vendorOrderId)"
            }
            if hasWithdrawApplyId {
                jsonMap["withdrawApplyId"] = "\(withdrawApplyId)"
            }
            if hasDirect {
                jsonMap["direct"] = Int(direct)
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.FundChangeRecord {
            return try Apiproto.FundChangeRecord.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.FundChangeRecord {
            return try Apiproto.FundChangeRecord.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasTitle {
                output += "\(indent) title: \(title) \n"
            }
            if hasDesc {
                output += "\(indent) desc: \(desc) \n"
            }
            if hasTime {
                output += "\(indent) time: \(time) \n"
            }
            if hasVal {
                output += "\(indent) val: \(val) \n"
            }
            if hasRemain {
                output += "\(indent) remain: \(remain) \n"
            }
            if hasName {
                output += "\(indent) name: \(name) \n"
            }
            if hasUserOrderId {
                output += "\(indent) userOrderId: \(userOrderId) \n"
            }
            if hasVendorOrderId {
                output += "\(indent) vendorOrderId: \(vendorOrderId) \n"
            }
            if hasWithdrawApplyId {
                output += "\(indent) withdrawApplyId: \(withdrawApplyId) \n"
            }
            if hasDirect {
                output += "\(indent) direct: \(direct) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasTitle {
                    hashCode = (hashCode &* 31) &+ title.hashValue
                }
                if hasDesc {
                    hashCode = (hashCode &* 31) &+ desc.hashValue
                }
                if hasTime {
                    hashCode = (hashCode &* 31) &+ time.hashValue
                }
                if hasVal {
                    hashCode = (hashCode &* 31) &+ val.hashValue
                }
                if hasRemain {
                    hashCode = (hashCode &* 31) &+ remain.hashValue
                }
                if hasName {
                    hashCode = (hashCode &* 31) &+ name.hashValue
                }
                if hasUserOrderId {
                    hashCode = (hashCode &* 31) &+ userOrderId.hashValue
                }
                if hasVendorOrderId {
                    hashCode = (hashCode &* 31) &+ vendorOrderId.hashValue
                }
                if hasWithdrawApplyId {
                    hashCode = (hashCode &* 31) &+ withdrawApplyId.hashValue
                }
                if hasDirect {
                    hashCode = (hashCode &* 31) &+ direct.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.FundChangeRecord"
        }
        override public func className() -> String {
            return "Apiproto.FundChangeRecord"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.FundChangeRecord = Apiproto.FundChangeRecord()
            public func getMessage() -> Apiproto.FundChangeRecord {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            /// 全部|充值|提现|购彩|中奖
            public var title:String {
                get {
                    return builderResult.title
                }
                set (value) {
                    builderResult.hasTitle = true
                    builderResult.title = value
                }
            }
            public var hasTitle:Bool {
                get {
                    return builderResult.hasTitle
                }
            }
            @discardableResult
            public func setTitle(_ value:String) -> Apiproto.FundChangeRecord.Builder {
                self.title = value
                return self
            }
            @discardableResult
            public func clearTitle() -> Apiproto.FundChangeRecord.Builder{
                builderResult.hasTitle = false
                builderResult.title = ""
                return self
            }
            /// e.g. 支付宝充值
            public var desc:String {
                get {
                    return builderResult.desc
                }
                set (value) {
                    builderResult.hasDesc = true
                    builderResult.desc = value
                }
            }
            public var hasDesc:Bool {
                get {
                    return builderResult.hasDesc
                }
            }
            @discardableResult
            public func setDesc(_ value:String) -> Apiproto.FundChangeRecord.Builder {
                self.desc = value
                return self
            }
            @discardableResult
            public func clearDesc() -> Apiproto.FundChangeRecord.Builder{
                builderResult.hasDesc = false
                builderResult.desc = ""
                return self
            }
            /// 时间戳
            public var time:Int64 {
                get {
                    return builderResult.time
                }
                set (value) {
                    builderResult.hasTime = true
                    builderResult.time = value
                }
            }
            public var hasTime:Bool {
                get {
                    return builderResult.hasTime
                }
            }
            @discardableResult
            public func setTime(_ value:Int64) -> Apiproto.FundChangeRecord.Builder {
                self.time = value
                return self
            }
            @discardableResult
            public func clearTime() -> Apiproto.FundChangeRecord.Builder{
                builderResult.hasTime = false
                builderResult.time = Int64(0)
                return self
            }
            /// 变动金额
            public var val:Double {
                get {
                    return builderResult.val
                }
                set (value) {
                    builderResult.hasVal = true
                    builderResult.val = value
                }
            }
            public var hasVal:Bool {
                get {
                    return builderResult.hasVal
                }
            }
            @discardableResult
            public func setVal(_ value:Double) -> Apiproto.FundChangeRecord.Builder {
                self.val = value
                return self
            }
            @discardableResult
            public func clearVal() -> Apiproto.FundChangeRecord.Builder{
                builderResult.hasVal = false
                builderResult.val = Double(0)
                return self
            }
            /// 剩余金额 
            public var remain:Double {
                get {
                    return builderResult.remain
                }
                set (value) {
                    builderResult.hasRemain = true
                    builderResult.remain = value
                }
            }
            public var hasRemain:Bool {
                get {
                    return builderResult.hasRemain
                }
            }
            @discardableResult
            public func setRemain(_ value:Double) -> Apiproto.FundChangeRecord.Builder {
                self.remain = value
                return self
            }
            @discardableResult
            public func clearRemain() -> Apiproto.FundChangeRecord.Builder{
                builderResult.hasRemain = false
                builderResult.remain = Double(0)
                return self
            }
            /// 剩余金额名称（余额|彩金)
            public var name:String {
                get {
                    return builderResult.name
                }
                set (value) {
                    builderResult.hasName = true
                    builderResult.name = value
                }
            }
            public var hasName:Bool {
                get {
                    return builderResult.hasName
                }
            }
            @discardableResult
            public func setName(_ value:String) -> Apiproto.FundChangeRecord.Builder {
                self.name = value
                return self
            }
            @discardableResult
            public func clearName() -> Apiproto.FundChangeRecord.Builder{
                builderResult.hasName = false
                builderResult.name = ""
                return self
            }
            /// 用户订单id
            public var userOrderId:Int64 {
                get {
                    return builderResult.userOrderId
                }
                set (value) {
                    builderResult.hasUserOrderId = true
                    builderResult.userOrderId = value
                }
            }
            public var hasUserOrderId:Bool {
                get {
                    return builderResult.hasUserOrderId
                }
            }
            @discardableResult
            public func setUserOrderId(_ value:Int64) -> Apiproto.FundChangeRecord.Builder {
                self.userOrderId = value
                return self
            }
            @discardableResult
            public func clearUserOrderId() -> Apiproto.FundChangeRecord.Builder{
                builderResult.hasUserOrderId = false
                builderResult.userOrderId = Int64(0)
                return self
            }
            /// 购彩订单id
            public var vendorOrderId:Int64 {
                get {
                    return builderResult.vendorOrderId
                }
                set (value) {
                    builderResult.hasVendorOrderId = true
                    builderResult.vendorOrderId = value
                }
            }
            public var hasVendorOrderId:Bool {
                get {
                    return builderResult.hasVendorOrderId
                }
            }
            @discardableResult
            public func setVendorOrderId(_ value:Int64) -> Apiproto.FundChangeRecord.Builder {
                self.vendorOrderId = value
                return self
            }
            @discardableResult
            public func clearVendorOrderId() -> Apiproto.FundChangeRecord.Builder{
                builderResult.hasVendorOrderId = false
                builderResult.vendorOrderId = Int64(0)
                return self
            }
            /// 提现申请单id
            public var withdrawApplyId:Int64 {
                get {
                    return builderResult.withdrawApplyId
                }
                set (value) {
                    builderResult.hasWithdrawApplyId = true
                    builderResult.withdrawApplyId = value
                }
            }
            public var hasWithdrawApplyId:Bool {
                get {
                    return builderResult.hasWithdrawApplyId
                }
            }
            @discardableResult
            public func setWithdrawApplyId(_ value:Int64) -> Apiproto.FundChangeRecord.Builder {
                self.withdrawApplyId = value
                return self
            }
            @discardableResult
            public func clearWithdrawApplyId() -> Apiproto.FundChangeRecord.Builder{
                builderResult.hasWithdrawApplyId = false
                builderResult.withdrawApplyId = Int64(0)
                return self
            }
            ///资金流向 0:冻结/解冻, 1: 入, 2: 出
            public var direct:Int32 {
                get {
                    return builderResult.direct
                }
                set (value) {
                    builderResult.hasDirect = true
                    builderResult.direct = value
                }
            }
            public var hasDirect:Bool {
                get {
                    return builderResult.hasDirect
                }
            }
            @discardableResult
            public func setDirect(_ value:Int32) -> Apiproto.FundChangeRecord.Builder {
                self.direct = value
                return self
            }
            @discardableResult
            public func clearDirect() -> Apiproto.FundChangeRecord.Builder{
                builderResult.hasDirect = false
                builderResult.direct = Int32(0)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.FundChangeRecord.Builder {
                builderResult = Apiproto.FundChangeRecord()
                return self
            }
            override public func clone() throws -> Apiproto.FundChangeRecord.Builder {
                return try Apiproto.FundChangeRecord.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.FundChangeRecord {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.FundChangeRecord {
                let returnMe:Apiproto.FundChangeRecord = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.FundChangeRecord) throws -> Apiproto.FundChangeRecord.Builder {
                if other == Apiproto.FundChangeRecord() {
                    return self
                }
                if other.hasTitle {
                    title = other.title
                }
                if other.hasDesc {
                    desc = other.desc
                }
                if other.hasTime {
                    time = other.time
                }
                if other.hasVal {
                    val = other.val
                }
                if other.hasRemain {
                    remain = other.remain
                }
                if other.hasName {
                    name = other.name
                }
                if other.hasUserOrderId {
                    userOrderId = other.userOrderId
                }
                if other.hasVendorOrderId {
                    vendorOrderId = other.vendorOrderId
                }
                if other.hasWithdrawApplyId {
                    withdrawApplyId = other.withdrawApplyId
                }
                if other.hasDirect {
                    direct = other.direct
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.FundChangeRecord.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.FundChangeRecord.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        title = try codedInputStream.readString()

                    case 18:
                        desc = try codedInputStream.readString()

                    case 24:
                        time = try codedInputStream.readInt64()

                    case 33:
                        val = try codedInputStream.readDouble()

                    case 41:
                        remain = try codedInputStream.readDouble()

                    case 50:
                        name = try codedInputStream.readString()

                    case 56:
                        userOrderId = try codedInputStream.readInt64()

                    case 64:
                        vendorOrderId = try codedInputStream.readInt64()

                    case 72:
                        withdrawApplyId = try codedInputStream.readInt64()

                    case 80:
                        direct = try codedInputStream.readInt32()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.FundChangeRecord.Builder {
                let resultDecodedBuilder = Apiproto.FundChangeRecord.Builder()
                if let jsonValueTitle = jsonMap["title"] as? String {
                    resultDecodedBuilder.title = jsonValueTitle
                }
                if let jsonValueDesc = jsonMap["desc"] as? String {
                    resultDecodedBuilder.desc = jsonValueDesc
                }
                if let jsonValueTime = jsonMap["time"] as? String {
                    resultDecodedBuilder.time = Int64(jsonValueTime)!
                } else if let jsonValueTime = jsonMap["time"] as? Int {
                    resultDecodedBuilder.time = Int64(jsonValueTime)
                }
                if let jsonValueVal = jsonMap["val"] as? Double {
                    resultDecodedBuilder.val = Double(jsonValueVal)
                } else if let jsonValueVal = jsonMap["val"] as? String {
                    resultDecodedBuilder.val = Double(jsonValueVal)!
                }
                if let jsonValueRemain = jsonMap["remain"] as? Double {
                    resultDecodedBuilder.remain = Double(jsonValueRemain)
                } else if let jsonValueRemain = jsonMap["remain"] as? String {
                    resultDecodedBuilder.remain = Double(jsonValueRemain)!
                }
                if let jsonValueName = jsonMap["name"] as? String {
                    resultDecodedBuilder.name = jsonValueName
                }
                if let jsonValueUserOrderId = jsonMap["userOrderId"] as? String {
                    resultDecodedBuilder.userOrderId = Int64(jsonValueUserOrderId)!
                } else if let jsonValueUserOrderId = jsonMap["userOrderId"] as? Int {
                    resultDecodedBuilder.userOrderId = Int64(jsonValueUserOrderId)
                }
                if let jsonValueVendorOrderId = jsonMap["vendorOrderId"] as? String {
                    resultDecodedBuilder.vendorOrderId = Int64(jsonValueVendorOrderId)!
                } else if let jsonValueVendorOrderId = jsonMap["vendorOrderId"] as? Int {
                    resultDecodedBuilder.vendorOrderId = Int64(jsonValueVendorOrderId)
                }
                if let jsonValueWithdrawApplyId = jsonMap["withdrawApplyId"] as? String {
                    resultDecodedBuilder.withdrawApplyId = Int64(jsonValueWithdrawApplyId)!
                } else if let jsonValueWithdrawApplyId = jsonMap["withdrawApplyId"] as? Int {
                    resultDecodedBuilder.withdrawApplyId = Int64(jsonValueWithdrawApplyId)
                }
                if let jsonValueDirect = jsonMap["direct"] as? Int {
                    resultDecodedBuilder.direct = Int32(jsonValueDirect)
                } else if let jsonValueDirect = jsonMap["direct"] as? String {
                    resultDecodedBuilder.direct = Int32(jsonValueDirect)!
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.FundChangeRecord.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.FundChangeRecord.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class FundHistoryPage : GeneratedMessage {

        public static func == (lhs: Apiproto.FundHistoryPage, rhs: Apiproto.FundHistoryPage) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasType == rhs.hasType) && (!lhs.hasType || lhs.type == rhs.type)
            fieldCheck = fieldCheck && (lhs.hasPage == rhs.hasPage) && (!lhs.hasPage || lhs.page == rhs.page)
            fieldCheck = fieldCheck && (lhs.hasRange == rhs.hasRange) && (!lhs.hasRange || lhs.range == rhs.range)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }



            //Enum type declaration start 

            public enum ChangeType:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
                case all = 0
                case recharge = 1
                case withdraw = 2
                case buycai = 3
                case win = 4
                public func toString() -> String {
                    switch self {
                    case .all: return "All"
                    case .recharge: return "Recharge"
                    case .withdraw: return "Withdraw"
                    case .buycai: return "Buycai"
                    case .win: return "Win"
                    }
                }
                public static func fromString(str:String) throws -> Apiproto.FundHistoryPage.ChangeType {
                    switch str {
                    case "All":    return .all
                    case "Recharge":    return .recharge
                    case "Withdraw":    return .withdraw
                    case "Buycai":    return .buycai
                    case "Win":    return .win
                    default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
                    }
                }
                public var debugDescription:String { return getDescription() }
                public var description:String { return getDescription() }
                private func getDescription() -> String { 
                    switch self {
                    case .all: return ".all"
                    case .recharge: return ".recharge"
                    case .withdraw: return ".withdraw"
                    case .buycai: return ".buycai"
                    case .win: return ".win"
                    }
                }
                public var hashValue:Int {
                    return self.rawValue.hashValue
                }
                public static func ==(lhs:ChangeType, rhs:ChangeType) -> Bool {
                    return lhs.hashValue == rhs.hashValue
                }
            }

            //Enum type declaration end 



            //Enum type declaration start 

            public enum TimeRange:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
                case allTime = 0
                case today = 1
                case week = 2
                case month = 3
                case threeMonth = 4
                public func toString() -> String {
                    switch self {
                    case .allTime: return "AllTime"
                    case .today: return "Today"
                    case .week: return "Week"
                    case .month: return "Month"
                    case .threeMonth: return "ThreeMonth"
                    }
                }
                public static func fromString(str:String) throws -> Apiproto.FundHistoryPage.TimeRange {
                    switch str {
                    case "AllTime":    return .allTime
                    case "Today":    return .today
                    case "Week":    return .week
                    case "Month":    return .month
                    case "ThreeMonth":    return .threeMonth
                    default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
                    }
                }
                public var debugDescription:String { return getDescription() }
                public var description:String { return getDescription() }
                private func getDescription() -> String { 
                    switch self {
                    case .allTime: return ".allTime"
                    case .today: return ".today"
                    case .week: return ".week"
                    case .month: return ".month"
                    case .threeMonth: return ".threeMonth"
                    }
                }
                public var hashValue:Int {
                    return self.rawValue.hashValue
                }
                public static func ==(lhs:TimeRange, rhs:TimeRange) -> Bool {
                    return lhs.hashValue == rhs.hashValue
                }
            }

            //Enum type declaration end 

        public fileprivate(set) var type:Apiproto.FundHistoryPage.ChangeType = Apiproto.FundHistoryPage.ChangeType.all
        public fileprivate(set) var hasType:Bool = false
        /// 页索引(0开始)
        public fileprivate(set) var page:Int32 = Int32(0)
        public fileprivate(set) var hasPage:Bool = false

        public fileprivate(set) var range:Apiproto.FundHistoryPage.TimeRange = Apiproto.FundHistoryPage.TimeRange.allTime
        public fileprivate(set) var hasRange:Bool = false
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasType {
                try codedOutputStream.writeEnum(fieldNumber: 1, value:type.rawValue)
            }
            if hasPage {
                try codedOutputStream.writeInt32(fieldNumber: 2, value:page)
            }
            if hasRange {
                try codedOutputStream.writeEnum(fieldNumber: 3, value:range.rawValue)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if (hasType) {
                serialize_size += type.rawValue.computeEnumSize(fieldNumber: 1)
            }
            if hasPage {
                serialize_size += page.computeInt32Size(fieldNumber: 2)
            }
            if (hasRange) {
                serialize_size += range.rawValue.computeEnumSize(fieldNumber: 3)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.FundHistoryPage.Builder {
            return Apiproto.FundHistoryPage.classBuilder() as! Apiproto.FundHistoryPage.Builder
        }
        public func getBuilder() -> Apiproto.FundHistoryPage.Builder {
            return classBuilder() as! Apiproto.FundHistoryPage.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.FundHistoryPage.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.FundHistoryPage.Builder()
        }
        public func toBuilder() throws -> Apiproto.FundHistoryPage.Builder {
            return try Apiproto.FundHistoryPage.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.FundHistoryPage) throws -> Apiproto.FundHistoryPage.Builder {
            return try Apiproto.FundHistoryPage.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasType {
                jsonMap["type"] = type.toString()
            }
            if hasPage {
                jsonMap["page"] = Int(page)
            }
            if hasRange {
                jsonMap["range"] = range.toString()
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.FundHistoryPage {
            return try Apiproto.FundHistoryPage.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.FundHistoryPage {
            return try Apiproto.FundHistoryPage.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if (hasType) {
                output += "\(indent) type: \(type.description)\n"
            }
            if hasPage {
                output += "\(indent) page: \(page) \n"
            }
            if (hasRange) {
                output += "\(indent) range: \(range.description)\n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasType {
                     hashCode = (hashCode &* 31) &+ type.hashValue
                }
                if hasPage {
                    hashCode = (hashCode &* 31) &+ page.hashValue
                }
                if hasRange {
                     hashCode = (hashCode &* 31) &+ range.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.FundHistoryPage"
        }
        override public func className() -> String {
            return "Apiproto.FundHistoryPage"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.FundHistoryPage = Apiproto.FundHistoryPage()
            public func getMessage() -> Apiproto.FundHistoryPage {
                return builderResult
            }

            required override public init () {
                super.init()
            }
                public var type:Apiproto.FundHistoryPage.ChangeType {
                    get {
                        return builderResult.type
                    }
                    set (value) {
                        builderResult.hasType = true
                        builderResult.type = value
                    }
                }
                public var hasType:Bool{
                    get {
                        return builderResult.hasType
                    }
                }
            @discardableResult
                public func setType(_ value:Apiproto.FundHistoryPage.ChangeType) -> Apiproto.FundHistoryPage.Builder {
                  self.type = value
                  return self
                }
            @discardableResult
                public func clearType() -> Apiproto.FundHistoryPage.Builder {
                   builderResult.hasType = false
                   builderResult.type = .all
                   return self
                }
            /// 页索引(0开始)
            public var page:Int32 {
                get {
                    return builderResult.page
                }
                set (value) {
                    builderResult.hasPage = true
                    builderResult.page = value
                }
            }
            public var hasPage:Bool {
                get {
                    return builderResult.hasPage
                }
            }
            @discardableResult
            public func setPage(_ value:Int32) -> Apiproto.FundHistoryPage.Builder {
                self.page = value
                return self
            }
            @discardableResult
            public func clearPage() -> Apiproto.FundHistoryPage.Builder{
                builderResult.hasPage = false
                builderResult.page = Int32(0)
                return self
            }
                public var range:Apiproto.FundHistoryPage.TimeRange {
                    get {
                        return builderResult.range
                    }
                    set (value) {
                        builderResult.hasRange = true
                        builderResult.range = value
                    }
                }
                public var hasRange:Bool{
                    get {
                        return builderResult.hasRange
                    }
                }
            @discardableResult
                public func setRange(_ value:Apiproto.FundHistoryPage.TimeRange) -> Apiproto.FundHistoryPage.Builder {
                  self.range = value
                  return self
                }
            @discardableResult
                public func clearRange() -> Apiproto.FundHistoryPage.Builder {
                   builderResult.hasRange = false
                   builderResult.range = .allTime
                   return self
                }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.FundHistoryPage.Builder {
                builderResult = Apiproto.FundHistoryPage()
                return self
            }
            override public func clone() throws -> Apiproto.FundHistoryPage.Builder {
                return try Apiproto.FundHistoryPage.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.FundHistoryPage {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.FundHistoryPage {
                let returnMe:Apiproto.FundHistoryPage = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.FundHistoryPage) throws -> Apiproto.FundHistoryPage.Builder {
                if other == Apiproto.FundHistoryPage() {
                    return self
                }
                if other.hasType {
                    type = other.type
                }
                if other.hasPage {
                    page = other.page
                }
                if other.hasRange {
                    range = other.range
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.FundHistoryPage.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.FundHistoryPage.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        let valueInttype = try codedInputStream.readEnum()
                        if let enumstype = Apiproto.FundHistoryPage.ChangeType(rawValue:valueInttype){
                            type = enumstype
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 1, value:Int64(valueInttype))
                        }

                    case 16:
                        page = try codedInputStream.readInt32()

                    case 24:
                        let valueIntrange = try codedInputStream.readEnum()
                        if let enumsrange = Apiproto.FundHistoryPage.TimeRange(rawValue:valueIntrange){
                            range = enumsrange
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 3, value:Int64(valueIntrange))
                        }

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.FundHistoryPage.Builder {
                let resultDecodedBuilder = Apiproto.FundHistoryPage.Builder()
                if let jsonValueType = jsonMap["type"] as? String {
                    resultDecodedBuilder.type = try Apiproto.FundHistoryPage.ChangeType.fromString(str: jsonValueType)
                }
                if let jsonValuePage = jsonMap["page"] as? Int {
                    resultDecodedBuilder.page = Int32(jsonValuePage)
                } else if let jsonValuePage = jsonMap["page"] as? String {
                    resultDecodedBuilder.page = Int32(jsonValuePage)!
                }
                if let jsonValueRange = jsonMap["range"] as? String {
                    resultDecodedBuilder.range = try Apiproto.FundHistoryPage.TimeRange.fromString(str: jsonValueRange)
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.FundHistoryPage.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.FundHistoryPage.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class FundHistory : GeneratedMessage {

        public static func == (lhs: Apiproto.FundHistory, rhs: Apiproto.FundHistory) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasRecharge == rhs.hasRecharge) && (!lhs.hasRecharge || lhs.recharge == rhs.recharge)
            fieldCheck = fieldCheck && (lhs.hasWithdraw == rhs.hasWithdraw) && (!lhs.hasWithdraw || lhs.withdraw == rhs.withdraw)
            fieldCheck = fieldCheck && (lhs.hasBuycai == rhs.hasBuycai) && (!lhs.hasBuycai || lhs.buycai == rhs.buycai)
            fieldCheck = fieldCheck && (lhs.hasWin == rhs.hasWin) && (!lhs.hasWin || lhs.win == rhs.win)
            fieldCheck = fieldCheck && (lhs.hasPageSize == rhs.hasPageSize) && (!lhs.hasPageSize || lhs.pageSize == rhs.pageSize)
            fieldCheck = fieldCheck && (lhs.list == rhs.list)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var recharge:Double = Double(0)
        public fileprivate(set) var hasRecharge:Bool = false

        public fileprivate(set) var withdraw:Double = Double(0)
        public fileprivate(set) var hasWithdraw:Bool = false

        public fileprivate(set) var buycai:Double = Double(0)
        public fileprivate(set) var hasBuycai:Bool = false

        public fileprivate(set) var win:Double = Double(0)
        public fileprivate(set) var hasWin:Bool = false

        /// 分页大小
        public fileprivate(set) var pageSize:Int32 = Int32(0)
        public fileprivate(set) var hasPageSize:Bool = false

        public fileprivate(set) var list:Array<Apiproto.FundChangeRecord>  = Array<Apiproto.FundChangeRecord>()
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasRecharge {
                try codedOutputStream.writeDouble(fieldNumber: 1, value:recharge)
            }
            if hasWithdraw {
                try codedOutputStream.writeDouble(fieldNumber: 2, value:withdraw)
            }
            if hasBuycai {
                try codedOutputStream.writeDouble(fieldNumber: 3, value:buycai)
            }
            if hasWin {
                try codedOutputStream.writeDouble(fieldNumber: 4, value:win)
            }
            if hasPageSize {
                try codedOutputStream.writeInt32(fieldNumber: 5, value:pageSize)
            }
            for oneElementList in list {
                  try codedOutputStream.writeMessage(fieldNumber: 6, value:oneElementList)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasRecharge {
                serialize_size += recharge.computeDoubleSize(fieldNumber: 1)
            }
            if hasWithdraw {
                serialize_size += withdraw.computeDoubleSize(fieldNumber: 2)
            }
            if hasBuycai {
                serialize_size += buycai.computeDoubleSize(fieldNumber: 3)
            }
            if hasWin {
                serialize_size += win.computeDoubleSize(fieldNumber: 4)
            }
            if hasPageSize {
                serialize_size += pageSize.computeInt32Size(fieldNumber: 5)
            }
            for oneElementList in list {
                serialize_size += oneElementList.computeMessageSize(fieldNumber: 6)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.FundHistory.Builder {
            return Apiproto.FundHistory.classBuilder() as! Apiproto.FundHistory.Builder
        }
        public func getBuilder() -> Apiproto.FundHistory.Builder {
            return classBuilder() as! Apiproto.FundHistory.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.FundHistory.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.FundHistory.Builder()
        }
        public func toBuilder() throws -> Apiproto.FundHistory.Builder {
            return try Apiproto.FundHistory.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.FundHistory) throws -> Apiproto.FundHistory.Builder {
            return try Apiproto.FundHistory.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasRecharge {
                jsonMap["recharge"] = Double(recharge)
            }
            if hasWithdraw {
                jsonMap["withdraw"] = Double(withdraw)
            }
            if hasBuycai {
                jsonMap["buycai"] = Double(buycai)
            }
            if hasWin {
                jsonMap["win"] = Double(win)
            }
            if hasPageSize {
                jsonMap["pageSize"] = Int(pageSize)
            }
            if !list.isEmpty {
                var jsonArrayList:Array<Dictionary<String,Any>> = []
                for oneValueList in list {
                    let ecodedMessageList = try oneValueList.encode()
                    jsonArrayList.append(ecodedMessageList)
                }
                jsonMap["list"] = jsonArrayList
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.FundHistory {
            return try Apiproto.FundHistory.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.FundHistory {
            return try Apiproto.FundHistory.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasRecharge {
                output += "\(indent) recharge: \(recharge) \n"
            }
            if hasWithdraw {
                output += "\(indent) withdraw: \(withdraw) \n"
            }
            if hasBuycai {
                output += "\(indent) buycai: \(buycai) \n"
            }
            if hasWin {
                output += "\(indent) win: \(win) \n"
            }
            if hasPageSize {
                output += "\(indent) pageSize: \(pageSize) \n"
            }
            var listElementIndex:Int = 0
            for oneElementList in list {
                output += "\(indent) list[\(listElementIndex)] {\n"
                output += try oneElementList.getDescription(indent: "\(indent)  ")
                output += "\(indent)}\n"
                listElementIndex += 1
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasRecharge {
                    hashCode = (hashCode &* 31) &+ recharge.hashValue
                }
                if hasWithdraw {
                    hashCode = (hashCode &* 31) &+ withdraw.hashValue
                }
                if hasBuycai {
                    hashCode = (hashCode &* 31) &+ buycai.hashValue
                }
                if hasWin {
                    hashCode = (hashCode &* 31) &+ win.hashValue
                }
                if hasPageSize {
                    hashCode = (hashCode &* 31) &+ pageSize.hashValue
                }
                for oneElementList in list {
                    hashCode = (hashCode &* 31) &+ oneElementList.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.FundHistory"
        }
        override public func className() -> String {
            return "Apiproto.FundHistory"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.FundHistory = Apiproto.FundHistory()
            public func getMessage() -> Apiproto.FundHistory {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var recharge:Double {
                get {
                    return builderResult.recharge
                }
                set (value) {
                    builderResult.hasRecharge = true
                    builderResult.recharge = value
                }
            }
            public var hasRecharge:Bool {
                get {
                    return builderResult.hasRecharge
                }
            }
            @discardableResult
            public func setRecharge(_ value:Double) -> Apiproto.FundHistory.Builder {
                self.recharge = value
                return self
            }
            @discardableResult
            public func clearRecharge() -> Apiproto.FundHistory.Builder{
                builderResult.hasRecharge = false
                builderResult.recharge = Double(0)
                return self
            }
            public var withdraw:Double {
                get {
                    return builderResult.withdraw
                }
                set (value) {
                    builderResult.hasWithdraw = true
                    builderResult.withdraw = value
                }
            }
            public var hasWithdraw:Bool {
                get {
                    return builderResult.hasWithdraw
                }
            }
            @discardableResult
            public func setWithdraw(_ value:Double) -> Apiproto.FundHistory.Builder {
                self.withdraw = value
                return self
            }
            @discardableResult
            public func clearWithdraw() -> Apiproto.FundHistory.Builder{
                builderResult.hasWithdraw = false
                builderResult.withdraw = Double(0)
                return self
            }
            public var buycai:Double {
                get {
                    return builderResult.buycai
                }
                set (value) {
                    builderResult.hasBuycai = true
                    builderResult.buycai = value
                }
            }
            public var hasBuycai:Bool {
                get {
                    return builderResult.hasBuycai
                }
            }
            @discardableResult
            public func setBuycai(_ value:Double) -> Apiproto.FundHistory.Builder {
                self.buycai = value
                return self
            }
            @discardableResult
            public func clearBuycai() -> Apiproto.FundHistory.Builder{
                builderResult.hasBuycai = false
                builderResult.buycai = Double(0)
                return self
            }
            public var win:Double {
                get {
                    return builderResult.win
                }
                set (value) {
                    builderResult.hasWin = true
                    builderResult.win = value
                }
            }
            public var hasWin:Bool {
                get {
                    return builderResult.hasWin
                }
            }
            @discardableResult
            public func setWin(_ value:Double) -> Apiproto.FundHistory.Builder {
                self.win = value
                return self
            }
            @discardableResult
            public func clearWin() -> Apiproto.FundHistory.Builder{
                builderResult.hasWin = false
                builderResult.win = Double(0)
                return self
            }
            /// 分页大小
            public var pageSize:Int32 {
                get {
                    return builderResult.pageSize
                }
                set (value) {
                    builderResult.hasPageSize = true
                    builderResult.pageSize = value
                }
            }
            public var hasPageSize:Bool {
                get {
                    return builderResult.hasPageSize
                }
            }
            @discardableResult
            public func setPageSize(_ value:Int32) -> Apiproto.FundHistory.Builder {
                self.pageSize = value
                return self
            }
            @discardableResult
            public func clearPageSize() -> Apiproto.FundHistory.Builder{
                builderResult.hasPageSize = false
                builderResult.pageSize = Int32(0)
                return self
            }
            public var list:Array<Apiproto.FundChangeRecord> {
                get {
                    return builderResult.list
                }
                set (value) {
                    builderResult.list = value
                }
            }
            @discardableResult
            public func setList(_ value:Array<Apiproto.FundChangeRecord>) -> Apiproto.FundHistory.Builder {
                self.list = value
                return self
            }
            @discardableResult
            public func clearList() -> Apiproto.FundHistory.Builder {
                builderResult.list.removeAll(keepingCapacity: false)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.FundHistory.Builder {
                builderResult = Apiproto.FundHistory()
                return self
            }
            override public func clone() throws -> Apiproto.FundHistory.Builder {
                return try Apiproto.FundHistory.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.FundHistory {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.FundHistory {
                let returnMe:Apiproto.FundHistory = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.FundHistory) throws -> Apiproto.FundHistory.Builder {
                if other == Apiproto.FundHistory() {
                    return self
                }
                if other.hasRecharge {
                    recharge = other.recharge
                }
                if other.hasWithdraw {
                    withdraw = other.withdraw
                }
                if other.hasBuycai {
                    buycai = other.buycai
                }
                if other.hasWin {
                    win = other.win
                }
                if other.hasPageSize {
                    pageSize = other.pageSize
                }
                if !other.list.isEmpty  {
                     builderResult.list += other.list
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.FundHistory.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.FundHistory.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 9:
                        recharge = try codedInputStream.readDouble()

                    case 17:
                        withdraw = try codedInputStream.readDouble()

                    case 25:
                        buycai = try codedInputStream.readDouble()

                    case 33:
                        win = try codedInputStream.readDouble()

                    case 40:
                        pageSize = try codedInputStream.readInt32()

                    case 50:
                        let subBuilder = Apiproto.FundChangeRecord.Builder()
                        try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                        list.append(subBuilder.buildPartial())

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.FundHistory.Builder {
                let resultDecodedBuilder = Apiproto.FundHistory.Builder()
                if let jsonValueRecharge = jsonMap["recharge"] as? Double {
                    resultDecodedBuilder.recharge = Double(jsonValueRecharge)
                } else if let jsonValueRecharge = jsonMap["recharge"] as? String {
                    resultDecodedBuilder.recharge = Double(jsonValueRecharge)!
                }
                if let jsonValueWithdraw = jsonMap["withdraw"] as? Double {
                    resultDecodedBuilder.withdraw = Double(jsonValueWithdraw)
                } else if let jsonValueWithdraw = jsonMap["withdraw"] as? String {
                    resultDecodedBuilder.withdraw = Double(jsonValueWithdraw)!
                }
                if let jsonValueBuycai = jsonMap["buycai"] as? Double {
                    resultDecodedBuilder.buycai = Double(jsonValueBuycai)
                } else if let jsonValueBuycai = jsonMap["buycai"] as? String {
                    resultDecodedBuilder.buycai = Double(jsonValueBuycai)!
                }
                if let jsonValueWin = jsonMap["win"] as? Double {
                    resultDecodedBuilder.win = Double(jsonValueWin)
                } else if let jsonValueWin = jsonMap["win"] as? String {
                    resultDecodedBuilder.win = Double(jsonValueWin)!
                }
                if let jsonValuePageSize = jsonMap["pageSize"] as? Int {
                    resultDecodedBuilder.pageSize = Int32(jsonValuePageSize)
                } else if let jsonValuePageSize = jsonMap["pageSize"] as? String {
                    resultDecodedBuilder.pageSize = Int32(jsonValuePageSize)!
                }
                if let jsonValueList = jsonMap["list"] as? Array<Dictionary<String,Any>> {
                    var jsonArrayList:Array<Apiproto.FundChangeRecord> = []
                    for oneValueList in jsonValueList {
                        let messageFromStringList = try Apiproto.FundChangeRecord.Builder.decodeToBuilder(jsonMap:oneValueList).build()

                        jsonArrayList.append(messageFromStringList)
                    }
                    resultDecodedBuilder.list = jsonArrayList
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.FundHistory.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.FundHistory.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

}
extension Apiproto.FundInfo: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.FundInfo> {
        var mergedArray = Array<Apiproto.FundInfo>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.FundInfo? {
        return try Apiproto.FundInfo.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.FundInfo {
        return try Apiproto.FundInfo.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.FundRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.FundInfo {
        return try Apiproto.FundInfo.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.FundInfo {
        return try Apiproto.FundInfo.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.FundInfo {
        return try Apiproto.FundInfo.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.FundInfo {
        return try Apiproto.FundInfo.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.FundInfo {
        return try Apiproto.FundInfo.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "total": return self.total
        case "balance": return self.balance
        case "cai": return self.cai
        case "freeze": return self.freeze
        case "credits": return self.credits
        case "kxd": return self.kxd
        default: return nil
        }
    }
}
extension Apiproto.FundInfo.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "total": return self.total
            case "balance": return self.balance
            case "cai": return self.cai
            case "freeze": return self.freeze
            case "credits": return self.credits
            case "kxd": return self.kxd
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "total":
                guard let newSubscriptValue = newSubscriptValue as? Double else {
                    return
                }
                self.total = newSubscriptValue
            case "balance":
                guard let newSubscriptValue = newSubscriptValue as? Double else {
                    return
                }
                self.balance = newSubscriptValue
            case "cai":
                guard let newSubscriptValue = newSubscriptValue as? Double else {
                    return
                }
                self.cai = newSubscriptValue
            case "freeze":
                guard let newSubscriptValue = newSubscriptValue as? Double else {
                    return
                }
                self.freeze = newSubscriptValue
            case "credits":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.credits = newSubscriptValue
            case "kxd":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.kxd = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.Bankcard: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.Bankcard> {
        var mergedArray = Array<Apiproto.Bankcard>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.Bankcard? {
        return try Apiproto.Bankcard.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.Bankcard {
        return try Apiproto.Bankcard.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.FundRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.Bankcard {
        return try Apiproto.Bankcard.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.Bankcard {
        return try Apiproto.Bankcard.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.Bankcard {
        return try Apiproto.Bankcard.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.Bankcard {
        return try Apiproto.Bankcard.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.Bankcard {
        return try Apiproto.Bankcard.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "id": return self.id
        case "cardno": return self.cardno
        case "bankname": return self.bankname
        case "cardtype": return self.cardtype
        default: return nil
        }
    }
}
extension Apiproto.Bankcard.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "id": return self.id
            case "cardno": return self.cardno
            case "bankname": return self.bankname
            case "cardtype": return self.cardtype
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "id":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.id = newSubscriptValue
            case "cardno":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.cardno = newSubscriptValue
            case "bankname":
                guard let newSubscriptValue = newSubscriptValue as? Apiproto.Bankname else {
                    return
                }
                self.bankname = newSubscriptValue
            case "cardtype":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.cardtype = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.AddBankcardRequest: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.AddBankcardRequest> {
        var mergedArray = Array<Apiproto.AddBankcardRequest>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.AddBankcardRequest? {
        return try Apiproto.AddBankcardRequest.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.AddBankcardRequest {
        return try Apiproto.AddBankcardRequest.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.FundRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.AddBankcardRequest {
        return try Apiproto.AddBankcardRequest.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.AddBankcardRequest {
        return try Apiproto.AddBankcardRequest.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.AddBankcardRequest {
        return try Apiproto.AddBankcardRequest.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.AddBankcardRequest {
        return try Apiproto.AddBankcardRequest.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.AddBankcardRequest {
        return try Apiproto.AddBankcardRequest.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "phone": return self.phone
        case "smsCode": return self.smsCode
        case "cardno": return self.cardno
        case "bankname": return self.bankname
        default: return nil
        }
    }
}
extension Apiproto.AddBankcardRequest.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "phone": return self.phone
            case "smsCode": return self.smsCode
            case "cardno": return self.cardno
            case "bankname": return self.bankname
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "phone":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.phone = newSubscriptValue
            case "smsCode":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.smsCode = newSubscriptValue
            case "cardno":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.cardno = newSubscriptValue
            case "bankname":
                guard let newSubscriptValue = newSubscriptValue as? Apiproto.Bankname else {
                    return
                }
                self.bankname = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.BuycaiTicket: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.BuycaiTicket> {
        var mergedArray = Array<Apiproto.BuycaiTicket>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.BuycaiTicket? {
        return try Apiproto.BuycaiTicket.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.BuycaiTicket {
        return try Apiproto.BuycaiTicket.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.FundRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BuycaiTicket {
        return try Apiproto.BuycaiTicket.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.BuycaiTicket {
        return try Apiproto.BuycaiTicket.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BuycaiTicket {
        return try Apiproto.BuycaiTicket.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.BuycaiTicket {
        return try Apiproto.BuycaiTicket.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BuycaiTicket {
        return try Apiproto.BuycaiTicket.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "id": return self.id
        case "useBase": return self.useBase
        case "useSub": return self.useSub
        case "maxStack": return self.maxStack
        case "validStart": return self.validStart
        case "validEnd": return self.validEnd
        case "addtime": return self.addtime
        case "title": return self.title
        case "restrictDesc": return self.restrictDesc
        case "restrictType": return self.restrictType
        case "restrictId": return self.restrictId
        case "status": return self.status
        default: return nil
        }
    }
}
extension Apiproto.BuycaiTicket.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "id": return self.id
            case "useBase": return self.useBase
            case "useSub": return self.useSub
            case "maxStack": return self.maxStack
            case "validStart": return self.validStart
            case "validEnd": return self.validEnd
            case "addtime": return self.addtime
            case "title": return self.title
            case "restrictDesc": return self.restrictDesc
            case "restrictType": return self.restrictType
            case "restrictId": return self.restrictId
            case "status": return self.status
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "id":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.id = newSubscriptValue
            case "useBase":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.useBase = newSubscriptValue
            case "useSub":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.useSub = newSubscriptValue
            case "maxStack":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.maxStack = newSubscriptValue
            case "validStart":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.validStart = newSubscriptValue
            case "validEnd":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.validEnd = newSubscriptValue
            case "addtime":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.addtime = newSubscriptValue
            case "title":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.title = newSubscriptValue
            case "restrictDesc":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.restrictDesc = newSubscriptValue
            case "restrictType":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.restrictType = newSubscriptValue
            case "restrictId":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.restrictId = newSubscriptValue
            case "status":
                guard let newSubscriptValue = newSubscriptValue as? Apiproto.TicketStatus else {
                    return
                }
                self.status = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.BuycaiTicketInfo: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.BuycaiTicketInfo> {
        var mergedArray = Array<Apiproto.BuycaiTicketInfo>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.BuycaiTicketInfo? {
        return try Apiproto.BuycaiTicketInfo.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.BuycaiTicketInfo {
        return try Apiproto.BuycaiTicketInfo.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.FundRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BuycaiTicketInfo {
        return try Apiproto.BuycaiTicketInfo.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.BuycaiTicketInfo {
        return try Apiproto.BuycaiTicketInfo.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BuycaiTicketInfo {
        return try Apiproto.BuycaiTicketInfo.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.BuycaiTicketInfo {
        return try Apiproto.BuycaiTicketInfo.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BuycaiTicketInfo {
        return try Apiproto.BuycaiTicketInfo.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "tickets": return self.tickets
        default: return nil
        }
    }
}
extension Apiproto.BuycaiTicketInfo.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "tickets": return self.tickets
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "tickets":
                guard let newSubscriptValue = newSubscriptValue as? Array<Apiproto.BuycaiTicket> else {
                    return
                }
                self.tickets = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.FundChangeRecord: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.FundChangeRecord> {
        var mergedArray = Array<Apiproto.FundChangeRecord>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.FundChangeRecord? {
        return try Apiproto.FundChangeRecord.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.FundChangeRecord {
        return try Apiproto.FundChangeRecord.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.FundRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.FundChangeRecord {
        return try Apiproto.FundChangeRecord.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.FundChangeRecord {
        return try Apiproto.FundChangeRecord.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.FundChangeRecord {
        return try Apiproto.FundChangeRecord.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.FundChangeRecord {
        return try Apiproto.FundChangeRecord.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.FundChangeRecord {
        return try Apiproto.FundChangeRecord.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "title": return self.title
        case "desc": return self.desc
        case "time": return self.time
        case "val": return self.val
        case "remain": return self.remain
        case "name": return self.name
        case "userOrderId": return self.userOrderId
        case "vendorOrderId": return self.vendorOrderId
        case "withdrawApplyId": return self.withdrawApplyId
        case "direct": return self.direct
        default: return nil
        }
    }
}
extension Apiproto.FundChangeRecord.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "title": return self.title
            case "desc": return self.desc
            case "time": return self.time
            case "val": return self.val
            case "remain": return self.remain
            case "name": return self.name
            case "userOrderId": return self.userOrderId
            case "vendorOrderId": return self.vendorOrderId
            case "withdrawApplyId": return self.withdrawApplyId
            case "direct": return self.direct
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "title":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.title = newSubscriptValue
            case "desc":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.desc = newSubscriptValue
            case "time":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.time = newSubscriptValue
            case "val":
                guard let newSubscriptValue = newSubscriptValue as? Double else {
                    return
                }
                self.val = newSubscriptValue
            case "remain":
                guard let newSubscriptValue = newSubscriptValue as? Double else {
                    return
                }
                self.remain = newSubscriptValue
            case "name":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.name = newSubscriptValue
            case "userOrderId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.userOrderId = newSubscriptValue
            case "vendorOrderId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.vendorOrderId = newSubscriptValue
            case "withdrawApplyId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.withdrawApplyId = newSubscriptValue
            case "direct":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.direct = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.FundHistoryPage: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.FundHistoryPage> {
        var mergedArray = Array<Apiproto.FundHistoryPage>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.FundHistoryPage? {
        return try Apiproto.FundHistoryPage.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.FundHistoryPage {
        return try Apiproto.FundHistoryPage.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.FundRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.FundHistoryPage {
        return try Apiproto.FundHistoryPage.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.FundHistoryPage {
        return try Apiproto.FundHistoryPage.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.FundHistoryPage {
        return try Apiproto.FundHistoryPage.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.FundHistoryPage {
        return try Apiproto.FundHistoryPage.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.FundHistoryPage {
        return try Apiproto.FundHistoryPage.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "type": return self.type
        case "page": return self.page
        case "range": return self.range
        default: return nil
        }
    }
}
extension Apiproto.FundHistoryPage.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "type": return self.type
            case "page": return self.page
            case "range": return self.range
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "type":
                guard let newSubscriptValue = newSubscriptValue as? Apiproto.FundHistoryPage.ChangeType else {
                    return
                }
                self.type = newSubscriptValue
            case "page":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.page = newSubscriptValue
            case "range":
                guard let newSubscriptValue = newSubscriptValue as? Apiproto.FundHistoryPage.TimeRange else {
                    return
                }
                self.range = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.FundHistory: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.FundHistory> {
        var mergedArray = Array<Apiproto.FundHistory>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.FundHistory? {
        return try Apiproto.FundHistory.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.FundHistory {
        return try Apiproto.FundHistory.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.FundRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.FundHistory {
        return try Apiproto.FundHistory.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.FundHistory {
        return try Apiproto.FundHistory.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.FundHistory {
        return try Apiproto.FundHistory.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.FundHistory {
        return try Apiproto.FundHistory.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.FundHistory {
        return try Apiproto.FundHistory.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "recharge": return self.recharge
        case "withdraw": return self.withdraw
        case "buycai": return self.buycai
        case "win": return self.win
        case "pageSize": return self.pageSize
        case "list": return self.list
        default: return nil
        }
    }
}
extension Apiproto.FundHistory.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "recharge": return self.recharge
            case "withdraw": return self.withdraw
            case "buycai": return self.buycai
            case "win": return self.win
            case "pageSize": return self.pageSize
            case "list": return self.list
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "recharge":
                guard let newSubscriptValue = newSubscriptValue as? Double else {
                    return
                }
                self.recharge = newSubscriptValue
            case "withdraw":
                guard let newSubscriptValue = newSubscriptValue as? Double else {
                    return
                }
                self.withdraw = newSubscriptValue
            case "buycai":
                guard let newSubscriptValue = newSubscriptValue as? Double else {
                    return
                }
                self.buycai = newSubscriptValue
            case "win":
                guard let newSubscriptValue = newSubscriptValue as? Double else {
                    return
                }
                self.win = newSubscriptValue
            case "pageSize":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.pageSize = newSubscriptValue
            case "list":
                guard let newSubscriptValue = newSubscriptValue as? Array<Apiproto.FundChangeRecord> else {
                    return
                }
                self.list = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
