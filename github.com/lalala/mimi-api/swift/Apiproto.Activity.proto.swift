/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "activity.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Apiproto { }

public extension Apiproto {
    public struct ActivityRoot {
        public static let `default` = ActivityRoot()
        public var extensionRegistry:ExtensionRegistry

        init() {
            extensionRegistry = ExtensionRegistry()
            registerAllExtensions(registry: extensionRegistry)
        }
        public func registerAllExtensions(registry: ExtensionRegistry) {
        }
    }

    ///参与活动要完成的任务
    final public class Task : GeneratedMessage {

        public static func == (lhs: Apiproto.Task, rhs: Apiproto.Task) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
            fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
            fieldCheck = fieldCheck && (lhs.hasDes == rhs.hasDes) && (!lhs.hasDes || lhs.des == rhs.des)
            fieldCheck = fieldCheck && (lhs.hasIsComplete == rhs.hasIsComplete) && (!lhs.hasIsComplete || lhs.isComplete == rhs.isComplete)
            fieldCheck = fieldCheck && (lhs.hasType == rhs.hasType) && (!lhs.hasType || lhs.type == rhs.type)
            fieldCheck = fieldCheck && (lhs.hasMoney == rhs.hasMoney) && (!lhs.hasMoney || lhs.money == rhs.money)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var id:Int64 = Int64(0)
        public fileprivate(set) var hasId:Bool = false

        public fileprivate(set) var name:String = ""
        public fileprivate(set) var hasName:Bool = false

        public fileprivate(set) var des:String = ""
        public fileprivate(set) var hasDes:Bool = false

        ///用户是否已完成该任务
        public fileprivate(set) var isComplete:Bool = false
        public fileprivate(set) var hasIsComplete:Bool = false

        public fileprivate(set) var type:String = ""
        public fileprivate(set) var hasType:Bool = false

        public fileprivate(set) var money:Float = Float(0)
        public fileprivate(set) var hasMoney:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasId {
                try codedOutputStream.writeInt64(fieldNumber: 1, value:id)
            }
            if hasName {
                try codedOutputStream.writeString(fieldNumber: 2, value:name)
            }
            if hasDes {
                try codedOutputStream.writeString(fieldNumber: 3, value:des)
            }
            if hasIsComplete {
                try codedOutputStream.writeBool(fieldNumber: 4, value:isComplete)
            }
            if hasType {
                try codedOutputStream.writeString(fieldNumber: 5, value:type)
            }
            if hasMoney {
                try codedOutputStream.writeFloat(fieldNumber: 6, value:money)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasId {
                serialize_size += id.computeInt64Size(fieldNumber: 1)
            }
            if hasName {
                serialize_size += name.computeStringSize(fieldNumber: 2)
            }
            if hasDes {
                serialize_size += des.computeStringSize(fieldNumber: 3)
            }
            if hasIsComplete {
                serialize_size += isComplete.computeBoolSize(fieldNumber: 4)
            }
            if hasType {
                serialize_size += type.computeStringSize(fieldNumber: 5)
            }
            if hasMoney {
                serialize_size += money.computeFloatSize(fieldNumber: 6)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.Task.Builder {
            return Apiproto.Task.classBuilder() as! Apiproto.Task.Builder
        }
        public func getBuilder() -> Apiproto.Task.Builder {
            return classBuilder() as! Apiproto.Task.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.Task.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.Task.Builder()
        }
        public func toBuilder() throws -> Apiproto.Task.Builder {
            return try Apiproto.Task.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.Task) throws -> Apiproto.Task.Builder {
            return try Apiproto.Task.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasId {
                jsonMap["id"] = "\(id)"
            }
            if hasName {
                jsonMap["name"] = name
            }
            if hasDes {
                jsonMap["des"] = des
            }
            if hasIsComplete {
                jsonMap["isComplete"] = isComplete
            }
            if hasType {
                jsonMap["type"] = type
            }
            if hasMoney {
                jsonMap["money"] = Float(money)
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.Task {
            return try Apiproto.Task.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.Task {
            return try Apiproto.Task.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasId {
                output += "\(indent) id: \(id) \n"
            }
            if hasName {
                output += "\(indent) name: \(name) \n"
            }
            if hasDes {
                output += "\(indent) des: \(des) \n"
            }
            if hasIsComplete {
                output += "\(indent) isComplete: \(isComplete) \n"
            }
            if hasType {
                output += "\(indent) type: \(type) \n"
            }
            if hasMoney {
                output += "\(indent) money: \(money) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasId {
                    hashCode = (hashCode &* 31) &+ id.hashValue
                }
                if hasName {
                    hashCode = (hashCode &* 31) &+ name.hashValue
                }
                if hasDes {
                    hashCode = (hashCode &* 31) &+ des.hashValue
                }
                if hasIsComplete {
                    hashCode = (hashCode &* 31) &+ isComplete.hashValue
                }
                if hasType {
                    hashCode = (hashCode &* 31) &+ type.hashValue
                }
                if hasMoney {
                    hashCode = (hashCode &* 31) &+ money.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.Task"
        }
        override public func className() -> String {
            return "Apiproto.Task"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.Task = Apiproto.Task()
            public func getMessage() -> Apiproto.Task {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var id:Int64 {
                get {
                    return builderResult.id
                }
                set (value) {
                    builderResult.hasId = true
                    builderResult.id = value
                }
            }
            public var hasId:Bool {
                get {
                    return builderResult.hasId
                }
            }
            @discardableResult
            public func setId(_ value:Int64) -> Apiproto.Task.Builder {
                self.id = value
                return self
            }
            @discardableResult
            public func clearId() -> Apiproto.Task.Builder{
                builderResult.hasId = false
                builderResult.id = Int64(0)
                return self
            }
            public var name:String {
                get {
                    return builderResult.name
                }
                set (value) {
                    builderResult.hasName = true
                    builderResult.name = value
                }
            }
            public var hasName:Bool {
                get {
                    return builderResult.hasName
                }
            }
            @discardableResult
            public func setName(_ value:String) -> Apiproto.Task.Builder {
                self.name = value
                return self
            }
            @discardableResult
            public func clearName() -> Apiproto.Task.Builder{
                builderResult.hasName = false
                builderResult.name = ""
                return self
            }
            public var des:String {
                get {
                    return builderResult.des
                }
                set (value) {
                    builderResult.hasDes = true
                    builderResult.des = value
                }
            }
            public var hasDes:Bool {
                get {
                    return builderResult.hasDes
                }
            }
            @discardableResult
            public func setDes(_ value:String) -> Apiproto.Task.Builder {
                self.des = value
                return self
            }
            @discardableResult
            public func clearDes() -> Apiproto.Task.Builder{
                builderResult.hasDes = false
                builderResult.des = ""
                return self
            }
            ///用户是否已完成该任务
            public var isComplete:Bool {
                get {
                    return builderResult.isComplete
                }
                set (value) {
                    builderResult.hasIsComplete = true
                    builderResult.isComplete = value
                }
            }
            public var hasIsComplete:Bool {
                get {
                    return builderResult.hasIsComplete
                }
            }
            @discardableResult
            public func setIsComplete(_ value:Bool) -> Apiproto.Task.Builder {
                self.isComplete = value
                return self
            }
            @discardableResult
            public func clearIsComplete() -> Apiproto.Task.Builder{
                builderResult.hasIsComplete = false
                builderResult.isComplete = false
                return self
            }
            public var type:String {
                get {
                    return builderResult.type
                }
                set (value) {
                    builderResult.hasType = true
                    builderResult.type = value
                }
            }
            public var hasType:Bool {
                get {
                    return builderResult.hasType
                }
            }
            @discardableResult
            public func setType(_ value:String) -> Apiproto.Task.Builder {
                self.type = value
                return self
            }
            @discardableResult
            public func clearType() -> Apiproto.Task.Builder{
                builderResult.hasType = false
                builderResult.type = ""
                return self
            }
            public var money:Float {
                get {
                    return builderResult.money
                }
                set (value) {
                    builderResult.hasMoney = true
                    builderResult.money = value
                }
            }
            public var hasMoney:Bool {
                get {
                    return builderResult.hasMoney
                }
            }
            @discardableResult
            public func setMoney(_ value:Float) -> Apiproto.Task.Builder {
                self.money = value
                return self
            }
            @discardableResult
            public func clearMoney() -> Apiproto.Task.Builder{
                builderResult.hasMoney = false
                builderResult.money = Float(0)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.Task.Builder {
                builderResult = Apiproto.Task()
                return self
            }
            override public func clone() throws -> Apiproto.Task.Builder {
                return try Apiproto.Task.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.Task {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.Task {
                let returnMe:Apiproto.Task = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.Task) throws -> Apiproto.Task.Builder {
                if other == Apiproto.Task() {
                    return self
                }
                if other.hasId {
                    id = other.id
                }
                if other.hasName {
                    name = other.name
                }
                if other.hasDes {
                    des = other.des
                }
                if other.hasIsComplete {
                    isComplete = other.isComplete
                }
                if other.hasType {
                    type = other.type
                }
                if other.hasMoney {
                    money = other.money
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.Task.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.Task.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        id = try codedInputStream.readInt64()

                    case 18:
                        name = try codedInputStream.readString()

                    case 26:
                        des = try codedInputStream.readString()

                    case 32:
                        isComplete = try codedInputStream.readBool()

                    case 42:
                        type = try codedInputStream.readString()

                    case 53:
                        money = try codedInputStream.readFloat()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.Task.Builder {
                let resultDecodedBuilder = Apiproto.Task.Builder()
                if let jsonValueId = jsonMap["id"] as? String {
                    resultDecodedBuilder.id = Int64(jsonValueId)!
                } else if let jsonValueId = jsonMap["id"] as? Int {
                    resultDecodedBuilder.id = Int64(jsonValueId)
                }
                if let jsonValueName = jsonMap["name"] as? String {
                    resultDecodedBuilder.name = jsonValueName
                }
                if let jsonValueDes = jsonMap["des"] as? String {
                    resultDecodedBuilder.des = jsonValueDes
                }
                if let jsonValueIsComplete = jsonMap["isComplete"] as? Bool {
                    resultDecodedBuilder.isComplete = jsonValueIsComplete
                }
                if let jsonValueType = jsonMap["type"] as? String {
                    resultDecodedBuilder.type = jsonValueType
                }
                if let jsonValueMoney = jsonMap["money"] as? Float {
                    resultDecodedBuilder.money = Float(jsonValueMoney)
                } else if let jsonValueMoney = jsonMap["money"] as? String {
                    resultDecodedBuilder.money = Float(jsonValueMoney)!
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.Task.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.Task.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    ///活动
    final public class Activity : GeneratedMessage {

        public static func == (lhs: Apiproto.Activity, rhs: Apiproto.Activity) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
            fieldCheck = fieldCheck && (lhs.hasTitle == rhs.hasTitle) && (!lhs.hasTitle || lhs.title == rhs.title)
            fieldCheck = fieldCheck && (lhs.hasDes == rhs.hasDes) && (!lhs.hasDes || lhs.des == rhs.des)
            fieldCheck = fieldCheck && (lhs.hasLogo == rhs.hasLogo) && (!lhs.hasLogo || lhs.logo == rhs.logo)
            fieldCheck = fieldCheck && (lhs.hasNum == rhs.hasNum) && (!lhs.hasNum || lhs.num == rhs.num)
            fieldCheck = fieldCheck && (lhs.hasLeftNum == rhs.hasLeftNum) && (!lhs.hasLeftNum || lhs.leftNum == rhs.leftNum)
            fieldCheck = fieldCheck && (lhs.hasStarttime == rhs.hasStarttime) && (!lhs.hasStarttime || lhs.starttime == rhs.starttime)
            fieldCheck = fieldCheck && (lhs.hasEndtime == rhs.hasEndtime) && (!lhs.hasEndtime || lhs.endtime == rhs.endtime)
            fieldCheck = fieldCheck && (lhs.hasHasJoin == rhs.hasHasJoin) && (!lhs.hasHasJoin || lhs.hasJoin == rhs.hasJoin)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var id:Int64 = Int64(0)
        public fileprivate(set) var hasId:Bool = false

        public fileprivate(set) var title:String = ""
        public fileprivate(set) var hasTitle:Bool = false

        public fileprivate(set) var des:String = ""
        public fileprivate(set) var hasDes:Bool = false

        public fileprivate(set) var logo:String = ""
        public fileprivate(set) var hasLogo:Bool = false

        public fileprivate(set) var num:Int64 = Int64(0)
        public fileprivate(set) var hasNum:Bool = false

        public fileprivate(set) var leftNum:Int64 = Int64(0)
        public fileprivate(set) var hasLeftNum:Bool = false

        public fileprivate(set) var starttime:Int64 = Int64(0)
        public fileprivate(set) var hasStarttime:Bool = false

        public fileprivate(set) var endtime:Int64 = Int64(0)
        public fileprivate(set) var hasEndtime:Bool = false

        public fileprivate(set) var hasJoin:Bool = false
        public fileprivate(set) var hasHasJoin:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasId {
                try codedOutputStream.writeInt64(fieldNumber: 1, value:id)
            }
            if hasTitle {
                try codedOutputStream.writeString(fieldNumber: 2, value:title)
            }
            if hasDes {
                try codedOutputStream.writeString(fieldNumber: 3, value:des)
            }
            if hasLogo {
                try codedOutputStream.writeString(fieldNumber: 4, value:logo)
            }
            if hasNum {
                try codedOutputStream.writeInt64(fieldNumber: 5, value:num)
            }
            if hasLeftNum {
                try codedOutputStream.writeInt64(fieldNumber: 6, value:leftNum)
            }
            if hasStarttime {
                try codedOutputStream.writeInt64(fieldNumber: 7, value:starttime)
            }
            if hasEndtime {
                try codedOutputStream.writeInt64(fieldNumber: 8, value:endtime)
            }
            if hasHasJoin {
                try codedOutputStream.writeBool(fieldNumber: 9, value:hasJoin)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasId {
                serialize_size += id.computeInt64Size(fieldNumber: 1)
            }
            if hasTitle {
                serialize_size += title.computeStringSize(fieldNumber: 2)
            }
            if hasDes {
                serialize_size += des.computeStringSize(fieldNumber: 3)
            }
            if hasLogo {
                serialize_size += logo.computeStringSize(fieldNumber: 4)
            }
            if hasNum {
                serialize_size += num.computeInt64Size(fieldNumber: 5)
            }
            if hasLeftNum {
                serialize_size += leftNum.computeInt64Size(fieldNumber: 6)
            }
            if hasStarttime {
                serialize_size += starttime.computeInt64Size(fieldNumber: 7)
            }
            if hasEndtime {
                serialize_size += endtime.computeInt64Size(fieldNumber: 8)
            }
            if hasHasJoin {
                serialize_size += hasJoin.computeBoolSize(fieldNumber: 9)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.Activity.Builder {
            return Apiproto.Activity.classBuilder() as! Apiproto.Activity.Builder
        }
        public func getBuilder() -> Apiproto.Activity.Builder {
            return classBuilder() as! Apiproto.Activity.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.Activity.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.Activity.Builder()
        }
        public func toBuilder() throws -> Apiproto.Activity.Builder {
            return try Apiproto.Activity.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.Activity) throws -> Apiproto.Activity.Builder {
            return try Apiproto.Activity.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasId {
                jsonMap["id"] = "\(id)"
            }
            if hasTitle {
                jsonMap["title"] = title
            }
            if hasDes {
                jsonMap["des"] = des
            }
            if hasLogo {
                jsonMap["logo"] = logo
            }
            if hasNum {
                jsonMap["num"] = "\(num)"
            }
            if hasLeftNum {
                jsonMap["leftNum"] = "\(leftNum)"
            }
            if hasStarttime {
                jsonMap["starttime"] = "\(starttime)"
            }
            if hasEndtime {
                jsonMap["endtime"] = "\(endtime)"
            }
            if hasHasJoin {
                jsonMap["hasJoin"] = hasJoin
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.Activity {
            return try Apiproto.Activity.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.Activity {
            return try Apiproto.Activity.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasId {
                output += "\(indent) id: \(id) \n"
            }
            if hasTitle {
                output += "\(indent) title: \(title) \n"
            }
            if hasDes {
                output += "\(indent) des: \(des) \n"
            }
            if hasLogo {
                output += "\(indent) logo: \(logo) \n"
            }
            if hasNum {
                output += "\(indent) num: \(num) \n"
            }
            if hasLeftNum {
                output += "\(indent) leftNum: \(leftNum) \n"
            }
            if hasStarttime {
                output += "\(indent) starttime: \(starttime) \n"
            }
            if hasEndtime {
                output += "\(indent) endtime: \(endtime) \n"
            }
            if hasHasJoin {
                output += "\(indent) hasJoin: \(hasJoin) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasId {
                    hashCode = (hashCode &* 31) &+ id.hashValue
                }
                if hasTitle {
                    hashCode = (hashCode &* 31) &+ title.hashValue
                }
                if hasDes {
                    hashCode = (hashCode &* 31) &+ des.hashValue
                }
                if hasLogo {
                    hashCode = (hashCode &* 31) &+ logo.hashValue
                }
                if hasNum {
                    hashCode = (hashCode &* 31) &+ num.hashValue
                }
                if hasLeftNum {
                    hashCode = (hashCode &* 31) &+ leftNum.hashValue
                }
                if hasStarttime {
                    hashCode = (hashCode &* 31) &+ starttime.hashValue
                }
                if hasEndtime {
                    hashCode = (hashCode &* 31) &+ endtime.hashValue
                }
                if hasHasJoin {
                    hashCode = (hashCode &* 31) &+ hasJoin.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.Activity"
        }
        override public func className() -> String {
            return "Apiproto.Activity"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.Activity = Apiproto.Activity()
            public func getMessage() -> Apiproto.Activity {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var id:Int64 {
                get {
                    return builderResult.id
                }
                set (value) {
                    builderResult.hasId = true
                    builderResult.id = value
                }
            }
            public var hasId:Bool {
                get {
                    return builderResult.hasId
                }
            }
            @discardableResult
            public func setId(_ value:Int64) -> Apiproto.Activity.Builder {
                self.id = value
                return self
            }
            @discardableResult
            public func clearId() -> Apiproto.Activity.Builder{
                builderResult.hasId = false
                builderResult.id = Int64(0)
                return self
            }
            public var title:String {
                get {
                    return builderResult.title
                }
                set (value) {
                    builderResult.hasTitle = true
                    builderResult.title = value
                }
            }
            public var hasTitle:Bool {
                get {
                    return builderResult.hasTitle
                }
            }
            @discardableResult
            public func setTitle(_ value:String) -> Apiproto.Activity.Builder {
                self.title = value
                return self
            }
            @discardableResult
            public func clearTitle() -> Apiproto.Activity.Builder{
                builderResult.hasTitle = false
                builderResult.title = ""
                return self
            }
            public var des:String {
                get {
                    return builderResult.des
                }
                set (value) {
                    builderResult.hasDes = true
                    builderResult.des = value
                }
            }
            public var hasDes:Bool {
                get {
                    return builderResult.hasDes
                }
            }
            @discardableResult
            public func setDes(_ value:String) -> Apiproto.Activity.Builder {
                self.des = value
                return self
            }
            @discardableResult
            public func clearDes() -> Apiproto.Activity.Builder{
                builderResult.hasDes = false
                builderResult.des = ""
                return self
            }
            public var logo:String {
                get {
                    return builderResult.logo
                }
                set (value) {
                    builderResult.hasLogo = true
                    builderResult.logo = value
                }
            }
            public var hasLogo:Bool {
                get {
                    return builderResult.hasLogo
                }
            }
            @discardableResult
            public func setLogo(_ value:String) -> Apiproto.Activity.Builder {
                self.logo = value
                return self
            }
            @discardableResult
            public func clearLogo() -> Apiproto.Activity.Builder{
                builderResult.hasLogo = false
                builderResult.logo = ""
                return self
            }
            public var num:Int64 {
                get {
                    return builderResult.num
                }
                set (value) {
                    builderResult.hasNum = true
                    builderResult.num = value
                }
            }
            public var hasNum:Bool {
                get {
                    return builderResult.hasNum
                }
            }
            @discardableResult
            public func setNum(_ value:Int64) -> Apiproto.Activity.Builder {
                self.num = value
                return self
            }
            @discardableResult
            public func clearNum() -> Apiproto.Activity.Builder{
                builderResult.hasNum = false
                builderResult.num = Int64(0)
                return self
            }
            public var leftNum:Int64 {
                get {
                    return builderResult.leftNum
                }
                set (value) {
                    builderResult.hasLeftNum = true
                    builderResult.leftNum = value
                }
            }
            public var hasLeftNum:Bool {
                get {
                    return builderResult.hasLeftNum
                }
            }
            @discardableResult
            public func setLeftNum(_ value:Int64) -> Apiproto.Activity.Builder {
                self.leftNum = value
                return self
            }
            @discardableResult
            public func clearLeftNum() -> Apiproto.Activity.Builder{
                builderResult.hasLeftNum = false
                builderResult.leftNum = Int64(0)
                return self
            }
            public var starttime:Int64 {
                get {
                    return builderResult.starttime
                }
                set (value) {
                    builderResult.hasStarttime = true
                    builderResult.starttime = value
                }
            }
            public var hasStarttime:Bool {
                get {
                    return builderResult.hasStarttime
                }
            }
            @discardableResult
            public func setStarttime(_ value:Int64) -> Apiproto.Activity.Builder {
                self.starttime = value
                return self
            }
            @discardableResult
            public func clearStarttime() -> Apiproto.Activity.Builder{
                builderResult.hasStarttime = false
                builderResult.starttime = Int64(0)
                return self
            }
            public var endtime:Int64 {
                get {
                    return builderResult.endtime
                }
                set (value) {
                    builderResult.hasEndtime = true
                    builderResult.endtime = value
                }
            }
            public var hasEndtime:Bool {
                get {
                    return builderResult.hasEndtime
                }
            }
            @discardableResult
            public func setEndtime(_ value:Int64) -> Apiproto.Activity.Builder {
                self.endtime = value
                return self
            }
            @discardableResult
            public func clearEndtime() -> Apiproto.Activity.Builder{
                builderResult.hasEndtime = false
                builderResult.endtime = Int64(0)
                return self
            }
            public var hasJoin:Bool {
                get {
                    return builderResult.hasJoin
                }
                set (value) {
                    builderResult.hasHasJoin = true
                    builderResult.hasJoin = value
                }
            }
            public var hasHasJoin:Bool {
                get {
                    return builderResult.hasHasJoin
                }
            }
            @discardableResult
            public func setHasJoin(_ value:Bool) -> Apiproto.Activity.Builder {
                self.hasJoin = value
                return self
            }
            @discardableResult
            public func clearHasJoin() -> Apiproto.Activity.Builder{
                builderResult.hasHasJoin = false
                builderResult.hasJoin = false
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.Activity.Builder {
                builderResult = Apiproto.Activity()
                return self
            }
            override public func clone() throws -> Apiproto.Activity.Builder {
                return try Apiproto.Activity.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.Activity {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.Activity {
                let returnMe:Apiproto.Activity = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.Activity) throws -> Apiproto.Activity.Builder {
                if other == Apiproto.Activity() {
                    return self
                }
                if other.hasId {
                    id = other.id
                }
                if other.hasTitle {
                    title = other.title
                }
                if other.hasDes {
                    des = other.des
                }
                if other.hasLogo {
                    logo = other.logo
                }
                if other.hasNum {
                    num = other.num
                }
                if other.hasLeftNum {
                    leftNum = other.leftNum
                }
                if other.hasStarttime {
                    starttime = other.starttime
                }
                if other.hasEndtime {
                    endtime = other.endtime
                }
                if other.hasHasJoin {
                    hasJoin = other.hasJoin
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.Activity.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.Activity.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        id = try codedInputStream.readInt64()

                    case 18:
                        title = try codedInputStream.readString()

                    case 26:
                        des = try codedInputStream.readString()

                    case 34:
                        logo = try codedInputStream.readString()

                    case 40:
                        num = try codedInputStream.readInt64()

                    case 48:
                        leftNum = try codedInputStream.readInt64()

                    case 56:
                        starttime = try codedInputStream.readInt64()

                    case 64:
                        endtime = try codedInputStream.readInt64()

                    case 72:
                        hasJoin = try codedInputStream.readBool()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.Activity.Builder {
                let resultDecodedBuilder = Apiproto.Activity.Builder()
                if let jsonValueId = jsonMap["id"] as? String {
                    resultDecodedBuilder.id = Int64(jsonValueId)!
                } else if let jsonValueId = jsonMap["id"] as? Int {
                    resultDecodedBuilder.id = Int64(jsonValueId)
                }
                if let jsonValueTitle = jsonMap["title"] as? String {
                    resultDecodedBuilder.title = jsonValueTitle
                }
                if let jsonValueDes = jsonMap["des"] as? String {
                    resultDecodedBuilder.des = jsonValueDes
                }
                if let jsonValueLogo = jsonMap["logo"] as? String {
                    resultDecodedBuilder.logo = jsonValueLogo
                }
                if let jsonValueNum = jsonMap["num"] as? String {
                    resultDecodedBuilder.num = Int64(jsonValueNum)!
                } else if let jsonValueNum = jsonMap["num"] as? Int {
                    resultDecodedBuilder.num = Int64(jsonValueNum)
                }
                if let jsonValueLeftNum = jsonMap["leftNum"] as? String {
                    resultDecodedBuilder.leftNum = Int64(jsonValueLeftNum)!
                } else if let jsonValueLeftNum = jsonMap["leftNum"] as? Int {
                    resultDecodedBuilder.leftNum = Int64(jsonValueLeftNum)
                }
                if let jsonValueStarttime = jsonMap["starttime"] as? String {
                    resultDecodedBuilder.starttime = Int64(jsonValueStarttime)!
                } else if let jsonValueStarttime = jsonMap["starttime"] as? Int {
                    resultDecodedBuilder.starttime = Int64(jsonValueStarttime)
                }
                if let jsonValueEndtime = jsonMap["endtime"] as? String {
                    resultDecodedBuilder.endtime = Int64(jsonValueEndtime)!
                } else if let jsonValueEndtime = jsonMap["endtime"] as? Int {
                    resultDecodedBuilder.endtime = Int64(jsonValueEndtime)
                }
                if let jsonValueHasJoin = jsonMap["hasJoin"] as? Bool {
                    resultDecodedBuilder.hasJoin = jsonValueHasJoin
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.Activity.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.Activity.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    ///活动列表
    final public class ActivityList : GeneratedMessage {

        public static func == (lhs: Apiproto.ActivityList, rhs: Apiproto.ActivityList) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.list == rhs.list)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var list:Array<Apiproto.Activity>  = Array<Apiproto.Activity>()
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            for oneElementList in list {
                  try codedOutputStream.writeMessage(fieldNumber: 1, value:oneElementList)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            for oneElementList in list {
                serialize_size += oneElementList.computeMessageSize(fieldNumber: 1)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.ActivityList.Builder {
            return Apiproto.ActivityList.classBuilder() as! Apiproto.ActivityList.Builder
        }
        public func getBuilder() -> Apiproto.ActivityList.Builder {
            return classBuilder() as! Apiproto.ActivityList.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.ActivityList.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.ActivityList.Builder()
        }
        public func toBuilder() throws -> Apiproto.ActivityList.Builder {
            return try Apiproto.ActivityList.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.ActivityList) throws -> Apiproto.ActivityList.Builder {
            return try Apiproto.ActivityList.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if !list.isEmpty {
                var jsonArrayList:Array<Dictionary<String,Any>> = []
                for oneValueList in list {
                    let ecodedMessageList = try oneValueList.encode()
                    jsonArrayList.append(ecodedMessageList)
                }
                jsonMap["list"] = jsonArrayList
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.ActivityList {
            return try Apiproto.ActivityList.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.ActivityList {
            return try Apiproto.ActivityList.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            var listElementIndex:Int = 0
            for oneElementList in list {
                output += "\(indent) list[\(listElementIndex)] {\n"
                output += try oneElementList.getDescription(indent: "\(indent)  ")
                output += "\(indent)}\n"
                listElementIndex += 1
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                for oneElementList in list {
                    hashCode = (hashCode &* 31) &+ oneElementList.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.ActivityList"
        }
        override public func className() -> String {
            return "Apiproto.ActivityList"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.ActivityList = Apiproto.ActivityList()
            public func getMessage() -> Apiproto.ActivityList {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var list:Array<Apiproto.Activity> {
                get {
                    return builderResult.list
                }
                set (value) {
                    builderResult.list = value
                }
            }
            @discardableResult
            public func setList(_ value:Array<Apiproto.Activity>) -> Apiproto.ActivityList.Builder {
                self.list = value
                return self
            }
            @discardableResult
            public func clearList() -> Apiproto.ActivityList.Builder {
                builderResult.list.removeAll(keepingCapacity: false)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.ActivityList.Builder {
                builderResult = Apiproto.ActivityList()
                return self
            }
            override public func clone() throws -> Apiproto.ActivityList.Builder {
                return try Apiproto.ActivityList.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.ActivityList {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.ActivityList {
                let returnMe:Apiproto.ActivityList = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.ActivityList) throws -> Apiproto.ActivityList.Builder {
                if other == Apiproto.ActivityList() {
                    return self
                }
                if !other.list.isEmpty  {
                     builderResult.list += other.list
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.ActivityList.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.ActivityList.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        let subBuilder = Apiproto.Activity.Builder()
                        try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                        list.append(subBuilder.buildPartial())

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.ActivityList.Builder {
                let resultDecodedBuilder = Apiproto.ActivityList.Builder()
                if let jsonValueList = jsonMap["list"] as? Array<Dictionary<String,Any>> {
                    var jsonArrayList:Array<Apiproto.Activity> = []
                    for oneValueList in jsonValueList {
                        let messageFromStringList = try Apiproto.Activity.Builder.decodeToBuilder(jsonMap:oneValueList).build()

                        jsonArrayList.append(messageFromStringList)
                    }
                    resultDecodedBuilder.list = jsonArrayList
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.ActivityList.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.ActivityList.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    ///包含活动id和用户账户id，用于查询活动详情
    final public class ActivityAccount : GeneratedMessage {

        public static func == (lhs: Apiproto.ActivityAccount, rhs: Apiproto.ActivityAccount) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasActivityId == rhs.hasActivityId) && (!lhs.hasActivityId || lhs.activityId == rhs.activityId)
            fieldCheck = fieldCheck && (lhs.hasAccountId == rhs.hasAccountId) && (!lhs.hasAccountId || lhs.accountId == rhs.accountId)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var activityId:Int64 = Int64(0)
        public fileprivate(set) var hasActivityId:Bool = false

        public fileprivate(set) var accountId:Int64 = Int64(0)
        public fileprivate(set) var hasAccountId:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasActivityId {
                try codedOutputStream.writeInt64(fieldNumber: 1, value:activityId)
            }
            if hasAccountId {
                try codedOutputStream.writeInt64(fieldNumber: 2, value:accountId)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasActivityId {
                serialize_size += activityId.computeInt64Size(fieldNumber: 1)
            }
            if hasAccountId {
                serialize_size += accountId.computeInt64Size(fieldNumber: 2)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.ActivityAccount.Builder {
            return Apiproto.ActivityAccount.classBuilder() as! Apiproto.ActivityAccount.Builder
        }
        public func getBuilder() -> Apiproto.ActivityAccount.Builder {
            return classBuilder() as! Apiproto.ActivityAccount.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.ActivityAccount.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.ActivityAccount.Builder()
        }
        public func toBuilder() throws -> Apiproto.ActivityAccount.Builder {
            return try Apiproto.ActivityAccount.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.ActivityAccount) throws -> Apiproto.ActivityAccount.Builder {
            return try Apiproto.ActivityAccount.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasActivityId {
                jsonMap["activityId"] = "\(activityId)"
            }
            if hasAccountId {
                jsonMap["accountId"] = "\(accountId)"
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.ActivityAccount {
            return try Apiproto.ActivityAccount.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.ActivityAccount {
            return try Apiproto.ActivityAccount.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasActivityId {
                output += "\(indent) activityId: \(activityId) \n"
            }
            if hasAccountId {
                output += "\(indent) accountId: \(accountId) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasActivityId {
                    hashCode = (hashCode &* 31) &+ activityId.hashValue
                }
                if hasAccountId {
                    hashCode = (hashCode &* 31) &+ accountId.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.ActivityAccount"
        }
        override public func className() -> String {
            return "Apiproto.ActivityAccount"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.ActivityAccount = Apiproto.ActivityAccount()
            public func getMessage() -> Apiproto.ActivityAccount {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var activityId:Int64 {
                get {
                    return builderResult.activityId
                }
                set (value) {
                    builderResult.hasActivityId = true
                    builderResult.activityId = value
                }
            }
            public var hasActivityId:Bool {
                get {
                    return builderResult.hasActivityId
                }
            }
            @discardableResult
            public func setActivityId(_ value:Int64) -> Apiproto.ActivityAccount.Builder {
                self.activityId = value
                return self
            }
            @discardableResult
            public func clearActivityId() -> Apiproto.ActivityAccount.Builder{
                builderResult.hasActivityId = false
                builderResult.activityId = Int64(0)
                return self
            }
            public var accountId:Int64 {
                get {
                    return builderResult.accountId
                }
                set (value) {
                    builderResult.hasAccountId = true
                    builderResult.accountId = value
                }
            }
            public var hasAccountId:Bool {
                get {
                    return builderResult.hasAccountId
                }
            }
            @discardableResult
            public func setAccountId(_ value:Int64) -> Apiproto.ActivityAccount.Builder {
                self.accountId = value
                return self
            }
            @discardableResult
            public func clearAccountId() -> Apiproto.ActivityAccount.Builder{
                builderResult.hasAccountId = false
                builderResult.accountId = Int64(0)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.ActivityAccount.Builder {
                builderResult = Apiproto.ActivityAccount()
                return self
            }
            override public func clone() throws -> Apiproto.ActivityAccount.Builder {
                return try Apiproto.ActivityAccount.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.ActivityAccount {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.ActivityAccount {
                let returnMe:Apiproto.ActivityAccount = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.ActivityAccount) throws -> Apiproto.ActivityAccount.Builder {
                if other == Apiproto.ActivityAccount() {
                    return self
                }
                if other.hasActivityId {
                    activityId = other.activityId
                }
                if other.hasAccountId {
                    accountId = other.accountId
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.ActivityAccount.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.ActivityAccount.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        activityId = try codedInputStream.readInt64()

                    case 16:
                        accountId = try codedInputStream.readInt64()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.ActivityAccount.Builder {
                let resultDecodedBuilder = Apiproto.ActivityAccount.Builder()
                if let jsonValueActivityId = jsonMap["activityId"] as? String {
                    resultDecodedBuilder.activityId = Int64(jsonValueActivityId)!
                } else if let jsonValueActivityId = jsonMap["activityId"] as? Int {
                    resultDecodedBuilder.activityId = Int64(jsonValueActivityId)
                }
                if let jsonValueAccountId = jsonMap["accountId"] as? String {
                    resultDecodedBuilder.accountId = Int64(jsonValueAccountId)!
                } else if let jsonValueAccountId = jsonMap["accountId"] as? Int {
                    resultDecodedBuilder.accountId = Int64(jsonValueAccountId)
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.ActivityAccount.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.ActivityAccount.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    ///用户基本信息
    final public class UserBaseInfo : GeneratedMessage {

        public static func == (lhs: Apiproto.UserBaseInfo, rhs: Apiproto.UserBaseInfo) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasAccountId == rhs.hasAccountId) && (!lhs.hasAccountId || lhs.accountId == rhs.accountId)
            fieldCheck = fieldCheck && (lhs.hasIcon == rhs.hasIcon) && (!lhs.hasIcon || lhs.icon == rhs.icon)
            fieldCheck = fieldCheck && (lhs.hasNickname == rhs.hasNickname) && (!lhs.hasNickname || lhs.nickname == rhs.nickname)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var accountId:Int64 = Int64(0)
        public fileprivate(set) var hasAccountId:Bool = false

        public fileprivate(set) var icon:String = ""
        public fileprivate(set) var hasIcon:Bool = false

        public fileprivate(set) var nickname:String = ""
        public fileprivate(set) var hasNickname:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasAccountId {
                try codedOutputStream.writeInt64(fieldNumber: 1, value:accountId)
            }
            if hasIcon {
                try codedOutputStream.writeString(fieldNumber: 2, value:icon)
            }
            if hasNickname {
                try codedOutputStream.writeString(fieldNumber: 3, value:nickname)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasAccountId {
                serialize_size += accountId.computeInt64Size(fieldNumber: 1)
            }
            if hasIcon {
                serialize_size += icon.computeStringSize(fieldNumber: 2)
            }
            if hasNickname {
                serialize_size += nickname.computeStringSize(fieldNumber: 3)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.UserBaseInfo.Builder {
            return Apiproto.UserBaseInfo.classBuilder() as! Apiproto.UserBaseInfo.Builder
        }
        public func getBuilder() -> Apiproto.UserBaseInfo.Builder {
            return classBuilder() as! Apiproto.UserBaseInfo.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.UserBaseInfo.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.UserBaseInfo.Builder()
        }
        public func toBuilder() throws -> Apiproto.UserBaseInfo.Builder {
            return try Apiproto.UserBaseInfo.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.UserBaseInfo) throws -> Apiproto.UserBaseInfo.Builder {
            return try Apiproto.UserBaseInfo.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasAccountId {
                jsonMap["accountId"] = "\(accountId)"
            }
            if hasIcon {
                jsonMap["icon"] = icon
            }
            if hasNickname {
                jsonMap["nickname"] = nickname
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.UserBaseInfo {
            return try Apiproto.UserBaseInfo.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.UserBaseInfo {
            return try Apiproto.UserBaseInfo.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasAccountId {
                output += "\(indent) accountId: \(accountId) \n"
            }
            if hasIcon {
                output += "\(indent) icon: \(icon) \n"
            }
            if hasNickname {
                output += "\(indent) nickname: \(nickname) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasAccountId {
                    hashCode = (hashCode &* 31) &+ accountId.hashValue
                }
                if hasIcon {
                    hashCode = (hashCode &* 31) &+ icon.hashValue
                }
                if hasNickname {
                    hashCode = (hashCode &* 31) &+ nickname.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.UserBaseInfo"
        }
        override public func className() -> String {
            return "Apiproto.UserBaseInfo"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.UserBaseInfo = Apiproto.UserBaseInfo()
            public func getMessage() -> Apiproto.UserBaseInfo {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var accountId:Int64 {
                get {
                    return builderResult.accountId
                }
                set (value) {
                    builderResult.hasAccountId = true
                    builderResult.accountId = value
                }
            }
            public var hasAccountId:Bool {
                get {
                    return builderResult.hasAccountId
                }
            }
            @discardableResult
            public func setAccountId(_ value:Int64) -> Apiproto.UserBaseInfo.Builder {
                self.accountId = value
                return self
            }
            @discardableResult
            public func clearAccountId() -> Apiproto.UserBaseInfo.Builder{
                builderResult.hasAccountId = false
                builderResult.accountId = Int64(0)
                return self
            }
            public var icon:String {
                get {
                    return builderResult.icon
                }
                set (value) {
                    builderResult.hasIcon = true
                    builderResult.icon = value
                }
            }
            public var hasIcon:Bool {
                get {
                    return builderResult.hasIcon
                }
            }
            @discardableResult
            public func setIcon(_ value:String) -> Apiproto.UserBaseInfo.Builder {
                self.icon = value
                return self
            }
            @discardableResult
            public func clearIcon() -> Apiproto.UserBaseInfo.Builder{
                builderResult.hasIcon = false
                builderResult.icon = ""
                return self
            }
            public var nickname:String {
                get {
                    return builderResult.nickname
                }
                set (value) {
                    builderResult.hasNickname = true
                    builderResult.nickname = value
                }
            }
            public var hasNickname:Bool {
                get {
                    return builderResult.hasNickname
                }
            }
            @discardableResult
            public func setNickname(_ value:String) -> Apiproto.UserBaseInfo.Builder {
                self.nickname = value
                return self
            }
            @discardableResult
            public func clearNickname() -> Apiproto.UserBaseInfo.Builder{
                builderResult.hasNickname = false
                builderResult.nickname = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.UserBaseInfo.Builder {
                builderResult = Apiproto.UserBaseInfo()
                return self
            }
            override public func clone() throws -> Apiproto.UserBaseInfo.Builder {
                return try Apiproto.UserBaseInfo.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.UserBaseInfo {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.UserBaseInfo {
                let returnMe:Apiproto.UserBaseInfo = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.UserBaseInfo) throws -> Apiproto.UserBaseInfo.Builder {
                if other == Apiproto.UserBaseInfo() {
                    return self
                }
                if other.hasAccountId {
                    accountId = other.accountId
                }
                if other.hasIcon {
                    icon = other.icon
                }
                if other.hasNickname {
                    nickname = other.nickname
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.UserBaseInfo.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.UserBaseInfo.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        accountId = try codedInputStream.readInt64()

                    case 18:
                        icon = try codedInputStream.readString()

                    case 26:
                        nickname = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.UserBaseInfo.Builder {
                let resultDecodedBuilder = Apiproto.UserBaseInfo.Builder()
                if let jsonValueAccountId = jsonMap["accountId"] as? String {
                    resultDecodedBuilder.accountId = Int64(jsonValueAccountId)!
                } else if let jsonValueAccountId = jsonMap["accountId"] as? Int {
                    resultDecodedBuilder.accountId = Int64(jsonValueAccountId)
                }
                if let jsonValueIcon = jsonMap["icon"] as? String {
                    resultDecodedBuilder.icon = jsonValueIcon
                }
                if let jsonValueNickname = jsonMap["nickname"] as? String {
                    resultDecodedBuilder.nickname = jsonValueNickname
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.UserBaseInfo.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.UserBaseInfo.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    ///活动详情
    final public class ActivtyDetail : GeneratedMessage {

        public static func == (lhs: Apiproto.ActivtyDetail, rhs: Apiproto.ActivtyDetail) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasActivity == rhs.hasActivity) && (!lhs.hasActivity || lhs.activity == rhs.activity)
            fieldCheck = fieldCheck && (lhs.gainers == rhs.gainers)
            fieldCheck = fieldCheck && (lhs.taskList == rhs.taskList)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var activity:Apiproto.Activity!
        public fileprivate(set) var hasActivity:Bool = false
        public fileprivate(set) var gainers:Array<Apiproto.UserBaseInfo>  = Array<Apiproto.UserBaseInfo>()
        public fileprivate(set) var taskList:Array<Apiproto.Task>  = Array<Apiproto.Task>()
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasActivity {
                try codedOutputStream.writeMessage(fieldNumber: 1, value:activity)
            }
            for oneElementGainers in gainers {
                  try codedOutputStream.writeMessage(fieldNumber: 2, value:oneElementGainers)
            }
            for oneElementTaskList in taskList {
                  try codedOutputStream.writeMessage(fieldNumber: 3, value:oneElementTaskList)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasActivity {
                if let varSizeactivity = activity?.computeMessageSize(fieldNumber: 1) {
                    serialize_size += varSizeactivity
                }
            }
            for oneElementGainers in gainers {
                serialize_size += oneElementGainers.computeMessageSize(fieldNumber: 2)
            }
            for oneElementTaskList in taskList {
                serialize_size += oneElementTaskList.computeMessageSize(fieldNumber: 3)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.ActivtyDetail.Builder {
            return Apiproto.ActivtyDetail.classBuilder() as! Apiproto.ActivtyDetail.Builder
        }
        public func getBuilder() -> Apiproto.ActivtyDetail.Builder {
            return classBuilder() as! Apiproto.ActivtyDetail.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.ActivtyDetail.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.ActivtyDetail.Builder()
        }
        public func toBuilder() throws -> Apiproto.ActivtyDetail.Builder {
            return try Apiproto.ActivtyDetail.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.ActivtyDetail) throws -> Apiproto.ActivtyDetail.Builder {
            return try Apiproto.ActivtyDetail.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasActivity {
                jsonMap["activity"] = try activity.encode()
            }
            if !gainers.isEmpty {
                var jsonArrayGainers:Array<Dictionary<String,Any>> = []
                for oneValueGainers in gainers {
                    let ecodedMessageGainers = try oneValueGainers.encode()
                    jsonArrayGainers.append(ecodedMessageGainers)
                }
                jsonMap["gainers"] = jsonArrayGainers
            }
            if !taskList.isEmpty {
                var jsonArrayTaskList:Array<Dictionary<String,Any>> = []
                for oneValueTaskList in taskList {
                    let ecodedMessageTaskList = try oneValueTaskList.encode()
                    jsonArrayTaskList.append(ecodedMessageTaskList)
                }
                jsonMap["taskList"] = jsonArrayTaskList
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.ActivtyDetail {
            return try Apiproto.ActivtyDetail.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.ActivtyDetail {
            return try Apiproto.ActivtyDetail.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasActivity {
                output += "\(indent) activity {\n"
                if let outDescActivity = activity {
                    output += try outDescActivity.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            var gainersElementIndex:Int = 0
            for oneElementGainers in gainers {
                output += "\(indent) gainers[\(gainersElementIndex)] {\n"
                output += try oneElementGainers.getDescription(indent: "\(indent)  ")
                output += "\(indent)}\n"
                gainersElementIndex += 1
            }
            var taskListElementIndex:Int = 0
            for oneElementTaskList in taskList {
                output += "\(indent) taskList[\(taskListElementIndex)] {\n"
                output += try oneElementTaskList.getDescription(indent: "\(indent)  ")
                output += "\(indent)}\n"
                taskListElementIndex += 1
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasActivity {
                    if let hashValueactivity = activity?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValueactivity
                    }
                }
                for oneElementGainers in gainers {
                    hashCode = (hashCode &* 31) &+ oneElementGainers.hashValue
                }
                for oneElementTaskList in taskList {
                    hashCode = (hashCode &* 31) &+ oneElementTaskList.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.ActivtyDetail"
        }
        override public func className() -> String {
            return "Apiproto.ActivtyDetail"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.ActivtyDetail = Apiproto.ActivtyDetail()
            public func getMessage() -> Apiproto.ActivtyDetail {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var activity:Apiproto.Activity! {
                get {
                    if activityBuilder_ != nil {
                        builderResult.activity = activityBuilder_.getMessage()
                    }
                    return builderResult.activity
                }
                set (value) {
                    builderResult.hasActivity = true
                    builderResult.activity = value
                }
            }
            public var hasActivity:Bool {
                get {
                    return builderResult.hasActivity
                }
            }
            fileprivate var activityBuilder_:Apiproto.Activity.Builder! {
                didSet {
                    builderResult.hasActivity = true
                }
            }
            public func getActivityBuilder() -> Apiproto.Activity.Builder {
                if activityBuilder_ == nil {
                    activityBuilder_ = Apiproto.Activity.Builder()
                    builderResult.activity = activityBuilder_.getMessage()
                    if activity != nil {
                        try! activityBuilder_.mergeFrom(other: activity)
                    }
                }
                return activityBuilder_
            }
            @discardableResult
            public func setActivity(_ value:Apiproto.Activity!) -> Apiproto.ActivtyDetail.Builder {
                self.activity = value
                return self
            }
            @discardableResult
            public func mergeActivity(value:Apiproto.Activity) throws -> Apiproto.ActivtyDetail.Builder {
                if builderResult.hasActivity {
                    builderResult.activity = try Apiproto.Activity.builderWithPrototype(prototype:builderResult.activity).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.activity = value
                }
                builderResult.hasActivity = true
                return self
            }
            @discardableResult
            public func clearActivity() -> Apiproto.ActivtyDetail.Builder {
                activityBuilder_ = nil
                builderResult.hasActivity = false
                builderResult.activity = nil
                return self
            }
            ///活动的获得者名单
            public var gainers:Array<Apiproto.UserBaseInfo> {
                get {
                    return builderResult.gainers
                }
                set (value) {
                    builderResult.gainers = value
                }
            }
            @discardableResult
            public func setGainers(_ value:Array<Apiproto.UserBaseInfo>) -> Apiproto.ActivtyDetail.Builder {
                self.gainers = value
                return self
            }
            @discardableResult
            public func clearGainers() -> Apiproto.ActivtyDetail.Builder {
                builderResult.gainers.removeAll(keepingCapacity: false)
                return self
            }
            public var taskList:Array<Apiproto.Task> {
                get {
                    return builderResult.taskList
                }
                set (value) {
                    builderResult.taskList = value
                }
            }
            @discardableResult
            public func setTaskList(_ value:Array<Apiproto.Task>) -> Apiproto.ActivtyDetail.Builder {
                self.taskList = value
                return self
            }
            @discardableResult
            public func clearTaskList() -> Apiproto.ActivtyDetail.Builder {
                builderResult.taskList.removeAll(keepingCapacity: false)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.ActivtyDetail.Builder {
                builderResult = Apiproto.ActivtyDetail()
                return self
            }
            override public func clone() throws -> Apiproto.ActivtyDetail.Builder {
                return try Apiproto.ActivtyDetail.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.ActivtyDetail {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.ActivtyDetail {
                let returnMe:Apiproto.ActivtyDetail = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.ActivtyDetail) throws -> Apiproto.ActivtyDetail.Builder {
                if other == Apiproto.ActivtyDetail() {
                    return self
                }
                if (other.hasActivity) {
                    try mergeActivity(value: other.activity)
                }
                if !other.gainers.isEmpty  {
                     builderResult.gainers += other.gainers
                }
                if !other.taskList.isEmpty  {
                     builderResult.taskList += other.taskList
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.ActivtyDetail.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.ActivtyDetail.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        let subBuilder:Apiproto.Activity.Builder = Apiproto.Activity.Builder()
                        if hasActivity {
                            try subBuilder.mergeFrom(other: activity)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        activity = subBuilder.buildPartial()

                    case 18:
                        let subBuilder = Apiproto.UserBaseInfo.Builder()
                        try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                        gainers.append(subBuilder.buildPartial())

                    case 26:
                        let subBuilder = Apiproto.Task.Builder()
                        try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                        taskList.append(subBuilder.buildPartial())

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.ActivtyDetail.Builder {
                let resultDecodedBuilder = Apiproto.ActivtyDetail.Builder()
                if let jsonValueActivity = jsonMap["activity"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.activity = try Apiproto.Activity.Builder.decodeToBuilder(jsonMap:jsonValueActivity).build()

                }
                if let jsonValueGainers = jsonMap["gainers"] as? Array<Dictionary<String,Any>> {
                    var jsonArrayGainers:Array<Apiproto.UserBaseInfo> = []
                    for oneValueGainers in jsonValueGainers {
                        let messageFromStringGainers = try Apiproto.UserBaseInfo.Builder.decodeToBuilder(jsonMap:oneValueGainers).build()

                        jsonArrayGainers.append(messageFromStringGainers)
                    }
                    resultDecodedBuilder.gainers = jsonArrayGainers
                }
                if let jsonValueTaskList = jsonMap["taskList"] as? Array<Dictionary<String,Any>> {
                    var jsonArrayTaskList:Array<Apiproto.Task> = []
                    for oneValueTaskList in jsonValueTaskList {
                        let messageFromStringTaskList = try Apiproto.Task.Builder.decodeToBuilder(jsonMap:oneValueTaskList).build()

                        jsonArrayTaskList.append(messageFromStringTaskList)
                    }
                    resultDecodedBuilder.taskList = jsonArrayTaskList
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.ActivtyDetail.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.ActivtyDetail.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

}
extension Apiproto.Task: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.Task> {
        var mergedArray = Array<Apiproto.Task>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.Task? {
        return try Apiproto.Task.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.Task {
        return try Apiproto.Task.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.ActivityRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.Task {
        return try Apiproto.Task.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.Task {
        return try Apiproto.Task.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.Task {
        return try Apiproto.Task.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.Task {
        return try Apiproto.Task.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.Task {
        return try Apiproto.Task.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "id": return self.id
        case "name": return self.name
        case "des": return self.des
        case "isComplete": return self.isComplete
        case "type": return self.type
        case "money": return self.money
        default: return nil
        }
    }
}
extension Apiproto.Task.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "id": return self.id
            case "name": return self.name
            case "des": return self.des
            case "isComplete": return self.isComplete
            case "type": return self.type
            case "money": return self.money
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "id":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.id = newSubscriptValue
            case "name":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.name = newSubscriptValue
            case "des":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.des = newSubscriptValue
            case "isComplete":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.isComplete = newSubscriptValue
            case "type":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.type = newSubscriptValue
            case "money":
                guard let newSubscriptValue = newSubscriptValue as? Float else {
                    return
                }
                self.money = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.Activity: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.Activity> {
        var mergedArray = Array<Apiproto.Activity>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.Activity? {
        return try Apiproto.Activity.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.Activity {
        return try Apiproto.Activity.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.ActivityRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.Activity {
        return try Apiproto.Activity.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.Activity {
        return try Apiproto.Activity.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.Activity {
        return try Apiproto.Activity.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.Activity {
        return try Apiproto.Activity.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.Activity {
        return try Apiproto.Activity.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "id": return self.id
        case "title": return self.title
        case "des": return self.des
        case "logo": return self.logo
        case "num": return self.num
        case "leftNum": return self.leftNum
        case "starttime": return self.starttime
        case "endtime": return self.endtime
        case "hasJoin": return self.hasJoin
        default: return nil
        }
    }
}
extension Apiproto.Activity.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "id": return self.id
            case "title": return self.title
            case "des": return self.des
            case "logo": return self.logo
            case "num": return self.num
            case "leftNum": return self.leftNum
            case "starttime": return self.starttime
            case "endtime": return self.endtime
            case "hasJoin": return self.hasJoin
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "id":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.id = newSubscriptValue
            case "title":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.title = newSubscriptValue
            case "des":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.des = newSubscriptValue
            case "logo":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.logo = newSubscriptValue
            case "num":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.num = newSubscriptValue
            case "leftNum":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.leftNum = newSubscriptValue
            case "starttime":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.starttime = newSubscriptValue
            case "endtime":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.endtime = newSubscriptValue
            case "hasJoin":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.hasJoin = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.ActivityList: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.ActivityList> {
        var mergedArray = Array<Apiproto.ActivityList>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.ActivityList? {
        return try Apiproto.ActivityList.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.ActivityList {
        return try Apiproto.ActivityList.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.ActivityRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.ActivityList {
        return try Apiproto.ActivityList.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.ActivityList {
        return try Apiproto.ActivityList.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.ActivityList {
        return try Apiproto.ActivityList.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.ActivityList {
        return try Apiproto.ActivityList.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.ActivityList {
        return try Apiproto.ActivityList.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "list": return self.list
        default: return nil
        }
    }
}
extension Apiproto.ActivityList.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "list": return self.list
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "list":
                guard let newSubscriptValue = newSubscriptValue as? Array<Apiproto.Activity> else {
                    return
                }
                self.list = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.ActivityAccount: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.ActivityAccount> {
        var mergedArray = Array<Apiproto.ActivityAccount>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.ActivityAccount? {
        return try Apiproto.ActivityAccount.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.ActivityAccount {
        return try Apiproto.ActivityAccount.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.ActivityRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.ActivityAccount {
        return try Apiproto.ActivityAccount.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.ActivityAccount {
        return try Apiproto.ActivityAccount.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.ActivityAccount {
        return try Apiproto.ActivityAccount.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.ActivityAccount {
        return try Apiproto.ActivityAccount.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.ActivityAccount {
        return try Apiproto.ActivityAccount.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "activityId": return self.activityId
        case "accountId": return self.accountId
        default: return nil
        }
    }
}
extension Apiproto.ActivityAccount.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "activityId": return self.activityId
            case "accountId": return self.accountId
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "activityId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.activityId = newSubscriptValue
            case "accountId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.accountId = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.UserBaseInfo: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.UserBaseInfo> {
        var mergedArray = Array<Apiproto.UserBaseInfo>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.UserBaseInfo? {
        return try Apiproto.UserBaseInfo.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.UserBaseInfo {
        return try Apiproto.UserBaseInfo.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.ActivityRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.UserBaseInfo {
        return try Apiproto.UserBaseInfo.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.UserBaseInfo {
        return try Apiproto.UserBaseInfo.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.UserBaseInfo {
        return try Apiproto.UserBaseInfo.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.UserBaseInfo {
        return try Apiproto.UserBaseInfo.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.UserBaseInfo {
        return try Apiproto.UserBaseInfo.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "accountId": return self.accountId
        case "icon": return self.icon
        case "nickname": return self.nickname
        default: return nil
        }
    }
}
extension Apiproto.UserBaseInfo.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "accountId": return self.accountId
            case "icon": return self.icon
            case "nickname": return self.nickname
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "accountId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.accountId = newSubscriptValue
            case "icon":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.icon = newSubscriptValue
            case "nickname":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.nickname = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.ActivtyDetail: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.ActivtyDetail> {
        var mergedArray = Array<Apiproto.ActivtyDetail>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.ActivtyDetail? {
        return try Apiproto.ActivtyDetail.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.ActivtyDetail {
        return try Apiproto.ActivtyDetail.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.ActivityRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.ActivtyDetail {
        return try Apiproto.ActivtyDetail.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.ActivtyDetail {
        return try Apiproto.ActivtyDetail.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.ActivtyDetail {
        return try Apiproto.ActivtyDetail.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.ActivtyDetail {
        return try Apiproto.ActivtyDetail.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.ActivtyDetail {
        return try Apiproto.ActivtyDetail.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "activity": return self.activity
        case "gainers": return self.gainers
        case "taskList": return self.taskList
        default: return nil
        }
    }
}
extension Apiproto.ActivtyDetail.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "activity": return self.activity
            case "gainers": return self.gainers
            case "taskList": return self.taskList
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "activity":
                guard let newSubscriptValue = newSubscriptValue as? Apiproto.Activity else {
                    return
                }
                self.activity = newSubscriptValue
            case "gainers":
                guard let newSubscriptValue = newSubscriptValue as? Array<Apiproto.UserBaseInfo> else {
                    return
                }
                self.gainers = newSubscriptValue
            case "taskList":
                guard let newSubscriptValue = newSubscriptValue as? Array<Apiproto.Task> else {
                    return
                }
                self.taskList = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
