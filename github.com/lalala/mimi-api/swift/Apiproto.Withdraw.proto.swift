/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "withdraw.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public extension Apiproto{}

public extension Apiproto {
    public struct WithdrawRoot {
        public static let `default` = WithdrawRoot()
        public var extensionRegistry:ExtensionRegistry

        init() {
            extensionRegistry = ExtensionRegistry()
            registerAllExtensions(registry: extensionRegistry)
        }
        public func registerAllExtensions(registry: ExtensionRegistry) {
        }
    }



    //Enum type declaration start 

    public enum WithdrawType:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
        case toUnknown = 0
        case toBankcard = 1
        case toAlipay = 2
        public func toString() -> String {
            switch self {
            case .toUnknown: return "ToUnknown"
            case .toBankcard: return "ToBankcard"
            case .toAlipay: return "ToAlipay"
            }
        }
        public static func fromString(str:String) throws -> Apiproto.WithdrawType {
            switch str {
            case "ToUnknown":    return .toUnknown
            case "ToBankcard":    return .toBankcard
            case "ToAlipay":    return .toAlipay
            default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
            }
        }
        public var debugDescription:String { return getDescription() }
        public var description:String { return getDescription() }
        private func getDescription() -> String { 
            switch self {
            case .toUnknown: return ".toUnknown"
            case .toBankcard: return ".toBankcard"
            case .toAlipay: return ".toAlipay"
            }
        }
        public var hashValue:Int {
            return self.rawValue.hashValue
        }
        public static func ==(lhs:WithdrawType, rhs:WithdrawType) -> Bool {
            return lhs.hashValue == rhs.hashValue
        }
    }

    //Enum type declaration end 



    //Enum type declaration start 

    public enum WithdrawStatus:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
        case notRequestWithdraw = 0
        case requestWithdraw = 1
        case auditWithdraw = 2
        case bankTransfer = 3
        public func toString() -> String {
            switch self {
            case .notRequestWithdraw: return "NotRequestWithdraw"
            case .requestWithdraw: return "RequestWithdraw"
            case .auditWithdraw: return "AuditWithdraw"
            case .bankTransfer: return "BankTransfer"
            }
        }
        public static func fromString(str:String) throws -> Apiproto.WithdrawStatus {
            switch str {
            case "NotRequestWithdraw":    return .notRequestWithdraw
            case "RequestWithdraw":    return .requestWithdraw
            case "AuditWithdraw":    return .auditWithdraw
            case "BankTransfer":    return .bankTransfer
            default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
            }
        }
        public var debugDescription:String { return getDescription() }
        public var description:String { return getDescription() }
        private func getDescription() -> String { 
            switch self {
            case .notRequestWithdraw: return ".notRequestWithdraw"
            case .requestWithdraw: return ".requestWithdraw"
            case .auditWithdraw: return ".auditWithdraw"
            case .bankTransfer: return ".bankTransfer"
            }
        }
        public var hashValue:Int {
            return self.rawValue.hashValue
        }
        public static func ==(lhs:WithdrawStatus, rhs:WithdrawStatus) -> Bool {
            return lhs.hashValue == rhs.hashValue
        }
    }

    //Enum type declaration end 

    /// 提现信息
    final public class WithdrawInfo : GeneratedMessage {

        public static func == (lhs: Apiproto.WithdrawInfo, rhs: Apiproto.WithdrawInfo) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasTotalWin == rhs.hasTotalWin) && (!lhs.hasTotalWin || lhs.totalWin == rhs.totalWin)
            fieldCheck = fieldCheck && (lhs.hasTotalWithdraw == rhs.hasTotalWithdraw) && (!lhs.hasTotalWithdraw || lhs.totalWithdraw == rhs.totalWithdraw)
            fieldCheck = fieldCheck && (lhs.hasCurWithdraw == rhs.hasCurWithdraw) && (!lhs.hasCurWithdraw || lhs.curWithdraw == rhs.curWithdraw)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        /// 累计中奖金额
        public fileprivate(set) var totalWin:Double = Double(0)
        public fileprivate(set) var hasTotalWin:Bool = false

        /// 累计提现金额
        public fileprivate(set) var totalWithdraw:Double = Double(0)
        public fileprivate(set) var hasTotalWithdraw:Bool = false

        /// 当前可提现金额
        public fileprivate(set) var curWithdraw:Double = Double(0)
        public fileprivate(set) var hasCurWithdraw:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasTotalWin {
                try codedOutputStream.writeDouble(fieldNumber: 1, value:totalWin)
            }
            if hasTotalWithdraw {
                try codedOutputStream.writeDouble(fieldNumber: 2, value:totalWithdraw)
            }
            if hasCurWithdraw {
                try codedOutputStream.writeDouble(fieldNumber: 3, value:curWithdraw)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasTotalWin {
                serialize_size += totalWin.computeDoubleSize(fieldNumber: 1)
            }
            if hasTotalWithdraw {
                serialize_size += totalWithdraw.computeDoubleSize(fieldNumber: 2)
            }
            if hasCurWithdraw {
                serialize_size += curWithdraw.computeDoubleSize(fieldNumber: 3)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.WithdrawInfo.Builder {
            return Apiproto.WithdrawInfo.classBuilder() as! Apiproto.WithdrawInfo.Builder
        }
        public func getBuilder() -> Apiproto.WithdrawInfo.Builder {
            return classBuilder() as! Apiproto.WithdrawInfo.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.WithdrawInfo.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.WithdrawInfo.Builder()
        }
        public func toBuilder() throws -> Apiproto.WithdrawInfo.Builder {
            return try Apiproto.WithdrawInfo.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.WithdrawInfo) throws -> Apiproto.WithdrawInfo.Builder {
            return try Apiproto.WithdrawInfo.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasTotalWin {
                jsonMap["totalWin"] = Double(totalWin)
            }
            if hasTotalWithdraw {
                jsonMap["totalWithdraw"] = Double(totalWithdraw)
            }
            if hasCurWithdraw {
                jsonMap["curWithdraw"] = Double(curWithdraw)
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.WithdrawInfo {
            return try Apiproto.WithdrawInfo.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.WithdrawInfo {
            return try Apiproto.WithdrawInfo.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasTotalWin {
                output += "\(indent) totalWin: \(totalWin) \n"
            }
            if hasTotalWithdraw {
                output += "\(indent) totalWithdraw: \(totalWithdraw) \n"
            }
            if hasCurWithdraw {
                output += "\(indent) curWithdraw: \(curWithdraw) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasTotalWin {
                    hashCode = (hashCode &* 31) &+ totalWin.hashValue
                }
                if hasTotalWithdraw {
                    hashCode = (hashCode &* 31) &+ totalWithdraw.hashValue
                }
                if hasCurWithdraw {
                    hashCode = (hashCode &* 31) &+ curWithdraw.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.WithdrawInfo"
        }
        override public func className() -> String {
            return "Apiproto.WithdrawInfo"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.WithdrawInfo = Apiproto.WithdrawInfo()
            public func getMessage() -> Apiproto.WithdrawInfo {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            /// 累计中奖金额
            public var totalWin:Double {
                get {
                    return builderResult.totalWin
                }
                set (value) {
                    builderResult.hasTotalWin = true
                    builderResult.totalWin = value
                }
            }
            public var hasTotalWin:Bool {
                get {
                    return builderResult.hasTotalWin
                }
            }
            @discardableResult
            public func setTotalWin(_ value:Double) -> Apiproto.WithdrawInfo.Builder {
                self.totalWin = value
                return self
            }
            @discardableResult
            public func clearTotalWin() -> Apiproto.WithdrawInfo.Builder{
                builderResult.hasTotalWin = false
                builderResult.totalWin = Double(0)
                return self
            }
            /// 累计提现金额
            public var totalWithdraw:Double {
                get {
                    return builderResult.totalWithdraw
                }
                set (value) {
                    builderResult.hasTotalWithdraw = true
                    builderResult.totalWithdraw = value
                }
            }
            public var hasTotalWithdraw:Bool {
                get {
                    return builderResult.hasTotalWithdraw
                }
            }
            @discardableResult
            public func setTotalWithdraw(_ value:Double) -> Apiproto.WithdrawInfo.Builder {
                self.totalWithdraw = value
                return self
            }
            @discardableResult
            public func clearTotalWithdraw() -> Apiproto.WithdrawInfo.Builder{
                builderResult.hasTotalWithdraw = false
                builderResult.totalWithdraw = Double(0)
                return self
            }
            /// 当前可提现金额
            public var curWithdraw:Double {
                get {
                    return builderResult.curWithdraw
                }
                set (value) {
                    builderResult.hasCurWithdraw = true
                    builderResult.curWithdraw = value
                }
            }
            public var hasCurWithdraw:Bool {
                get {
                    return builderResult.hasCurWithdraw
                }
            }
            @discardableResult
            public func setCurWithdraw(_ value:Double) -> Apiproto.WithdrawInfo.Builder {
                self.curWithdraw = value
                return self
            }
            @discardableResult
            public func clearCurWithdraw() -> Apiproto.WithdrawInfo.Builder{
                builderResult.hasCurWithdraw = false
                builderResult.curWithdraw = Double(0)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.WithdrawInfo.Builder {
                builderResult = Apiproto.WithdrawInfo()
                return self
            }
            override public func clone() throws -> Apiproto.WithdrawInfo.Builder {
                return try Apiproto.WithdrawInfo.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.WithdrawInfo {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.WithdrawInfo {
                let returnMe:Apiproto.WithdrawInfo = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.WithdrawInfo) throws -> Apiproto.WithdrawInfo.Builder {
                if other == Apiproto.WithdrawInfo() {
                    return self
                }
                if other.hasTotalWin {
                    totalWin = other.totalWin
                }
                if other.hasTotalWithdraw {
                    totalWithdraw = other.totalWithdraw
                }
                if other.hasCurWithdraw {
                    curWithdraw = other.curWithdraw
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.WithdrawInfo.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.WithdrawInfo.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 9:
                        totalWin = try codedInputStream.readDouble()

                    case 17:
                        totalWithdraw = try codedInputStream.readDouble()

                    case 25:
                        curWithdraw = try codedInputStream.readDouble()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.WithdrawInfo.Builder {
                let resultDecodedBuilder = Apiproto.WithdrawInfo.Builder()
                if let jsonValueTotalWin = jsonMap["totalWin"] as? Double {
                    resultDecodedBuilder.totalWin = Double(jsonValueTotalWin)
                } else if let jsonValueTotalWin = jsonMap["totalWin"] as? String {
                    resultDecodedBuilder.totalWin = Double(jsonValueTotalWin)!
                }
                if let jsonValueTotalWithdraw = jsonMap["totalWithdraw"] as? Double {
                    resultDecodedBuilder.totalWithdraw = Double(jsonValueTotalWithdraw)
                } else if let jsonValueTotalWithdraw = jsonMap["totalWithdraw"] as? String {
                    resultDecodedBuilder.totalWithdraw = Double(jsonValueTotalWithdraw)!
                }
                if let jsonValueCurWithdraw = jsonMap["curWithdraw"] as? Double {
                    resultDecodedBuilder.curWithdraw = Double(jsonValueCurWithdraw)
                } else if let jsonValueCurWithdraw = jsonMap["curWithdraw"] as? String {
                    resultDecodedBuilder.curWithdraw = Double(jsonValueCurWithdraw)!
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.WithdrawInfo.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.WithdrawInfo.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class WithdrawRequest : GeneratedMessage {

        public static func == (lhs: Apiproto.WithdrawRequest, rhs: Apiproto.WithdrawRequest) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasType == rhs.hasType) && (!lhs.hasType || lhs.type == rhs.type)
            fieldCheck = fieldCheck && (lhs.hasAmount == rhs.hasAmount) && (!lhs.hasAmount || lhs.amount == rhs.amount)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var type:Apiproto.WithdrawType = Apiproto.WithdrawType.toUnknown
        public fileprivate(set) var hasType:Bool = false
        /// 提现金额
        public fileprivate(set) var amount:Double = Double(0)
        public fileprivate(set) var hasAmount:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasType {
                try codedOutputStream.writeEnum(fieldNumber: 1, value:type.rawValue)
            }
            if hasAmount {
                try codedOutputStream.writeDouble(fieldNumber: 2, value:amount)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if (hasType) {
                serialize_size += type.rawValue.computeEnumSize(fieldNumber: 1)
            }
            if hasAmount {
                serialize_size += amount.computeDoubleSize(fieldNumber: 2)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.WithdrawRequest.Builder {
            return Apiproto.WithdrawRequest.classBuilder() as! Apiproto.WithdrawRequest.Builder
        }
        public func getBuilder() -> Apiproto.WithdrawRequest.Builder {
            return classBuilder() as! Apiproto.WithdrawRequest.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.WithdrawRequest.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.WithdrawRequest.Builder()
        }
        public func toBuilder() throws -> Apiproto.WithdrawRequest.Builder {
            return try Apiproto.WithdrawRequest.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.WithdrawRequest) throws -> Apiproto.WithdrawRequest.Builder {
            return try Apiproto.WithdrawRequest.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasType {
                jsonMap["type"] = type.toString()
            }
            if hasAmount {
                jsonMap["amount"] = Double(amount)
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.WithdrawRequest {
            return try Apiproto.WithdrawRequest.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.WithdrawRequest {
            return try Apiproto.WithdrawRequest.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if (hasType) {
                output += "\(indent) type: \(type.description)\n"
            }
            if hasAmount {
                output += "\(indent) amount: \(amount) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasType {
                     hashCode = (hashCode &* 31) &+ type.hashValue
                }
                if hasAmount {
                    hashCode = (hashCode &* 31) &+ amount.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.WithdrawRequest"
        }
        override public func className() -> String {
            return "Apiproto.WithdrawRequest"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.WithdrawRequest = Apiproto.WithdrawRequest()
            public func getMessage() -> Apiproto.WithdrawRequest {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            /// 提现类型
                public var type:Apiproto.WithdrawType {
                    get {
                        return builderResult.type
                    }
                    set (value) {
                        builderResult.hasType = true
                        builderResult.type = value
                    }
                }
                public var hasType:Bool{
                    get {
                        return builderResult.hasType
                    }
                }
            @discardableResult
                public func setType(_ value:Apiproto.WithdrawType) -> Apiproto.WithdrawRequest.Builder {
                  self.type = value
                  return self
                }
            @discardableResult
                public func clearType() -> Apiproto.WithdrawRequest.Builder {
                   builderResult.hasType = false
                   builderResult.type = .toUnknown
                   return self
                }
            /// 提现金额
            public var amount:Double {
                get {
                    return builderResult.amount
                }
                set (value) {
                    builderResult.hasAmount = true
                    builderResult.amount = value
                }
            }
            public var hasAmount:Bool {
                get {
                    return builderResult.hasAmount
                }
            }
            @discardableResult
            public func setAmount(_ value:Double) -> Apiproto.WithdrawRequest.Builder {
                self.amount = value
                return self
            }
            @discardableResult
            public func clearAmount() -> Apiproto.WithdrawRequest.Builder{
                builderResult.hasAmount = false
                builderResult.amount = Double(0)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.WithdrawRequest.Builder {
                builderResult = Apiproto.WithdrawRequest()
                return self
            }
            override public func clone() throws -> Apiproto.WithdrawRequest.Builder {
                return try Apiproto.WithdrawRequest.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.WithdrawRequest {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.WithdrawRequest {
                let returnMe:Apiproto.WithdrawRequest = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.WithdrawRequest) throws -> Apiproto.WithdrawRequest.Builder {
                if other == Apiproto.WithdrawRequest() {
                    return self
                }
                if other.hasType {
                    type = other.type
                }
                if other.hasAmount {
                    amount = other.amount
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.WithdrawRequest.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.WithdrawRequest.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        let valueInttype = try codedInputStream.readEnum()
                        if let enumstype = Apiproto.WithdrawType(rawValue:valueInttype){
                            type = enumstype
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 1, value:Int64(valueInttype))
                        }

                    case 17:
                        amount = try codedInputStream.readDouble()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.WithdrawRequest.Builder {
                let resultDecodedBuilder = Apiproto.WithdrawRequest.Builder()
                if let jsonValueType = jsonMap["type"] as? String {
                    resultDecodedBuilder.type = try Apiproto.WithdrawType.fromString(str: jsonValueType)
                }
                if let jsonValueAmount = jsonMap["amount"] as? Double {
                    resultDecodedBuilder.amount = Double(jsonValueAmount)
                } else if let jsonValueAmount = jsonMap["amount"] as? String {
                    resultDecodedBuilder.amount = Double(jsonValueAmount)!
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.WithdrawRequest.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.WithdrawRequest.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class WithdrawProgress : GeneratedMessage {

        public static func == (lhs: Apiproto.WithdrawProgress, rhs: Apiproto.WithdrawProgress) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.stepList == rhs.stepList)
            fieldCheck = fieldCheck && (lhs.hasCurStep == rhs.hasCurStep) && (!lhs.hasCurStep || lhs.curStep == rhs.curStep)
            fieldCheck = fieldCheck && (lhs.hasIsSuccess == rhs.hasIsSuccess) && (!lhs.hasIsSuccess || lhs.isSuccess == rhs.isSuccess)
            fieldCheck = fieldCheck && (lhs.hasDesc == rhs.hasDesc) && (!lhs.hasDesc || lhs.desc == rhs.desc)
            fieldCheck = fieldCheck && (lhs.detailList == rhs.detailList)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }



        //Nested type declaration start

        final public class Detail : GeneratedMessage {

            public static func == (lhs: Apiproto.WithdrawProgress.Detail, rhs: Apiproto.WithdrawProgress.Detail) -> Bool {
                if lhs === rhs {
                    return true
                }
                var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                fieldCheck = fieldCheck && (lhs.hasKey == rhs.hasKey) && (!lhs.hasKey || lhs.key == rhs.key)
                fieldCheck = fieldCheck && (lhs.hasValue == rhs.hasValue) && (!lhs.hasValue || lhs.value == rhs.value)
                fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                return fieldCheck
            }

            public fileprivate(set) var key:String = ""
            public fileprivate(set) var hasKey:Bool = false

            public fileprivate(set) var value:String = ""
            public fileprivate(set) var hasValue:Bool = false

            required public init() {
                super.init()
            }
            override public func isInitialized() -> Bool {
                return true
            }
            override public func writeTo(codedOutputStream: CodedOutputStream) throws {
                if hasKey {
                    try codedOutputStream.writeString(fieldNumber: 1, value:key)
                }
                if hasValue {
                    try codedOutputStream.writeString(fieldNumber: 2, value:value)
                }
                try unknownFields.writeTo(codedOutputStream: codedOutputStream)
            }
            override public func serializedSize() -> Int32 {
                var serialize_size:Int32 = memoizedSerializedSize
                if serialize_size != -1 {
                 return serialize_size
                }

                serialize_size = 0
                if hasKey {
                    serialize_size += key.computeStringSize(fieldNumber: 1)
                }
                if hasValue {
                    serialize_size += value.computeStringSize(fieldNumber: 2)
                }
                serialize_size += unknownFields.serializedSize()
                memoizedSerializedSize = serialize_size
                return serialize_size
            }
            public class func getBuilder() -> Apiproto.WithdrawProgress.Detail.Builder {
                return Apiproto.WithdrawProgress.Detail.classBuilder() as! Apiproto.WithdrawProgress.Detail.Builder
            }
            public func getBuilder() -> Apiproto.WithdrawProgress.Detail.Builder {
                return classBuilder() as! Apiproto.WithdrawProgress.Detail.Builder
            }
            override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
                return Apiproto.WithdrawProgress.Detail.Builder()
            }
            override public func classBuilder() -> ProtocolBuffersMessageBuilder {
                return Apiproto.WithdrawProgress.Detail.Builder()
            }
            public func toBuilder() throws -> Apiproto.WithdrawProgress.Detail.Builder {
                return try Apiproto.WithdrawProgress.Detail.builderWithPrototype(prototype:self)
            }
            public class func builderWithPrototype(prototype:Apiproto.WithdrawProgress.Detail) throws -> Apiproto.WithdrawProgress.Detail.Builder {
                return try Apiproto.WithdrawProgress.Detail.Builder().mergeFrom(other:prototype)
            }
            override public func encode() throws -> Dictionary<String,Any> {
                guard isInitialized() else {
                    throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
                }

                var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
                if hasKey {
                    jsonMap["key"] = key
                }
                if hasValue {
                    jsonMap["value"] = value
                }
                return jsonMap
            }
            override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.WithdrawProgress.Detail {
                return try Apiproto.WithdrawProgress.Detail.Builder.decodeToBuilder(jsonMap:jsonMap).build()
            }
            override class public func fromJSON(data:Data) throws -> Apiproto.WithdrawProgress.Detail {
                return try Apiproto.WithdrawProgress.Detail.Builder.fromJSONToBuilder(data:data).build()
            }
            override public func getDescription(indent:String) throws -> String {
                var output = ""
                if hasKey {
                    output += "\(indent) key: \(key) \n"
                }
                if hasValue {
                    output += "\(indent) value: \(value) \n"
                }
                output += unknownFields.getDescription(indent: indent)
                return output
            }
            override public var hashValue:Int {
                get {
                    var hashCode:Int = 7
                    if hasKey {
                        hashCode = (hashCode &* 31) &+ key.hashValue
                    }
                    if hasValue {
                        hashCode = (hashCode &* 31) &+ value.hashValue
                    }
                    hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                    return hashCode
                }
            }


            //Meta information declaration start

            override public class func className() -> String {
                return "Apiproto.WithdrawProgress.Detail"
            }
            override public func className() -> String {
                return "Apiproto.WithdrawProgress.Detail"
            }
            //Meta information declaration end

            final public class Builder : GeneratedMessageBuilder {
                fileprivate var builderResult:Apiproto.WithdrawProgress.Detail = Apiproto.WithdrawProgress.Detail()
                public func getMessage() -> Apiproto.WithdrawProgress.Detail {
                    return builderResult
                }

                required override public init () {
                    super.init()
                }
                public var key:String {
                    get {
                        return builderResult.key
                    }
                    set (value) {
                        builderResult.hasKey = true
                        builderResult.key = value
                    }
                }
                public var hasKey:Bool {
                    get {
                        return builderResult.hasKey
                    }
                }
                @discardableResult
                public func setKey(_ value:String) -> Apiproto.WithdrawProgress.Detail.Builder {
                    self.key = value
                    return self
                }
                @discardableResult
                public func clearKey() -> Apiproto.WithdrawProgress.Detail.Builder{
                    builderResult.hasKey = false
                    builderResult.key = ""
                    return self
                }
                public var value:String {
                    get {
                        return builderResult.value
                    }
                    set (value) {
                        builderResult.hasValue = true
                        builderResult.value = value
                    }
                }
                public var hasValue:Bool {
                    get {
                        return builderResult.hasValue
                    }
                }
                @discardableResult
                public func setValue(_ value:String) -> Apiproto.WithdrawProgress.Detail.Builder {
                    self.value = value
                    return self
                }
                @discardableResult
                public func clearValue() -> Apiproto.WithdrawProgress.Detail.Builder{
                    builderResult.hasValue = false
                    builderResult.value = ""
                    return self
                }
                override public var internalGetResult:GeneratedMessage {
                    get {
                        return builderResult
                    }
                }
                @discardableResult
                override public func clear() -> Apiproto.WithdrawProgress.Detail.Builder {
                    builderResult = Apiproto.WithdrawProgress.Detail()
                    return self
                }
                override public func clone() throws -> Apiproto.WithdrawProgress.Detail.Builder {
                    return try Apiproto.WithdrawProgress.Detail.builderWithPrototype(prototype:builderResult)
                }
                override public func build() throws -> Apiproto.WithdrawProgress.Detail {
                    try checkInitialized()
                    return buildPartial()
                }
                public func buildPartial() -> Apiproto.WithdrawProgress.Detail {
                    let returnMe:Apiproto.WithdrawProgress.Detail = builderResult
                    return returnMe
                }
                @discardableResult
                public func mergeFrom(other:Apiproto.WithdrawProgress.Detail) throws -> Apiproto.WithdrawProgress.Detail.Builder {
                    if other == Apiproto.WithdrawProgress.Detail() {
                        return self
                    }
                    if other.hasKey {
                        key = other.key
                    }
                    if other.hasValue {
                        value = other.value
                    }
                    try merge(unknownField: other.unknownFields)
                    return self
                }
                @discardableResult
                override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.WithdrawProgress.Detail.Builder {
                    return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
                }
                @discardableResult
                override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.WithdrawProgress.Detail.Builder {
                    let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                    while (true) {
                        let protobufTag = try codedInputStream.readTag()
                        switch protobufTag {
                        case 0: 
                            self.unknownFields = try unknownFieldsBuilder.build()
                            return self

                        case 10:
                            key = try codedInputStream.readString()

                        case 18:
                            value = try codedInputStream.readString()

                        default:
                            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                                unknownFields = try unknownFieldsBuilder.build()
                                return self
                            }
                        }
                    }
                }
                class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.WithdrawProgress.Detail.Builder {
                    let resultDecodedBuilder = Apiproto.WithdrawProgress.Detail.Builder()
                    if let jsonValueKey = jsonMap["key"] as? String {
                        resultDecodedBuilder.key = jsonValueKey
                    }
                    if let jsonValueValue = jsonMap["value"] as? String {
                        resultDecodedBuilder.value = jsonValueValue
                    }
                    return resultDecodedBuilder
                }
                override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.WithdrawProgress.Detail.Builder {
                    let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                    guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                      throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                    }
                    return try Apiproto.WithdrawProgress.Detail.Builder.decodeToBuilder(jsonMap:jsDataCast)
                }
            }

        }

        //Nested type declaration end

        /// 所有步骤名称列表
        public fileprivate(set) var stepList:Array<String> = Array<String>()
        /// 当前步骤（1/2/3)
        public fileprivate(set) var curStep:Int32 = Int32(0)
        public fileprivate(set) var hasCurStep:Bool = false

        /// 当前步骤是否成功
        public fileprivate(set) var isSuccess:Bool = false
        public fileprivate(set) var hasIsSuccess:Bool = false

        /// 当前步骤描述
        public fileprivate(set) var desc:String = ""
        public fileprivate(set) var hasDesc:Bool = false

        public fileprivate(set) var detailList:Array<Apiproto.WithdrawProgress.Detail>  = Array<Apiproto.WithdrawProgress.Detail>()
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if !stepList.isEmpty {
                for oneValuestepList in stepList {
                    try codedOutputStream.writeString(fieldNumber: 1, value:oneValuestepList)
                }
            }
            if hasCurStep {
                try codedOutputStream.writeInt32(fieldNumber: 2, value:curStep)
            }
            if hasIsSuccess {
                try codedOutputStream.writeBool(fieldNumber: 3, value:isSuccess)
            }
            if hasDesc {
                try codedOutputStream.writeString(fieldNumber: 4, value:desc)
            }
            for oneElementDetailList in detailList {
                  try codedOutputStream.writeMessage(fieldNumber: 5, value:oneElementDetailList)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            var dataSizeStepList:Int32 = 0
            for oneValuestepList in stepList {
                dataSizeStepList += oneValuestepList.computeStringSizeNoTag()
            }
            serialize_size += dataSizeStepList
            serialize_size += 1 * Int32(stepList.count)
            if hasCurStep {
                serialize_size += curStep.computeInt32Size(fieldNumber: 2)
            }
            if hasIsSuccess {
                serialize_size += isSuccess.computeBoolSize(fieldNumber: 3)
            }
            if hasDesc {
                serialize_size += desc.computeStringSize(fieldNumber: 4)
            }
            for oneElementDetailList in detailList {
                serialize_size += oneElementDetailList.computeMessageSize(fieldNumber: 5)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.WithdrawProgress.Builder {
            return Apiproto.WithdrawProgress.classBuilder() as! Apiproto.WithdrawProgress.Builder
        }
        public func getBuilder() -> Apiproto.WithdrawProgress.Builder {
            return classBuilder() as! Apiproto.WithdrawProgress.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.WithdrawProgress.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.WithdrawProgress.Builder()
        }
        public func toBuilder() throws -> Apiproto.WithdrawProgress.Builder {
            return try Apiproto.WithdrawProgress.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.WithdrawProgress) throws -> Apiproto.WithdrawProgress.Builder {
            return try Apiproto.WithdrawProgress.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if !stepList.isEmpty {
                var jsonArrayStepList:Array<String> = []
                for oneValueStepList in stepList {
                    jsonArrayStepList.append(oneValueStepList)
                }
                jsonMap["stepList"] = jsonArrayStepList
            }
            if hasCurStep {
                jsonMap["curStep"] = Int(curStep)
            }
            if hasIsSuccess {
                jsonMap["isSuccess"] = isSuccess
            }
            if hasDesc {
                jsonMap["desc"] = desc
            }
            if !detailList.isEmpty {
                var jsonArrayDetailList:Array<Dictionary<String,Any>> = []
                for oneValueDetailList in detailList {
                    let ecodedMessageDetailList = try oneValueDetailList.encode()
                    jsonArrayDetailList.append(ecodedMessageDetailList)
                }
                jsonMap["detailList"] = jsonArrayDetailList
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.WithdrawProgress {
            return try Apiproto.WithdrawProgress.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.WithdrawProgress {
            return try Apiproto.WithdrawProgress.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            var stepListElementIndex:Int = 0
            for oneValueStepList in stepList  {
                output += "\(indent) stepList[\(stepListElementIndex)]: \(oneValueStepList)\n"
                stepListElementIndex += 1
            }
            if hasCurStep {
                output += "\(indent) curStep: \(curStep) \n"
            }
            if hasIsSuccess {
                output += "\(indent) isSuccess: \(isSuccess) \n"
            }
            if hasDesc {
                output += "\(indent) desc: \(desc) \n"
            }
            var detailListElementIndex:Int = 0
            for oneElementDetailList in detailList {
                output += "\(indent) detailList[\(detailListElementIndex)] {\n"
                output += try oneElementDetailList.getDescription(indent: "\(indent)  ")
                output += "\(indent)}\n"
                detailListElementIndex += 1
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                for oneValueStepList in stepList {
                    hashCode = (hashCode &* 31) &+ oneValueStepList.hashValue
                }
                if hasCurStep {
                    hashCode = (hashCode &* 31) &+ curStep.hashValue
                }
                if hasIsSuccess {
                    hashCode = (hashCode &* 31) &+ isSuccess.hashValue
                }
                if hasDesc {
                    hashCode = (hashCode &* 31) &+ desc.hashValue
                }
                for oneElementDetailList in detailList {
                    hashCode = (hashCode &* 31) &+ oneElementDetailList.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.WithdrawProgress"
        }
        override public func className() -> String {
            return "Apiproto.WithdrawProgress"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.WithdrawProgress = Apiproto.WithdrawProgress()
            public func getMessage() -> Apiproto.WithdrawProgress {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            /// 所有步骤名称列表
            public var stepList:Array<String> {
                get {
                    return builderResult.stepList
                }
                set (array) {
                    builderResult.stepList = array
                }
            }
            @discardableResult
            public func setStepList(_ value:Array<String>) -> Apiproto.WithdrawProgress.Builder {
                self.stepList = value
                return self
            }
            @discardableResult
            public func clearStepList() -> Apiproto.WithdrawProgress.Builder {
                builderResult.stepList.removeAll(keepingCapacity: false)
                return self
            }
            /// 当前步骤（1/2/3)
            public var curStep:Int32 {
                get {
                    return builderResult.curStep
                }
                set (value) {
                    builderResult.hasCurStep = true
                    builderResult.curStep = value
                }
            }
            public var hasCurStep:Bool {
                get {
                    return builderResult.hasCurStep
                }
            }
            @discardableResult
            public func setCurStep(_ value:Int32) -> Apiproto.WithdrawProgress.Builder {
                self.curStep = value
                return self
            }
            @discardableResult
            public func clearCurStep() -> Apiproto.WithdrawProgress.Builder{
                builderResult.hasCurStep = false
                builderResult.curStep = Int32(0)
                return self
            }
            /// 当前步骤是否成功
            public var isSuccess:Bool {
                get {
                    return builderResult.isSuccess
                }
                set (value) {
                    builderResult.hasIsSuccess = true
                    builderResult.isSuccess = value
                }
            }
            public var hasIsSuccess:Bool {
                get {
                    return builderResult.hasIsSuccess
                }
            }
            @discardableResult
            public func setIsSuccess(_ value:Bool) -> Apiproto.WithdrawProgress.Builder {
                self.isSuccess = value
                return self
            }
            @discardableResult
            public func clearIsSuccess() -> Apiproto.WithdrawProgress.Builder{
                builderResult.hasIsSuccess = false
                builderResult.isSuccess = false
                return self
            }
            /// 当前步骤描述
            public var desc:String {
                get {
                    return builderResult.desc
                }
                set (value) {
                    builderResult.hasDesc = true
                    builderResult.desc = value
                }
            }
            public var hasDesc:Bool {
                get {
                    return builderResult.hasDesc
                }
            }
            @discardableResult
            public func setDesc(_ value:String) -> Apiproto.WithdrawProgress.Builder {
                self.desc = value
                return self
            }
            @discardableResult
            public func clearDesc() -> Apiproto.WithdrawProgress.Builder{
                builderResult.hasDesc = false
                builderResult.desc = ""
                return self
            }
            /// 详情列表
            public var detailList:Array<Apiproto.WithdrawProgress.Detail> {
                get {
                    return builderResult.detailList
                }
                set (value) {
                    builderResult.detailList = value
                }
            }
            @discardableResult
            public func setDetailList(_ value:Array<Apiproto.WithdrawProgress.Detail>) -> Apiproto.WithdrawProgress.Builder {
                self.detailList = value
                return self
            }
            @discardableResult
            public func clearDetailList() -> Apiproto.WithdrawProgress.Builder {
                builderResult.detailList.removeAll(keepingCapacity: false)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.WithdrawProgress.Builder {
                builderResult = Apiproto.WithdrawProgress()
                return self
            }
            override public func clone() throws -> Apiproto.WithdrawProgress.Builder {
                return try Apiproto.WithdrawProgress.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.WithdrawProgress {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.WithdrawProgress {
                let returnMe:Apiproto.WithdrawProgress = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.WithdrawProgress) throws -> Apiproto.WithdrawProgress.Builder {
                if other == Apiproto.WithdrawProgress() {
                    return self
                }
                if !other.stepList.isEmpty {
                    builderResult.stepList += other.stepList
                }
                if other.hasCurStep {
                    curStep = other.curStep
                }
                if other.hasIsSuccess {
                    isSuccess = other.isSuccess
                }
                if other.hasDesc {
                    desc = other.desc
                }
                if !other.detailList.isEmpty  {
                     builderResult.detailList += other.detailList
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.WithdrawProgress.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.WithdrawProgress.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        stepList += [try codedInputStream.readString()]

                    case 16:
                        curStep = try codedInputStream.readInt32()

                    case 24:
                        isSuccess = try codedInputStream.readBool()

                    case 34:
                        desc = try codedInputStream.readString()

                    case 42:
                        let subBuilder = Apiproto.WithdrawProgress.Detail.Builder()
                        try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                        detailList.append(subBuilder.buildPartial())

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.WithdrawProgress.Builder {
                let resultDecodedBuilder = Apiproto.WithdrawProgress.Builder()
                if let jsonValueStepList = jsonMap["stepList"] as? Array<String> {
                    var jsonArrayStepList:Array<String> = []
                    for oneValueStepList in jsonValueStepList {
                        jsonArrayStepList.append(oneValueStepList)
                    }
                    resultDecodedBuilder.stepList = jsonArrayStepList
                }
                if let jsonValueCurStep = jsonMap["curStep"] as? Int {
                    resultDecodedBuilder.curStep = Int32(jsonValueCurStep)
                } else if let jsonValueCurStep = jsonMap["curStep"] as? String {
                    resultDecodedBuilder.curStep = Int32(jsonValueCurStep)!
                }
                if let jsonValueIsSuccess = jsonMap["isSuccess"] as? Bool {
                    resultDecodedBuilder.isSuccess = jsonValueIsSuccess
                }
                if let jsonValueDesc = jsonMap["desc"] as? String {
                    resultDecodedBuilder.desc = jsonValueDesc
                }
                if let jsonValueDetailList = jsonMap["detailList"] as? Array<Dictionary<String,Any>> {
                    var jsonArrayDetailList:Array<Apiproto.WithdrawProgress.Detail> = []
                    for oneValueDetailList in jsonValueDetailList {
                        let messageFromStringDetailList = try Apiproto.WithdrawProgress.Detail.Builder.decodeToBuilder(jsonMap:oneValueDetailList).build()

                        jsonArrayDetailList.append(messageFromStringDetailList)
                    }
                    resultDecodedBuilder.detailList = jsonArrayDetailList
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.WithdrawProgress.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.WithdrawProgress.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

}
extension Apiproto.WithdrawInfo: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.WithdrawInfo> {
        var mergedArray = Array<Apiproto.WithdrawInfo>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.WithdrawInfo? {
        return try Apiproto.WithdrawInfo.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.WithdrawInfo {
        return try Apiproto.WithdrawInfo.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.WithdrawRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.WithdrawInfo {
        return try Apiproto.WithdrawInfo.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.WithdrawInfo {
        return try Apiproto.WithdrawInfo.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.WithdrawInfo {
        return try Apiproto.WithdrawInfo.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.WithdrawInfo {
        return try Apiproto.WithdrawInfo.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.WithdrawInfo {
        return try Apiproto.WithdrawInfo.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "totalWin": return self.totalWin
        case "totalWithdraw": return self.totalWithdraw
        case "curWithdraw": return self.curWithdraw
        default: return nil
        }
    }
}
extension Apiproto.WithdrawInfo.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "totalWin": return self.totalWin
            case "totalWithdraw": return self.totalWithdraw
            case "curWithdraw": return self.curWithdraw
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "totalWin":
                guard let newSubscriptValue = newSubscriptValue as? Double else {
                    return
                }
                self.totalWin = newSubscriptValue
            case "totalWithdraw":
                guard let newSubscriptValue = newSubscriptValue as? Double else {
                    return
                }
                self.totalWithdraw = newSubscriptValue
            case "curWithdraw":
                guard let newSubscriptValue = newSubscriptValue as? Double else {
                    return
                }
                self.curWithdraw = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.WithdrawRequest: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.WithdrawRequest> {
        var mergedArray = Array<Apiproto.WithdrawRequest>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.WithdrawRequest? {
        return try Apiproto.WithdrawRequest.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.WithdrawRequest {
        return try Apiproto.WithdrawRequest.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.WithdrawRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.WithdrawRequest {
        return try Apiproto.WithdrawRequest.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.WithdrawRequest {
        return try Apiproto.WithdrawRequest.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.WithdrawRequest {
        return try Apiproto.WithdrawRequest.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.WithdrawRequest {
        return try Apiproto.WithdrawRequest.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.WithdrawRequest {
        return try Apiproto.WithdrawRequest.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "type": return self.type
        case "amount": return self.amount
        default: return nil
        }
    }
}
extension Apiproto.WithdrawRequest.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "type": return self.type
            case "amount": return self.amount
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "type":
                guard let newSubscriptValue = newSubscriptValue as? Apiproto.WithdrawType else {
                    return
                }
                self.type = newSubscriptValue
            case "amount":
                guard let newSubscriptValue = newSubscriptValue as? Double else {
                    return
                }
                self.amount = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.WithdrawProgress: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.WithdrawProgress> {
        var mergedArray = Array<Apiproto.WithdrawProgress>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.WithdrawProgress? {
        return try Apiproto.WithdrawProgress.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.WithdrawProgress {
        return try Apiproto.WithdrawProgress.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.WithdrawRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.WithdrawProgress {
        return try Apiproto.WithdrawProgress.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.WithdrawProgress {
        return try Apiproto.WithdrawProgress.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.WithdrawProgress {
        return try Apiproto.WithdrawProgress.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.WithdrawProgress {
        return try Apiproto.WithdrawProgress.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.WithdrawProgress {
        return try Apiproto.WithdrawProgress.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "stepList": return self.stepList
        case "curStep": return self.curStep
        case "isSuccess": return self.isSuccess
        case "desc": return self.desc
        case "detailList": return self.detailList
        default: return nil
        }
    }
}
extension Apiproto.WithdrawProgress.Detail: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.WithdrawProgress.Detail> {
        var mergedArray = Array<Apiproto.WithdrawProgress.Detail>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.WithdrawProgress.Detail? {
        return try Apiproto.WithdrawProgress.Detail.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.WithdrawProgress.Detail {
        return try Apiproto.WithdrawProgress.Detail.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.WithdrawRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.WithdrawProgress.Detail {
        return try Apiproto.WithdrawProgress.Detail.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.WithdrawProgress.Detail {
        return try Apiproto.WithdrawProgress.Detail.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.WithdrawProgress.Detail {
        return try Apiproto.WithdrawProgress.Detail.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.WithdrawProgress.Detail {
        return try Apiproto.WithdrawProgress.Detail.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.WithdrawProgress.Detail {
        return try Apiproto.WithdrawProgress.Detail.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "key": return self.key
        case "value": return self.value
        default: return nil
        }
    }
}
extension Apiproto.WithdrawProgress.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "stepList": return self.stepList
            case "curStep": return self.curStep
            case "isSuccess": return self.isSuccess
            case "desc": return self.desc
            case "detailList": return self.detailList
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "stepList":
                guard let newSubscriptValue = newSubscriptValue as? Array<String> else {
                    return
                }
                self.stepList = newSubscriptValue
            case "curStep":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.curStep = newSubscriptValue
            case "isSuccess":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.isSuccess = newSubscriptValue
            case "desc":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.desc = newSubscriptValue
            case "detailList":
                guard let newSubscriptValue = newSubscriptValue as? Array<Apiproto.WithdrawProgress.Detail> else {
                    return
                }
                self.detailList = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.WithdrawProgress.Detail.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "key": return self.key
            case "value": return self.value
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "key":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.key = newSubscriptValue
            case "value":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.value = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
