/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "buycai.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public extension Apiproto{}

public extension Apiproto {
    public struct BuycaiRoot {
        public static let `default` = BuycaiRoot()
        public var extensionRegistry:ExtensionRegistry

        init() {
            extensionRegistry = ExtensionRegistry()
            registerAllExtensions(registry: extensionRegistry)
            Apiproto.OpencaiRoot.default.registerAllExtensions(registry: extensionRegistry)
        }
        public func registerAllExtensions(registry: ExtensionRegistry) {
        }
    }



    //Enum type declaration start 

    public enum BuycaiOrderType:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
        /// 普通订单
        case normal = 0

        /// 追号订单
        case chase = 1

        /// 合买订单
        case union = 2
        public func toString() -> String {
            switch self {
            case .normal: return "Normal"
            case .chase: return "Chase"
            case .union: return "Union"
            }
        }
        public static func fromString(str:String) throws -> Apiproto.BuycaiOrderType {
            switch str {
            case "Normal":    return .normal
            case "Chase":    return .chase
            case "Union":    return .union
            default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
            }
        }
        public var debugDescription:String { return getDescription() }
        public var description:String { return getDescription() }
        private func getDescription() -> String { 
            switch self {
            case .normal: return ".normal"
            case .chase: return ".chase"
            case .union: return ".union"
            }
        }
        public var hashValue:Int {
            return self.rawValue.hashValue
        }
        public static func ==(lhs:BuycaiOrderType, rhs:BuycaiOrderType) -> Bool {
            return lhs.hashValue == rhs.hashValue
        }
    }

    //Enum type declaration end 



    //Enum type declaration start 

    public enum TimeRange:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
        case trDefault = 0
        case trToday = 1
        case trWeek = 2
        case trMonth = 3
        case trThreeMonth = 4
        public func toString() -> String {
            switch self {
            case .trDefault: return "TR_Default"
            case .trToday: return "TR_Today"
            case .trWeek: return "TR_Week"
            case .trMonth: return "TR_Month"
            case .trThreeMonth: return "TR_ThreeMonth"
            }
        }
        public static func fromString(str:String) throws -> Apiproto.TimeRange {
            switch str {
            case "TR_Default":    return .trDefault
            case "TR_Today":    return .trToday
            case "TR_Week":    return .trWeek
            case "TR_Month":    return .trMonth
            case "TR_ThreeMonth":    return .trThreeMonth
            default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
            }
        }
        public var debugDescription:String { return getDescription() }
        public var description:String { return getDescription() }
        private func getDescription() -> String { 
            switch self {
            case .trDefault: return ".trDefault"
            case .trToday: return ".trToday"
            case .trWeek: return ".trWeek"
            case .trMonth: return ".trMonth"
            case .trThreeMonth: return ".trThreeMonth"
            }
        }
        public var hashValue:Int {
            return self.rawValue.hashValue
        }
        public static func ==(lhs:TimeRange, rhs:TimeRange) -> Bool {
            return lhs.hashValue == rhs.hashValue
        }
    }

    //Enum type declaration end 



    //Enum type declaration start 

    public enum VendorOrderStatus:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
        case vosAll = 0

        /// 待出票
        case vosWaitTicket = 1

        /// 出票失败
        case vosTicketFail = 2

        /// 待开奖
        case vosWaitOpen = 3

        /// 已中奖
        case vosWin = 4

        /// 未中奖
        case vosNotWin = 5
        public func toString() -> String {
            switch self {
            case .vosAll: return "VOS_All"
            case .vosWaitTicket: return "VOS_WaitTicket"
            case .vosTicketFail: return "VOS_TicketFail"
            case .vosWaitOpen: return "VOS_WaitOpen"
            case .vosWin: return "VOS_Win"
            case .vosNotWin: return "VOS_NotWin"
            }
        }
        public static func fromString(str:String) throws -> Apiproto.VendorOrderStatus {
            switch str {
            case "VOS_All":    return .vosAll
            case "VOS_WaitTicket":    return .vosWaitTicket
            case "VOS_TicketFail":    return .vosTicketFail
            case "VOS_WaitOpen":    return .vosWaitOpen
            case "VOS_Win":    return .vosWin
            case "VOS_NotWin":    return .vosNotWin
            default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
            }
        }
        public var debugDescription:String { return getDescription() }
        public var description:String { return getDescription() }
        private func getDescription() -> String { 
            switch self {
            case .vosAll: return ".vosAll"
            case .vosWaitTicket: return ".vosWaitTicket"
            case .vosTicketFail: return ".vosTicketFail"
            case .vosWaitOpen: return ".vosWaitOpen"
            case .vosWin: return ".vosWin"
            case .vosNotWin: return ".vosNotWin"
            }
        }
        public var hashValue:Int {
            return self.rawValue.hashValue
        }
        public static func ==(lhs:VendorOrderStatus, rhs:VendorOrderStatus) -> Bool {
            return lhs.hashValue == rhs.hashValue
        }
    }

    //Enum type declaration end 



    //Enum type declaration start 

    public enum UserOrderStatus:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
        case uosAll = 0

        /// 进行中
        case uosDoing = 1

        /// 已完成
        case uosFinish = 2

        /// 已停止
        case uosStop = 3
        public func toString() -> String {
            switch self {
            case .uosAll: return "UOS_All"
            case .uosDoing: return "UOS_Doing"
            case .uosFinish: return "UOS_Finish"
            case .uosStop: return "UOS_Stop"
            }
        }
        public static func fromString(str:String) throws -> Apiproto.UserOrderStatus {
            switch str {
            case "UOS_All":    return .uosAll
            case "UOS_Doing":    return .uosDoing
            case "UOS_Finish":    return .uosFinish
            case "UOS_Stop":    return .uosStop
            default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
            }
        }
        public var debugDescription:String { return getDescription() }
        public var description:String { return getDescription() }
        private func getDescription() -> String { 
            switch self {
            case .uosAll: return ".uosAll"
            case .uosDoing: return ".uosDoing"
            case .uosFinish: return ".uosFinish"
            case .uosStop: return ".uosStop"
            }
        }
        public var hashValue:Int {
            return self.rawValue.hashValue
        }
        public static func ==(lhs:UserOrderStatus, rhs:UserOrderStatus) -> Bool {
            return lhs.hashValue == rhs.hashValue
        }
    }

    //Enum type declaration end 

    final public class Balls : GeneratedMessage {

        public static func == (lhs: Apiproto.Balls, rhs: Apiproto.Balls) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.list == rhs.list)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var list:Array<Int32> = Array<Int32>()
        private var listMemoizedSerializedSize:Int32 = -1
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if !list.isEmpty {
                try codedOutputStream.writeRawVarint32(value: 10)
                try codedOutputStream.writeRawVarint32(value: listMemoizedSerializedSize)
                for oneValuelist in list {
                    try codedOutputStream.writeInt32NoTag(value: oneValuelist)
                }
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            var dataSizeList:Int32 = 0
            for oneValuelist in list {
                dataSizeList += oneValuelist.computeInt32SizeNoTag()
            }
            serialize_size += dataSizeList
            if !list.isEmpty {
                serialize_size += 1
                serialize_size += dataSizeList.computeInt32SizeNoTag()
            }
            listMemoizedSerializedSize = dataSizeList
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.Balls.Builder {
            return Apiproto.Balls.classBuilder() as! Apiproto.Balls.Builder
        }
        public func getBuilder() -> Apiproto.Balls.Builder {
            return classBuilder() as! Apiproto.Balls.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.Balls.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.Balls.Builder()
        }
        public func toBuilder() throws -> Apiproto.Balls.Builder {
            return try Apiproto.Balls.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.Balls) throws -> Apiproto.Balls.Builder {
            return try Apiproto.Balls.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if !list.isEmpty {
                var jsonArrayList:Array<Int> = []
                for oneValueList in list {
                    jsonArrayList.append(Int(oneValueList))
                }
                jsonMap["list"] = jsonArrayList
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.Balls {
            return try Apiproto.Balls.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.Balls {
            return try Apiproto.Balls.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            var listElementIndex:Int = 0
            for oneValueList in list  {
                output += "\(indent) list[\(listElementIndex)]: \(oneValueList)\n"
                listElementIndex += 1
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                for oneValueList in list {
                    hashCode = (hashCode &* 31) &+ oneValueList.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.Balls"
        }
        override public func className() -> String {
            return "Apiproto.Balls"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.Balls = Apiproto.Balls()
            public func getMessage() -> Apiproto.Balls {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var list:Array<Int32> {
                get {
                    return builderResult.list
                }
                set (array) {
                    builderResult.list = array
                }
            }
            @discardableResult
            public func setList(_ value:Array<Int32>) -> Apiproto.Balls.Builder {
                self.list = value
                return self
            }
            @discardableResult
            public func clearList() -> Apiproto.Balls.Builder {
                builderResult.list.removeAll(keepingCapacity: false)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.Balls.Builder {
                builderResult = Apiproto.Balls()
                return self
            }
            override public func clone() throws -> Apiproto.Balls.Builder {
                return try Apiproto.Balls.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.Balls {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.Balls {
                let returnMe:Apiproto.Balls = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.Balls) throws -> Apiproto.Balls.Builder {
                if other == Apiproto.Balls() {
                    return self
                }
                if !other.list.isEmpty {
                    builderResult.list += other.list
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.Balls.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.Balls.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        let length = Int(try codedInputStream.readRawVarint32())
                        let limit = try codedInputStream.pushLimit(byteLimit: length)
                        while (codedInputStream.bytesUntilLimit() > 0) {
                            builderResult.list.append(try codedInputStream.readInt32())
                        }
                        codedInputStream.popLimit(oldLimit: limit)

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.Balls.Builder {
                let resultDecodedBuilder = Apiproto.Balls.Builder()
                if let jsonValueList = jsonMap["list"] as? Array<Int> {
                    var jsonArrayList:Array<Int32> = []
                    for oneValueList in jsonValueList {
                        jsonArrayList.append(Int32(oneValueList))
                    }
                    resultDecodedBuilder.list = jsonArrayList
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.Balls.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.Balls.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class BuycaiScheme : GeneratedMessage {

        public static func == (lhs: Apiproto.BuycaiScheme, rhs: Apiproto.BuycaiScheme) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasType == rhs.hasType) && (!lhs.hasType || lhs.type == rhs.type)
            fieldCheck = fieldCheck && (lhs.hasSelectBalls == rhs.hasSelectBalls) && (!lhs.hasSelectBalls || lhs.selectBalls == rhs.selectBalls)
            fieldCheck = fieldCheck && (lhs.hasNum == rhs.hasNum) && (!lhs.hasNum || lhs.num == rhs.num)
            fieldCheck = fieldCheck && (lhs.hasMoney == rhs.hasMoney) && (!lhs.hasMoney || lhs.money == rhs.money)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }



        //Nested type declaration start

        final public class SelectBallsEntry : GeneratedMessage {

            public static func == (lhs: Apiproto.BuycaiScheme.SelectBallsEntry, rhs: Apiproto.BuycaiScheme.SelectBallsEntry) -> Bool {
                if lhs === rhs {
                    return true
                }
                var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                fieldCheck = fieldCheck && (lhs.hasKey == rhs.hasKey) && (!lhs.hasKey || lhs.key == rhs.key)
                fieldCheck = fieldCheck && (lhs.hasValue == rhs.hasValue) && (!lhs.hasValue || lhs.value == rhs.value)
                fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                return fieldCheck
            }

            public fileprivate(set) var key:String = ""
            public fileprivate(set) var hasKey:Bool = false

            public fileprivate(set) var value:Apiproto.Balls!
            public fileprivate(set) var hasValue:Bool = false
            required public init() {
                super.init()
            }
            override public func isInitialized() -> Bool {
                return true
            }
            override public func writeTo(codedOutputStream: CodedOutputStream) throws {
                if hasKey {
                    try codedOutputStream.writeString(fieldNumber: 1, value:key)
                }
                if hasValue {
                    try codedOutputStream.writeMessage(fieldNumber: 2, value:value)
                }
                try unknownFields.writeTo(codedOutputStream: codedOutputStream)
            }
            override public func serializedSize() -> Int32 {
                var serialize_size:Int32 = memoizedSerializedSize
                if serialize_size != -1 {
                 return serialize_size
                }

                serialize_size = 0
                if hasKey {
                    serialize_size += key.computeStringSize(fieldNumber: 1)
                }
                if hasValue {
                    if let varSizevalue = value?.computeMessageSize(fieldNumber: 2) {
                        serialize_size += varSizevalue
                    }
                }
                serialize_size += unknownFields.serializedSize()
                memoizedSerializedSize = serialize_size
                return serialize_size
            }
            public class func getBuilder() -> Apiproto.BuycaiScheme.SelectBallsEntry.Builder {
                return Apiproto.BuycaiScheme.SelectBallsEntry.classBuilder() as! Apiproto.BuycaiScheme.SelectBallsEntry.Builder
            }
            public func getBuilder() -> Apiproto.BuycaiScheme.SelectBallsEntry.Builder {
                return classBuilder() as! Apiproto.BuycaiScheme.SelectBallsEntry.Builder
            }
            override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
                return Apiproto.BuycaiScheme.SelectBallsEntry.Builder()
            }
            override public func classBuilder() -> ProtocolBuffersMessageBuilder {
                return Apiproto.BuycaiScheme.SelectBallsEntry.Builder()
            }
            public func toBuilder() throws -> Apiproto.BuycaiScheme.SelectBallsEntry.Builder {
                return try Apiproto.BuycaiScheme.SelectBallsEntry.builderWithPrototype(prototype:self)
            }
            public class func builderWithPrototype(prototype:Apiproto.BuycaiScheme.SelectBallsEntry) throws -> Apiproto.BuycaiScheme.SelectBallsEntry.Builder {
                return try Apiproto.BuycaiScheme.SelectBallsEntry.Builder().mergeFrom(other:prototype)
            }
            override public func encode() throws -> Dictionary<String,Any> {
                guard isInitialized() else {
                    throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
                }

                var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
                if hasKey {
                    jsonMap["key"] = key
                }
                if hasValue {
                    jsonMap["value"] = try value.encode()
                }
                return jsonMap
            }
            override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.BuycaiScheme.SelectBallsEntry {
                return try Apiproto.BuycaiScheme.SelectBallsEntry.Builder.decodeToBuilder(jsonMap:jsonMap).build()
            }
            override class public func fromJSON(data:Data) throws -> Apiproto.BuycaiScheme.SelectBallsEntry {
                return try Apiproto.BuycaiScheme.SelectBallsEntry.Builder.fromJSONToBuilder(data:data).build()
            }
            override public func getDescription(indent:String) throws -> String {
                var output = ""
                if hasKey {
                    output += "\(indent) key: \(key) \n"
                }
                if hasValue {
                    output += "\(indent) value {\n"
                    if let outDescValue = value {
                        output += try outDescValue.getDescription(indent: "\(indent)  ")
                    }
                    output += "\(indent) }\n"
                }
                output += unknownFields.getDescription(indent: indent)
                return output
            }
            override public var hashValue:Int {
                get {
                    var hashCode:Int = 7
                    if hasKey {
                        hashCode = (hashCode &* 31) &+ key.hashValue
                    }
                    if hasValue {
                        if let hashValuevalue = value?.hashValue {
                            hashCode = (hashCode &* 31) &+ hashValuevalue
                        }
                    }
                    hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                    return hashCode
                }
            }


            //Meta information declaration start

            override public class func className() -> String {
                return "Apiproto.BuycaiScheme.SelectBallsEntry"
            }
            override public func className() -> String {
                return "Apiproto.BuycaiScheme.SelectBallsEntry"
            }
            //Meta information declaration end

            final public class Builder : GeneratedMessageBuilder {
                fileprivate var builderResult:Apiproto.BuycaiScheme.SelectBallsEntry = Apiproto.BuycaiScheme.SelectBallsEntry()
                public func getMessage() -> Apiproto.BuycaiScheme.SelectBallsEntry {
                    return builderResult
                }

                required override public init () {
                    super.init()
                }
                public var key:String {
                    get {
                        return builderResult.key
                    }
                    set (value) {
                        builderResult.hasKey = true
                        builderResult.key = value
                    }
                }
                public var hasKey:Bool {
                    get {
                        return builderResult.hasKey
                    }
                }
                @discardableResult
                public func setKey(_ value:String) -> Apiproto.BuycaiScheme.SelectBallsEntry.Builder {
                    self.key = value
                    return self
                }
                @discardableResult
                public func clearKey() -> Apiproto.BuycaiScheme.SelectBallsEntry.Builder{
                    builderResult.hasKey = false
                    builderResult.key = ""
                    return self
                }
                public var value:Apiproto.Balls! {
                    get {
                        if valueBuilder_ != nil {
                            builderResult.value = valueBuilder_.getMessage()
                        }
                        return builderResult.value
                    }
                    set (value) {
                        builderResult.hasValue = true
                        builderResult.value = value
                    }
                }
                public var hasValue:Bool {
                    get {
                        return builderResult.hasValue
                    }
                }
                fileprivate var valueBuilder_:Apiproto.Balls.Builder! {
                    didSet {
                        builderResult.hasValue = true
                    }
                }
                public func getValueBuilder() -> Apiproto.Balls.Builder {
                    if valueBuilder_ == nil {
                        valueBuilder_ = Apiproto.Balls.Builder()
                        builderResult.value = valueBuilder_.getMessage()
                        if value != nil {
                            try! valueBuilder_.mergeFrom(other: value)
                        }
                    }
                    return valueBuilder_
                }
                @discardableResult
                public func setValue(_ value:Apiproto.Balls!) -> Apiproto.BuycaiScheme.SelectBallsEntry.Builder {
                    self.value = value
                    return self
                }
                @discardableResult
                public func mergeValue(value:Apiproto.Balls) throws -> Apiproto.BuycaiScheme.SelectBallsEntry.Builder {
                    if builderResult.hasValue {
                        builderResult.value = try Apiproto.Balls.builderWithPrototype(prototype:builderResult.value).mergeFrom(other: value).buildPartial()
                    } else {
                        builderResult.value = value
                    }
                    builderResult.hasValue = true
                    return self
                }
                @discardableResult
                public func clearValue() -> Apiproto.BuycaiScheme.SelectBallsEntry.Builder {
                    valueBuilder_ = nil
                    builderResult.hasValue = false
                    builderResult.value = nil
                    return self
                }
                override public var internalGetResult:GeneratedMessage {
                    get {
                        return builderResult
                    }
                }
                @discardableResult
                override public func clear() -> Apiproto.BuycaiScheme.SelectBallsEntry.Builder {
                    builderResult = Apiproto.BuycaiScheme.SelectBallsEntry()
                    return self
                }
                override public func clone() throws -> Apiproto.BuycaiScheme.SelectBallsEntry.Builder {
                    return try Apiproto.BuycaiScheme.SelectBallsEntry.builderWithPrototype(prototype:builderResult)
                }
                override public func build() throws -> Apiproto.BuycaiScheme.SelectBallsEntry {
                    try checkInitialized()
                    return buildPartial()
                }
                public func buildPartial() -> Apiproto.BuycaiScheme.SelectBallsEntry {
                    let returnMe:Apiproto.BuycaiScheme.SelectBallsEntry = builderResult
                    return returnMe
                }
                @discardableResult
                public func mergeFrom(other:Apiproto.BuycaiScheme.SelectBallsEntry) throws -> Apiproto.BuycaiScheme.SelectBallsEntry.Builder {
                    if other == Apiproto.BuycaiScheme.SelectBallsEntry() {
                        return self
                    }
                    if other.hasKey {
                        key = other.key
                    }
                    if (other.hasValue) {
                        try mergeValue(value: other.value)
                    }
                    try merge(unknownField: other.unknownFields)
                    return self
                }
                @discardableResult
                override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.BuycaiScheme.SelectBallsEntry.Builder {
                    return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
                }
                @discardableResult
                override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BuycaiScheme.SelectBallsEntry.Builder {
                    let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                    while (true) {
                        let protobufTag = try codedInputStream.readTag()
                        switch protobufTag {
                        case 0: 
                            self.unknownFields = try unknownFieldsBuilder.build()
                            return self

                        case 10:
                            key = try codedInputStream.readString()

                        case 18:
                            let subBuilder:Apiproto.Balls.Builder = Apiproto.Balls.Builder()
                            if hasValue {
                                try subBuilder.mergeFrom(other: value)
                            }
                            try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                            value = subBuilder.buildPartial()

                        default:
                            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                                unknownFields = try unknownFieldsBuilder.build()
                                return self
                            }
                        }
                    }
                }
                class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.BuycaiScheme.SelectBallsEntry.Builder {
                    let resultDecodedBuilder = Apiproto.BuycaiScheme.SelectBallsEntry.Builder()
                    if let jsonValueKey = jsonMap["key"] as? String {
                        resultDecodedBuilder.key = jsonValueKey
                    }
                    if let jsonValueValue = jsonMap["value"] as? Dictionary<String,Any> {
                        resultDecodedBuilder.value = try Apiproto.Balls.Builder.decodeToBuilder(jsonMap:jsonValueValue).build()

                    }
                    return resultDecodedBuilder
                }
                override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.BuycaiScheme.SelectBallsEntry.Builder {
                    let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                    guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                      throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                    }
                    return try Apiproto.BuycaiScheme.SelectBallsEntry.Builder.decodeToBuilder(jsonMap:jsDataCast)
                }
            }

        }

        //Nested type declaration end

        /// 玩法类型，例如五星直选
        public fileprivate(set) var type:String = ""
        public fileprivate(set) var hasType:Bool = false

        /// 选择的球
        public fileprivate(set) var selectBalls:Dictionary<String,Apiproto.Balls> = Dictionary<String,Apiproto.Balls>()

        public fileprivate(set) var hasSelectBalls:Bool = false
        /// 注数
        public fileprivate(set) var num:Int32 = Int32(0)
        public fileprivate(set) var hasNum:Bool = false

        /// 金额
        public fileprivate(set) var money:Double = Double(0)
        public fileprivate(set) var hasMoney:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasType {
                try codedOutputStream.writeString(fieldNumber: 1, value:type)
            }
            if hasSelectBalls {
                for (keySelectBalls, valueSelectBalls) in selectBalls {
                    let valueOfSelectBalls = try! Apiproto.BuycaiScheme.SelectBallsEntry.Builder().setKey(keySelectBalls).setValue(valueSelectBalls).build()
                      try codedOutputStream.writeMessage(fieldNumber: 2, value:valueOfSelectBalls)
                  }
            }
            if hasNum {
                try codedOutputStream.writeInt32(fieldNumber: 3, value:num)
            }
            if hasMoney {
                try codedOutputStream.writeDouble(fieldNumber: 4, value:money)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasType {
                serialize_size += type.computeStringSize(fieldNumber: 1)
            }
            if hasSelectBalls {
                  for (keySelectBalls, valueSelectBalls) in selectBalls {
                      let valueOfSelectBalls = try! Apiproto.BuycaiScheme.SelectBallsEntry.Builder().setKey(keySelectBalls).setValue(valueSelectBalls).build()
                serialize_size += valueOfSelectBalls.computeMessageSize(fieldNumber: 2)
                }
            }
            if hasNum {
                serialize_size += num.computeInt32Size(fieldNumber: 3)
            }
            if hasMoney {
                serialize_size += money.computeDoubleSize(fieldNumber: 4)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.BuycaiScheme.Builder {
            return Apiproto.BuycaiScheme.classBuilder() as! Apiproto.BuycaiScheme.Builder
        }
        public func getBuilder() -> Apiproto.BuycaiScheme.Builder {
            return classBuilder() as! Apiproto.BuycaiScheme.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.BuycaiScheme.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.BuycaiScheme.Builder()
        }
        public func toBuilder() throws -> Apiproto.BuycaiScheme.Builder {
            return try Apiproto.BuycaiScheme.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.BuycaiScheme) throws -> Apiproto.BuycaiScheme.Builder {
            return try Apiproto.BuycaiScheme.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasType {
                jsonMap["type"] = type
            }
            if hasSelectBalls {
                var mapSelectBalls = Dictionary<String, Dictionary<String,Any>>()
                for (keySelectBalls, valueSelectBalls) in selectBalls {
                    mapSelectBalls["\(keySelectBalls)"] = try valueSelectBalls.encode()
                }
                jsonMap["selectBalls"] = mapSelectBalls
            }
            if hasNum {
                jsonMap["num"] = Int(num)
            }
            if hasMoney {
                jsonMap["money"] = Double(money)
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.BuycaiScheme {
            return try Apiproto.BuycaiScheme.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.BuycaiScheme {
            return try Apiproto.BuycaiScheme.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasType {
                output += "\(indent) type: \(type) \n"
            }
            if hasSelectBalls {
                output += "\(indent) selectBalls: \(selectBalls) \n"
            }
            if hasNum {
                output += "\(indent) num: \(num) \n"
            }
            if hasMoney {
                output += "\(indent) money: \(money) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasType {
                    hashCode = (hashCode &* 31) &+ type.hashValue
                }
                if hasSelectBalls {
                    for (keySelectBalls, valueSelectBalls) in selectBalls {
                        hashCode = (hashCode &* 31) &+ keySelectBalls.hashValue
                        hashCode = (hashCode &* 31) &+ valueSelectBalls.hashValue
                    }
                }
                if hasNum {
                    hashCode = (hashCode &* 31) &+ num.hashValue
                }
                if hasMoney {
                    hashCode = (hashCode &* 31) &+ money.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.BuycaiScheme"
        }
        override public func className() -> String {
            return "Apiproto.BuycaiScheme"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.BuycaiScheme = Apiproto.BuycaiScheme()
            public func getMessage() -> Apiproto.BuycaiScheme {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            /// 玩法类型，例如五星直选
            public var type:String {
                get {
                    return builderResult.type
                }
                set (value) {
                    builderResult.hasType = true
                    builderResult.type = value
                }
            }
            public var hasType:Bool {
                get {
                    return builderResult.hasType
                }
            }
            @discardableResult
            public func setType(_ value:String) -> Apiproto.BuycaiScheme.Builder {
                self.type = value
                return self
            }
            @discardableResult
            public func clearType() -> Apiproto.BuycaiScheme.Builder{
                builderResult.hasType = false
                builderResult.type = ""
                return self
            }
            /// 选择的球
            public var hasSelectBalls:Bool {
                get {
                    return builderResult.hasSelectBalls
                }
            }
            public var selectBalls:Dictionary<String,Apiproto.Balls> {
                get {
                    return builderResult.selectBalls
                }
                set (value) {
                    builderResult.hasSelectBalls = true
                    builderResult.selectBalls = value
                }
            }
            @discardableResult
            public func setSelectBalls(_ value:Dictionary<String,Apiproto.Balls>) -> Apiproto.BuycaiScheme.Builder {
                self.selectBalls = value
                return self
            }
            @discardableResult
            public func clearSelectBalls() -> Apiproto.BuycaiScheme.Builder{
                builderResult.hasSelectBalls = false
                builderResult.selectBalls = Dictionary<String,Apiproto.Balls>()
                return self
            }
            /// 注数
            public var num:Int32 {
                get {
                    return builderResult.num
                }
                set (value) {
                    builderResult.hasNum = true
                    builderResult.num = value
                }
            }
            public var hasNum:Bool {
                get {
                    return builderResult.hasNum
                }
            }
            @discardableResult
            public func setNum(_ value:Int32) -> Apiproto.BuycaiScheme.Builder {
                self.num = value
                return self
            }
            @discardableResult
            public func clearNum() -> Apiproto.BuycaiScheme.Builder{
                builderResult.hasNum = false
                builderResult.num = Int32(0)
                return self
            }
            /// 金额
            public var money:Double {
                get {
                    return builderResult.money
                }
                set (value) {
                    builderResult.hasMoney = true
                    builderResult.money = value
                }
            }
            public var hasMoney:Bool {
                get {
                    return builderResult.hasMoney
                }
            }
            @discardableResult
            public func setMoney(_ value:Double) -> Apiproto.BuycaiScheme.Builder {
                self.money = value
                return self
            }
            @discardableResult
            public func clearMoney() -> Apiproto.BuycaiScheme.Builder{
                builderResult.hasMoney = false
                builderResult.money = Double(0)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.BuycaiScheme.Builder {
                builderResult = Apiproto.BuycaiScheme()
                return self
            }
            override public func clone() throws -> Apiproto.BuycaiScheme.Builder {
                return try Apiproto.BuycaiScheme.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.BuycaiScheme {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.BuycaiScheme {
                let returnMe:Apiproto.BuycaiScheme = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.BuycaiScheme) throws -> Apiproto.BuycaiScheme.Builder {
                if other == Apiproto.BuycaiScheme() {
                    return self
                }
                if other.hasType {
                    type = other.type
                }
                if other.hasSelectBalls {
                    selectBalls = other.selectBalls
                }
                if other.hasNum {
                    num = other.num
                }
                if other.hasMoney {
                    money = other.money
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.BuycaiScheme.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BuycaiScheme.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        type = try codedInputStream.readString()

                    case 18:
                        let subBuilder = Apiproto.BuycaiScheme.SelectBallsEntry.Builder()
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        let buildOfSelectBalls = subBuilder.buildPartial()
                        selectBalls[buildOfSelectBalls.key] = buildOfSelectBalls.value

                    case 24:
                        num = try codedInputStream.readInt32()

                    case 33:
                        money = try codedInputStream.readDouble()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.BuycaiScheme.Builder {
                let resultDecodedBuilder = Apiproto.BuycaiScheme.Builder()
                if let jsonValueType = jsonMap["type"] as? String {
                    resultDecodedBuilder.type = jsonValueType
                }
                if let jsonValueSelectBalls = jsonMap["selectBalls"] as? Dictionary<String, Dictionary<String,Any>> {
                    var mapSelectBalls = Dictionary<String, Apiproto.Balls>()
                    for (keySelectBalls, valueSelectBalls) in jsonValueSelectBalls {
                        guard let keyFromSelectBalls = String(keySelectBalls) else {
                            throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                        }
                        mapSelectBalls[keyFromSelectBalls] = try Apiproto.Balls.Builder.decodeToBuilder(jsonMap:valueSelectBalls).build()

                    }
                    resultDecodedBuilder.selectBalls = mapSelectBalls
                }
                if let jsonValueNum = jsonMap["num"] as? Int {
                    resultDecodedBuilder.num = Int32(jsonValueNum)
                } else if let jsonValueNum = jsonMap["num"] as? String {
                    resultDecodedBuilder.num = Int32(jsonValueNum)!
                }
                if let jsonValueMoney = jsonMap["money"] as? Double {
                    resultDecodedBuilder.money = Double(jsonValueMoney)
                } else if let jsonValueMoney = jsonMap["money"] as? String {
                    resultDecodedBuilder.money = Double(jsonValueMoney)!
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.BuycaiScheme.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.BuycaiScheme.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class IssueMultiple : GeneratedMessage {

        public static func == (lhs: Apiproto.IssueMultiple, rhs: Apiproto.IssueMultiple) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasIssue == rhs.hasIssue) && (!lhs.hasIssue || lhs.issue == rhs.issue)
            fieldCheck = fieldCheck && (lhs.hasMultiple == rhs.hasMultiple) && (!lhs.hasMultiple || lhs.multiple == rhs.multiple)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var issue:String = ""
        public fileprivate(set) var hasIssue:Bool = false

        public fileprivate(set) var multiple:Int32 = Int32(0)
        public fileprivate(set) var hasMultiple:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasIssue {
                try codedOutputStream.writeString(fieldNumber: 1, value:issue)
            }
            if hasMultiple {
                try codedOutputStream.writeInt32(fieldNumber: 2, value:multiple)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasIssue {
                serialize_size += issue.computeStringSize(fieldNumber: 1)
            }
            if hasMultiple {
                serialize_size += multiple.computeInt32Size(fieldNumber: 2)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.IssueMultiple.Builder {
            return Apiproto.IssueMultiple.classBuilder() as! Apiproto.IssueMultiple.Builder
        }
        public func getBuilder() -> Apiproto.IssueMultiple.Builder {
            return classBuilder() as! Apiproto.IssueMultiple.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.IssueMultiple.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.IssueMultiple.Builder()
        }
        public func toBuilder() throws -> Apiproto.IssueMultiple.Builder {
            return try Apiproto.IssueMultiple.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.IssueMultiple) throws -> Apiproto.IssueMultiple.Builder {
            return try Apiproto.IssueMultiple.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasIssue {
                jsonMap["issue"] = issue
            }
            if hasMultiple {
                jsonMap["multiple"] = Int(multiple)
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.IssueMultiple {
            return try Apiproto.IssueMultiple.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.IssueMultiple {
            return try Apiproto.IssueMultiple.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasIssue {
                output += "\(indent) issue: \(issue) \n"
            }
            if hasMultiple {
                output += "\(indent) multiple: \(multiple) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasIssue {
                    hashCode = (hashCode &* 31) &+ issue.hashValue
                }
                if hasMultiple {
                    hashCode = (hashCode &* 31) &+ multiple.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.IssueMultiple"
        }
        override public func className() -> String {
            return "Apiproto.IssueMultiple"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.IssueMultiple = Apiproto.IssueMultiple()
            public func getMessage() -> Apiproto.IssueMultiple {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var issue:String {
                get {
                    return builderResult.issue
                }
                set (value) {
                    builderResult.hasIssue = true
                    builderResult.issue = value
                }
            }
            public var hasIssue:Bool {
                get {
                    return builderResult.hasIssue
                }
            }
            @discardableResult
            public func setIssue(_ value:String) -> Apiproto.IssueMultiple.Builder {
                self.issue = value
                return self
            }
            @discardableResult
            public func clearIssue() -> Apiproto.IssueMultiple.Builder{
                builderResult.hasIssue = false
                builderResult.issue = ""
                return self
            }
            public var multiple:Int32 {
                get {
                    return builderResult.multiple
                }
                set (value) {
                    builderResult.hasMultiple = true
                    builderResult.multiple = value
                }
            }
            public var hasMultiple:Bool {
                get {
                    return builderResult.hasMultiple
                }
            }
            @discardableResult
            public func setMultiple(_ value:Int32) -> Apiproto.IssueMultiple.Builder {
                self.multiple = value
                return self
            }
            @discardableResult
            public func clearMultiple() -> Apiproto.IssueMultiple.Builder{
                builderResult.hasMultiple = false
                builderResult.multiple = Int32(0)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.IssueMultiple.Builder {
                builderResult = Apiproto.IssueMultiple()
                return self
            }
            override public func clone() throws -> Apiproto.IssueMultiple.Builder {
                return try Apiproto.IssueMultiple.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.IssueMultiple {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.IssueMultiple {
                let returnMe:Apiproto.IssueMultiple = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.IssueMultiple) throws -> Apiproto.IssueMultiple.Builder {
                if other == Apiproto.IssueMultiple() {
                    return self
                }
                if other.hasIssue {
                    issue = other.issue
                }
                if other.hasMultiple {
                    multiple = other.multiple
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.IssueMultiple.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.IssueMultiple.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        issue = try codedInputStream.readString()

                    case 16:
                        multiple = try codedInputStream.readInt32()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.IssueMultiple.Builder {
                let resultDecodedBuilder = Apiproto.IssueMultiple.Builder()
                if let jsonValueIssue = jsonMap["issue"] as? String {
                    resultDecodedBuilder.issue = jsonValueIssue
                }
                if let jsonValueMultiple = jsonMap["multiple"] as? Int {
                    resultDecodedBuilder.multiple = Int32(jsonValueMultiple)
                } else if let jsonValueMultiple = jsonMap["multiple"] as? String {
                    resultDecodedBuilder.multiple = Int32(jsonValueMultiple)!
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.IssueMultiple.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.IssueMultiple.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    /// 追号订单
    final public class BuycaiOrder : GeneratedMessage {

        public static func == (lhs: Apiproto.BuycaiOrder, rhs: Apiproto.BuycaiOrder) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasLotteryId == rhs.hasLotteryId) && (!lhs.hasLotteryId || lhs.lotteryId == rhs.lotteryId)
            fieldCheck = fieldCheck && (lhs.issues == rhs.issues)
            fieldCheck = fieldCheck && (lhs.hasSumMoney == rhs.hasSumMoney) && (!lhs.hasSumMoney || lhs.sumMoney == rhs.sumMoney)
            fieldCheck = fieldCheck && (lhs.hasCai == rhs.hasCai) && (!lhs.hasCai || lhs.cai == rhs.cai)
            fieldCheck = fieldCheck && (lhs.hasBalance == rhs.hasBalance) && (!lhs.hasBalance || lhs.balance == rhs.balance)
            fieldCheck = fieldCheck && (lhs.schemeList == rhs.schemeList)
            fieldCheck = fieldCheck && (lhs.hasTicketId == rhs.hasTicketId) && (!lhs.hasTicketId || lhs.ticketId == rhs.ticketId)
            fieldCheck = fieldCheck && (lhs.hasIsWinStop == rhs.hasIsWinStop) && (!lhs.hasIsWinStop || lhs.isWinStop == rhs.isWinStop)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var lotteryId:Apiproto.LotteryId = Apiproto.LotteryId.allId
        public fileprivate(set) var hasLotteryId:Bool = false
        public fileprivate(set) var issues:Array<Apiproto.IssueMultiple>  = Array<Apiproto.IssueMultiple>()
        /// 总金额(购彩券未抵扣金额）
        public fileprivate(set) var sumMoney:Double = Double(0)
        public fileprivate(set) var hasSumMoney:Bool = false

        /// 使用的彩金
        public fileprivate(set) var cai:Double = Double(0)
        public fileprivate(set) var hasCai:Bool = false

        /// 使用的余额
        public fileprivate(set) var balance:Double = Double(0)
        public fileprivate(set) var hasBalance:Bool = false

        public fileprivate(set) var schemeList:Array<Apiproto.BuycaiScheme>  = Array<Apiproto.BuycaiScheme>()
        /// 使用的购彩券id
        public fileprivate(set) var ticketId:Int64 = Int64(0)
        public fileprivate(set) var hasTicketId:Bool = false

        /// 是否中奖停止追号
        public fileprivate(set) var isWinStop:Bool = false
        public fileprivate(set) var hasIsWinStop:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasLotteryId {
                try codedOutputStream.writeEnum(fieldNumber: 1, value:lotteryId.rawValue)
            }
            for oneElementIssues in issues {
                  try codedOutputStream.writeMessage(fieldNumber: 2, value:oneElementIssues)
            }
            if hasSumMoney {
                try codedOutputStream.writeDouble(fieldNumber: 3, value:sumMoney)
            }
            if hasCai {
                try codedOutputStream.writeDouble(fieldNumber: 4, value:cai)
            }
            if hasBalance {
                try codedOutputStream.writeDouble(fieldNumber: 5, value:balance)
            }
            for oneElementSchemeList in schemeList {
                  try codedOutputStream.writeMessage(fieldNumber: 6, value:oneElementSchemeList)
            }
            if hasTicketId {
                try codedOutputStream.writeInt64(fieldNumber: 7, value:ticketId)
            }
            if hasIsWinStop {
                try codedOutputStream.writeBool(fieldNumber: 8, value:isWinStop)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if (hasLotteryId) {
                serialize_size += lotteryId.rawValue.computeEnumSize(fieldNumber: 1)
            }
            for oneElementIssues in issues {
                serialize_size += oneElementIssues.computeMessageSize(fieldNumber: 2)
            }
            if hasSumMoney {
                serialize_size += sumMoney.computeDoubleSize(fieldNumber: 3)
            }
            if hasCai {
                serialize_size += cai.computeDoubleSize(fieldNumber: 4)
            }
            if hasBalance {
                serialize_size += balance.computeDoubleSize(fieldNumber: 5)
            }
            for oneElementSchemeList in schemeList {
                serialize_size += oneElementSchemeList.computeMessageSize(fieldNumber: 6)
            }
            if hasTicketId {
                serialize_size += ticketId.computeInt64Size(fieldNumber: 7)
            }
            if hasIsWinStop {
                serialize_size += isWinStop.computeBoolSize(fieldNumber: 8)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.BuycaiOrder.Builder {
            return Apiproto.BuycaiOrder.classBuilder() as! Apiproto.BuycaiOrder.Builder
        }
        public func getBuilder() -> Apiproto.BuycaiOrder.Builder {
            return classBuilder() as! Apiproto.BuycaiOrder.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.BuycaiOrder.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.BuycaiOrder.Builder()
        }
        public func toBuilder() throws -> Apiproto.BuycaiOrder.Builder {
            return try Apiproto.BuycaiOrder.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.BuycaiOrder) throws -> Apiproto.BuycaiOrder.Builder {
            return try Apiproto.BuycaiOrder.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasLotteryId {
                jsonMap["lotteryId"] = lotteryId.toString()
            }
            if !issues.isEmpty {
                var jsonArrayIssues:Array<Dictionary<String,Any>> = []
                for oneValueIssues in issues {
                    let ecodedMessageIssues = try oneValueIssues.encode()
                    jsonArrayIssues.append(ecodedMessageIssues)
                }
                jsonMap["issues"] = jsonArrayIssues
            }
            if hasSumMoney {
                jsonMap["sumMoney"] = Double(sumMoney)
            }
            if hasCai {
                jsonMap["cai"] = Double(cai)
            }
            if hasBalance {
                jsonMap["balance"] = Double(balance)
            }
            if !schemeList.isEmpty {
                var jsonArraySchemeList:Array<Dictionary<String,Any>> = []
                for oneValueSchemeList in schemeList {
                    let ecodedMessageSchemeList = try oneValueSchemeList.encode()
                    jsonArraySchemeList.append(ecodedMessageSchemeList)
                }
                jsonMap["schemeList"] = jsonArraySchemeList
            }
            if hasTicketId {
                jsonMap["ticketId"] = "\(ticketId)"
            }
            if hasIsWinStop {
                jsonMap["isWinStop"] = isWinStop
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.BuycaiOrder {
            return try Apiproto.BuycaiOrder.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.BuycaiOrder {
            return try Apiproto.BuycaiOrder.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if (hasLotteryId) {
                output += "\(indent) lotteryId: \(lotteryId.description)\n"
            }
            var issuesElementIndex:Int = 0
            for oneElementIssues in issues {
                output += "\(indent) issues[\(issuesElementIndex)] {\n"
                output += try oneElementIssues.getDescription(indent: "\(indent)  ")
                output += "\(indent)}\n"
                issuesElementIndex += 1
            }
            if hasSumMoney {
                output += "\(indent) sumMoney: \(sumMoney) \n"
            }
            if hasCai {
                output += "\(indent) cai: \(cai) \n"
            }
            if hasBalance {
                output += "\(indent) balance: \(balance) \n"
            }
            var schemeListElementIndex:Int = 0
            for oneElementSchemeList in schemeList {
                output += "\(indent) schemeList[\(schemeListElementIndex)] {\n"
                output += try oneElementSchemeList.getDescription(indent: "\(indent)  ")
                output += "\(indent)}\n"
                schemeListElementIndex += 1
            }
            if hasTicketId {
                output += "\(indent) ticketId: \(ticketId) \n"
            }
            if hasIsWinStop {
                output += "\(indent) isWinStop: \(isWinStop) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasLotteryId {
                     hashCode = (hashCode &* 31) &+ lotteryId.hashValue
                }
                for oneElementIssues in issues {
                    hashCode = (hashCode &* 31) &+ oneElementIssues.hashValue
                }
                if hasSumMoney {
                    hashCode = (hashCode &* 31) &+ sumMoney.hashValue
                }
                if hasCai {
                    hashCode = (hashCode &* 31) &+ cai.hashValue
                }
                if hasBalance {
                    hashCode = (hashCode &* 31) &+ balance.hashValue
                }
                for oneElementSchemeList in schemeList {
                    hashCode = (hashCode &* 31) &+ oneElementSchemeList.hashValue
                }
                if hasTicketId {
                    hashCode = (hashCode &* 31) &+ ticketId.hashValue
                }
                if hasIsWinStop {
                    hashCode = (hashCode &* 31) &+ isWinStop.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.BuycaiOrder"
        }
        override public func className() -> String {
            return "Apiproto.BuycaiOrder"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.BuycaiOrder = Apiproto.BuycaiOrder()
            public func getMessage() -> Apiproto.BuycaiOrder {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            /// 彩种id
                public var lotteryId:Apiproto.LotteryId {
                    get {
                        return builderResult.lotteryId
                    }
                    set (value) {
                        builderResult.hasLotteryId = true
                        builderResult.lotteryId = value
                    }
                }
                public var hasLotteryId:Bool{
                    get {
                        return builderResult.hasLotteryId
                    }
                }
            @discardableResult
                public func setLotteryId(_ value:Apiproto.LotteryId) -> Apiproto.BuycaiOrder.Builder {
                  self.lotteryId = value
                  return self
                }
            @discardableResult
                public func clearLotteryId() -> Apiproto.BuycaiOrder.Builder {
                   builderResult.hasLotteryId = false
                   builderResult.lotteryId = .allId
                   return self
                }
            /// 期号和倍数 (追期期号可能不连续)
            public var issues:Array<Apiproto.IssueMultiple> {
                get {
                    return builderResult.issues
                }
                set (value) {
                    builderResult.issues = value
                }
            }
            @discardableResult
            public func setIssues(_ value:Array<Apiproto.IssueMultiple>) -> Apiproto.BuycaiOrder.Builder {
                self.issues = value
                return self
            }
            @discardableResult
            public func clearIssues() -> Apiproto.BuycaiOrder.Builder {
                builderResult.issues.removeAll(keepingCapacity: false)
                return self
            }
            /// 总金额(购彩券未抵扣金额）
            public var sumMoney:Double {
                get {
                    return builderResult.sumMoney
                }
                set (value) {
                    builderResult.hasSumMoney = true
                    builderResult.sumMoney = value
                }
            }
            public var hasSumMoney:Bool {
                get {
                    return builderResult.hasSumMoney
                }
            }
            @discardableResult
            public func setSumMoney(_ value:Double) -> Apiproto.BuycaiOrder.Builder {
                self.sumMoney = value
                return self
            }
            @discardableResult
            public func clearSumMoney() -> Apiproto.BuycaiOrder.Builder{
                builderResult.hasSumMoney = false
                builderResult.sumMoney = Double(0)
                return self
            }
            /// 使用的彩金
            public var cai:Double {
                get {
                    return builderResult.cai
                }
                set (value) {
                    builderResult.hasCai = true
                    builderResult.cai = value
                }
            }
            public var hasCai:Bool {
                get {
                    return builderResult.hasCai
                }
            }
            @discardableResult
            public func setCai(_ value:Double) -> Apiproto.BuycaiOrder.Builder {
                self.cai = value
                return self
            }
            @discardableResult
            public func clearCai() -> Apiproto.BuycaiOrder.Builder{
                builderResult.hasCai = false
                builderResult.cai = Double(0)
                return self
            }
            /// 使用的余额
            public var balance:Double {
                get {
                    return builderResult.balance
                }
                set (value) {
                    builderResult.hasBalance = true
                    builderResult.balance = value
                }
            }
            public var hasBalance:Bool {
                get {
                    return builderResult.hasBalance
                }
            }
            @discardableResult
            public func setBalance(_ value:Double) -> Apiproto.BuycaiOrder.Builder {
                self.balance = value
                return self
            }
            @discardableResult
            public func clearBalance() -> Apiproto.BuycaiOrder.Builder{
                builderResult.hasBalance = false
                builderResult.balance = Double(0)
                return self
            }
            /// 方案列表
            public var schemeList:Array<Apiproto.BuycaiScheme> {
                get {
                    return builderResult.schemeList
                }
                set (value) {
                    builderResult.schemeList = value
                }
            }
            @discardableResult
            public func setSchemeList(_ value:Array<Apiproto.BuycaiScheme>) -> Apiproto.BuycaiOrder.Builder {
                self.schemeList = value
                return self
            }
            @discardableResult
            public func clearSchemeList() -> Apiproto.BuycaiOrder.Builder {
                builderResult.schemeList.removeAll(keepingCapacity: false)
                return self
            }
            /// 使用的购彩券id
            public var ticketId:Int64 {
                get {
                    return builderResult.ticketId
                }
                set (value) {
                    builderResult.hasTicketId = true
                    builderResult.ticketId = value
                }
            }
            public var hasTicketId:Bool {
                get {
                    return builderResult.hasTicketId
                }
            }
            @discardableResult
            public func setTicketId(_ value:Int64) -> Apiproto.BuycaiOrder.Builder {
                self.ticketId = value
                return self
            }
            @discardableResult
            public func clearTicketId() -> Apiproto.BuycaiOrder.Builder{
                builderResult.hasTicketId = false
                builderResult.ticketId = Int64(0)
                return self
            }
            /// 是否中奖停止追号
            public var isWinStop:Bool {
                get {
                    return builderResult.isWinStop
                }
                set (value) {
                    builderResult.hasIsWinStop = true
                    builderResult.isWinStop = value
                }
            }
            public var hasIsWinStop:Bool {
                get {
                    return builderResult.hasIsWinStop
                }
            }
            @discardableResult
            public func setIsWinStop(_ value:Bool) -> Apiproto.BuycaiOrder.Builder {
                self.isWinStop = value
                return self
            }
            @discardableResult
            public func clearIsWinStop() -> Apiproto.BuycaiOrder.Builder{
                builderResult.hasIsWinStop = false
                builderResult.isWinStop = false
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.BuycaiOrder.Builder {
                builderResult = Apiproto.BuycaiOrder()
                return self
            }
            override public func clone() throws -> Apiproto.BuycaiOrder.Builder {
                return try Apiproto.BuycaiOrder.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.BuycaiOrder {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.BuycaiOrder {
                let returnMe:Apiproto.BuycaiOrder = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.BuycaiOrder) throws -> Apiproto.BuycaiOrder.Builder {
                if other == Apiproto.BuycaiOrder() {
                    return self
                }
                if other.hasLotteryId {
                    lotteryId = other.lotteryId
                }
                if !other.issues.isEmpty  {
                     builderResult.issues += other.issues
                }
                if other.hasSumMoney {
                    sumMoney = other.sumMoney
                }
                if other.hasCai {
                    cai = other.cai
                }
                if other.hasBalance {
                    balance = other.balance
                }
                if !other.schemeList.isEmpty  {
                     builderResult.schemeList += other.schemeList
                }
                if other.hasTicketId {
                    ticketId = other.ticketId
                }
                if other.hasIsWinStop {
                    isWinStop = other.isWinStop
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.BuycaiOrder.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BuycaiOrder.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        let valueIntlotteryId = try codedInputStream.readEnum()
                        if let enumslotteryId = Apiproto.LotteryId(rawValue:valueIntlotteryId){
                            lotteryId = enumslotteryId
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 1, value:Int64(valueIntlotteryId))
                        }

                    case 18:
                        let subBuilder = Apiproto.IssueMultiple.Builder()
                        try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                        issues.append(subBuilder.buildPartial())

                    case 25:
                        sumMoney = try codedInputStream.readDouble()

                    case 33:
                        cai = try codedInputStream.readDouble()

                    case 41:
                        balance = try codedInputStream.readDouble()

                    case 50:
                        let subBuilder = Apiproto.BuycaiScheme.Builder()
                        try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                        schemeList.append(subBuilder.buildPartial())

                    case 56:
                        ticketId = try codedInputStream.readInt64()

                    case 64:
                        isWinStop = try codedInputStream.readBool()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.BuycaiOrder.Builder {
                let resultDecodedBuilder = Apiproto.BuycaiOrder.Builder()
                if let jsonValueLotteryId = jsonMap["lotteryId"] as? String {
                    resultDecodedBuilder.lotteryId = try Apiproto.LotteryId.fromString(str: jsonValueLotteryId)
                }
                if let jsonValueIssues = jsonMap["issues"] as? Array<Dictionary<String,Any>> {
                    var jsonArrayIssues:Array<Apiproto.IssueMultiple> = []
                    for oneValueIssues in jsonValueIssues {
                        let messageFromStringIssues = try Apiproto.IssueMultiple.Builder.decodeToBuilder(jsonMap:oneValueIssues).build()

                        jsonArrayIssues.append(messageFromStringIssues)
                    }
                    resultDecodedBuilder.issues = jsonArrayIssues
                }
                if let jsonValueSumMoney = jsonMap["sumMoney"] as? Double {
                    resultDecodedBuilder.sumMoney = Double(jsonValueSumMoney)
                } else if let jsonValueSumMoney = jsonMap["sumMoney"] as? String {
                    resultDecodedBuilder.sumMoney = Double(jsonValueSumMoney)!
                }
                if let jsonValueCai = jsonMap["cai"] as? Double {
                    resultDecodedBuilder.cai = Double(jsonValueCai)
                } else if let jsonValueCai = jsonMap["cai"] as? String {
                    resultDecodedBuilder.cai = Double(jsonValueCai)!
                }
                if let jsonValueBalance = jsonMap["balance"] as? Double {
                    resultDecodedBuilder.balance = Double(jsonValueBalance)
                } else if let jsonValueBalance = jsonMap["balance"] as? String {
                    resultDecodedBuilder.balance = Double(jsonValueBalance)!
                }
                if let jsonValueSchemeList = jsonMap["schemeList"] as? Array<Dictionary<String,Any>> {
                    var jsonArraySchemeList:Array<Apiproto.BuycaiScheme> = []
                    for oneValueSchemeList in jsonValueSchemeList {
                        let messageFromStringSchemeList = try Apiproto.BuycaiScheme.Builder.decodeToBuilder(jsonMap:oneValueSchemeList).build()

                        jsonArraySchemeList.append(messageFromStringSchemeList)
                    }
                    resultDecodedBuilder.schemeList = jsonArraySchemeList
                }
                if let jsonValueTicketId = jsonMap["ticketId"] as? String {
                    resultDecodedBuilder.ticketId = Int64(jsonValueTicketId)!
                } else if let jsonValueTicketId = jsonMap["ticketId"] as? Int {
                    resultDecodedBuilder.ticketId = Int64(jsonValueTicketId)
                }
                if let jsonValueIsWinStop = jsonMap["isWinStop"] as? Bool {
                    resultDecodedBuilder.isWinStop = jsonValueIsWinStop
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.BuycaiOrder.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.BuycaiOrder.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class OnSellInfo : GeneratedMessage {

        public static func == (lhs: Apiproto.OnSellInfo, rhs: Apiproto.OnSellInfo) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasIssue == rhs.hasIssue) && (!lhs.hasIssue || lhs.issue == rhs.issue)
            fieldCheck = fieldCheck && (lhs.hasDeadline == rhs.hasDeadline) && (!lhs.hasDeadline || lhs.deadline == rhs.deadline)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        /// 期号
        public fileprivate(set) var issue:String = ""
        public fileprivate(set) var hasIssue:Bool = false

        /// 截止时间
        public fileprivate(set) var deadline:Int64 = Int64(0)
        public fileprivate(set) var hasDeadline:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasIssue {
                try codedOutputStream.writeString(fieldNumber: 1, value:issue)
            }
            if hasDeadline {
                try codedOutputStream.writeInt64(fieldNumber: 2, value:deadline)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasIssue {
                serialize_size += issue.computeStringSize(fieldNumber: 1)
            }
            if hasDeadline {
                serialize_size += deadline.computeInt64Size(fieldNumber: 2)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.OnSellInfo.Builder {
            return Apiproto.OnSellInfo.classBuilder() as! Apiproto.OnSellInfo.Builder
        }
        public func getBuilder() -> Apiproto.OnSellInfo.Builder {
            return classBuilder() as! Apiproto.OnSellInfo.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.OnSellInfo.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.OnSellInfo.Builder()
        }
        public func toBuilder() throws -> Apiproto.OnSellInfo.Builder {
            return try Apiproto.OnSellInfo.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.OnSellInfo) throws -> Apiproto.OnSellInfo.Builder {
            return try Apiproto.OnSellInfo.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasIssue {
                jsonMap["issue"] = issue
            }
            if hasDeadline {
                jsonMap["deadline"] = "\(deadline)"
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.OnSellInfo {
            return try Apiproto.OnSellInfo.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.OnSellInfo {
            return try Apiproto.OnSellInfo.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasIssue {
                output += "\(indent) issue: \(issue) \n"
            }
            if hasDeadline {
                output += "\(indent) deadline: \(deadline) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasIssue {
                    hashCode = (hashCode &* 31) &+ issue.hashValue
                }
                if hasDeadline {
                    hashCode = (hashCode &* 31) &+ deadline.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.OnSellInfo"
        }
        override public func className() -> String {
            return "Apiproto.OnSellInfo"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.OnSellInfo = Apiproto.OnSellInfo()
            public func getMessage() -> Apiproto.OnSellInfo {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            /// 期号
            public var issue:String {
                get {
                    return builderResult.issue
                }
                set (value) {
                    builderResult.hasIssue = true
                    builderResult.issue = value
                }
            }
            public var hasIssue:Bool {
                get {
                    return builderResult.hasIssue
                }
            }
            @discardableResult
            public func setIssue(_ value:String) -> Apiproto.OnSellInfo.Builder {
                self.issue = value
                return self
            }
            @discardableResult
            public func clearIssue() -> Apiproto.OnSellInfo.Builder{
                builderResult.hasIssue = false
                builderResult.issue = ""
                return self
            }
            /// 截止时间
            public var deadline:Int64 {
                get {
                    return builderResult.deadline
                }
                set (value) {
                    builderResult.hasDeadline = true
                    builderResult.deadline = value
                }
            }
            public var hasDeadline:Bool {
                get {
                    return builderResult.hasDeadline
                }
            }
            @discardableResult
            public func setDeadline(_ value:Int64) -> Apiproto.OnSellInfo.Builder {
                self.deadline = value
                return self
            }
            @discardableResult
            public func clearDeadline() -> Apiproto.OnSellInfo.Builder{
                builderResult.hasDeadline = false
                builderResult.deadline = Int64(0)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.OnSellInfo.Builder {
                builderResult = Apiproto.OnSellInfo()
                return self
            }
            override public func clone() throws -> Apiproto.OnSellInfo.Builder {
                return try Apiproto.OnSellInfo.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.OnSellInfo {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.OnSellInfo {
                let returnMe:Apiproto.OnSellInfo = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.OnSellInfo) throws -> Apiproto.OnSellInfo.Builder {
                if other == Apiproto.OnSellInfo() {
                    return self
                }
                if other.hasIssue {
                    issue = other.issue
                }
                if other.hasDeadline {
                    deadline = other.deadline
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.OnSellInfo.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.OnSellInfo.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        issue = try codedInputStream.readString()

                    case 16:
                        deadline = try codedInputStream.readInt64()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.OnSellInfo.Builder {
                let resultDecodedBuilder = Apiproto.OnSellInfo.Builder()
                if let jsonValueIssue = jsonMap["issue"] as? String {
                    resultDecodedBuilder.issue = jsonValueIssue
                }
                if let jsonValueDeadline = jsonMap["deadline"] as? String {
                    resultDecodedBuilder.deadline = Int64(jsonValueDeadline)!
                } else if let jsonValueDeadline = jsonMap["deadline"] as? Int {
                    resultDecodedBuilder.deadline = Int64(jsonValueDeadline)
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.OnSellInfo.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.OnSellInfo.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class ValidTicketsRequest : GeneratedMessage {

        public static func == (lhs: Apiproto.ValidTicketsRequest, rhs: Apiproto.ValidTicketsRequest) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasLotteryId == rhs.hasLotteryId) && (!lhs.hasLotteryId || lhs.lotteryId == rhs.lotteryId)
            fieldCheck = fieldCheck && (lhs.hasSumMoney == rhs.hasSumMoney) && (!lhs.hasSumMoney || lhs.sumMoney == rhs.sumMoney)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var lotteryId:Apiproto.LotteryId = Apiproto.LotteryId.allId
        public fileprivate(set) var hasLotteryId:Bool = false
        /// 总金额(原始金额）
        public fileprivate(set) var sumMoney:Double = Double(0)
        public fileprivate(set) var hasSumMoney:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasLotteryId {
                try codedOutputStream.writeEnum(fieldNumber: 1, value:lotteryId.rawValue)
            }
            if hasSumMoney {
                try codedOutputStream.writeDouble(fieldNumber: 2, value:sumMoney)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if (hasLotteryId) {
                serialize_size += lotteryId.rawValue.computeEnumSize(fieldNumber: 1)
            }
            if hasSumMoney {
                serialize_size += sumMoney.computeDoubleSize(fieldNumber: 2)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.ValidTicketsRequest.Builder {
            return Apiproto.ValidTicketsRequest.classBuilder() as! Apiproto.ValidTicketsRequest.Builder
        }
        public func getBuilder() -> Apiproto.ValidTicketsRequest.Builder {
            return classBuilder() as! Apiproto.ValidTicketsRequest.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.ValidTicketsRequest.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.ValidTicketsRequest.Builder()
        }
        public func toBuilder() throws -> Apiproto.ValidTicketsRequest.Builder {
            return try Apiproto.ValidTicketsRequest.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.ValidTicketsRequest) throws -> Apiproto.ValidTicketsRequest.Builder {
            return try Apiproto.ValidTicketsRequest.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasLotteryId {
                jsonMap["lotteryId"] = lotteryId.toString()
            }
            if hasSumMoney {
                jsonMap["sumMoney"] = Double(sumMoney)
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.ValidTicketsRequest {
            return try Apiproto.ValidTicketsRequest.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.ValidTicketsRequest {
            return try Apiproto.ValidTicketsRequest.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if (hasLotteryId) {
                output += "\(indent) lotteryId: \(lotteryId.description)\n"
            }
            if hasSumMoney {
                output += "\(indent) sumMoney: \(sumMoney) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasLotteryId {
                     hashCode = (hashCode &* 31) &+ lotteryId.hashValue
                }
                if hasSumMoney {
                    hashCode = (hashCode &* 31) &+ sumMoney.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.ValidTicketsRequest"
        }
        override public func className() -> String {
            return "Apiproto.ValidTicketsRequest"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.ValidTicketsRequest = Apiproto.ValidTicketsRequest()
            public func getMessage() -> Apiproto.ValidTicketsRequest {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            /// 彩种id
                public var lotteryId:Apiproto.LotteryId {
                    get {
                        return builderResult.lotteryId
                    }
                    set (value) {
                        builderResult.hasLotteryId = true
                        builderResult.lotteryId = value
                    }
                }
                public var hasLotteryId:Bool{
                    get {
                        return builderResult.hasLotteryId
                    }
                }
            @discardableResult
                public func setLotteryId(_ value:Apiproto.LotteryId) -> Apiproto.ValidTicketsRequest.Builder {
                  self.lotteryId = value
                  return self
                }
            @discardableResult
                public func clearLotteryId() -> Apiproto.ValidTicketsRequest.Builder {
                   builderResult.hasLotteryId = false
                   builderResult.lotteryId = .allId
                   return self
                }
            /// 总金额(原始金额）
            public var sumMoney:Double {
                get {
                    return builderResult.sumMoney
                }
                set (value) {
                    builderResult.hasSumMoney = true
                    builderResult.sumMoney = value
                }
            }
            public var hasSumMoney:Bool {
                get {
                    return builderResult.hasSumMoney
                }
            }
            @discardableResult
            public func setSumMoney(_ value:Double) -> Apiproto.ValidTicketsRequest.Builder {
                self.sumMoney = value
                return self
            }
            @discardableResult
            public func clearSumMoney() -> Apiproto.ValidTicketsRequest.Builder{
                builderResult.hasSumMoney = false
                builderResult.sumMoney = Double(0)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.ValidTicketsRequest.Builder {
                builderResult = Apiproto.ValidTicketsRequest()
                return self
            }
            override public func clone() throws -> Apiproto.ValidTicketsRequest.Builder {
                return try Apiproto.ValidTicketsRequest.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.ValidTicketsRequest {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.ValidTicketsRequest {
                let returnMe:Apiproto.ValidTicketsRequest = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.ValidTicketsRequest) throws -> Apiproto.ValidTicketsRequest.Builder {
                if other == Apiproto.ValidTicketsRequest() {
                    return self
                }
                if other.hasLotteryId {
                    lotteryId = other.lotteryId
                }
                if other.hasSumMoney {
                    sumMoney = other.sumMoney
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.ValidTicketsRequest.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.ValidTicketsRequest.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        let valueIntlotteryId = try codedInputStream.readEnum()
                        if let enumslotteryId = Apiproto.LotteryId(rawValue:valueIntlotteryId){
                            lotteryId = enumslotteryId
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 1, value:Int64(valueIntlotteryId))
                        }

                    case 17:
                        sumMoney = try codedInputStream.readDouble()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.ValidTicketsRequest.Builder {
                let resultDecodedBuilder = Apiproto.ValidTicketsRequest.Builder()
                if let jsonValueLotteryId = jsonMap["lotteryId"] as? String {
                    resultDecodedBuilder.lotteryId = try Apiproto.LotteryId.fromString(str: jsonValueLotteryId)
                }
                if let jsonValueSumMoney = jsonMap["sumMoney"] as? Double {
                    resultDecodedBuilder.sumMoney = Double(jsonValueSumMoney)
                } else if let jsonValueSumMoney = jsonMap["sumMoney"] as? String {
                    resultDecodedBuilder.sumMoney = Double(jsonValueSumMoney)!
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.ValidTicketsRequest.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.ValidTicketsRequest.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class SaleIssue : GeneratedMessage {

        public static func == (lhs: Apiproto.SaleIssue, rhs: Apiproto.SaleIssue) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasIssue == rhs.hasIssue) && (!lhs.hasIssue || lhs.issue == rhs.issue)
            fieldCheck = fieldCheck && (lhs.hasStartTime == rhs.hasStartTime) && (!lhs.hasStartTime || lhs.startTime == rhs.startTime)
            fieldCheck = fieldCheck && (lhs.hasEndTime == rhs.hasEndTime) && (!lhs.hasEndTime || lhs.endTime == rhs.endTime)
            fieldCheck = fieldCheck && (lhs.hasOpenTime == rhs.hasOpenTime) && (!lhs.hasOpenTime || lhs.openTime == rhs.openTime)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var issue:String = ""
        public fileprivate(set) var hasIssue:Bool = false

        public fileprivate(set) var startTime:Int64 = Int64(0)
        public fileprivate(set) var hasStartTime:Bool = false

        public fileprivate(set) var endTime:Int64 = Int64(0)
        public fileprivate(set) var hasEndTime:Bool = false

        public fileprivate(set) var openTime:Int64 = Int64(0)
        public fileprivate(set) var hasOpenTime:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasIssue {
                try codedOutputStream.writeString(fieldNumber: 1, value:issue)
            }
            if hasStartTime {
                try codedOutputStream.writeInt64(fieldNumber: 2, value:startTime)
            }
            if hasEndTime {
                try codedOutputStream.writeInt64(fieldNumber: 3, value:endTime)
            }
            if hasOpenTime {
                try codedOutputStream.writeInt64(fieldNumber: 4, value:openTime)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasIssue {
                serialize_size += issue.computeStringSize(fieldNumber: 1)
            }
            if hasStartTime {
                serialize_size += startTime.computeInt64Size(fieldNumber: 2)
            }
            if hasEndTime {
                serialize_size += endTime.computeInt64Size(fieldNumber: 3)
            }
            if hasOpenTime {
                serialize_size += openTime.computeInt64Size(fieldNumber: 4)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.SaleIssue.Builder {
            return Apiproto.SaleIssue.classBuilder() as! Apiproto.SaleIssue.Builder
        }
        public func getBuilder() -> Apiproto.SaleIssue.Builder {
            return classBuilder() as! Apiproto.SaleIssue.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.SaleIssue.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.SaleIssue.Builder()
        }
        public func toBuilder() throws -> Apiproto.SaleIssue.Builder {
            return try Apiproto.SaleIssue.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.SaleIssue) throws -> Apiproto.SaleIssue.Builder {
            return try Apiproto.SaleIssue.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasIssue {
                jsonMap["issue"] = issue
            }
            if hasStartTime {
                jsonMap["startTime"] = "\(startTime)"
            }
            if hasEndTime {
                jsonMap["endTime"] = "\(endTime)"
            }
            if hasOpenTime {
                jsonMap["openTime"] = "\(openTime)"
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.SaleIssue {
            return try Apiproto.SaleIssue.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.SaleIssue {
            return try Apiproto.SaleIssue.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasIssue {
                output += "\(indent) issue: \(issue) \n"
            }
            if hasStartTime {
                output += "\(indent) startTime: \(startTime) \n"
            }
            if hasEndTime {
                output += "\(indent) endTime: \(endTime) \n"
            }
            if hasOpenTime {
                output += "\(indent) openTime: \(openTime) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasIssue {
                    hashCode = (hashCode &* 31) &+ issue.hashValue
                }
                if hasStartTime {
                    hashCode = (hashCode &* 31) &+ startTime.hashValue
                }
                if hasEndTime {
                    hashCode = (hashCode &* 31) &+ endTime.hashValue
                }
                if hasOpenTime {
                    hashCode = (hashCode &* 31) &+ openTime.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.SaleIssue"
        }
        override public func className() -> String {
            return "Apiproto.SaleIssue"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.SaleIssue = Apiproto.SaleIssue()
            public func getMessage() -> Apiproto.SaleIssue {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var issue:String {
                get {
                    return builderResult.issue
                }
                set (value) {
                    builderResult.hasIssue = true
                    builderResult.issue = value
                }
            }
            public var hasIssue:Bool {
                get {
                    return builderResult.hasIssue
                }
            }
            @discardableResult
            public func setIssue(_ value:String) -> Apiproto.SaleIssue.Builder {
                self.issue = value
                return self
            }
            @discardableResult
            public func clearIssue() -> Apiproto.SaleIssue.Builder{
                builderResult.hasIssue = false
                builderResult.issue = ""
                return self
            }
            public var startTime:Int64 {
                get {
                    return builderResult.startTime
                }
                set (value) {
                    builderResult.hasStartTime = true
                    builderResult.startTime = value
                }
            }
            public var hasStartTime:Bool {
                get {
                    return builderResult.hasStartTime
                }
            }
            @discardableResult
            public func setStartTime(_ value:Int64) -> Apiproto.SaleIssue.Builder {
                self.startTime = value
                return self
            }
            @discardableResult
            public func clearStartTime() -> Apiproto.SaleIssue.Builder{
                builderResult.hasStartTime = false
                builderResult.startTime = Int64(0)
                return self
            }
            public var endTime:Int64 {
                get {
                    return builderResult.endTime
                }
                set (value) {
                    builderResult.hasEndTime = true
                    builderResult.endTime = value
                }
            }
            public var hasEndTime:Bool {
                get {
                    return builderResult.hasEndTime
                }
            }
            @discardableResult
            public func setEndTime(_ value:Int64) -> Apiproto.SaleIssue.Builder {
                self.endTime = value
                return self
            }
            @discardableResult
            public func clearEndTime() -> Apiproto.SaleIssue.Builder{
                builderResult.hasEndTime = false
                builderResult.endTime = Int64(0)
                return self
            }
            public var openTime:Int64 {
                get {
                    return builderResult.openTime
                }
                set (value) {
                    builderResult.hasOpenTime = true
                    builderResult.openTime = value
                }
            }
            public var hasOpenTime:Bool {
                get {
                    return builderResult.hasOpenTime
                }
            }
            @discardableResult
            public func setOpenTime(_ value:Int64) -> Apiproto.SaleIssue.Builder {
                self.openTime = value
                return self
            }
            @discardableResult
            public func clearOpenTime() -> Apiproto.SaleIssue.Builder{
                builderResult.hasOpenTime = false
                builderResult.openTime = Int64(0)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.SaleIssue.Builder {
                builderResult = Apiproto.SaleIssue()
                return self
            }
            override public func clone() throws -> Apiproto.SaleIssue.Builder {
                return try Apiproto.SaleIssue.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.SaleIssue {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.SaleIssue {
                let returnMe:Apiproto.SaleIssue = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.SaleIssue) throws -> Apiproto.SaleIssue.Builder {
                if other == Apiproto.SaleIssue() {
                    return self
                }
                if other.hasIssue {
                    issue = other.issue
                }
                if other.hasStartTime {
                    startTime = other.startTime
                }
                if other.hasEndTime {
                    endTime = other.endTime
                }
                if other.hasOpenTime {
                    openTime = other.openTime
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.SaleIssue.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.SaleIssue.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        issue = try codedInputStream.readString()

                    case 16:
                        startTime = try codedInputStream.readInt64()

                    case 24:
                        endTime = try codedInputStream.readInt64()

                    case 32:
                        openTime = try codedInputStream.readInt64()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.SaleIssue.Builder {
                let resultDecodedBuilder = Apiproto.SaleIssue.Builder()
                if let jsonValueIssue = jsonMap["issue"] as? String {
                    resultDecodedBuilder.issue = jsonValueIssue
                }
                if let jsonValueStartTime = jsonMap["startTime"] as? String {
                    resultDecodedBuilder.startTime = Int64(jsonValueStartTime)!
                } else if let jsonValueStartTime = jsonMap["startTime"] as? Int {
                    resultDecodedBuilder.startTime = Int64(jsonValueStartTime)
                }
                if let jsonValueEndTime = jsonMap["endTime"] as? String {
                    resultDecodedBuilder.endTime = Int64(jsonValueEndTime)!
                } else if let jsonValueEndTime = jsonMap["endTime"] as? Int {
                    resultDecodedBuilder.endTime = Int64(jsonValueEndTime)
                }
                if let jsonValueOpenTime = jsonMap["openTime"] as? String {
                    resultDecodedBuilder.openTime = Int64(jsonValueOpenTime)!
                } else if let jsonValueOpenTime = jsonMap["openTime"] as? Int {
                    resultDecodedBuilder.openTime = Int64(jsonValueOpenTime)
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.SaleIssue.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.SaleIssue.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class BuycaiInfo : GeneratedMessage {

        public static func == (lhs: Apiproto.BuycaiInfo, rhs: Apiproto.BuycaiInfo) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasLast == rhs.hasLast) && (!lhs.hasLast || lhs.last == rhs.last)
            fieldCheck = fieldCheck && (lhs.hasCurrent == rhs.hasCurrent) && (!lhs.hasCurrent || lhs.current == rhs.current)
            fieldCheck = fieldCheck && (lhs.hasNext == rhs.hasNext) && (!lhs.hasNext || lhs.next == rhs.next)
            fieldCheck = fieldCheck && (lhs.saleList == rhs.saleList)
            fieldCheck = fieldCheck && (lhs.hasMaxMultiple == rhs.hasMaxMultiple) && (!lhs.hasMaxMultiple || lhs.maxMultiple == rhs.maxMultiple)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var last:Apiproto.SaleIssue!
        public fileprivate(set) var hasLast:Bool = false
        public fileprivate(set) var current:Apiproto.SaleIssue!
        public fileprivate(set) var hasCurrent:Bool = false
        public fileprivate(set) var next:Apiproto.SaleIssue!
        public fileprivate(set) var hasNext:Bool = false
        /// 可购期号列表
        public fileprivate(set) var saleList:Array<String> = Array<String>()
        /// 最大倍数
        public fileprivate(set) var maxMultiple:Int32 = Int32(0)
        public fileprivate(set) var hasMaxMultiple:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasLast {
                try codedOutputStream.writeMessage(fieldNumber: 1, value:last)
            }
            if hasCurrent {
                try codedOutputStream.writeMessage(fieldNumber: 2, value:current)
            }
            if hasNext {
                try codedOutputStream.writeMessage(fieldNumber: 3, value:next)
            }
            if !saleList.isEmpty {
                for oneValuesaleList in saleList {
                    try codedOutputStream.writeString(fieldNumber: 4, value:oneValuesaleList)
                }
            }
            if hasMaxMultiple {
                try codedOutputStream.writeInt32(fieldNumber: 5, value:maxMultiple)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasLast {
                if let varSizelast = last?.computeMessageSize(fieldNumber: 1) {
                    serialize_size += varSizelast
                }
            }
            if hasCurrent {
                if let varSizecurrent = current?.computeMessageSize(fieldNumber: 2) {
                    serialize_size += varSizecurrent
                }
            }
            if hasNext {
                if let varSizenext = next?.computeMessageSize(fieldNumber: 3) {
                    serialize_size += varSizenext
                }
            }
            var dataSizeSaleList:Int32 = 0
            for oneValuesaleList in saleList {
                dataSizeSaleList += oneValuesaleList.computeStringSizeNoTag()
            }
            serialize_size += dataSizeSaleList
            serialize_size += 1 * Int32(saleList.count)
            if hasMaxMultiple {
                serialize_size += maxMultiple.computeInt32Size(fieldNumber: 5)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.BuycaiInfo.Builder {
            return Apiproto.BuycaiInfo.classBuilder() as! Apiproto.BuycaiInfo.Builder
        }
        public func getBuilder() -> Apiproto.BuycaiInfo.Builder {
            return classBuilder() as! Apiproto.BuycaiInfo.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.BuycaiInfo.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.BuycaiInfo.Builder()
        }
        public func toBuilder() throws -> Apiproto.BuycaiInfo.Builder {
            return try Apiproto.BuycaiInfo.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.BuycaiInfo) throws -> Apiproto.BuycaiInfo.Builder {
            return try Apiproto.BuycaiInfo.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasLast {
                jsonMap["last"] = try last.encode()
            }
            if hasCurrent {
                jsonMap["current"] = try current.encode()
            }
            if hasNext {
                jsonMap["next"] = try next.encode()
            }
            if !saleList.isEmpty {
                var jsonArraySaleList:Array<String> = []
                for oneValueSaleList in saleList {
                    jsonArraySaleList.append(oneValueSaleList)
                }
                jsonMap["saleList"] = jsonArraySaleList
            }
            if hasMaxMultiple {
                jsonMap["maxMultiple"] = Int(maxMultiple)
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.BuycaiInfo {
            return try Apiproto.BuycaiInfo.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.BuycaiInfo {
            return try Apiproto.BuycaiInfo.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasLast {
                output += "\(indent) last {\n"
                if let outDescLast = last {
                    output += try outDescLast.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            if hasCurrent {
                output += "\(indent) current {\n"
                if let outDescCurrent = current {
                    output += try outDescCurrent.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            if hasNext {
                output += "\(indent) next {\n"
                if let outDescNext = next {
                    output += try outDescNext.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            var saleListElementIndex:Int = 0
            for oneValueSaleList in saleList  {
                output += "\(indent) saleList[\(saleListElementIndex)]: \(oneValueSaleList)\n"
                saleListElementIndex += 1
            }
            if hasMaxMultiple {
                output += "\(indent) maxMultiple: \(maxMultiple) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasLast {
                    if let hashValuelast = last?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValuelast
                    }
                }
                if hasCurrent {
                    if let hashValuecurrent = current?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValuecurrent
                    }
                }
                if hasNext {
                    if let hashValuenext = next?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValuenext
                    }
                }
                for oneValueSaleList in saleList {
                    hashCode = (hashCode &* 31) &+ oneValueSaleList.hashValue
                }
                if hasMaxMultiple {
                    hashCode = (hashCode &* 31) &+ maxMultiple.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.BuycaiInfo"
        }
        override public func className() -> String {
            return "Apiproto.BuycaiInfo"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.BuycaiInfo = Apiproto.BuycaiInfo()
            public func getMessage() -> Apiproto.BuycaiInfo {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            /// 上一期
            public var last:Apiproto.SaleIssue! {
                get {
                    if lastBuilder_ != nil {
                        builderResult.last = lastBuilder_.getMessage()
                    }
                    return builderResult.last
                }
                set (value) {
                    builderResult.hasLast = true
                    builderResult.last = value
                }
            }
            public var hasLast:Bool {
                get {
                    return builderResult.hasLast
                }
            }
            fileprivate var lastBuilder_:Apiproto.SaleIssue.Builder! {
                didSet {
                    builderResult.hasLast = true
                }
            }
            public func getLastBuilder() -> Apiproto.SaleIssue.Builder {
                if lastBuilder_ == nil {
                    lastBuilder_ = Apiproto.SaleIssue.Builder()
                    builderResult.last = lastBuilder_.getMessage()
                    if last != nil {
                        try! lastBuilder_.mergeFrom(other: last)
                    }
                }
                return lastBuilder_
            }
            @discardableResult
            public func setLast(_ value:Apiproto.SaleIssue!) -> Apiproto.BuycaiInfo.Builder {
                self.last = value
                return self
            }
            @discardableResult
            public func mergeLast(value:Apiproto.SaleIssue) throws -> Apiproto.BuycaiInfo.Builder {
                if builderResult.hasLast {
                    builderResult.last = try Apiproto.SaleIssue.builderWithPrototype(prototype:builderResult.last).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.last = value
                }
                builderResult.hasLast = true
                return self
            }
            @discardableResult
            public func clearLast() -> Apiproto.BuycaiInfo.Builder {
                lastBuilder_ = nil
                builderResult.hasLast = false
                builderResult.last = nil
                return self
            }
            /// 正在销售
            public var current:Apiproto.SaleIssue! {
                get {
                    if currentBuilder_ != nil {
                        builderResult.current = currentBuilder_.getMessage()
                    }
                    return builderResult.current
                }
                set (value) {
                    builderResult.hasCurrent = true
                    builderResult.current = value
                }
            }
            public var hasCurrent:Bool {
                get {
                    return builderResult.hasCurrent
                }
            }
            fileprivate var currentBuilder_:Apiproto.SaleIssue.Builder! {
                didSet {
                    builderResult.hasCurrent = true
                }
            }
            public func getCurrentBuilder() -> Apiproto.SaleIssue.Builder {
                if currentBuilder_ == nil {
                    currentBuilder_ = Apiproto.SaleIssue.Builder()
                    builderResult.current = currentBuilder_.getMessage()
                    if current != nil {
                        try! currentBuilder_.mergeFrom(other: current)
                    }
                }
                return currentBuilder_
            }
            @discardableResult
            public func setCurrent(_ value:Apiproto.SaleIssue!) -> Apiproto.BuycaiInfo.Builder {
                self.current = value
                return self
            }
            @discardableResult
            public func mergeCurrent(value:Apiproto.SaleIssue) throws -> Apiproto.BuycaiInfo.Builder {
                if builderResult.hasCurrent {
                    builderResult.current = try Apiproto.SaleIssue.builderWithPrototype(prototype:builderResult.current).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.current = value
                }
                builderResult.hasCurrent = true
                return self
            }
            @discardableResult
            public func clearCurrent() -> Apiproto.BuycaiInfo.Builder {
                currentBuilder_ = nil
                builderResult.hasCurrent = false
                builderResult.current = nil
                return self
            }
            /// 下一期
            public var next:Apiproto.SaleIssue! {
                get {
                    if nextBuilder_ != nil {
                        builderResult.next = nextBuilder_.getMessage()
                    }
                    return builderResult.next
                }
                set (value) {
                    builderResult.hasNext = true
                    builderResult.next = value
                }
            }
            public var hasNext:Bool {
                get {
                    return builderResult.hasNext
                }
            }
            fileprivate var nextBuilder_:Apiproto.SaleIssue.Builder! {
                didSet {
                    builderResult.hasNext = true
                }
            }
            public func getNextBuilder() -> Apiproto.SaleIssue.Builder {
                if nextBuilder_ == nil {
                    nextBuilder_ = Apiproto.SaleIssue.Builder()
                    builderResult.next = nextBuilder_.getMessage()
                    if next != nil {
                        try! nextBuilder_.mergeFrom(other: next)
                    }
                }
                return nextBuilder_
            }
            @discardableResult
            public func setNext(_ value:Apiproto.SaleIssue!) -> Apiproto.BuycaiInfo.Builder {
                self.next = value
                return self
            }
            @discardableResult
            public func mergeNext(value:Apiproto.SaleIssue) throws -> Apiproto.BuycaiInfo.Builder {
                if builderResult.hasNext {
                    builderResult.next = try Apiproto.SaleIssue.builderWithPrototype(prototype:builderResult.next).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.next = value
                }
                builderResult.hasNext = true
                return self
            }
            @discardableResult
            public func clearNext() -> Apiproto.BuycaiInfo.Builder {
                nextBuilder_ = nil
                builderResult.hasNext = false
                builderResult.next = nil
                return self
            }
            /// 可购期号列表
            public var saleList:Array<String> {
                get {
                    return builderResult.saleList
                }
                set (array) {
                    builderResult.saleList = array
                }
            }
            @discardableResult
            public func setSaleList(_ value:Array<String>) -> Apiproto.BuycaiInfo.Builder {
                self.saleList = value
                return self
            }
            @discardableResult
            public func clearSaleList() -> Apiproto.BuycaiInfo.Builder {
                builderResult.saleList.removeAll(keepingCapacity: false)
                return self
            }
            /// 最大倍数
            public var maxMultiple:Int32 {
                get {
                    return builderResult.maxMultiple
                }
                set (value) {
                    builderResult.hasMaxMultiple = true
                    builderResult.maxMultiple = value
                }
            }
            public var hasMaxMultiple:Bool {
                get {
                    return builderResult.hasMaxMultiple
                }
            }
            @discardableResult
            public func setMaxMultiple(_ value:Int32) -> Apiproto.BuycaiInfo.Builder {
                self.maxMultiple = value
                return self
            }
            @discardableResult
            public func clearMaxMultiple() -> Apiproto.BuycaiInfo.Builder{
                builderResult.hasMaxMultiple = false
                builderResult.maxMultiple = Int32(0)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.BuycaiInfo.Builder {
                builderResult = Apiproto.BuycaiInfo()
                return self
            }
            override public func clone() throws -> Apiproto.BuycaiInfo.Builder {
                return try Apiproto.BuycaiInfo.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.BuycaiInfo {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.BuycaiInfo {
                let returnMe:Apiproto.BuycaiInfo = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.BuycaiInfo) throws -> Apiproto.BuycaiInfo.Builder {
                if other == Apiproto.BuycaiInfo() {
                    return self
                }
                if (other.hasLast) {
                    try mergeLast(value: other.last)
                }
                if (other.hasCurrent) {
                    try mergeCurrent(value: other.current)
                }
                if (other.hasNext) {
                    try mergeNext(value: other.next)
                }
                if !other.saleList.isEmpty {
                    builderResult.saleList += other.saleList
                }
                if other.hasMaxMultiple {
                    maxMultiple = other.maxMultiple
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.BuycaiInfo.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BuycaiInfo.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        let subBuilder:Apiproto.SaleIssue.Builder = Apiproto.SaleIssue.Builder()
                        if hasLast {
                            try subBuilder.mergeFrom(other: last)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        last = subBuilder.buildPartial()

                    case 18:
                        let subBuilder:Apiproto.SaleIssue.Builder = Apiproto.SaleIssue.Builder()
                        if hasCurrent {
                            try subBuilder.mergeFrom(other: current)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        current = subBuilder.buildPartial()

                    case 26:
                        let subBuilder:Apiproto.SaleIssue.Builder = Apiproto.SaleIssue.Builder()
                        if hasNext {
                            try subBuilder.mergeFrom(other: next)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        next = subBuilder.buildPartial()

                    case 34:
                        saleList += [try codedInputStream.readString()]

                    case 40:
                        maxMultiple = try codedInputStream.readInt32()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.BuycaiInfo.Builder {
                let resultDecodedBuilder = Apiproto.BuycaiInfo.Builder()
                if let jsonValueLast = jsonMap["last"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.last = try Apiproto.SaleIssue.Builder.decodeToBuilder(jsonMap:jsonValueLast).build()

                }
                if let jsonValueCurrent = jsonMap["current"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.current = try Apiproto.SaleIssue.Builder.decodeToBuilder(jsonMap:jsonValueCurrent).build()

                }
                if let jsonValueNext = jsonMap["next"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.next = try Apiproto.SaleIssue.Builder.decodeToBuilder(jsonMap:jsonValueNext).build()

                }
                if let jsonValueSaleList = jsonMap["saleList"] as? Array<String> {
                    var jsonArraySaleList:Array<String> = []
                    for oneValueSaleList in jsonValueSaleList {
                        jsonArraySaleList.append(oneValueSaleList)
                    }
                    resultDecodedBuilder.saleList = jsonArraySaleList
                }
                if let jsonValueMaxMultiple = jsonMap["maxMultiple"] as? Int {
                    resultDecodedBuilder.maxMultiple = Int32(jsonValueMaxMultiple)
                } else if let jsonValueMaxMultiple = jsonMap["maxMultiple"] as? String {
                    resultDecodedBuilder.maxMultiple = Int32(jsonValueMaxMultiple)!
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.BuycaiInfo.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.BuycaiInfo.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class VendorOrderHistoryRequest : GeneratedMessage {

        public static func == (lhs: Apiproto.VendorOrderHistoryRequest, rhs: Apiproto.VendorOrderHistoryRequest) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasLotteryId == rhs.hasLotteryId) && (!lhs.hasLotteryId || lhs.lotteryId == rhs.lotteryId)
            fieldCheck = fieldCheck && (lhs.hasRange == rhs.hasRange) && (!lhs.hasRange || lhs.range == rhs.range)
            fieldCheck = fieldCheck && (lhs.hasStatus == rhs.hasStatus) && (!lhs.hasStatus || lhs.status == rhs.status)
            fieldCheck = fieldCheck && (lhs.hasPage == rhs.hasPage) && (!lhs.hasPage || lhs.page == rhs.page)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var lotteryId:Apiproto.LotteryId = Apiproto.LotteryId.allId
        public fileprivate(set) var hasLotteryId:Bool = false
        public fileprivate(set) var range:Apiproto.TimeRange = Apiproto.TimeRange.trDefault
        public fileprivate(set) var hasRange:Bool = false
        public fileprivate(set) var status:Apiproto.VendorOrderStatus = Apiproto.VendorOrderStatus.vosAll
        public fileprivate(set) var hasStatus:Bool = false
        /// 页索引(0开始)
        public fileprivate(set) var page:Int32 = Int32(0)
        public fileprivate(set) var hasPage:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasLotteryId {
                try codedOutputStream.writeEnum(fieldNumber: 1, value:lotteryId.rawValue)
            }
            if hasRange {
                try codedOutputStream.writeEnum(fieldNumber: 2, value:range.rawValue)
            }
            if hasStatus {
                try codedOutputStream.writeEnum(fieldNumber: 3, value:status.rawValue)
            }
            if hasPage {
                try codedOutputStream.writeInt32(fieldNumber: 4, value:page)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if (hasLotteryId) {
                serialize_size += lotteryId.rawValue.computeEnumSize(fieldNumber: 1)
            }
            if (hasRange) {
                serialize_size += range.rawValue.computeEnumSize(fieldNumber: 2)
            }
            if (hasStatus) {
                serialize_size += status.rawValue.computeEnumSize(fieldNumber: 3)
            }
            if hasPage {
                serialize_size += page.computeInt32Size(fieldNumber: 4)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.VendorOrderHistoryRequest.Builder {
            return Apiproto.VendorOrderHistoryRequest.classBuilder() as! Apiproto.VendorOrderHistoryRequest.Builder
        }
        public func getBuilder() -> Apiproto.VendorOrderHistoryRequest.Builder {
            return classBuilder() as! Apiproto.VendorOrderHistoryRequest.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.VendorOrderHistoryRequest.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.VendorOrderHistoryRequest.Builder()
        }
        public func toBuilder() throws -> Apiproto.VendorOrderHistoryRequest.Builder {
            return try Apiproto.VendorOrderHistoryRequest.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.VendorOrderHistoryRequest) throws -> Apiproto.VendorOrderHistoryRequest.Builder {
            return try Apiproto.VendorOrderHistoryRequest.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasLotteryId {
                jsonMap["lotteryId"] = lotteryId.toString()
            }
            if hasRange {
                jsonMap["range"] = range.toString()
            }
            if hasStatus {
                jsonMap["status"] = status.toString()
            }
            if hasPage {
                jsonMap["page"] = Int(page)
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.VendorOrderHistoryRequest {
            return try Apiproto.VendorOrderHistoryRequest.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.VendorOrderHistoryRequest {
            return try Apiproto.VendorOrderHistoryRequest.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if (hasLotteryId) {
                output += "\(indent) lotteryId: \(lotteryId.description)\n"
            }
            if (hasRange) {
                output += "\(indent) range: \(range.description)\n"
            }
            if (hasStatus) {
                output += "\(indent) status: \(status.description)\n"
            }
            if hasPage {
                output += "\(indent) page: \(page) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasLotteryId {
                     hashCode = (hashCode &* 31) &+ lotteryId.hashValue
                }
                if hasRange {
                     hashCode = (hashCode &* 31) &+ range.hashValue
                }
                if hasStatus {
                     hashCode = (hashCode &* 31) &+ status.hashValue
                }
                if hasPage {
                    hashCode = (hashCode &* 31) &+ page.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.VendorOrderHistoryRequest"
        }
        override public func className() -> String {
            return "Apiproto.VendorOrderHistoryRequest"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.VendorOrderHistoryRequest = Apiproto.VendorOrderHistoryRequest()
            public func getMessage() -> Apiproto.VendorOrderHistoryRequest {
                return builderResult
            }

            required override public init () {
                super.init()
            }
                public var lotteryId:Apiproto.LotteryId {
                    get {
                        return builderResult.lotteryId
                    }
                    set (value) {
                        builderResult.hasLotteryId = true
                        builderResult.lotteryId = value
                    }
                }
                public var hasLotteryId:Bool{
                    get {
                        return builderResult.hasLotteryId
                    }
                }
            @discardableResult
                public func setLotteryId(_ value:Apiproto.LotteryId) -> Apiproto.VendorOrderHistoryRequest.Builder {
                  self.lotteryId = value
                  return self
                }
            @discardableResult
                public func clearLotteryId() -> Apiproto.VendorOrderHistoryRequest.Builder {
                   builderResult.hasLotteryId = false
                   builderResult.lotteryId = .allId
                   return self
                }
                public var range:Apiproto.TimeRange {
                    get {
                        return builderResult.range
                    }
                    set (value) {
                        builderResult.hasRange = true
                        builderResult.range = value
                    }
                }
                public var hasRange:Bool{
                    get {
                        return builderResult.hasRange
                    }
                }
            @discardableResult
                public func setRange(_ value:Apiproto.TimeRange) -> Apiproto.VendorOrderHistoryRequest.Builder {
                  self.range = value
                  return self
                }
            @discardableResult
                public func clearRange() -> Apiproto.VendorOrderHistoryRequest.Builder {
                   builderResult.hasRange = false
                   builderResult.range = .trDefault
                   return self
                }
                public var status:Apiproto.VendorOrderStatus {
                    get {
                        return builderResult.status
                    }
                    set (value) {
                        builderResult.hasStatus = true
                        builderResult.status = value
                    }
                }
                public var hasStatus:Bool{
                    get {
                        return builderResult.hasStatus
                    }
                }
            @discardableResult
                public func setStatus(_ value:Apiproto.VendorOrderStatus) -> Apiproto.VendorOrderHistoryRequest.Builder {
                  self.status = value
                  return self
                }
            @discardableResult
                public func clearStatus() -> Apiproto.VendorOrderHistoryRequest.Builder {
                   builderResult.hasStatus = false
                   builderResult.status = .vosAll
                   return self
                }
            /// 页索引(0开始)
            public var page:Int32 {
                get {
                    return builderResult.page
                }
                set (value) {
                    builderResult.hasPage = true
                    builderResult.page = value
                }
            }
            public var hasPage:Bool {
                get {
                    return builderResult.hasPage
                }
            }
            @discardableResult
            public func setPage(_ value:Int32) -> Apiproto.VendorOrderHistoryRequest.Builder {
                self.page = value
                return self
            }
            @discardableResult
            public func clearPage() -> Apiproto.VendorOrderHistoryRequest.Builder{
                builderResult.hasPage = false
                builderResult.page = Int32(0)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.VendorOrderHistoryRequest.Builder {
                builderResult = Apiproto.VendorOrderHistoryRequest()
                return self
            }
            override public func clone() throws -> Apiproto.VendorOrderHistoryRequest.Builder {
                return try Apiproto.VendorOrderHistoryRequest.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.VendorOrderHistoryRequest {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.VendorOrderHistoryRequest {
                let returnMe:Apiproto.VendorOrderHistoryRequest = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.VendorOrderHistoryRequest) throws -> Apiproto.VendorOrderHistoryRequest.Builder {
                if other == Apiproto.VendorOrderHistoryRequest() {
                    return self
                }
                if other.hasLotteryId {
                    lotteryId = other.lotteryId
                }
                if other.hasRange {
                    range = other.range
                }
                if other.hasStatus {
                    status = other.status
                }
                if other.hasPage {
                    page = other.page
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.VendorOrderHistoryRequest.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.VendorOrderHistoryRequest.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        let valueIntlotteryId = try codedInputStream.readEnum()
                        if let enumslotteryId = Apiproto.LotteryId(rawValue:valueIntlotteryId){
                            lotteryId = enumslotteryId
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 1, value:Int64(valueIntlotteryId))
                        }

                    case 16:
                        let valueIntrange = try codedInputStream.readEnum()
                        if let enumsrange = Apiproto.TimeRange(rawValue:valueIntrange){
                            range = enumsrange
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 2, value:Int64(valueIntrange))
                        }

                    case 24:
                        let valueIntstatus = try codedInputStream.readEnum()
                        if let enumsstatus = Apiproto.VendorOrderStatus(rawValue:valueIntstatus){
                            status = enumsstatus
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 3, value:Int64(valueIntstatus))
                        }

                    case 32:
                        page = try codedInputStream.readInt32()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.VendorOrderHistoryRequest.Builder {
                let resultDecodedBuilder = Apiproto.VendorOrderHistoryRequest.Builder()
                if let jsonValueLotteryId = jsonMap["lotteryId"] as? String {
                    resultDecodedBuilder.lotteryId = try Apiproto.LotteryId.fromString(str: jsonValueLotteryId)
                }
                if let jsonValueRange = jsonMap["range"] as? String {
                    resultDecodedBuilder.range = try Apiproto.TimeRange.fromString(str: jsonValueRange)
                }
                if let jsonValueStatus = jsonMap["status"] as? String {
                    resultDecodedBuilder.status = try Apiproto.VendorOrderStatus.fromString(str: jsonValueStatus)
                }
                if let jsonValuePage = jsonMap["page"] as? Int {
                    resultDecodedBuilder.page = Int32(jsonValuePage)
                } else if let jsonValuePage = jsonMap["page"] as? String {
                    resultDecodedBuilder.page = Int32(jsonValuePage)!
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.VendorOrderHistoryRequest.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.VendorOrderHistoryRequest.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class UserOrderHistoryRequest : GeneratedMessage {

        public static func == (lhs: Apiproto.UserOrderHistoryRequest, rhs: Apiproto.UserOrderHistoryRequest) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasLotteryId == rhs.hasLotteryId) && (!lhs.hasLotteryId || lhs.lotteryId == rhs.lotteryId)
            fieldCheck = fieldCheck && (lhs.hasRange == rhs.hasRange) && (!lhs.hasRange || lhs.range == rhs.range)
            fieldCheck = fieldCheck && (lhs.hasStatus == rhs.hasStatus) && (!lhs.hasStatus || lhs.status == rhs.status)
            fieldCheck = fieldCheck && (lhs.hasType == rhs.hasType) && (!lhs.hasType || lhs.type == rhs.type)
            fieldCheck = fieldCheck && (lhs.hasPage == rhs.hasPage) && (!lhs.hasPage || lhs.page == rhs.page)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var lotteryId:Apiproto.LotteryId = Apiproto.LotteryId.allId
        public fileprivate(set) var hasLotteryId:Bool = false
        public fileprivate(set) var range:Apiproto.TimeRange = Apiproto.TimeRange.trDefault
        public fileprivate(set) var hasRange:Bool = false
        public fileprivate(set) var status:Apiproto.UserOrderStatus = Apiproto.UserOrderStatus.uosAll
        public fileprivate(set) var hasStatus:Bool = false
        public fileprivate(set) var type:Apiproto.BuycaiOrderType = Apiproto.BuycaiOrderType.normal
        public fileprivate(set) var hasType:Bool = false
        /// 页索引(0开始)
        public fileprivate(set) var page:Int32 = Int32(0)
        public fileprivate(set) var hasPage:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasLotteryId {
                try codedOutputStream.writeEnum(fieldNumber: 1, value:lotteryId.rawValue)
            }
            if hasRange {
                try codedOutputStream.writeEnum(fieldNumber: 2, value:range.rawValue)
            }
            if hasStatus {
                try codedOutputStream.writeEnum(fieldNumber: 3, value:status.rawValue)
            }
            if hasType {
                try codedOutputStream.writeEnum(fieldNumber: 4, value:type.rawValue)
            }
            if hasPage {
                try codedOutputStream.writeInt32(fieldNumber: 5, value:page)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if (hasLotteryId) {
                serialize_size += lotteryId.rawValue.computeEnumSize(fieldNumber: 1)
            }
            if (hasRange) {
                serialize_size += range.rawValue.computeEnumSize(fieldNumber: 2)
            }
            if (hasStatus) {
                serialize_size += status.rawValue.computeEnumSize(fieldNumber: 3)
            }
            if (hasType) {
                serialize_size += type.rawValue.computeEnumSize(fieldNumber: 4)
            }
            if hasPage {
                serialize_size += page.computeInt32Size(fieldNumber: 5)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.UserOrderHistoryRequest.Builder {
            return Apiproto.UserOrderHistoryRequest.classBuilder() as! Apiproto.UserOrderHistoryRequest.Builder
        }
        public func getBuilder() -> Apiproto.UserOrderHistoryRequest.Builder {
            return classBuilder() as! Apiproto.UserOrderHistoryRequest.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.UserOrderHistoryRequest.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.UserOrderHistoryRequest.Builder()
        }
        public func toBuilder() throws -> Apiproto.UserOrderHistoryRequest.Builder {
            return try Apiproto.UserOrderHistoryRequest.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.UserOrderHistoryRequest) throws -> Apiproto.UserOrderHistoryRequest.Builder {
            return try Apiproto.UserOrderHistoryRequest.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasLotteryId {
                jsonMap["lotteryId"] = lotteryId.toString()
            }
            if hasRange {
                jsonMap["range"] = range.toString()
            }
            if hasStatus {
                jsonMap["status"] = status.toString()
            }
            if hasType {
                jsonMap["type"] = type.toString()
            }
            if hasPage {
                jsonMap["page"] = Int(page)
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.UserOrderHistoryRequest {
            return try Apiproto.UserOrderHistoryRequest.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.UserOrderHistoryRequest {
            return try Apiproto.UserOrderHistoryRequest.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if (hasLotteryId) {
                output += "\(indent) lotteryId: \(lotteryId.description)\n"
            }
            if (hasRange) {
                output += "\(indent) range: \(range.description)\n"
            }
            if (hasStatus) {
                output += "\(indent) status: \(status.description)\n"
            }
            if (hasType) {
                output += "\(indent) type: \(type.description)\n"
            }
            if hasPage {
                output += "\(indent) page: \(page) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasLotteryId {
                     hashCode = (hashCode &* 31) &+ lotteryId.hashValue
                }
                if hasRange {
                     hashCode = (hashCode &* 31) &+ range.hashValue
                }
                if hasStatus {
                     hashCode = (hashCode &* 31) &+ status.hashValue
                }
                if hasType {
                     hashCode = (hashCode &* 31) &+ type.hashValue
                }
                if hasPage {
                    hashCode = (hashCode &* 31) &+ page.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.UserOrderHistoryRequest"
        }
        override public func className() -> String {
            return "Apiproto.UserOrderHistoryRequest"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.UserOrderHistoryRequest = Apiproto.UserOrderHistoryRequest()
            public func getMessage() -> Apiproto.UserOrderHistoryRequest {
                return builderResult
            }

            required override public init () {
                super.init()
            }
                public var lotteryId:Apiproto.LotteryId {
                    get {
                        return builderResult.lotteryId
                    }
                    set (value) {
                        builderResult.hasLotteryId = true
                        builderResult.lotteryId = value
                    }
                }
                public var hasLotteryId:Bool{
                    get {
                        return builderResult.hasLotteryId
                    }
                }
            @discardableResult
                public func setLotteryId(_ value:Apiproto.LotteryId) -> Apiproto.UserOrderHistoryRequest.Builder {
                  self.lotteryId = value
                  return self
                }
            @discardableResult
                public func clearLotteryId() -> Apiproto.UserOrderHistoryRequest.Builder {
                   builderResult.hasLotteryId = false
                   builderResult.lotteryId = .allId
                   return self
                }
                public var range:Apiproto.TimeRange {
                    get {
                        return builderResult.range
                    }
                    set (value) {
                        builderResult.hasRange = true
                        builderResult.range = value
                    }
                }
                public var hasRange:Bool{
                    get {
                        return builderResult.hasRange
                    }
                }
            @discardableResult
                public func setRange(_ value:Apiproto.TimeRange) -> Apiproto.UserOrderHistoryRequest.Builder {
                  self.range = value
                  return self
                }
            @discardableResult
                public func clearRange() -> Apiproto.UserOrderHistoryRequest.Builder {
                   builderResult.hasRange = false
                   builderResult.range = .trDefault
                   return self
                }
                public var status:Apiproto.UserOrderStatus {
                    get {
                        return builderResult.status
                    }
                    set (value) {
                        builderResult.hasStatus = true
                        builderResult.status = value
                    }
                }
                public var hasStatus:Bool{
                    get {
                        return builderResult.hasStatus
                    }
                }
            @discardableResult
                public func setStatus(_ value:Apiproto.UserOrderStatus) -> Apiproto.UserOrderHistoryRequest.Builder {
                  self.status = value
                  return self
                }
            @discardableResult
                public func clearStatus() -> Apiproto.UserOrderHistoryRequest.Builder {
                   builderResult.hasStatus = false
                   builderResult.status = .uosAll
                   return self
                }
                public var type:Apiproto.BuycaiOrderType {
                    get {
                        return builderResult.type
                    }
                    set (value) {
                        builderResult.hasType = true
                        builderResult.type = value
                    }
                }
                public var hasType:Bool{
                    get {
                        return builderResult.hasType
                    }
                }
            @discardableResult
                public func setType(_ value:Apiproto.BuycaiOrderType) -> Apiproto.UserOrderHistoryRequest.Builder {
                  self.type = value
                  return self
                }
            @discardableResult
                public func clearType() -> Apiproto.UserOrderHistoryRequest.Builder {
                   builderResult.hasType = false
                   builderResult.type = .normal
                   return self
                }
            /// 页索引(0开始)
            public var page:Int32 {
                get {
                    return builderResult.page
                }
                set (value) {
                    builderResult.hasPage = true
                    builderResult.page = value
                }
            }
            public var hasPage:Bool {
                get {
                    return builderResult.hasPage
                }
            }
            @discardableResult
            public func setPage(_ value:Int32) -> Apiproto.UserOrderHistoryRequest.Builder {
                self.page = value
                return self
            }
            @discardableResult
            public func clearPage() -> Apiproto.UserOrderHistoryRequest.Builder{
                builderResult.hasPage = false
                builderResult.page = Int32(0)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.UserOrderHistoryRequest.Builder {
                builderResult = Apiproto.UserOrderHistoryRequest()
                return self
            }
            override public func clone() throws -> Apiproto.UserOrderHistoryRequest.Builder {
                return try Apiproto.UserOrderHistoryRequest.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.UserOrderHistoryRequest {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.UserOrderHistoryRequest {
                let returnMe:Apiproto.UserOrderHistoryRequest = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.UserOrderHistoryRequest) throws -> Apiproto.UserOrderHistoryRequest.Builder {
                if other == Apiproto.UserOrderHistoryRequest() {
                    return self
                }
                if other.hasLotteryId {
                    lotteryId = other.lotteryId
                }
                if other.hasRange {
                    range = other.range
                }
                if other.hasStatus {
                    status = other.status
                }
                if other.hasType {
                    type = other.type
                }
                if other.hasPage {
                    page = other.page
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.UserOrderHistoryRequest.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.UserOrderHistoryRequest.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        let valueIntlotteryId = try codedInputStream.readEnum()
                        if let enumslotteryId = Apiproto.LotteryId(rawValue:valueIntlotteryId){
                            lotteryId = enumslotteryId
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 1, value:Int64(valueIntlotteryId))
                        }

                    case 16:
                        let valueIntrange = try codedInputStream.readEnum()
                        if let enumsrange = Apiproto.TimeRange(rawValue:valueIntrange){
                            range = enumsrange
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 2, value:Int64(valueIntrange))
                        }

                    case 24:
                        let valueIntstatus = try codedInputStream.readEnum()
                        if let enumsstatus = Apiproto.UserOrderStatus(rawValue:valueIntstatus){
                            status = enumsstatus
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 3, value:Int64(valueIntstatus))
                        }

                    case 32:
                        let valueInttype = try codedInputStream.readEnum()
                        if let enumstype = Apiproto.BuycaiOrderType(rawValue:valueInttype){
                            type = enumstype
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 4, value:Int64(valueInttype))
                        }

                    case 40:
                        page = try codedInputStream.readInt32()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.UserOrderHistoryRequest.Builder {
                let resultDecodedBuilder = Apiproto.UserOrderHistoryRequest.Builder()
                if let jsonValueLotteryId = jsonMap["lotteryId"] as? String {
                    resultDecodedBuilder.lotteryId = try Apiproto.LotteryId.fromString(str: jsonValueLotteryId)
                }
                if let jsonValueRange = jsonMap["range"] as? String {
                    resultDecodedBuilder.range = try Apiproto.TimeRange.fromString(str: jsonValueRange)
                }
                if let jsonValueStatus = jsonMap["status"] as? String {
                    resultDecodedBuilder.status = try Apiproto.UserOrderStatus.fromString(str: jsonValueStatus)
                }
                if let jsonValueType = jsonMap["type"] as? String {
                    resultDecodedBuilder.type = try Apiproto.BuycaiOrderType.fromString(str: jsonValueType)
                }
                if let jsonValuePage = jsonMap["page"] as? Int {
                    resultDecodedBuilder.page = Int32(jsonValuePage)
                } else if let jsonValuePage = jsonMap["page"] as? String {
                    resultDecodedBuilder.page = Int32(jsonValuePage)!
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.UserOrderHistoryRequest.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.UserOrderHistoryRequest.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class VendorOrderRecord : GeneratedMessage {

        public static func == (lhs: Apiproto.VendorOrderRecord, rhs: Apiproto.VendorOrderRecord) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
            fieldCheck = fieldCheck && (lhs.hasLotteryId == rhs.hasLotteryId) && (!lhs.hasLotteryId || lhs.lotteryId == rhs.lotteryId)
            fieldCheck = fieldCheck && (lhs.hasIssue == rhs.hasIssue) && (!lhs.hasIssue || lhs.issue == rhs.issue)
            fieldCheck = fieldCheck && (lhs.hasMoney == rhs.hasMoney) && (!lhs.hasMoney || lhs.money == rhs.money)
            fieldCheck = fieldCheck && (lhs.hasStatus == rhs.hasStatus) && (!lhs.hasStatus || lhs.status == rhs.status)
            fieldCheck = fieldCheck && (lhs.hasIsChase == rhs.hasIsChase) && (!lhs.hasIsChase || lhs.isChase == rhs.isChase)
            fieldCheck = fieldCheck && (lhs.hasWinMoney == rhs.hasWinMoney) && (!lhs.hasWinMoney || lhs.winMoney == rhs.winMoney)
            fieldCheck = fieldCheck && (lhs.hasAddTime == rhs.hasAddTime) && (!lhs.hasAddTime || lhs.addTime == rhs.addTime)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var id:Int64 = Int64(0)
        public fileprivate(set) var hasId:Bool = false

        public fileprivate(set) var lotteryId:Apiproto.LotteryId = Apiproto.LotteryId.allId
        public fileprivate(set) var hasLotteryId:Bool = false
        public fileprivate(set) var issue:String = ""
        public fileprivate(set) var hasIssue:Bool = false

        public fileprivate(set) var money:Double = Double(0)
        public fileprivate(set) var hasMoney:Bool = false

        public fileprivate(set) var status:Apiproto.VendorOrderStatus = Apiproto.VendorOrderStatus.vosAll
        public fileprivate(set) var hasStatus:Bool = false
        public fileprivate(set) var isChase:Bool = false
        public fileprivate(set) var hasIsChase:Bool = false

        public fileprivate(set) var winMoney:Double = Double(0)
        public fileprivate(set) var hasWinMoney:Bool = false

        public fileprivate(set) var addTime:Int64 = Int64(0)
        public fileprivate(set) var hasAddTime:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasId {
                try codedOutputStream.writeInt64(fieldNumber: 1, value:id)
            }
            if hasLotteryId {
                try codedOutputStream.writeEnum(fieldNumber: 2, value:lotteryId.rawValue)
            }
            if hasIssue {
                try codedOutputStream.writeString(fieldNumber: 3, value:issue)
            }
            if hasMoney {
                try codedOutputStream.writeDouble(fieldNumber: 4, value:money)
            }
            if hasStatus {
                try codedOutputStream.writeEnum(fieldNumber: 5, value:status.rawValue)
            }
            if hasIsChase {
                try codedOutputStream.writeBool(fieldNumber: 6, value:isChase)
            }
            if hasWinMoney {
                try codedOutputStream.writeDouble(fieldNumber: 7, value:winMoney)
            }
            if hasAddTime {
                try codedOutputStream.writeInt64(fieldNumber: 8, value:addTime)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasId {
                serialize_size += id.computeInt64Size(fieldNumber: 1)
            }
            if (hasLotteryId) {
                serialize_size += lotteryId.rawValue.computeEnumSize(fieldNumber: 2)
            }
            if hasIssue {
                serialize_size += issue.computeStringSize(fieldNumber: 3)
            }
            if hasMoney {
                serialize_size += money.computeDoubleSize(fieldNumber: 4)
            }
            if (hasStatus) {
                serialize_size += status.rawValue.computeEnumSize(fieldNumber: 5)
            }
            if hasIsChase {
                serialize_size += isChase.computeBoolSize(fieldNumber: 6)
            }
            if hasWinMoney {
                serialize_size += winMoney.computeDoubleSize(fieldNumber: 7)
            }
            if hasAddTime {
                serialize_size += addTime.computeInt64Size(fieldNumber: 8)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.VendorOrderRecord.Builder {
            return Apiproto.VendorOrderRecord.classBuilder() as! Apiproto.VendorOrderRecord.Builder
        }
        public func getBuilder() -> Apiproto.VendorOrderRecord.Builder {
            return classBuilder() as! Apiproto.VendorOrderRecord.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.VendorOrderRecord.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.VendorOrderRecord.Builder()
        }
        public func toBuilder() throws -> Apiproto.VendorOrderRecord.Builder {
            return try Apiproto.VendorOrderRecord.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.VendorOrderRecord) throws -> Apiproto.VendorOrderRecord.Builder {
            return try Apiproto.VendorOrderRecord.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasId {
                jsonMap["id"] = "\(id)"
            }
            if hasLotteryId {
                jsonMap["lotteryId"] = lotteryId.toString()
            }
            if hasIssue {
                jsonMap["issue"] = issue
            }
            if hasMoney {
                jsonMap["money"] = Double(money)
            }
            if hasStatus {
                jsonMap["status"] = status.toString()
            }
            if hasIsChase {
                jsonMap["isChase"] = isChase
            }
            if hasWinMoney {
                jsonMap["winMoney"] = Double(winMoney)
            }
            if hasAddTime {
                jsonMap["addTime"] = "\(addTime)"
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.VendorOrderRecord {
            return try Apiproto.VendorOrderRecord.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.VendorOrderRecord {
            return try Apiproto.VendorOrderRecord.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasId {
                output += "\(indent) id: \(id) \n"
            }
            if (hasLotteryId) {
                output += "\(indent) lotteryId: \(lotteryId.description)\n"
            }
            if hasIssue {
                output += "\(indent) issue: \(issue) \n"
            }
            if hasMoney {
                output += "\(indent) money: \(money) \n"
            }
            if (hasStatus) {
                output += "\(indent) status: \(status.description)\n"
            }
            if hasIsChase {
                output += "\(indent) isChase: \(isChase) \n"
            }
            if hasWinMoney {
                output += "\(indent) winMoney: \(winMoney) \n"
            }
            if hasAddTime {
                output += "\(indent) addTime: \(addTime) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasId {
                    hashCode = (hashCode &* 31) &+ id.hashValue
                }
                if hasLotteryId {
                     hashCode = (hashCode &* 31) &+ lotteryId.hashValue
                }
                if hasIssue {
                    hashCode = (hashCode &* 31) &+ issue.hashValue
                }
                if hasMoney {
                    hashCode = (hashCode &* 31) &+ money.hashValue
                }
                if hasStatus {
                     hashCode = (hashCode &* 31) &+ status.hashValue
                }
                if hasIsChase {
                    hashCode = (hashCode &* 31) &+ isChase.hashValue
                }
                if hasWinMoney {
                    hashCode = (hashCode &* 31) &+ winMoney.hashValue
                }
                if hasAddTime {
                    hashCode = (hashCode &* 31) &+ addTime.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.VendorOrderRecord"
        }
        override public func className() -> String {
            return "Apiproto.VendorOrderRecord"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.VendorOrderRecord = Apiproto.VendorOrderRecord()
            public func getMessage() -> Apiproto.VendorOrderRecord {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var id:Int64 {
                get {
                    return builderResult.id
                }
                set (value) {
                    builderResult.hasId = true
                    builderResult.id = value
                }
            }
            public var hasId:Bool {
                get {
                    return builderResult.hasId
                }
            }
            @discardableResult
            public func setId(_ value:Int64) -> Apiproto.VendorOrderRecord.Builder {
                self.id = value
                return self
            }
            @discardableResult
            public func clearId() -> Apiproto.VendorOrderRecord.Builder{
                builderResult.hasId = false
                builderResult.id = Int64(0)
                return self
            }
                public var lotteryId:Apiproto.LotteryId {
                    get {
                        return builderResult.lotteryId
                    }
                    set (value) {
                        builderResult.hasLotteryId = true
                        builderResult.lotteryId = value
                    }
                }
                public var hasLotteryId:Bool{
                    get {
                        return builderResult.hasLotteryId
                    }
                }
            @discardableResult
                public func setLotteryId(_ value:Apiproto.LotteryId) -> Apiproto.VendorOrderRecord.Builder {
                  self.lotteryId = value
                  return self
                }
            @discardableResult
                public func clearLotteryId() -> Apiproto.VendorOrderRecord.Builder {
                   builderResult.hasLotteryId = false
                   builderResult.lotteryId = .allId
                   return self
                }
            public var issue:String {
                get {
                    return builderResult.issue
                }
                set (value) {
                    builderResult.hasIssue = true
                    builderResult.issue = value
                }
            }
            public var hasIssue:Bool {
                get {
                    return builderResult.hasIssue
                }
            }
            @discardableResult
            public func setIssue(_ value:String) -> Apiproto.VendorOrderRecord.Builder {
                self.issue = value
                return self
            }
            @discardableResult
            public func clearIssue() -> Apiproto.VendorOrderRecord.Builder{
                builderResult.hasIssue = false
                builderResult.issue = ""
                return self
            }
            public var money:Double {
                get {
                    return builderResult.money
                }
                set (value) {
                    builderResult.hasMoney = true
                    builderResult.money = value
                }
            }
            public var hasMoney:Bool {
                get {
                    return builderResult.hasMoney
                }
            }
            @discardableResult
            public func setMoney(_ value:Double) -> Apiproto.VendorOrderRecord.Builder {
                self.money = value
                return self
            }
            @discardableResult
            public func clearMoney() -> Apiproto.VendorOrderRecord.Builder{
                builderResult.hasMoney = false
                builderResult.money = Double(0)
                return self
            }
                public var status:Apiproto.VendorOrderStatus {
                    get {
                        return builderResult.status
                    }
                    set (value) {
                        builderResult.hasStatus = true
                        builderResult.status = value
                    }
                }
                public var hasStatus:Bool{
                    get {
                        return builderResult.hasStatus
                    }
                }
            @discardableResult
                public func setStatus(_ value:Apiproto.VendorOrderStatus) -> Apiproto.VendorOrderRecord.Builder {
                  self.status = value
                  return self
                }
            @discardableResult
                public func clearStatus() -> Apiproto.VendorOrderRecord.Builder {
                   builderResult.hasStatus = false
                   builderResult.status = .vosAll
                   return self
                }
            public var isChase:Bool {
                get {
                    return builderResult.isChase
                }
                set (value) {
                    builderResult.hasIsChase = true
                    builderResult.isChase = value
                }
            }
            public var hasIsChase:Bool {
                get {
                    return builderResult.hasIsChase
                }
            }
            @discardableResult
            public func setIsChase(_ value:Bool) -> Apiproto.VendorOrderRecord.Builder {
                self.isChase = value
                return self
            }
            @discardableResult
            public func clearIsChase() -> Apiproto.VendorOrderRecord.Builder{
                builderResult.hasIsChase = false
                builderResult.isChase = false
                return self
            }
            public var winMoney:Double {
                get {
                    return builderResult.winMoney
                }
                set (value) {
                    builderResult.hasWinMoney = true
                    builderResult.winMoney = value
                }
            }
            public var hasWinMoney:Bool {
                get {
                    return builderResult.hasWinMoney
                }
            }
            @discardableResult
            public func setWinMoney(_ value:Double) -> Apiproto.VendorOrderRecord.Builder {
                self.winMoney = value
                return self
            }
            @discardableResult
            public func clearWinMoney() -> Apiproto.VendorOrderRecord.Builder{
                builderResult.hasWinMoney = false
                builderResult.winMoney = Double(0)
                return self
            }
            public var addTime:Int64 {
                get {
                    return builderResult.addTime
                }
                set (value) {
                    builderResult.hasAddTime = true
                    builderResult.addTime = value
                }
            }
            public var hasAddTime:Bool {
                get {
                    return builderResult.hasAddTime
                }
            }
            @discardableResult
            public func setAddTime(_ value:Int64) -> Apiproto.VendorOrderRecord.Builder {
                self.addTime = value
                return self
            }
            @discardableResult
            public func clearAddTime() -> Apiproto.VendorOrderRecord.Builder{
                builderResult.hasAddTime = false
                builderResult.addTime = Int64(0)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.VendorOrderRecord.Builder {
                builderResult = Apiproto.VendorOrderRecord()
                return self
            }
            override public func clone() throws -> Apiproto.VendorOrderRecord.Builder {
                return try Apiproto.VendorOrderRecord.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.VendorOrderRecord {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.VendorOrderRecord {
                let returnMe:Apiproto.VendorOrderRecord = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.VendorOrderRecord) throws -> Apiproto.VendorOrderRecord.Builder {
                if other == Apiproto.VendorOrderRecord() {
                    return self
                }
                if other.hasId {
                    id = other.id
                }
                if other.hasLotteryId {
                    lotteryId = other.lotteryId
                }
                if other.hasIssue {
                    issue = other.issue
                }
                if other.hasMoney {
                    money = other.money
                }
                if other.hasStatus {
                    status = other.status
                }
                if other.hasIsChase {
                    isChase = other.isChase
                }
                if other.hasWinMoney {
                    winMoney = other.winMoney
                }
                if other.hasAddTime {
                    addTime = other.addTime
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.VendorOrderRecord.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.VendorOrderRecord.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        id = try codedInputStream.readInt64()

                    case 16:
                        let valueIntlotteryId = try codedInputStream.readEnum()
                        if let enumslotteryId = Apiproto.LotteryId(rawValue:valueIntlotteryId){
                            lotteryId = enumslotteryId
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 2, value:Int64(valueIntlotteryId))
                        }

                    case 26:
                        issue = try codedInputStream.readString()

                    case 33:
                        money = try codedInputStream.readDouble()

                    case 40:
                        let valueIntstatus = try codedInputStream.readEnum()
                        if let enumsstatus = Apiproto.VendorOrderStatus(rawValue:valueIntstatus){
                            status = enumsstatus
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 5, value:Int64(valueIntstatus))
                        }

                    case 48:
                        isChase = try codedInputStream.readBool()

                    case 57:
                        winMoney = try codedInputStream.readDouble()

                    case 64:
                        addTime = try codedInputStream.readInt64()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.VendorOrderRecord.Builder {
                let resultDecodedBuilder = Apiproto.VendorOrderRecord.Builder()
                if let jsonValueId = jsonMap["id"] as? String {
                    resultDecodedBuilder.id = Int64(jsonValueId)!
                } else if let jsonValueId = jsonMap["id"] as? Int {
                    resultDecodedBuilder.id = Int64(jsonValueId)
                }
                if let jsonValueLotteryId = jsonMap["lotteryId"] as? String {
                    resultDecodedBuilder.lotteryId = try Apiproto.LotteryId.fromString(str: jsonValueLotteryId)
                }
                if let jsonValueIssue = jsonMap["issue"] as? String {
                    resultDecodedBuilder.issue = jsonValueIssue
                }
                if let jsonValueMoney = jsonMap["money"] as? Double {
                    resultDecodedBuilder.money = Double(jsonValueMoney)
                } else if let jsonValueMoney = jsonMap["money"] as? String {
                    resultDecodedBuilder.money = Double(jsonValueMoney)!
                }
                if let jsonValueStatus = jsonMap["status"] as? String {
                    resultDecodedBuilder.status = try Apiproto.VendorOrderStatus.fromString(str: jsonValueStatus)
                }
                if let jsonValueIsChase = jsonMap["isChase"] as? Bool {
                    resultDecodedBuilder.isChase = jsonValueIsChase
                }
                if let jsonValueWinMoney = jsonMap["winMoney"] as? Double {
                    resultDecodedBuilder.winMoney = Double(jsonValueWinMoney)
                } else if let jsonValueWinMoney = jsonMap["winMoney"] as? String {
                    resultDecodedBuilder.winMoney = Double(jsonValueWinMoney)!
                }
                if let jsonValueAddTime = jsonMap["addTime"] as? String {
                    resultDecodedBuilder.addTime = Int64(jsonValueAddTime)!
                } else if let jsonValueAddTime = jsonMap["addTime"] as? Int {
                    resultDecodedBuilder.addTime = Int64(jsonValueAddTime)
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.VendorOrderRecord.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.VendorOrderRecord.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class UserOrderRecord : GeneratedMessage {

        public static func == (lhs: Apiproto.UserOrderRecord, rhs: Apiproto.UserOrderRecord) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
            fieldCheck = fieldCheck && (lhs.hasLotteryId == rhs.hasLotteryId) && (!lhs.hasLotteryId || lhs.lotteryId == rhs.lotteryId)
            fieldCheck = fieldCheck && (lhs.hasMoney == rhs.hasMoney) && (!lhs.hasMoney || lhs.money == rhs.money)
            fieldCheck = fieldCheck && (lhs.hasStatus == rhs.hasStatus) && (!lhs.hasStatus || lhs.status == rhs.status)
            fieldCheck = fieldCheck && (lhs.hasIssueNum == rhs.hasIssueNum) && (!lhs.hasIssueNum || lhs.issueNum == rhs.issueNum)
            fieldCheck = fieldCheck && (lhs.hasChaseNo == rhs.hasChaseNo) && (!lhs.hasChaseNo || lhs.chaseNo == rhs.chaseNo)
            fieldCheck = fieldCheck && (lhs.hasWinMoney == rhs.hasWinMoney) && (!lhs.hasWinMoney || lhs.winMoney == rhs.winMoney)
            fieldCheck = fieldCheck && (lhs.hasAddTime == rhs.hasAddTime) && (!lhs.hasAddTime || lhs.addTime == rhs.addTime)
            fieldCheck = fieldCheck && (lhs.hasCurIssue == rhs.hasCurIssue) && (!lhs.hasCurIssue || lhs.curIssue == rhs.curIssue)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var id:Int64 = Int64(0)
        public fileprivate(set) var hasId:Bool = false

        public fileprivate(set) var lotteryId:Apiproto.LotteryId = Apiproto.LotteryId.allId
        public fileprivate(set) var hasLotteryId:Bool = false
        public fileprivate(set) var money:Double = Double(0)
        public fileprivate(set) var hasMoney:Bool = false

        public fileprivate(set) var status:Apiproto.UserOrderStatus = Apiproto.UserOrderStatus.uosAll
        public fileprivate(set) var hasStatus:Bool = false
        public fileprivate(set) var issueNum:Int32 = Int32(0)
        public fileprivate(set) var hasIssueNum:Bool = false

        public fileprivate(set) var chaseNo:Int32 = Int32(0)
        public fileprivate(set) var hasChaseNo:Bool = false

        public fileprivate(set) var winMoney:Double = Double(0)
        public fileprivate(set) var hasWinMoney:Bool = false

        public fileprivate(set) var addTime:Int64 = Int64(0)
        public fileprivate(set) var hasAddTime:Bool = false

        public fileprivate(set) var curIssue:String = ""
        public fileprivate(set) var hasCurIssue:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasId {
                try codedOutputStream.writeInt64(fieldNumber: 1, value:id)
            }
            if hasLotteryId {
                try codedOutputStream.writeEnum(fieldNumber: 2, value:lotteryId.rawValue)
            }
            if hasMoney {
                try codedOutputStream.writeDouble(fieldNumber: 3, value:money)
            }
            if hasStatus {
                try codedOutputStream.writeEnum(fieldNumber: 4, value:status.rawValue)
            }
            if hasIssueNum {
                try codedOutputStream.writeInt32(fieldNumber: 5, value:issueNum)
            }
            if hasChaseNo {
                try codedOutputStream.writeInt32(fieldNumber: 6, value:chaseNo)
            }
            if hasWinMoney {
                try codedOutputStream.writeDouble(fieldNumber: 7, value:winMoney)
            }
            if hasAddTime {
                try codedOutputStream.writeInt64(fieldNumber: 8, value:addTime)
            }
            if hasCurIssue {
                try codedOutputStream.writeString(fieldNumber: 9, value:curIssue)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasId {
                serialize_size += id.computeInt64Size(fieldNumber: 1)
            }
            if (hasLotteryId) {
                serialize_size += lotteryId.rawValue.computeEnumSize(fieldNumber: 2)
            }
            if hasMoney {
                serialize_size += money.computeDoubleSize(fieldNumber: 3)
            }
            if (hasStatus) {
                serialize_size += status.rawValue.computeEnumSize(fieldNumber: 4)
            }
            if hasIssueNum {
                serialize_size += issueNum.computeInt32Size(fieldNumber: 5)
            }
            if hasChaseNo {
                serialize_size += chaseNo.computeInt32Size(fieldNumber: 6)
            }
            if hasWinMoney {
                serialize_size += winMoney.computeDoubleSize(fieldNumber: 7)
            }
            if hasAddTime {
                serialize_size += addTime.computeInt64Size(fieldNumber: 8)
            }
            if hasCurIssue {
                serialize_size += curIssue.computeStringSize(fieldNumber: 9)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.UserOrderRecord.Builder {
            return Apiproto.UserOrderRecord.classBuilder() as! Apiproto.UserOrderRecord.Builder
        }
        public func getBuilder() -> Apiproto.UserOrderRecord.Builder {
            return classBuilder() as! Apiproto.UserOrderRecord.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.UserOrderRecord.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.UserOrderRecord.Builder()
        }
        public func toBuilder() throws -> Apiproto.UserOrderRecord.Builder {
            return try Apiproto.UserOrderRecord.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.UserOrderRecord) throws -> Apiproto.UserOrderRecord.Builder {
            return try Apiproto.UserOrderRecord.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasId {
                jsonMap["id"] = "\(id)"
            }
            if hasLotteryId {
                jsonMap["lotteryId"] = lotteryId.toString()
            }
            if hasMoney {
                jsonMap["money"] = Double(money)
            }
            if hasStatus {
                jsonMap["status"] = status.toString()
            }
            if hasIssueNum {
                jsonMap["issueNum"] = Int(issueNum)
            }
            if hasChaseNo {
                jsonMap["chaseNo"] = Int(chaseNo)
            }
            if hasWinMoney {
                jsonMap["winMoney"] = Double(winMoney)
            }
            if hasAddTime {
                jsonMap["addTime"] = "\(addTime)"
            }
            if hasCurIssue {
                jsonMap["curIssue"] = curIssue
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.UserOrderRecord {
            return try Apiproto.UserOrderRecord.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.UserOrderRecord {
            return try Apiproto.UserOrderRecord.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasId {
                output += "\(indent) id: \(id) \n"
            }
            if (hasLotteryId) {
                output += "\(indent) lotteryId: \(lotteryId.description)\n"
            }
            if hasMoney {
                output += "\(indent) money: \(money) \n"
            }
            if (hasStatus) {
                output += "\(indent) status: \(status.description)\n"
            }
            if hasIssueNum {
                output += "\(indent) issueNum: \(issueNum) \n"
            }
            if hasChaseNo {
                output += "\(indent) chaseNo: \(chaseNo) \n"
            }
            if hasWinMoney {
                output += "\(indent) winMoney: \(winMoney) \n"
            }
            if hasAddTime {
                output += "\(indent) addTime: \(addTime) \n"
            }
            if hasCurIssue {
                output += "\(indent) curIssue: \(curIssue) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasId {
                    hashCode = (hashCode &* 31) &+ id.hashValue
                }
                if hasLotteryId {
                     hashCode = (hashCode &* 31) &+ lotteryId.hashValue
                }
                if hasMoney {
                    hashCode = (hashCode &* 31) &+ money.hashValue
                }
                if hasStatus {
                     hashCode = (hashCode &* 31) &+ status.hashValue
                }
                if hasIssueNum {
                    hashCode = (hashCode &* 31) &+ issueNum.hashValue
                }
                if hasChaseNo {
                    hashCode = (hashCode &* 31) &+ chaseNo.hashValue
                }
                if hasWinMoney {
                    hashCode = (hashCode &* 31) &+ winMoney.hashValue
                }
                if hasAddTime {
                    hashCode = (hashCode &* 31) &+ addTime.hashValue
                }
                if hasCurIssue {
                    hashCode = (hashCode &* 31) &+ curIssue.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.UserOrderRecord"
        }
        override public func className() -> String {
            return "Apiproto.UserOrderRecord"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.UserOrderRecord = Apiproto.UserOrderRecord()
            public func getMessage() -> Apiproto.UserOrderRecord {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var id:Int64 {
                get {
                    return builderResult.id
                }
                set (value) {
                    builderResult.hasId = true
                    builderResult.id = value
                }
            }
            public var hasId:Bool {
                get {
                    return builderResult.hasId
                }
            }
            @discardableResult
            public func setId(_ value:Int64) -> Apiproto.UserOrderRecord.Builder {
                self.id = value
                return self
            }
            @discardableResult
            public func clearId() -> Apiproto.UserOrderRecord.Builder{
                builderResult.hasId = false
                builderResult.id = Int64(0)
                return self
            }
                public var lotteryId:Apiproto.LotteryId {
                    get {
                        return builderResult.lotteryId
                    }
                    set (value) {
                        builderResult.hasLotteryId = true
                        builderResult.lotteryId = value
                    }
                }
                public var hasLotteryId:Bool{
                    get {
                        return builderResult.hasLotteryId
                    }
                }
            @discardableResult
                public func setLotteryId(_ value:Apiproto.LotteryId) -> Apiproto.UserOrderRecord.Builder {
                  self.lotteryId = value
                  return self
                }
            @discardableResult
                public func clearLotteryId() -> Apiproto.UserOrderRecord.Builder {
                   builderResult.hasLotteryId = false
                   builderResult.lotteryId = .allId
                   return self
                }
            public var money:Double {
                get {
                    return builderResult.money
                }
                set (value) {
                    builderResult.hasMoney = true
                    builderResult.money = value
                }
            }
            public var hasMoney:Bool {
                get {
                    return builderResult.hasMoney
                }
            }
            @discardableResult
            public func setMoney(_ value:Double) -> Apiproto.UserOrderRecord.Builder {
                self.money = value
                return self
            }
            @discardableResult
            public func clearMoney() -> Apiproto.UserOrderRecord.Builder{
                builderResult.hasMoney = false
                builderResult.money = Double(0)
                return self
            }
                public var status:Apiproto.UserOrderStatus {
                    get {
                        return builderResult.status
                    }
                    set (value) {
                        builderResult.hasStatus = true
                        builderResult.status = value
                    }
                }
                public var hasStatus:Bool{
                    get {
                        return builderResult.hasStatus
                    }
                }
            @discardableResult
                public func setStatus(_ value:Apiproto.UserOrderStatus) -> Apiproto.UserOrderRecord.Builder {
                  self.status = value
                  return self
                }
            @discardableResult
                public func clearStatus() -> Apiproto.UserOrderRecord.Builder {
                   builderResult.hasStatus = false
                   builderResult.status = .uosAll
                   return self
                }
            public var issueNum:Int32 {
                get {
                    return builderResult.issueNum
                }
                set (value) {
                    builderResult.hasIssueNum = true
                    builderResult.issueNum = value
                }
            }
            public var hasIssueNum:Bool {
                get {
                    return builderResult.hasIssueNum
                }
            }
            @discardableResult
            public func setIssueNum(_ value:Int32) -> Apiproto.UserOrderRecord.Builder {
                self.issueNum = value
                return self
            }
            @discardableResult
            public func clearIssueNum() -> Apiproto.UserOrderRecord.Builder{
                builderResult.hasIssueNum = false
                builderResult.issueNum = Int32(0)
                return self
            }
            public var chaseNo:Int32 {
                get {
                    return builderResult.chaseNo
                }
                set (value) {
                    builderResult.hasChaseNo = true
                    builderResult.chaseNo = value
                }
            }
            public var hasChaseNo:Bool {
                get {
                    return builderResult.hasChaseNo
                }
            }
            @discardableResult
            public func setChaseNo(_ value:Int32) -> Apiproto.UserOrderRecord.Builder {
                self.chaseNo = value
                return self
            }
            @discardableResult
            public func clearChaseNo() -> Apiproto.UserOrderRecord.Builder{
                builderResult.hasChaseNo = false
                builderResult.chaseNo = Int32(0)
                return self
            }
            public var winMoney:Double {
                get {
                    return builderResult.winMoney
                }
                set (value) {
                    builderResult.hasWinMoney = true
                    builderResult.winMoney = value
                }
            }
            public var hasWinMoney:Bool {
                get {
                    return builderResult.hasWinMoney
                }
            }
            @discardableResult
            public func setWinMoney(_ value:Double) -> Apiproto.UserOrderRecord.Builder {
                self.winMoney = value
                return self
            }
            @discardableResult
            public func clearWinMoney() -> Apiproto.UserOrderRecord.Builder{
                builderResult.hasWinMoney = false
                builderResult.winMoney = Double(0)
                return self
            }
            public var addTime:Int64 {
                get {
                    return builderResult.addTime
                }
                set (value) {
                    builderResult.hasAddTime = true
                    builderResult.addTime = value
                }
            }
            public var hasAddTime:Bool {
                get {
                    return builderResult.hasAddTime
                }
            }
            @discardableResult
            public func setAddTime(_ value:Int64) -> Apiproto.UserOrderRecord.Builder {
                self.addTime = value
                return self
            }
            @discardableResult
            public func clearAddTime() -> Apiproto.UserOrderRecord.Builder{
                builderResult.hasAddTime = false
                builderResult.addTime = Int64(0)
                return self
            }
            public var curIssue:String {
                get {
                    return builderResult.curIssue
                }
                set (value) {
                    builderResult.hasCurIssue = true
                    builderResult.curIssue = value
                }
            }
            public var hasCurIssue:Bool {
                get {
                    return builderResult.hasCurIssue
                }
            }
            @discardableResult
            public func setCurIssue(_ value:String) -> Apiproto.UserOrderRecord.Builder {
                self.curIssue = value
                return self
            }
            @discardableResult
            public func clearCurIssue() -> Apiproto.UserOrderRecord.Builder{
                builderResult.hasCurIssue = false
                builderResult.curIssue = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.UserOrderRecord.Builder {
                builderResult = Apiproto.UserOrderRecord()
                return self
            }
            override public func clone() throws -> Apiproto.UserOrderRecord.Builder {
                return try Apiproto.UserOrderRecord.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.UserOrderRecord {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.UserOrderRecord {
                let returnMe:Apiproto.UserOrderRecord = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.UserOrderRecord) throws -> Apiproto.UserOrderRecord.Builder {
                if other == Apiproto.UserOrderRecord() {
                    return self
                }
                if other.hasId {
                    id = other.id
                }
                if other.hasLotteryId {
                    lotteryId = other.lotteryId
                }
                if other.hasMoney {
                    money = other.money
                }
                if other.hasStatus {
                    status = other.status
                }
                if other.hasIssueNum {
                    issueNum = other.issueNum
                }
                if other.hasChaseNo {
                    chaseNo = other.chaseNo
                }
                if other.hasWinMoney {
                    winMoney = other.winMoney
                }
                if other.hasAddTime {
                    addTime = other.addTime
                }
                if other.hasCurIssue {
                    curIssue = other.curIssue
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.UserOrderRecord.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.UserOrderRecord.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        id = try codedInputStream.readInt64()

                    case 16:
                        let valueIntlotteryId = try codedInputStream.readEnum()
                        if let enumslotteryId = Apiproto.LotteryId(rawValue:valueIntlotteryId){
                            lotteryId = enumslotteryId
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 2, value:Int64(valueIntlotteryId))
                        }

                    case 25:
                        money = try codedInputStream.readDouble()

                    case 32:
                        let valueIntstatus = try codedInputStream.readEnum()
                        if let enumsstatus = Apiproto.UserOrderStatus(rawValue:valueIntstatus){
                            status = enumsstatus
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 4, value:Int64(valueIntstatus))
                        }

                    case 40:
                        issueNum = try codedInputStream.readInt32()

                    case 48:
                        chaseNo = try codedInputStream.readInt32()

                    case 57:
                        winMoney = try codedInputStream.readDouble()

                    case 64:
                        addTime = try codedInputStream.readInt64()

                    case 74:
                        curIssue = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.UserOrderRecord.Builder {
                let resultDecodedBuilder = Apiproto.UserOrderRecord.Builder()
                if let jsonValueId = jsonMap["id"] as? String {
                    resultDecodedBuilder.id = Int64(jsonValueId)!
                } else if let jsonValueId = jsonMap["id"] as? Int {
                    resultDecodedBuilder.id = Int64(jsonValueId)
                }
                if let jsonValueLotteryId = jsonMap["lotteryId"] as? String {
                    resultDecodedBuilder.lotteryId = try Apiproto.LotteryId.fromString(str: jsonValueLotteryId)
                }
                if let jsonValueMoney = jsonMap["money"] as? Double {
                    resultDecodedBuilder.money = Double(jsonValueMoney)
                } else if let jsonValueMoney = jsonMap["money"] as? String {
                    resultDecodedBuilder.money = Double(jsonValueMoney)!
                }
                if let jsonValueStatus = jsonMap["status"] as? String {
                    resultDecodedBuilder.status = try Apiproto.UserOrderStatus.fromString(str: jsonValueStatus)
                }
                if let jsonValueIssueNum = jsonMap["issueNum"] as? Int {
                    resultDecodedBuilder.issueNum = Int32(jsonValueIssueNum)
                } else if let jsonValueIssueNum = jsonMap["issueNum"] as? String {
                    resultDecodedBuilder.issueNum = Int32(jsonValueIssueNum)!
                }
                if let jsonValueChaseNo = jsonMap["chaseNo"] as? Int {
                    resultDecodedBuilder.chaseNo = Int32(jsonValueChaseNo)
                } else if let jsonValueChaseNo = jsonMap["chaseNo"] as? String {
                    resultDecodedBuilder.chaseNo = Int32(jsonValueChaseNo)!
                }
                if let jsonValueWinMoney = jsonMap["winMoney"] as? Double {
                    resultDecodedBuilder.winMoney = Double(jsonValueWinMoney)
                } else if let jsonValueWinMoney = jsonMap["winMoney"] as? String {
                    resultDecodedBuilder.winMoney = Double(jsonValueWinMoney)!
                }
                if let jsonValueAddTime = jsonMap["addTime"] as? String {
                    resultDecodedBuilder.addTime = Int64(jsonValueAddTime)!
                } else if let jsonValueAddTime = jsonMap["addTime"] as? Int {
                    resultDecodedBuilder.addTime = Int64(jsonValueAddTime)
                }
                if let jsonValueCurIssue = jsonMap["curIssue"] as? String {
                    resultDecodedBuilder.curIssue = jsonValueCurIssue
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.UserOrderRecord.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.UserOrderRecord.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class VendorOrderHistory : GeneratedMessage {

        public static func == (lhs: Apiproto.VendorOrderHistory, rhs: Apiproto.VendorOrderHistory) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.list == rhs.list)
            fieldCheck = fieldCheck && (lhs.hasPageSize == rhs.hasPageSize) && (!lhs.hasPageSize || lhs.pageSize == rhs.pageSize)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var list:Array<Apiproto.VendorOrderRecord>  = Array<Apiproto.VendorOrderRecord>()
        public fileprivate(set) var pageSize:Int32 = Int32(0)
        public fileprivate(set) var hasPageSize:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            for oneElementList in list {
                  try codedOutputStream.writeMessage(fieldNumber: 1, value:oneElementList)
            }
            if hasPageSize {
                try codedOutputStream.writeInt32(fieldNumber: 2, value:pageSize)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            for oneElementList in list {
                serialize_size += oneElementList.computeMessageSize(fieldNumber: 1)
            }
            if hasPageSize {
                serialize_size += pageSize.computeInt32Size(fieldNumber: 2)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.VendorOrderHistory.Builder {
            return Apiproto.VendorOrderHistory.classBuilder() as! Apiproto.VendorOrderHistory.Builder
        }
        public func getBuilder() -> Apiproto.VendorOrderHistory.Builder {
            return classBuilder() as! Apiproto.VendorOrderHistory.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.VendorOrderHistory.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.VendorOrderHistory.Builder()
        }
        public func toBuilder() throws -> Apiproto.VendorOrderHistory.Builder {
            return try Apiproto.VendorOrderHistory.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.VendorOrderHistory) throws -> Apiproto.VendorOrderHistory.Builder {
            return try Apiproto.VendorOrderHistory.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if !list.isEmpty {
                var jsonArrayList:Array<Dictionary<String,Any>> = []
                for oneValueList in list {
                    let ecodedMessageList = try oneValueList.encode()
                    jsonArrayList.append(ecodedMessageList)
                }
                jsonMap["list"] = jsonArrayList
            }
            if hasPageSize {
                jsonMap["pageSize"] = Int(pageSize)
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.VendorOrderHistory {
            return try Apiproto.VendorOrderHistory.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.VendorOrderHistory {
            return try Apiproto.VendorOrderHistory.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            var listElementIndex:Int = 0
            for oneElementList in list {
                output += "\(indent) list[\(listElementIndex)] {\n"
                output += try oneElementList.getDescription(indent: "\(indent)  ")
                output += "\(indent)}\n"
                listElementIndex += 1
            }
            if hasPageSize {
                output += "\(indent) pageSize: \(pageSize) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                for oneElementList in list {
                    hashCode = (hashCode &* 31) &+ oneElementList.hashValue
                }
                if hasPageSize {
                    hashCode = (hashCode &* 31) &+ pageSize.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.VendorOrderHistory"
        }
        override public func className() -> String {
            return "Apiproto.VendorOrderHistory"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.VendorOrderHistory = Apiproto.VendorOrderHistory()
            public func getMessage() -> Apiproto.VendorOrderHistory {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var list:Array<Apiproto.VendorOrderRecord> {
                get {
                    return builderResult.list
                }
                set (value) {
                    builderResult.list = value
                }
            }
            @discardableResult
            public func setList(_ value:Array<Apiproto.VendorOrderRecord>) -> Apiproto.VendorOrderHistory.Builder {
                self.list = value
                return self
            }
            @discardableResult
            public func clearList() -> Apiproto.VendorOrderHistory.Builder {
                builderResult.list.removeAll(keepingCapacity: false)
                return self
            }
            public var pageSize:Int32 {
                get {
                    return builderResult.pageSize
                }
                set (value) {
                    builderResult.hasPageSize = true
                    builderResult.pageSize = value
                }
            }
            public var hasPageSize:Bool {
                get {
                    return builderResult.hasPageSize
                }
            }
            @discardableResult
            public func setPageSize(_ value:Int32) -> Apiproto.VendorOrderHistory.Builder {
                self.pageSize = value
                return self
            }
            @discardableResult
            public func clearPageSize() -> Apiproto.VendorOrderHistory.Builder{
                builderResult.hasPageSize = false
                builderResult.pageSize = Int32(0)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.VendorOrderHistory.Builder {
                builderResult = Apiproto.VendorOrderHistory()
                return self
            }
            override public func clone() throws -> Apiproto.VendorOrderHistory.Builder {
                return try Apiproto.VendorOrderHistory.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.VendorOrderHistory {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.VendorOrderHistory {
                let returnMe:Apiproto.VendorOrderHistory = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.VendorOrderHistory) throws -> Apiproto.VendorOrderHistory.Builder {
                if other == Apiproto.VendorOrderHistory() {
                    return self
                }
                if !other.list.isEmpty  {
                     builderResult.list += other.list
                }
                if other.hasPageSize {
                    pageSize = other.pageSize
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.VendorOrderHistory.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.VendorOrderHistory.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        let subBuilder = Apiproto.VendorOrderRecord.Builder()
                        try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                        list.append(subBuilder.buildPartial())

                    case 16:
                        pageSize = try codedInputStream.readInt32()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.VendorOrderHistory.Builder {
                let resultDecodedBuilder = Apiproto.VendorOrderHistory.Builder()
                if let jsonValueList = jsonMap["list"] as? Array<Dictionary<String,Any>> {
                    var jsonArrayList:Array<Apiproto.VendorOrderRecord> = []
                    for oneValueList in jsonValueList {
                        let messageFromStringList = try Apiproto.VendorOrderRecord.Builder.decodeToBuilder(jsonMap:oneValueList).build()

                        jsonArrayList.append(messageFromStringList)
                    }
                    resultDecodedBuilder.list = jsonArrayList
                }
                if let jsonValuePageSize = jsonMap["pageSize"] as? Int {
                    resultDecodedBuilder.pageSize = Int32(jsonValuePageSize)
                } else if let jsonValuePageSize = jsonMap["pageSize"] as? String {
                    resultDecodedBuilder.pageSize = Int32(jsonValuePageSize)!
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.VendorOrderHistory.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.VendorOrderHistory.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class UserOrderHistory : GeneratedMessage {

        public static func == (lhs: Apiproto.UserOrderHistory, rhs: Apiproto.UserOrderHistory) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.list == rhs.list)
            fieldCheck = fieldCheck && (lhs.hasPageSize == rhs.hasPageSize) && (!lhs.hasPageSize || lhs.pageSize == rhs.pageSize)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var list:Array<Apiproto.UserOrderRecord>  = Array<Apiproto.UserOrderRecord>()
        public fileprivate(set) var pageSize:Int32 = Int32(0)
        public fileprivate(set) var hasPageSize:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            for oneElementList in list {
                  try codedOutputStream.writeMessage(fieldNumber: 1, value:oneElementList)
            }
            if hasPageSize {
                try codedOutputStream.writeInt32(fieldNumber: 2, value:pageSize)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            for oneElementList in list {
                serialize_size += oneElementList.computeMessageSize(fieldNumber: 1)
            }
            if hasPageSize {
                serialize_size += pageSize.computeInt32Size(fieldNumber: 2)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.UserOrderHistory.Builder {
            return Apiproto.UserOrderHistory.classBuilder() as! Apiproto.UserOrderHistory.Builder
        }
        public func getBuilder() -> Apiproto.UserOrderHistory.Builder {
            return classBuilder() as! Apiproto.UserOrderHistory.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.UserOrderHistory.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.UserOrderHistory.Builder()
        }
        public func toBuilder() throws -> Apiproto.UserOrderHistory.Builder {
            return try Apiproto.UserOrderHistory.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.UserOrderHistory) throws -> Apiproto.UserOrderHistory.Builder {
            return try Apiproto.UserOrderHistory.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if !list.isEmpty {
                var jsonArrayList:Array<Dictionary<String,Any>> = []
                for oneValueList in list {
                    let ecodedMessageList = try oneValueList.encode()
                    jsonArrayList.append(ecodedMessageList)
                }
                jsonMap["list"] = jsonArrayList
            }
            if hasPageSize {
                jsonMap["pageSize"] = Int(pageSize)
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.UserOrderHistory {
            return try Apiproto.UserOrderHistory.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.UserOrderHistory {
            return try Apiproto.UserOrderHistory.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            var listElementIndex:Int = 0
            for oneElementList in list {
                output += "\(indent) list[\(listElementIndex)] {\n"
                output += try oneElementList.getDescription(indent: "\(indent)  ")
                output += "\(indent)}\n"
                listElementIndex += 1
            }
            if hasPageSize {
                output += "\(indent) pageSize: \(pageSize) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                for oneElementList in list {
                    hashCode = (hashCode &* 31) &+ oneElementList.hashValue
                }
                if hasPageSize {
                    hashCode = (hashCode &* 31) &+ pageSize.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.UserOrderHistory"
        }
        override public func className() -> String {
            return "Apiproto.UserOrderHistory"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.UserOrderHistory = Apiproto.UserOrderHistory()
            public func getMessage() -> Apiproto.UserOrderHistory {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var list:Array<Apiproto.UserOrderRecord> {
                get {
                    return builderResult.list
                }
                set (value) {
                    builderResult.list = value
                }
            }
            @discardableResult
            public func setList(_ value:Array<Apiproto.UserOrderRecord>) -> Apiproto.UserOrderHistory.Builder {
                self.list = value
                return self
            }
            @discardableResult
            public func clearList() -> Apiproto.UserOrderHistory.Builder {
                builderResult.list.removeAll(keepingCapacity: false)
                return self
            }
            public var pageSize:Int32 {
                get {
                    return builderResult.pageSize
                }
                set (value) {
                    builderResult.hasPageSize = true
                    builderResult.pageSize = value
                }
            }
            public var hasPageSize:Bool {
                get {
                    return builderResult.hasPageSize
                }
            }
            @discardableResult
            public func setPageSize(_ value:Int32) -> Apiproto.UserOrderHistory.Builder {
                self.pageSize = value
                return self
            }
            @discardableResult
            public func clearPageSize() -> Apiproto.UserOrderHistory.Builder{
                builderResult.hasPageSize = false
                builderResult.pageSize = Int32(0)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.UserOrderHistory.Builder {
                builderResult = Apiproto.UserOrderHistory()
                return self
            }
            override public func clone() throws -> Apiproto.UserOrderHistory.Builder {
                return try Apiproto.UserOrderHistory.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.UserOrderHistory {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.UserOrderHistory {
                let returnMe:Apiproto.UserOrderHistory = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.UserOrderHistory) throws -> Apiproto.UserOrderHistory.Builder {
                if other == Apiproto.UserOrderHistory() {
                    return self
                }
                if !other.list.isEmpty  {
                     builderResult.list += other.list
                }
                if other.hasPageSize {
                    pageSize = other.pageSize
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.UserOrderHistory.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.UserOrderHistory.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        let subBuilder = Apiproto.UserOrderRecord.Builder()
                        try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                        list.append(subBuilder.buildPartial())

                    case 16:
                        pageSize = try codedInputStream.readInt32()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.UserOrderHistory.Builder {
                let resultDecodedBuilder = Apiproto.UserOrderHistory.Builder()
                if let jsonValueList = jsonMap["list"] as? Array<Dictionary<String,Any>> {
                    var jsonArrayList:Array<Apiproto.UserOrderRecord> = []
                    for oneValueList in jsonValueList {
                        let messageFromStringList = try Apiproto.UserOrderRecord.Builder.decodeToBuilder(jsonMap:oneValueList).build()

                        jsonArrayList.append(messageFromStringList)
                    }
                    resultDecodedBuilder.list = jsonArrayList
                }
                if let jsonValuePageSize = jsonMap["pageSize"] as? Int {
                    resultDecodedBuilder.pageSize = Int32(jsonValuePageSize)
                } else if let jsonValuePageSize = jsonMap["pageSize"] as? String {
                    resultDecodedBuilder.pageSize = Int32(jsonValuePageSize)!
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.UserOrderHistory.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.UserOrderHistory.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class BuycaiIssueInfo : GeneratedMessage {

        public static func == (lhs: Apiproto.BuycaiIssueInfo, rhs: Apiproto.BuycaiIssueInfo) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasIssue == rhs.hasIssue) && (!lhs.hasIssue || lhs.issue == rhs.issue)
            fieldCheck = fieldCheck && (lhs.hasMultiple == rhs.hasMultiple) && (!lhs.hasMultiple || lhs.multiple == rhs.multiple)
            fieldCheck = fieldCheck && (lhs.hasMoney == rhs.hasMoney) && (!lhs.hasMoney || lhs.money == rhs.money)
            fieldCheck = fieldCheck && (lhs.hasWinMoney == rhs.hasWinMoney) && (!lhs.hasWinMoney || lhs.winMoney == rhs.winMoney)
            fieldCheck = fieldCheck && (lhs.hasStatus == rhs.hasStatus) && (!lhs.hasStatus || lhs.status == rhs.status)
            fieldCheck = fieldCheck && (lhs.hasChaseNo == rhs.hasChaseNo) && (!lhs.hasChaseNo || lhs.chaseNo == rhs.chaseNo)
            fieldCheck = fieldCheck && (lhs.hasVendorOrderId == rhs.hasVendorOrderId) && (!lhs.hasVendorOrderId || lhs.vendorOrderId == rhs.vendorOrderId)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var issue:String = ""
        public fileprivate(set) var hasIssue:Bool = false

        public fileprivate(set) var multiple:Int32 = Int32(0)
        public fileprivate(set) var hasMultiple:Bool = false

        public fileprivate(set) var money:Double = Double(0)
        public fileprivate(set) var hasMoney:Bool = false

        public fileprivate(set) var winMoney:Double = Double(0)
        public fileprivate(set) var hasWinMoney:Bool = false

        public fileprivate(set) var status:Apiproto.VendorOrderStatus = Apiproto.VendorOrderStatus.vosAll
        public fileprivate(set) var hasStatus:Bool = false
        public fileprivate(set) var chaseNo:Int32 = Int32(0)
        public fileprivate(set) var hasChaseNo:Bool = false

        public fileprivate(set) var vendorOrderId:Int64 = Int64(0)
        public fileprivate(set) var hasVendorOrderId:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasIssue {
                try codedOutputStream.writeString(fieldNumber: 1, value:issue)
            }
            if hasMultiple {
                try codedOutputStream.writeInt32(fieldNumber: 2, value:multiple)
            }
            if hasMoney {
                try codedOutputStream.writeDouble(fieldNumber: 3, value:money)
            }
            if hasWinMoney {
                try codedOutputStream.writeDouble(fieldNumber: 4, value:winMoney)
            }
            if hasStatus {
                try codedOutputStream.writeEnum(fieldNumber: 5, value:status.rawValue)
            }
            if hasChaseNo {
                try codedOutputStream.writeInt32(fieldNumber: 6, value:chaseNo)
            }
            if hasVendorOrderId {
                try codedOutputStream.writeInt64(fieldNumber: 7, value:vendorOrderId)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasIssue {
                serialize_size += issue.computeStringSize(fieldNumber: 1)
            }
            if hasMultiple {
                serialize_size += multiple.computeInt32Size(fieldNumber: 2)
            }
            if hasMoney {
                serialize_size += money.computeDoubleSize(fieldNumber: 3)
            }
            if hasWinMoney {
                serialize_size += winMoney.computeDoubleSize(fieldNumber: 4)
            }
            if (hasStatus) {
                serialize_size += status.rawValue.computeEnumSize(fieldNumber: 5)
            }
            if hasChaseNo {
                serialize_size += chaseNo.computeInt32Size(fieldNumber: 6)
            }
            if hasVendorOrderId {
                serialize_size += vendorOrderId.computeInt64Size(fieldNumber: 7)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.BuycaiIssueInfo.Builder {
            return Apiproto.BuycaiIssueInfo.classBuilder() as! Apiproto.BuycaiIssueInfo.Builder
        }
        public func getBuilder() -> Apiproto.BuycaiIssueInfo.Builder {
            return classBuilder() as! Apiproto.BuycaiIssueInfo.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.BuycaiIssueInfo.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.BuycaiIssueInfo.Builder()
        }
        public func toBuilder() throws -> Apiproto.BuycaiIssueInfo.Builder {
            return try Apiproto.BuycaiIssueInfo.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.BuycaiIssueInfo) throws -> Apiproto.BuycaiIssueInfo.Builder {
            return try Apiproto.BuycaiIssueInfo.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasIssue {
                jsonMap["issue"] = issue
            }
            if hasMultiple {
                jsonMap["multiple"] = Int(multiple)
            }
            if hasMoney {
                jsonMap["money"] = Double(money)
            }
            if hasWinMoney {
                jsonMap["winMoney"] = Double(winMoney)
            }
            if hasStatus {
                jsonMap["status"] = status.toString()
            }
            if hasChaseNo {
                jsonMap["chaseNo"] = Int(chaseNo)
            }
            if hasVendorOrderId {
                jsonMap["vendorOrderId"] = "\(vendorOrderId)"
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.BuycaiIssueInfo {
            return try Apiproto.BuycaiIssueInfo.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.BuycaiIssueInfo {
            return try Apiproto.BuycaiIssueInfo.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasIssue {
                output += "\(indent) issue: \(issue) \n"
            }
            if hasMultiple {
                output += "\(indent) multiple: \(multiple) \n"
            }
            if hasMoney {
                output += "\(indent) money: \(money) \n"
            }
            if hasWinMoney {
                output += "\(indent) winMoney: \(winMoney) \n"
            }
            if (hasStatus) {
                output += "\(indent) status: \(status.description)\n"
            }
            if hasChaseNo {
                output += "\(indent) chaseNo: \(chaseNo) \n"
            }
            if hasVendorOrderId {
                output += "\(indent) vendorOrderId: \(vendorOrderId) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasIssue {
                    hashCode = (hashCode &* 31) &+ issue.hashValue
                }
                if hasMultiple {
                    hashCode = (hashCode &* 31) &+ multiple.hashValue
                }
                if hasMoney {
                    hashCode = (hashCode &* 31) &+ money.hashValue
                }
                if hasWinMoney {
                    hashCode = (hashCode &* 31) &+ winMoney.hashValue
                }
                if hasStatus {
                     hashCode = (hashCode &* 31) &+ status.hashValue
                }
                if hasChaseNo {
                    hashCode = (hashCode &* 31) &+ chaseNo.hashValue
                }
                if hasVendorOrderId {
                    hashCode = (hashCode &* 31) &+ vendorOrderId.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.BuycaiIssueInfo"
        }
        override public func className() -> String {
            return "Apiproto.BuycaiIssueInfo"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.BuycaiIssueInfo = Apiproto.BuycaiIssueInfo()
            public func getMessage() -> Apiproto.BuycaiIssueInfo {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var issue:String {
                get {
                    return builderResult.issue
                }
                set (value) {
                    builderResult.hasIssue = true
                    builderResult.issue = value
                }
            }
            public var hasIssue:Bool {
                get {
                    return builderResult.hasIssue
                }
            }
            @discardableResult
            public func setIssue(_ value:String) -> Apiproto.BuycaiIssueInfo.Builder {
                self.issue = value
                return self
            }
            @discardableResult
            public func clearIssue() -> Apiproto.BuycaiIssueInfo.Builder{
                builderResult.hasIssue = false
                builderResult.issue = ""
                return self
            }
            public var multiple:Int32 {
                get {
                    return builderResult.multiple
                }
                set (value) {
                    builderResult.hasMultiple = true
                    builderResult.multiple = value
                }
            }
            public var hasMultiple:Bool {
                get {
                    return builderResult.hasMultiple
                }
            }
            @discardableResult
            public func setMultiple(_ value:Int32) -> Apiproto.BuycaiIssueInfo.Builder {
                self.multiple = value
                return self
            }
            @discardableResult
            public func clearMultiple() -> Apiproto.BuycaiIssueInfo.Builder{
                builderResult.hasMultiple = false
                builderResult.multiple = Int32(0)
                return self
            }
            public var money:Double {
                get {
                    return builderResult.money
                }
                set (value) {
                    builderResult.hasMoney = true
                    builderResult.money = value
                }
            }
            public var hasMoney:Bool {
                get {
                    return builderResult.hasMoney
                }
            }
            @discardableResult
            public func setMoney(_ value:Double) -> Apiproto.BuycaiIssueInfo.Builder {
                self.money = value
                return self
            }
            @discardableResult
            public func clearMoney() -> Apiproto.BuycaiIssueInfo.Builder{
                builderResult.hasMoney = false
                builderResult.money = Double(0)
                return self
            }
            public var winMoney:Double {
                get {
                    return builderResult.winMoney
                }
                set (value) {
                    builderResult.hasWinMoney = true
                    builderResult.winMoney = value
                }
            }
            public var hasWinMoney:Bool {
                get {
                    return builderResult.hasWinMoney
                }
            }
            @discardableResult
            public func setWinMoney(_ value:Double) -> Apiproto.BuycaiIssueInfo.Builder {
                self.winMoney = value
                return self
            }
            @discardableResult
            public func clearWinMoney() -> Apiproto.BuycaiIssueInfo.Builder{
                builderResult.hasWinMoney = false
                builderResult.winMoney = Double(0)
                return self
            }
                public var status:Apiproto.VendorOrderStatus {
                    get {
                        return builderResult.status
                    }
                    set (value) {
                        builderResult.hasStatus = true
                        builderResult.status = value
                    }
                }
                public var hasStatus:Bool{
                    get {
                        return builderResult.hasStatus
                    }
                }
            @discardableResult
                public func setStatus(_ value:Apiproto.VendorOrderStatus) -> Apiproto.BuycaiIssueInfo.Builder {
                  self.status = value
                  return self
                }
            @discardableResult
                public func clearStatus() -> Apiproto.BuycaiIssueInfo.Builder {
                   builderResult.hasStatus = false
                   builderResult.status = .vosAll
                   return self
                }
            public var chaseNo:Int32 {
                get {
                    return builderResult.chaseNo
                }
                set (value) {
                    builderResult.hasChaseNo = true
                    builderResult.chaseNo = value
                }
            }
            public var hasChaseNo:Bool {
                get {
                    return builderResult.hasChaseNo
                }
            }
            @discardableResult
            public func setChaseNo(_ value:Int32) -> Apiproto.BuycaiIssueInfo.Builder {
                self.chaseNo = value
                return self
            }
            @discardableResult
            public func clearChaseNo() -> Apiproto.BuycaiIssueInfo.Builder{
                builderResult.hasChaseNo = false
                builderResult.chaseNo = Int32(0)
                return self
            }
            public var vendorOrderId:Int64 {
                get {
                    return builderResult.vendorOrderId
                }
                set (value) {
                    builderResult.hasVendorOrderId = true
                    builderResult.vendorOrderId = value
                }
            }
            public var hasVendorOrderId:Bool {
                get {
                    return builderResult.hasVendorOrderId
                }
            }
            @discardableResult
            public func setVendorOrderId(_ value:Int64) -> Apiproto.BuycaiIssueInfo.Builder {
                self.vendorOrderId = value
                return self
            }
            @discardableResult
            public func clearVendorOrderId() -> Apiproto.BuycaiIssueInfo.Builder{
                builderResult.hasVendorOrderId = false
                builderResult.vendorOrderId = Int64(0)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.BuycaiIssueInfo.Builder {
                builderResult = Apiproto.BuycaiIssueInfo()
                return self
            }
            override public func clone() throws -> Apiproto.BuycaiIssueInfo.Builder {
                return try Apiproto.BuycaiIssueInfo.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.BuycaiIssueInfo {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.BuycaiIssueInfo {
                let returnMe:Apiproto.BuycaiIssueInfo = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.BuycaiIssueInfo) throws -> Apiproto.BuycaiIssueInfo.Builder {
                if other == Apiproto.BuycaiIssueInfo() {
                    return self
                }
                if other.hasIssue {
                    issue = other.issue
                }
                if other.hasMultiple {
                    multiple = other.multiple
                }
                if other.hasMoney {
                    money = other.money
                }
                if other.hasWinMoney {
                    winMoney = other.winMoney
                }
                if other.hasStatus {
                    status = other.status
                }
                if other.hasChaseNo {
                    chaseNo = other.chaseNo
                }
                if other.hasVendorOrderId {
                    vendorOrderId = other.vendorOrderId
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.BuycaiIssueInfo.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BuycaiIssueInfo.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        issue = try codedInputStream.readString()

                    case 16:
                        multiple = try codedInputStream.readInt32()

                    case 25:
                        money = try codedInputStream.readDouble()

                    case 33:
                        winMoney = try codedInputStream.readDouble()

                    case 40:
                        let valueIntstatus = try codedInputStream.readEnum()
                        if let enumsstatus = Apiproto.VendorOrderStatus(rawValue:valueIntstatus){
                            status = enumsstatus
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 5, value:Int64(valueIntstatus))
                        }

                    case 48:
                        chaseNo = try codedInputStream.readInt32()

                    case 56:
                        vendorOrderId = try codedInputStream.readInt64()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.BuycaiIssueInfo.Builder {
                let resultDecodedBuilder = Apiproto.BuycaiIssueInfo.Builder()
                if let jsonValueIssue = jsonMap["issue"] as? String {
                    resultDecodedBuilder.issue = jsonValueIssue
                }
                if let jsonValueMultiple = jsonMap["multiple"] as? Int {
                    resultDecodedBuilder.multiple = Int32(jsonValueMultiple)
                } else if let jsonValueMultiple = jsonMap["multiple"] as? String {
                    resultDecodedBuilder.multiple = Int32(jsonValueMultiple)!
                }
                if let jsonValueMoney = jsonMap["money"] as? Double {
                    resultDecodedBuilder.money = Double(jsonValueMoney)
                } else if let jsonValueMoney = jsonMap["money"] as? String {
                    resultDecodedBuilder.money = Double(jsonValueMoney)!
                }
                if let jsonValueWinMoney = jsonMap["winMoney"] as? Double {
                    resultDecodedBuilder.winMoney = Double(jsonValueWinMoney)
                } else if let jsonValueWinMoney = jsonMap["winMoney"] as? String {
                    resultDecodedBuilder.winMoney = Double(jsonValueWinMoney)!
                }
                if let jsonValueStatus = jsonMap["status"] as? String {
                    resultDecodedBuilder.status = try Apiproto.VendorOrderStatus.fromString(str: jsonValueStatus)
                }
                if let jsonValueChaseNo = jsonMap["chaseNo"] as? Int {
                    resultDecodedBuilder.chaseNo = Int32(jsonValueChaseNo)
                } else if let jsonValueChaseNo = jsonMap["chaseNo"] as? String {
                    resultDecodedBuilder.chaseNo = Int32(jsonValueChaseNo)!
                }
                if let jsonValueVendorOrderId = jsonMap["vendorOrderId"] as? String {
                    resultDecodedBuilder.vendorOrderId = Int64(jsonValueVendorOrderId)!
                } else if let jsonValueVendorOrderId = jsonMap["vendorOrderId"] as? Int {
                    resultDecodedBuilder.vendorOrderId = Int64(jsonValueVendorOrderId)
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.BuycaiIssueInfo.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.BuycaiIssueInfo.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class BuycaiUserOrder : GeneratedMessage {

        public static func == (lhs: Apiproto.BuycaiUserOrder, rhs: Apiproto.BuycaiUserOrder) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
            fieldCheck = fieldCheck && (lhs.hasLotteryId == rhs.hasLotteryId) && (!lhs.hasLotteryId || lhs.lotteryId == rhs.lotteryId)
            fieldCheck = fieldCheck && (lhs.hasSumMoney == rhs.hasSumMoney) && (!lhs.hasSumMoney || lhs.sumMoney == rhs.sumMoney)
            fieldCheck = fieldCheck && (lhs.hasStatus == rhs.hasStatus) && (!lhs.hasStatus || lhs.status == rhs.status)
            fieldCheck = fieldCheck && (lhs.hasOrderTime == rhs.hasOrderTime) && (!lhs.hasOrderTime || lhs.orderTime == rhs.orderTime)
            fieldCheck = fieldCheck && (lhs.hasTicketSubMoney == rhs.hasTicketSubMoney) && (!lhs.hasTicketSubMoney || lhs.ticketSubMoney == rhs.ticketSubMoney)
            fieldCheck = fieldCheck && (lhs.hasTotalWinMoney == rhs.hasTotalWinMoney) && (!lhs.hasTotalWinMoney || lhs.totalWinMoney == rhs.totalWinMoney)
            fieldCheck = fieldCheck && (lhs.hasSumNum == rhs.hasSumNum) && (!lhs.hasSumNum || lhs.sumNum == rhs.sumNum)
            fieldCheck = fieldCheck && (lhs.hasIssueNum == rhs.hasIssueNum) && (!lhs.hasIssueNum || lhs.issueNum == rhs.issueNum)
            fieldCheck = fieldCheck && (lhs.hasChaseNo == rhs.hasChaseNo) && (!lhs.hasChaseNo || lhs.chaseNo == rhs.chaseNo)
            fieldCheck = fieldCheck && (lhs.hasCurIssue == rhs.hasCurIssue) && (!lhs.hasCurIssue || lhs.curIssue == rhs.curIssue)
            fieldCheck = fieldCheck && (lhs.schemeList == rhs.schemeList)
            fieldCheck = fieldCheck && (lhs.issueList == rhs.issueList)
            fieldCheck = fieldCheck && (lhs.hasOrderType == rhs.hasOrderType) && (!lhs.hasOrderType || lhs.orderType == rhs.orderType)
            fieldCheck = fieldCheck && (lhs.hasUserOrderNo == rhs.hasUserOrderNo) && (!lhs.hasUserOrderNo || lhs.userOrderNo == rhs.userOrderNo)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var id:Int64 = Int64(0)
        public fileprivate(set) var hasId:Bool = false

        public fileprivate(set) var lotteryId:Apiproto.LotteryId = Apiproto.LotteryId.allId
        public fileprivate(set) var hasLotteryId:Bool = false
        /// 订单总金额
        public fileprivate(set) var sumMoney:Double = Double(0)
        public fileprivate(set) var hasSumMoney:Bool = false

        public fileprivate(set) var status:Apiproto.UserOrderStatus = Apiproto.UserOrderStatus.uosAll
        public fileprivate(set) var hasStatus:Bool = false
        /// 下单时间
        public fileprivate(set) var orderTime:Int64 = Int64(0)
        public fileprivate(set) var hasOrderTime:Bool = false

        /// 购彩券抵扣金额
        public fileprivate(set) var ticketSubMoney:Double = Double(0)
        public fileprivate(set) var hasTicketSubMoney:Bool = false

        /// 总中奖金额
        public fileprivate(set) var totalWinMoney:Double = Double(0)
        public fileprivate(set) var hasTotalWinMoney:Bool = false

        /// 注数
        public fileprivate(set) var sumNum:Int32 = Int32(0)
        public fileprivate(set) var hasSumNum:Bool = false

        /// 总期数
        public fileprivate(set) var issueNum:Int32 = Int32(0)
        public fileprivate(set) var hasIssueNum:Bool = false

        /// 当前追期序号
        public fileprivate(set) var chaseNo:Int32 = Int32(0)
        public fileprivate(set) var hasChaseNo:Bool = false

        /// 当前期号
        public fileprivate(set) var curIssue:String = ""
        public fileprivate(set) var hasCurIssue:Bool = false

        public fileprivate(set) var schemeList:Array<Apiproto.BuycaiScheme>  = Array<Apiproto.BuycaiScheme>()
        public fileprivate(set) var issueList:Array<Apiproto.BuycaiIssueInfo>  = Array<Apiproto.BuycaiIssueInfo>()
        public fileprivate(set) var orderType:Apiproto.BuycaiOrderType = Apiproto.BuycaiOrderType.normal
        public fileprivate(set) var hasOrderType:Bool = false
        /// 订单编号
        public fileprivate(set) var userOrderNo:String = ""
        public fileprivate(set) var hasUserOrderNo:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasId {
                try codedOutputStream.writeInt64(fieldNumber: 1, value:id)
            }
            if hasLotteryId {
                try codedOutputStream.writeEnum(fieldNumber: 2, value:lotteryId.rawValue)
            }
            if hasSumMoney {
                try codedOutputStream.writeDouble(fieldNumber: 3, value:sumMoney)
            }
            if hasStatus {
                try codedOutputStream.writeEnum(fieldNumber: 4, value:status.rawValue)
            }
            if hasOrderTime {
                try codedOutputStream.writeInt64(fieldNumber: 5, value:orderTime)
            }
            if hasTicketSubMoney {
                try codedOutputStream.writeDouble(fieldNumber: 6, value:ticketSubMoney)
            }
            if hasTotalWinMoney {
                try codedOutputStream.writeDouble(fieldNumber: 7, value:totalWinMoney)
            }
            if hasSumNum {
                try codedOutputStream.writeInt32(fieldNumber: 8, value:sumNum)
            }
            if hasIssueNum {
                try codedOutputStream.writeInt32(fieldNumber: 9, value:issueNum)
            }
            if hasChaseNo {
                try codedOutputStream.writeInt32(fieldNumber: 10, value:chaseNo)
            }
            if hasCurIssue {
                try codedOutputStream.writeString(fieldNumber: 11, value:curIssue)
            }
            for oneElementSchemeList in schemeList {
                  try codedOutputStream.writeMessage(fieldNumber: 12, value:oneElementSchemeList)
            }
            for oneElementIssueList in issueList {
                  try codedOutputStream.writeMessage(fieldNumber: 13, value:oneElementIssueList)
            }
            if hasOrderType {
                try codedOutputStream.writeEnum(fieldNumber: 14, value:orderType.rawValue)
            }
            if hasUserOrderNo {
                try codedOutputStream.writeString(fieldNumber: 15, value:userOrderNo)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasId {
                serialize_size += id.computeInt64Size(fieldNumber: 1)
            }
            if (hasLotteryId) {
                serialize_size += lotteryId.rawValue.computeEnumSize(fieldNumber: 2)
            }
            if hasSumMoney {
                serialize_size += sumMoney.computeDoubleSize(fieldNumber: 3)
            }
            if (hasStatus) {
                serialize_size += status.rawValue.computeEnumSize(fieldNumber: 4)
            }
            if hasOrderTime {
                serialize_size += orderTime.computeInt64Size(fieldNumber: 5)
            }
            if hasTicketSubMoney {
                serialize_size += ticketSubMoney.computeDoubleSize(fieldNumber: 6)
            }
            if hasTotalWinMoney {
                serialize_size += totalWinMoney.computeDoubleSize(fieldNumber: 7)
            }
            if hasSumNum {
                serialize_size += sumNum.computeInt32Size(fieldNumber: 8)
            }
            if hasIssueNum {
                serialize_size += issueNum.computeInt32Size(fieldNumber: 9)
            }
            if hasChaseNo {
                serialize_size += chaseNo.computeInt32Size(fieldNumber: 10)
            }
            if hasCurIssue {
                serialize_size += curIssue.computeStringSize(fieldNumber: 11)
            }
            for oneElementSchemeList in schemeList {
                serialize_size += oneElementSchemeList.computeMessageSize(fieldNumber: 12)
            }
            for oneElementIssueList in issueList {
                serialize_size += oneElementIssueList.computeMessageSize(fieldNumber: 13)
            }
            if (hasOrderType) {
                serialize_size += orderType.rawValue.computeEnumSize(fieldNumber: 14)
            }
            if hasUserOrderNo {
                serialize_size += userOrderNo.computeStringSize(fieldNumber: 15)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.BuycaiUserOrder.Builder {
            return Apiproto.BuycaiUserOrder.classBuilder() as! Apiproto.BuycaiUserOrder.Builder
        }
        public func getBuilder() -> Apiproto.BuycaiUserOrder.Builder {
            return classBuilder() as! Apiproto.BuycaiUserOrder.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.BuycaiUserOrder.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.BuycaiUserOrder.Builder()
        }
        public func toBuilder() throws -> Apiproto.BuycaiUserOrder.Builder {
            return try Apiproto.BuycaiUserOrder.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.BuycaiUserOrder) throws -> Apiproto.BuycaiUserOrder.Builder {
            return try Apiproto.BuycaiUserOrder.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasId {
                jsonMap["id"] = "\(id)"
            }
            if hasLotteryId {
                jsonMap["lotteryId"] = lotteryId.toString()
            }
            if hasSumMoney {
                jsonMap["sumMoney"] = Double(sumMoney)
            }
            if hasStatus {
                jsonMap["status"] = status.toString()
            }
            if hasOrderTime {
                jsonMap["orderTime"] = "\(orderTime)"
            }
            if hasTicketSubMoney {
                jsonMap["ticketSubMoney"] = Double(ticketSubMoney)
            }
            if hasTotalWinMoney {
                jsonMap["totalWinMoney"] = Double(totalWinMoney)
            }
            if hasSumNum {
                jsonMap["sumNum"] = Int(sumNum)
            }
            if hasIssueNum {
                jsonMap["issueNum"] = Int(issueNum)
            }
            if hasChaseNo {
                jsonMap["chaseNo"] = Int(chaseNo)
            }
            if hasCurIssue {
                jsonMap["curIssue"] = curIssue
            }
            if !schemeList.isEmpty {
                var jsonArraySchemeList:Array<Dictionary<String,Any>> = []
                for oneValueSchemeList in schemeList {
                    let ecodedMessageSchemeList = try oneValueSchemeList.encode()
                    jsonArraySchemeList.append(ecodedMessageSchemeList)
                }
                jsonMap["schemeList"] = jsonArraySchemeList
            }
            if !issueList.isEmpty {
                var jsonArrayIssueList:Array<Dictionary<String,Any>> = []
                for oneValueIssueList in issueList {
                    let ecodedMessageIssueList = try oneValueIssueList.encode()
                    jsonArrayIssueList.append(ecodedMessageIssueList)
                }
                jsonMap["issueList"] = jsonArrayIssueList
            }
            if hasOrderType {
                jsonMap["orderType"] = orderType.toString()
            }
            if hasUserOrderNo {
                jsonMap["userOrderNo"] = userOrderNo
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.BuycaiUserOrder {
            return try Apiproto.BuycaiUserOrder.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.BuycaiUserOrder {
            return try Apiproto.BuycaiUserOrder.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasId {
                output += "\(indent) id: \(id) \n"
            }
            if (hasLotteryId) {
                output += "\(indent) lotteryId: \(lotteryId.description)\n"
            }
            if hasSumMoney {
                output += "\(indent) sumMoney: \(sumMoney) \n"
            }
            if (hasStatus) {
                output += "\(indent) status: \(status.description)\n"
            }
            if hasOrderTime {
                output += "\(indent) orderTime: \(orderTime) \n"
            }
            if hasTicketSubMoney {
                output += "\(indent) ticketSubMoney: \(ticketSubMoney) \n"
            }
            if hasTotalWinMoney {
                output += "\(indent) totalWinMoney: \(totalWinMoney) \n"
            }
            if hasSumNum {
                output += "\(indent) sumNum: \(sumNum) \n"
            }
            if hasIssueNum {
                output += "\(indent) issueNum: \(issueNum) \n"
            }
            if hasChaseNo {
                output += "\(indent) chaseNo: \(chaseNo) \n"
            }
            if hasCurIssue {
                output += "\(indent) curIssue: \(curIssue) \n"
            }
            var schemeListElementIndex:Int = 0
            for oneElementSchemeList in schemeList {
                output += "\(indent) schemeList[\(schemeListElementIndex)] {\n"
                output += try oneElementSchemeList.getDescription(indent: "\(indent)  ")
                output += "\(indent)}\n"
                schemeListElementIndex += 1
            }
            var issueListElementIndex:Int = 0
            for oneElementIssueList in issueList {
                output += "\(indent) issueList[\(issueListElementIndex)] {\n"
                output += try oneElementIssueList.getDescription(indent: "\(indent)  ")
                output += "\(indent)}\n"
                issueListElementIndex += 1
            }
            if (hasOrderType) {
                output += "\(indent) orderType: \(orderType.description)\n"
            }
            if hasUserOrderNo {
                output += "\(indent) userOrderNo: \(userOrderNo) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasId {
                    hashCode = (hashCode &* 31) &+ id.hashValue
                }
                if hasLotteryId {
                     hashCode = (hashCode &* 31) &+ lotteryId.hashValue
                }
                if hasSumMoney {
                    hashCode = (hashCode &* 31) &+ sumMoney.hashValue
                }
                if hasStatus {
                     hashCode = (hashCode &* 31) &+ status.hashValue
                }
                if hasOrderTime {
                    hashCode = (hashCode &* 31) &+ orderTime.hashValue
                }
                if hasTicketSubMoney {
                    hashCode = (hashCode &* 31) &+ ticketSubMoney.hashValue
                }
                if hasTotalWinMoney {
                    hashCode = (hashCode &* 31) &+ totalWinMoney.hashValue
                }
                if hasSumNum {
                    hashCode = (hashCode &* 31) &+ sumNum.hashValue
                }
                if hasIssueNum {
                    hashCode = (hashCode &* 31) &+ issueNum.hashValue
                }
                if hasChaseNo {
                    hashCode = (hashCode &* 31) &+ chaseNo.hashValue
                }
                if hasCurIssue {
                    hashCode = (hashCode &* 31) &+ curIssue.hashValue
                }
                for oneElementSchemeList in schemeList {
                    hashCode = (hashCode &* 31) &+ oneElementSchemeList.hashValue
                }
                for oneElementIssueList in issueList {
                    hashCode = (hashCode &* 31) &+ oneElementIssueList.hashValue
                }
                if hasOrderType {
                     hashCode = (hashCode &* 31) &+ orderType.hashValue
                }
                if hasUserOrderNo {
                    hashCode = (hashCode &* 31) &+ userOrderNo.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.BuycaiUserOrder"
        }
        override public func className() -> String {
            return "Apiproto.BuycaiUserOrder"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.BuycaiUserOrder = Apiproto.BuycaiUserOrder()
            public func getMessage() -> Apiproto.BuycaiUserOrder {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var id:Int64 {
                get {
                    return builderResult.id
                }
                set (value) {
                    builderResult.hasId = true
                    builderResult.id = value
                }
            }
            public var hasId:Bool {
                get {
                    return builderResult.hasId
                }
            }
            @discardableResult
            public func setId(_ value:Int64) -> Apiproto.BuycaiUserOrder.Builder {
                self.id = value
                return self
            }
            @discardableResult
            public func clearId() -> Apiproto.BuycaiUserOrder.Builder{
                builderResult.hasId = false
                builderResult.id = Int64(0)
                return self
            }
                public var lotteryId:Apiproto.LotteryId {
                    get {
                        return builderResult.lotteryId
                    }
                    set (value) {
                        builderResult.hasLotteryId = true
                        builderResult.lotteryId = value
                    }
                }
                public var hasLotteryId:Bool{
                    get {
                        return builderResult.hasLotteryId
                    }
                }
            @discardableResult
                public func setLotteryId(_ value:Apiproto.LotteryId) -> Apiproto.BuycaiUserOrder.Builder {
                  self.lotteryId = value
                  return self
                }
            @discardableResult
                public func clearLotteryId() -> Apiproto.BuycaiUserOrder.Builder {
                   builderResult.hasLotteryId = false
                   builderResult.lotteryId = .allId
                   return self
                }
            /// 订单总金额
            public var sumMoney:Double {
                get {
                    return builderResult.sumMoney
                }
                set (value) {
                    builderResult.hasSumMoney = true
                    builderResult.sumMoney = value
                }
            }
            public var hasSumMoney:Bool {
                get {
                    return builderResult.hasSumMoney
                }
            }
            @discardableResult
            public func setSumMoney(_ value:Double) -> Apiproto.BuycaiUserOrder.Builder {
                self.sumMoney = value
                return self
            }
            @discardableResult
            public func clearSumMoney() -> Apiproto.BuycaiUserOrder.Builder{
                builderResult.hasSumMoney = false
                builderResult.sumMoney = Double(0)
                return self
            }
            /// 订单状态
                public var status:Apiproto.UserOrderStatus {
                    get {
                        return builderResult.status
                    }
                    set (value) {
                        builderResult.hasStatus = true
                        builderResult.status = value
                    }
                }
                public var hasStatus:Bool{
                    get {
                        return builderResult.hasStatus
                    }
                }
            @discardableResult
                public func setStatus(_ value:Apiproto.UserOrderStatus) -> Apiproto.BuycaiUserOrder.Builder {
                  self.status = value
                  return self
                }
            @discardableResult
                public func clearStatus() -> Apiproto.BuycaiUserOrder.Builder {
                   builderResult.hasStatus = false
                   builderResult.status = .uosAll
                   return self
                }
            /// 下单时间
            public var orderTime:Int64 {
                get {
                    return builderResult.orderTime
                }
                set (value) {
                    builderResult.hasOrderTime = true
                    builderResult.orderTime = value
                }
            }
            public var hasOrderTime:Bool {
                get {
                    return builderResult.hasOrderTime
                }
            }
            @discardableResult
            public func setOrderTime(_ value:Int64) -> Apiproto.BuycaiUserOrder.Builder {
                self.orderTime = value
                return self
            }
            @discardableResult
            public func clearOrderTime() -> Apiproto.BuycaiUserOrder.Builder{
                builderResult.hasOrderTime = false
                builderResult.orderTime = Int64(0)
                return self
            }
            /// 购彩券抵扣金额
            public var ticketSubMoney:Double {
                get {
                    return builderResult.ticketSubMoney
                }
                set (value) {
                    builderResult.hasTicketSubMoney = true
                    builderResult.ticketSubMoney = value
                }
            }
            public var hasTicketSubMoney:Bool {
                get {
                    return builderResult.hasTicketSubMoney
                }
            }
            @discardableResult
            public func setTicketSubMoney(_ value:Double) -> Apiproto.BuycaiUserOrder.Builder {
                self.ticketSubMoney = value
                return self
            }
            @discardableResult
            public func clearTicketSubMoney() -> Apiproto.BuycaiUserOrder.Builder{
                builderResult.hasTicketSubMoney = false
                builderResult.ticketSubMoney = Double(0)
                return self
            }
            /// 总中奖金额
            public var totalWinMoney:Double {
                get {
                    return builderResult.totalWinMoney
                }
                set (value) {
                    builderResult.hasTotalWinMoney = true
                    builderResult.totalWinMoney = value
                }
            }
            public var hasTotalWinMoney:Bool {
                get {
                    return builderResult.hasTotalWinMoney
                }
            }
            @discardableResult
            public func setTotalWinMoney(_ value:Double) -> Apiproto.BuycaiUserOrder.Builder {
                self.totalWinMoney = value
                return self
            }
            @discardableResult
            public func clearTotalWinMoney() -> Apiproto.BuycaiUserOrder.Builder{
                builderResult.hasTotalWinMoney = false
                builderResult.totalWinMoney = Double(0)
                return self
            }
            /// 注数
            public var sumNum:Int32 {
                get {
                    return builderResult.sumNum
                }
                set (value) {
                    builderResult.hasSumNum = true
                    builderResult.sumNum = value
                }
            }
            public var hasSumNum:Bool {
                get {
                    return builderResult.hasSumNum
                }
            }
            @discardableResult
            public func setSumNum(_ value:Int32) -> Apiproto.BuycaiUserOrder.Builder {
                self.sumNum = value
                return self
            }
            @discardableResult
            public func clearSumNum() -> Apiproto.BuycaiUserOrder.Builder{
                builderResult.hasSumNum = false
                builderResult.sumNum = Int32(0)
                return self
            }
            /// 总期数
            public var issueNum:Int32 {
                get {
                    return builderResult.issueNum
                }
                set (value) {
                    builderResult.hasIssueNum = true
                    builderResult.issueNum = value
                }
            }
            public var hasIssueNum:Bool {
                get {
                    return builderResult.hasIssueNum
                }
            }
            @discardableResult
            public func setIssueNum(_ value:Int32) -> Apiproto.BuycaiUserOrder.Builder {
                self.issueNum = value
                return self
            }
            @discardableResult
            public func clearIssueNum() -> Apiproto.BuycaiUserOrder.Builder{
                builderResult.hasIssueNum = false
                builderResult.issueNum = Int32(0)
                return self
            }
            /// 当前追期序号
            public var chaseNo:Int32 {
                get {
                    return builderResult.chaseNo
                }
                set (value) {
                    builderResult.hasChaseNo = true
                    builderResult.chaseNo = value
                }
            }
            public var hasChaseNo:Bool {
                get {
                    return builderResult.hasChaseNo
                }
            }
            @discardableResult
            public func setChaseNo(_ value:Int32) -> Apiproto.BuycaiUserOrder.Builder {
                self.chaseNo = value
                return self
            }
            @discardableResult
            public func clearChaseNo() -> Apiproto.BuycaiUserOrder.Builder{
                builderResult.hasChaseNo = false
                builderResult.chaseNo = Int32(0)
                return self
            }
            /// 当前期号
            public var curIssue:String {
                get {
                    return builderResult.curIssue
                }
                set (value) {
                    builderResult.hasCurIssue = true
                    builderResult.curIssue = value
                }
            }
            public var hasCurIssue:Bool {
                get {
                    return builderResult.hasCurIssue
                }
            }
            @discardableResult
            public func setCurIssue(_ value:String) -> Apiproto.BuycaiUserOrder.Builder {
                self.curIssue = value
                return self
            }
            @discardableResult
            public func clearCurIssue() -> Apiproto.BuycaiUserOrder.Builder{
                builderResult.hasCurIssue = false
                builderResult.curIssue = ""
                return self
            }
            /// 方案列表
            public var schemeList:Array<Apiproto.BuycaiScheme> {
                get {
                    return builderResult.schemeList
                }
                set (value) {
                    builderResult.schemeList = value
                }
            }
            @discardableResult
            public func setSchemeList(_ value:Array<Apiproto.BuycaiScheme>) -> Apiproto.BuycaiUserOrder.Builder {
                self.schemeList = value
                return self
            }
            @discardableResult
            public func clearSchemeList() -> Apiproto.BuycaiUserOrder.Builder {
                builderResult.schemeList.removeAll(keepingCapacity: false)
                return self
            }
            /// 期号列表
            public var issueList:Array<Apiproto.BuycaiIssueInfo> {
                get {
                    return builderResult.issueList
                }
                set (value) {
                    builderResult.issueList = value
                }
            }
            @discardableResult
            public func setIssueList(_ value:Array<Apiproto.BuycaiIssueInfo>) -> Apiproto.BuycaiUserOrder.Builder {
                self.issueList = value
                return self
            }
            @discardableResult
            public func clearIssueList() -> Apiproto.BuycaiUserOrder.Builder {
                builderResult.issueList.removeAll(keepingCapacity: false)
                return self
            }
            /// 订单类型
                public var orderType:Apiproto.BuycaiOrderType {
                    get {
                        return builderResult.orderType
                    }
                    set (value) {
                        builderResult.hasOrderType = true
                        builderResult.orderType = value
                    }
                }
                public var hasOrderType:Bool{
                    get {
                        return builderResult.hasOrderType
                    }
                }
            @discardableResult
                public func setOrderType(_ value:Apiproto.BuycaiOrderType) -> Apiproto.BuycaiUserOrder.Builder {
                  self.orderType = value
                  return self
                }
            @discardableResult
                public func clearOrderType() -> Apiproto.BuycaiUserOrder.Builder {
                   builderResult.hasOrderType = false
                   builderResult.orderType = .normal
                   return self
                }
            /// 订单编号
            public var userOrderNo:String {
                get {
                    return builderResult.userOrderNo
                }
                set (value) {
                    builderResult.hasUserOrderNo = true
                    builderResult.userOrderNo = value
                }
            }
            public var hasUserOrderNo:Bool {
                get {
                    return builderResult.hasUserOrderNo
                }
            }
            @discardableResult
            public func setUserOrderNo(_ value:String) -> Apiproto.BuycaiUserOrder.Builder {
                self.userOrderNo = value
                return self
            }
            @discardableResult
            public func clearUserOrderNo() -> Apiproto.BuycaiUserOrder.Builder{
                builderResult.hasUserOrderNo = false
                builderResult.userOrderNo = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.BuycaiUserOrder.Builder {
                builderResult = Apiproto.BuycaiUserOrder()
                return self
            }
            override public func clone() throws -> Apiproto.BuycaiUserOrder.Builder {
                return try Apiproto.BuycaiUserOrder.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.BuycaiUserOrder {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.BuycaiUserOrder {
                let returnMe:Apiproto.BuycaiUserOrder = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.BuycaiUserOrder) throws -> Apiproto.BuycaiUserOrder.Builder {
                if other == Apiproto.BuycaiUserOrder() {
                    return self
                }
                if other.hasId {
                    id = other.id
                }
                if other.hasLotteryId {
                    lotteryId = other.lotteryId
                }
                if other.hasSumMoney {
                    sumMoney = other.sumMoney
                }
                if other.hasStatus {
                    status = other.status
                }
                if other.hasOrderTime {
                    orderTime = other.orderTime
                }
                if other.hasTicketSubMoney {
                    ticketSubMoney = other.ticketSubMoney
                }
                if other.hasTotalWinMoney {
                    totalWinMoney = other.totalWinMoney
                }
                if other.hasSumNum {
                    sumNum = other.sumNum
                }
                if other.hasIssueNum {
                    issueNum = other.issueNum
                }
                if other.hasChaseNo {
                    chaseNo = other.chaseNo
                }
                if other.hasCurIssue {
                    curIssue = other.curIssue
                }
                if !other.schemeList.isEmpty  {
                     builderResult.schemeList += other.schemeList
                }
                if !other.issueList.isEmpty  {
                     builderResult.issueList += other.issueList
                }
                if other.hasOrderType {
                    orderType = other.orderType
                }
                if other.hasUserOrderNo {
                    userOrderNo = other.userOrderNo
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.BuycaiUserOrder.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BuycaiUserOrder.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        id = try codedInputStream.readInt64()

                    case 16:
                        let valueIntlotteryId = try codedInputStream.readEnum()
                        if let enumslotteryId = Apiproto.LotteryId(rawValue:valueIntlotteryId){
                            lotteryId = enumslotteryId
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 2, value:Int64(valueIntlotteryId))
                        }

                    case 25:
                        sumMoney = try codedInputStream.readDouble()

                    case 32:
                        let valueIntstatus = try codedInputStream.readEnum()
                        if let enumsstatus = Apiproto.UserOrderStatus(rawValue:valueIntstatus){
                            status = enumsstatus
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 4, value:Int64(valueIntstatus))
                        }

                    case 40:
                        orderTime = try codedInputStream.readInt64()

                    case 49:
                        ticketSubMoney = try codedInputStream.readDouble()

                    case 57:
                        totalWinMoney = try codedInputStream.readDouble()

                    case 64:
                        sumNum = try codedInputStream.readInt32()

                    case 72:
                        issueNum = try codedInputStream.readInt32()

                    case 80:
                        chaseNo = try codedInputStream.readInt32()

                    case 90:
                        curIssue = try codedInputStream.readString()

                    case 98:
                        let subBuilder = Apiproto.BuycaiScheme.Builder()
                        try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                        schemeList.append(subBuilder.buildPartial())

                    case 106:
                        let subBuilder = Apiproto.BuycaiIssueInfo.Builder()
                        try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                        issueList.append(subBuilder.buildPartial())

                    case 112:
                        let valueIntorderType = try codedInputStream.readEnum()
                        if let enumsorderType = Apiproto.BuycaiOrderType(rawValue:valueIntorderType){
                            orderType = enumsorderType
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 14, value:Int64(valueIntorderType))
                        }

                    case 122:
                        userOrderNo = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.BuycaiUserOrder.Builder {
                let resultDecodedBuilder = Apiproto.BuycaiUserOrder.Builder()
                if let jsonValueId = jsonMap["id"] as? String {
                    resultDecodedBuilder.id = Int64(jsonValueId)!
                } else if let jsonValueId = jsonMap["id"] as? Int {
                    resultDecodedBuilder.id = Int64(jsonValueId)
                }
                if let jsonValueLotteryId = jsonMap["lotteryId"] as? String {
                    resultDecodedBuilder.lotteryId = try Apiproto.LotteryId.fromString(str: jsonValueLotteryId)
                }
                if let jsonValueSumMoney = jsonMap["sumMoney"] as? Double {
                    resultDecodedBuilder.sumMoney = Double(jsonValueSumMoney)
                } else if let jsonValueSumMoney = jsonMap["sumMoney"] as? String {
                    resultDecodedBuilder.sumMoney = Double(jsonValueSumMoney)!
                }
                if let jsonValueStatus = jsonMap["status"] as? String {
                    resultDecodedBuilder.status = try Apiproto.UserOrderStatus.fromString(str: jsonValueStatus)
                }
                if let jsonValueOrderTime = jsonMap["orderTime"] as? String {
                    resultDecodedBuilder.orderTime = Int64(jsonValueOrderTime)!
                } else if let jsonValueOrderTime = jsonMap["orderTime"] as? Int {
                    resultDecodedBuilder.orderTime = Int64(jsonValueOrderTime)
                }
                if let jsonValueTicketSubMoney = jsonMap["ticketSubMoney"] as? Double {
                    resultDecodedBuilder.ticketSubMoney = Double(jsonValueTicketSubMoney)
                } else if let jsonValueTicketSubMoney = jsonMap["ticketSubMoney"] as? String {
                    resultDecodedBuilder.ticketSubMoney = Double(jsonValueTicketSubMoney)!
                }
                if let jsonValueTotalWinMoney = jsonMap["totalWinMoney"] as? Double {
                    resultDecodedBuilder.totalWinMoney = Double(jsonValueTotalWinMoney)
                } else if let jsonValueTotalWinMoney = jsonMap["totalWinMoney"] as? String {
                    resultDecodedBuilder.totalWinMoney = Double(jsonValueTotalWinMoney)!
                }
                if let jsonValueSumNum = jsonMap["sumNum"] as? Int {
                    resultDecodedBuilder.sumNum = Int32(jsonValueSumNum)
                } else if let jsonValueSumNum = jsonMap["sumNum"] as? String {
                    resultDecodedBuilder.sumNum = Int32(jsonValueSumNum)!
                }
                if let jsonValueIssueNum = jsonMap["issueNum"] as? Int {
                    resultDecodedBuilder.issueNum = Int32(jsonValueIssueNum)
                } else if let jsonValueIssueNum = jsonMap["issueNum"] as? String {
                    resultDecodedBuilder.issueNum = Int32(jsonValueIssueNum)!
                }
                if let jsonValueChaseNo = jsonMap["chaseNo"] as? Int {
                    resultDecodedBuilder.chaseNo = Int32(jsonValueChaseNo)
                } else if let jsonValueChaseNo = jsonMap["chaseNo"] as? String {
                    resultDecodedBuilder.chaseNo = Int32(jsonValueChaseNo)!
                }
                if let jsonValueCurIssue = jsonMap["curIssue"] as? String {
                    resultDecodedBuilder.curIssue = jsonValueCurIssue
                }
                if let jsonValueSchemeList = jsonMap["schemeList"] as? Array<Dictionary<String,Any>> {
                    var jsonArraySchemeList:Array<Apiproto.BuycaiScheme> = []
                    for oneValueSchemeList in jsonValueSchemeList {
                        let messageFromStringSchemeList = try Apiproto.BuycaiScheme.Builder.decodeToBuilder(jsonMap:oneValueSchemeList).build()

                        jsonArraySchemeList.append(messageFromStringSchemeList)
                    }
                    resultDecodedBuilder.schemeList = jsonArraySchemeList
                }
                if let jsonValueIssueList = jsonMap["issueList"] as? Array<Dictionary<String,Any>> {
                    var jsonArrayIssueList:Array<Apiproto.BuycaiIssueInfo> = []
                    for oneValueIssueList in jsonValueIssueList {
                        let messageFromStringIssueList = try Apiproto.BuycaiIssueInfo.Builder.decodeToBuilder(jsonMap:oneValueIssueList).build()

                        jsonArrayIssueList.append(messageFromStringIssueList)
                    }
                    resultDecodedBuilder.issueList = jsonArrayIssueList
                }
                if let jsonValueOrderType = jsonMap["orderType"] as? String {
                    resultDecodedBuilder.orderType = try Apiproto.BuycaiOrderType.fromString(str: jsonValueOrderType)
                }
                if let jsonValueUserOrderNo = jsonMap["userOrderNo"] as? String {
                    resultDecodedBuilder.userOrderNo = jsonValueUserOrderNo
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.BuycaiUserOrder.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.BuycaiUserOrder.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class BuycaiVendorOrder : GeneratedMessage {

        public static func == (lhs: Apiproto.BuycaiVendorOrder, rhs: Apiproto.BuycaiVendorOrder) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
            fieldCheck = fieldCheck && (lhs.hasLotteryId == rhs.hasLotteryId) && (!lhs.hasLotteryId || lhs.lotteryId == rhs.lotteryId)
            fieldCheck = fieldCheck && (lhs.hasStatus == rhs.hasStatus) && (!lhs.hasStatus || lhs.status == rhs.status)
            fieldCheck = fieldCheck && (lhs.hasOpenTime == rhs.hasOpenTime) && (!lhs.hasOpenTime || lhs.openTime == rhs.openTime)
            fieldCheck = fieldCheck && (lhs.openBalls == rhs.openBalls)
            fieldCheck = fieldCheck && (lhs.hasMultiple == rhs.hasMultiple) && (!lhs.hasMultiple || lhs.multiple == rhs.multiple)
            fieldCheck = fieldCheck && (lhs.hasMoney == rhs.hasMoney) && (!lhs.hasMoney || lhs.money == rhs.money)
            fieldCheck = fieldCheck && (lhs.hasSumNum == rhs.hasSumNum) && (!lhs.hasSumNum || lhs.sumNum == rhs.sumNum)
            fieldCheck = fieldCheck && (lhs.hasWinMoney == rhs.hasWinMoney) && (!lhs.hasWinMoney || lhs.winMoney == rhs.winMoney)
            fieldCheck = fieldCheck && (lhs.schemeList == rhs.schemeList)
            fieldCheck = fieldCheck && (lhs.hasUserOrderNo == rhs.hasUserOrderNo) && (!lhs.hasUserOrderNo || lhs.userOrderNo == rhs.userOrderNo)
            fieldCheck = fieldCheck && (lhs.hasUserOrderId == rhs.hasUserOrderId) && (!lhs.hasUserOrderId || lhs.userOrderId == rhs.userOrderId)
            fieldCheck = fieldCheck && (lhs.hasOrderTime == rhs.hasOrderTime) && (!lhs.hasOrderTime || lhs.orderTime == rhs.orderTime)
            fieldCheck = fieldCheck && (lhs.hasReqTime == rhs.hasReqTime) && (!lhs.hasReqTime || lhs.reqTime == rhs.reqTime)
            fieldCheck = fieldCheck && (lhs.hasRespTime == rhs.hasRespTime) && (!lhs.hasRespTime || lhs.respTime == rhs.respTime)
            fieldCheck = fieldCheck && (lhs.hasCurIssue == rhs.hasCurIssue) && (!lhs.hasCurIssue || lhs.curIssue == rhs.curIssue)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var id:Int64 = Int64(0)
        public fileprivate(set) var hasId:Bool = false

        public fileprivate(set) var lotteryId:Apiproto.LotteryId = Apiproto.LotteryId.allId
        public fileprivate(set) var hasLotteryId:Bool = false
        public fileprivate(set) var status:Apiproto.VendorOrderStatus = Apiproto.VendorOrderStatus.vosAll
        public fileprivate(set) var hasStatus:Bool = false
        /// 开奖时间
        public fileprivate(set) var openTime:Int64 = Int64(0)
        public fileprivate(set) var hasOpenTime:Bool = false

        /// 开奖号码
        public fileprivate(set) var openBalls:Array<String> = Array<String>()
        /// 方案倍数
        public fileprivate(set) var multiple:Int32 = Int32(0)
        public fileprivate(set) var hasMultiple:Bool = false

        /// 方案金额
        public fileprivate(set) var money:Double = Double(0)
        public fileprivate(set) var hasMoney:Bool = false

        /// 方案注数
        public fileprivate(set) var sumNum:Int32 = Int32(0)
        public fileprivate(set) var hasSumNum:Bool = false

        /// 中奖金额
        public fileprivate(set) var winMoney:Double = Double(0)
        public fileprivate(set) var hasWinMoney:Bool = false

        public fileprivate(set) var schemeList:Array<Apiproto.BuycaiScheme>  = Array<Apiproto.BuycaiScheme>()
        /// 订单编号
        public fileprivate(set) var userOrderNo:String = ""
        public fileprivate(set) var hasUserOrderNo:Bool = false

        /// 订单id
        public fileprivate(set) var userOrderId:Int64 = Int64(0)
        public fileprivate(set) var hasUserOrderId:Bool = false

        /// 预约时间
        public fileprivate(set) var orderTime:Int64 = Int64(0)
        public fileprivate(set) var hasOrderTime:Bool = false

        /// 接单时间
        public fileprivate(set) var reqTime:Int64 = Int64(0)
        public fileprivate(set) var hasReqTime:Bool = false

        /// 出票时间
        public fileprivate(set) var respTime:Int64 = Int64(0)
        public fileprivate(set) var hasRespTime:Bool = false

        /// 当前期号
        public fileprivate(set) var curIssue:String = ""
        public fileprivate(set) var hasCurIssue:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasId {
                try codedOutputStream.writeInt64(fieldNumber: 1, value:id)
            }
            if hasLotteryId {
                try codedOutputStream.writeEnum(fieldNumber: 2, value:lotteryId.rawValue)
            }
            if hasStatus {
                try codedOutputStream.writeEnum(fieldNumber: 3, value:status.rawValue)
            }
            if hasOpenTime {
                try codedOutputStream.writeInt64(fieldNumber: 4, value:openTime)
            }
            if !openBalls.isEmpty {
                for oneValueopenBalls in openBalls {
                    try codedOutputStream.writeString(fieldNumber: 5, value:oneValueopenBalls)
                }
            }
            if hasMultiple {
                try codedOutputStream.writeInt32(fieldNumber: 6, value:multiple)
            }
            if hasMoney {
                try codedOutputStream.writeDouble(fieldNumber: 7, value:money)
            }
            if hasSumNum {
                try codedOutputStream.writeInt32(fieldNumber: 8, value:sumNum)
            }
            if hasWinMoney {
                try codedOutputStream.writeDouble(fieldNumber: 9, value:winMoney)
            }
            for oneElementSchemeList in schemeList {
                  try codedOutputStream.writeMessage(fieldNumber: 10, value:oneElementSchemeList)
            }
            if hasUserOrderNo {
                try codedOutputStream.writeString(fieldNumber: 11, value:userOrderNo)
            }
            if hasUserOrderId {
                try codedOutputStream.writeInt64(fieldNumber: 12, value:userOrderId)
            }
            if hasOrderTime {
                try codedOutputStream.writeInt64(fieldNumber: 13, value:orderTime)
            }
            if hasReqTime {
                try codedOutputStream.writeInt64(fieldNumber: 14, value:reqTime)
            }
            if hasRespTime {
                try codedOutputStream.writeInt64(fieldNumber: 15, value:respTime)
            }
            if hasCurIssue {
                try codedOutputStream.writeString(fieldNumber: 16, value:curIssue)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasId {
                serialize_size += id.computeInt64Size(fieldNumber: 1)
            }
            if (hasLotteryId) {
                serialize_size += lotteryId.rawValue.computeEnumSize(fieldNumber: 2)
            }
            if (hasStatus) {
                serialize_size += status.rawValue.computeEnumSize(fieldNumber: 3)
            }
            if hasOpenTime {
                serialize_size += openTime.computeInt64Size(fieldNumber: 4)
            }
            var dataSizeOpenBalls:Int32 = 0
            for oneValueopenBalls in openBalls {
                dataSizeOpenBalls += oneValueopenBalls.computeStringSizeNoTag()
            }
            serialize_size += dataSizeOpenBalls
            serialize_size += 1 * Int32(openBalls.count)
            if hasMultiple {
                serialize_size += multiple.computeInt32Size(fieldNumber: 6)
            }
            if hasMoney {
                serialize_size += money.computeDoubleSize(fieldNumber: 7)
            }
            if hasSumNum {
                serialize_size += sumNum.computeInt32Size(fieldNumber: 8)
            }
            if hasWinMoney {
                serialize_size += winMoney.computeDoubleSize(fieldNumber: 9)
            }
            for oneElementSchemeList in schemeList {
                serialize_size += oneElementSchemeList.computeMessageSize(fieldNumber: 10)
            }
            if hasUserOrderNo {
                serialize_size += userOrderNo.computeStringSize(fieldNumber: 11)
            }
            if hasUserOrderId {
                serialize_size += userOrderId.computeInt64Size(fieldNumber: 12)
            }
            if hasOrderTime {
                serialize_size += orderTime.computeInt64Size(fieldNumber: 13)
            }
            if hasReqTime {
                serialize_size += reqTime.computeInt64Size(fieldNumber: 14)
            }
            if hasRespTime {
                serialize_size += respTime.computeInt64Size(fieldNumber: 15)
            }
            if hasCurIssue {
                serialize_size += curIssue.computeStringSize(fieldNumber: 16)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.BuycaiVendorOrder.Builder {
            return Apiproto.BuycaiVendorOrder.classBuilder() as! Apiproto.BuycaiVendorOrder.Builder
        }
        public func getBuilder() -> Apiproto.BuycaiVendorOrder.Builder {
            return classBuilder() as! Apiproto.BuycaiVendorOrder.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.BuycaiVendorOrder.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.BuycaiVendorOrder.Builder()
        }
        public func toBuilder() throws -> Apiproto.BuycaiVendorOrder.Builder {
            return try Apiproto.BuycaiVendorOrder.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.BuycaiVendorOrder) throws -> Apiproto.BuycaiVendorOrder.Builder {
            return try Apiproto.BuycaiVendorOrder.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasId {
                jsonMap["id"] = "\(id)"
            }
            if hasLotteryId {
                jsonMap["lotteryId"] = lotteryId.toString()
            }
            if hasStatus {
                jsonMap["status"] = status.toString()
            }
            if hasOpenTime {
                jsonMap["openTime"] = "\(openTime)"
            }
            if !openBalls.isEmpty {
                var jsonArrayOpenBalls:Array<String> = []
                for oneValueOpenBalls in openBalls {
                    jsonArrayOpenBalls.append(oneValueOpenBalls)
                }
                jsonMap["openBalls"] = jsonArrayOpenBalls
            }
            if hasMultiple {
                jsonMap["multiple"] = Int(multiple)
            }
            if hasMoney {
                jsonMap["money"] = Double(money)
            }
            if hasSumNum {
                jsonMap["sumNum"] = Int(sumNum)
            }
            if hasWinMoney {
                jsonMap["winMoney"] = Double(winMoney)
            }
            if !schemeList.isEmpty {
                var jsonArraySchemeList:Array<Dictionary<String,Any>> = []
                for oneValueSchemeList in schemeList {
                    let ecodedMessageSchemeList = try oneValueSchemeList.encode()
                    jsonArraySchemeList.append(ecodedMessageSchemeList)
                }
                jsonMap["schemeList"] = jsonArraySchemeList
            }
            if hasUserOrderNo {
                jsonMap["userOrderNo"] = userOrderNo
            }
            if hasUserOrderId {
                jsonMap["userOrderId"] = "\(userOrderId)"
            }
            if hasOrderTime {
                jsonMap["orderTime"] = "\(orderTime)"
            }
            if hasReqTime {
                jsonMap["reqTime"] = "\(reqTime)"
            }
            if hasRespTime {
                jsonMap["respTime"] = "\(respTime)"
            }
            if hasCurIssue {
                jsonMap["curIssue"] = curIssue
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.BuycaiVendorOrder {
            return try Apiproto.BuycaiVendorOrder.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.BuycaiVendorOrder {
            return try Apiproto.BuycaiVendorOrder.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasId {
                output += "\(indent) id: \(id) \n"
            }
            if (hasLotteryId) {
                output += "\(indent) lotteryId: \(lotteryId.description)\n"
            }
            if (hasStatus) {
                output += "\(indent) status: \(status.description)\n"
            }
            if hasOpenTime {
                output += "\(indent) openTime: \(openTime) \n"
            }
            var openBallsElementIndex:Int = 0
            for oneValueOpenBalls in openBalls  {
                output += "\(indent) openBalls[\(openBallsElementIndex)]: \(oneValueOpenBalls)\n"
                openBallsElementIndex += 1
            }
            if hasMultiple {
                output += "\(indent) multiple: \(multiple) \n"
            }
            if hasMoney {
                output += "\(indent) money: \(money) \n"
            }
            if hasSumNum {
                output += "\(indent) sumNum: \(sumNum) \n"
            }
            if hasWinMoney {
                output += "\(indent) winMoney: \(winMoney) \n"
            }
            var schemeListElementIndex:Int = 0
            for oneElementSchemeList in schemeList {
                output += "\(indent) schemeList[\(schemeListElementIndex)] {\n"
                output += try oneElementSchemeList.getDescription(indent: "\(indent)  ")
                output += "\(indent)}\n"
                schemeListElementIndex += 1
            }
            if hasUserOrderNo {
                output += "\(indent) userOrderNo: \(userOrderNo) \n"
            }
            if hasUserOrderId {
                output += "\(indent) userOrderId: \(userOrderId) \n"
            }
            if hasOrderTime {
                output += "\(indent) orderTime: \(orderTime) \n"
            }
            if hasReqTime {
                output += "\(indent) reqTime: \(reqTime) \n"
            }
            if hasRespTime {
                output += "\(indent) respTime: \(respTime) \n"
            }
            if hasCurIssue {
                output += "\(indent) curIssue: \(curIssue) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasId {
                    hashCode = (hashCode &* 31) &+ id.hashValue
                }
                if hasLotteryId {
                     hashCode = (hashCode &* 31) &+ lotteryId.hashValue
                }
                if hasStatus {
                     hashCode = (hashCode &* 31) &+ status.hashValue
                }
                if hasOpenTime {
                    hashCode = (hashCode &* 31) &+ openTime.hashValue
                }
                for oneValueOpenBalls in openBalls {
                    hashCode = (hashCode &* 31) &+ oneValueOpenBalls.hashValue
                }
                if hasMultiple {
                    hashCode = (hashCode &* 31) &+ multiple.hashValue
                }
                if hasMoney {
                    hashCode = (hashCode &* 31) &+ money.hashValue
                }
                if hasSumNum {
                    hashCode = (hashCode &* 31) &+ sumNum.hashValue
                }
                if hasWinMoney {
                    hashCode = (hashCode &* 31) &+ winMoney.hashValue
                }
                for oneElementSchemeList in schemeList {
                    hashCode = (hashCode &* 31) &+ oneElementSchemeList.hashValue
                }
                if hasUserOrderNo {
                    hashCode = (hashCode &* 31) &+ userOrderNo.hashValue
                }
                if hasUserOrderId {
                    hashCode = (hashCode &* 31) &+ userOrderId.hashValue
                }
                if hasOrderTime {
                    hashCode = (hashCode &* 31) &+ orderTime.hashValue
                }
                if hasReqTime {
                    hashCode = (hashCode &* 31) &+ reqTime.hashValue
                }
                if hasRespTime {
                    hashCode = (hashCode &* 31) &+ respTime.hashValue
                }
                if hasCurIssue {
                    hashCode = (hashCode &* 31) &+ curIssue.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.BuycaiVendorOrder"
        }
        override public func className() -> String {
            return "Apiproto.BuycaiVendorOrder"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.BuycaiVendorOrder = Apiproto.BuycaiVendorOrder()
            public func getMessage() -> Apiproto.BuycaiVendorOrder {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var id:Int64 {
                get {
                    return builderResult.id
                }
                set (value) {
                    builderResult.hasId = true
                    builderResult.id = value
                }
            }
            public var hasId:Bool {
                get {
                    return builderResult.hasId
                }
            }
            @discardableResult
            public func setId(_ value:Int64) -> Apiproto.BuycaiVendorOrder.Builder {
                self.id = value
                return self
            }
            @discardableResult
            public func clearId() -> Apiproto.BuycaiVendorOrder.Builder{
                builderResult.hasId = false
                builderResult.id = Int64(0)
                return self
            }
                public var lotteryId:Apiproto.LotteryId {
                    get {
                        return builderResult.lotteryId
                    }
                    set (value) {
                        builderResult.hasLotteryId = true
                        builderResult.lotteryId = value
                    }
                }
                public var hasLotteryId:Bool{
                    get {
                        return builderResult.hasLotteryId
                    }
                }
            @discardableResult
                public func setLotteryId(_ value:Apiproto.LotteryId) -> Apiproto.BuycaiVendorOrder.Builder {
                  self.lotteryId = value
                  return self
                }
            @discardableResult
                public func clearLotteryId() -> Apiproto.BuycaiVendorOrder.Builder {
                   builderResult.hasLotteryId = false
                   builderResult.lotteryId = .allId
                   return self
                }
            /// 订单状态
                public var status:Apiproto.VendorOrderStatus {
                    get {
                        return builderResult.status
                    }
                    set (value) {
                        builderResult.hasStatus = true
                        builderResult.status = value
                    }
                }
                public var hasStatus:Bool{
                    get {
                        return builderResult.hasStatus
                    }
                }
            @discardableResult
                public func setStatus(_ value:Apiproto.VendorOrderStatus) -> Apiproto.BuycaiVendorOrder.Builder {
                  self.status = value
                  return self
                }
            @discardableResult
                public func clearStatus() -> Apiproto.BuycaiVendorOrder.Builder {
                   builderResult.hasStatus = false
                   builderResult.status = .vosAll
                   return self
                }
            /// 开奖时间
            public var openTime:Int64 {
                get {
                    return builderResult.openTime
                }
                set (value) {
                    builderResult.hasOpenTime = true
                    builderResult.openTime = value
                }
            }
            public var hasOpenTime:Bool {
                get {
                    return builderResult.hasOpenTime
                }
            }
            @discardableResult
            public func setOpenTime(_ value:Int64) -> Apiproto.BuycaiVendorOrder.Builder {
                self.openTime = value
                return self
            }
            @discardableResult
            public func clearOpenTime() -> Apiproto.BuycaiVendorOrder.Builder{
                builderResult.hasOpenTime = false
                builderResult.openTime = Int64(0)
                return self
            }
            /// 开奖号码
            public var openBalls:Array<String> {
                get {
                    return builderResult.openBalls
                }
                set (array) {
                    builderResult.openBalls = array
                }
            }
            @discardableResult
            public func setOpenBalls(_ value:Array<String>) -> Apiproto.BuycaiVendorOrder.Builder {
                self.openBalls = value
                return self
            }
            @discardableResult
            public func clearOpenBalls() -> Apiproto.BuycaiVendorOrder.Builder {
                builderResult.openBalls.removeAll(keepingCapacity: false)
                return self
            }
            /// 方案倍数
            public var multiple:Int32 {
                get {
                    return builderResult.multiple
                }
                set (value) {
                    builderResult.hasMultiple = true
                    builderResult.multiple = value
                }
            }
            public var hasMultiple:Bool {
                get {
                    return builderResult.hasMultiple
                }
            }
            @discardableResult
            public func setMultiple(_ value:Int32) -> Apiproto.BuycaiVendorOrder.Builder {
                self.multiple = value
                return self
            }
            @discardableResult
            public func clearMultiple() -> Apiproto.BuycaiVendorOrder.Builder{
                builderResult.hasMultiple = false
                builderResult.multiple = Int32(0)
                return self
            }
            /// 方案金额
            public var money:Double {
                get {
                    return builderResult.money
                }
                set (value) {
                    builderResult.hasMoney = true
                    builderResult.money = value
                }
            }
            public var hasMoney:Bool {
                get {
                    return builderResult.hasMoney
                }
            }
            @discardableResult
            public func setMoney(_ value:Double) -> Apiproto.BuycaiVendorOrder.Builder {
                self.money = value
                return self
            }
            @discardableResult
            public func clearMoney() -> Apiproto.BuycaiVendorOrder.Builder{
                builderResult.hasMoney = false
                builderResult.money = Double(0)
                return self
            }
            /// 方案注数
            public var sumNum:Int32 {
                get {
                    return builderResult.sumNum
                }
                set (value) {
                    builderResult.hasSumNum = true
                    builderResult.sumNum = value
                }
            }
            public var hasSumNum:Bool {
                get {
                    return builderResult.hasSumNum
                }
            }
            @discardableResult
            public func setSumNum(_ value:Int32) -> Apiproto.BuycaiVendorOrder.Builder {
                self.sumNum = value
                return self
            }
            @discardableResult
            public func clearSumNum() -> Apiproto.BuycaiVendorOrder.Builder{
                builderResult.hasSumNum = false
                builderResult.sumNum = Int32(0)
                return self
            }
            /// 中奖金额
            public var winMoney:Double {
                get {
                    return builderResult.winMoney
                }
                set (value) {
                    builderResult.hasWinMoney = true
                    builderResult.winMoney = value
                }
            }
            public var hasWinMoney:Bool {
                get {
                    return builderResult.hasWinMoney
                }
            }
            @discardableResult
            public func setWinMoney(_ value:Double) -> Apiproto.BuycaiVendorOrder.Builder {
                self.winMoney = value
                return self
            }
            @discardableResult
            public func clearWinMoney() -> Apiproto.BuycaiVendorOrder.Builder{
                builderResult.hasWinMoney = false
                builderResult.winMoney = Double(0)
                return self
            }
            /// 方案列表
            public var schemeList:Array<Apiproto.BuycaiScheme> {
                get {
                    return builderResult.schemeList
                }
                set (value) {
                    builderResult.schemeList = value
                }
            }
            @discardableResult
            public func setSchemeList(_ value:Array<Apiproto.BuycaiScheme>) -> Apiproto.BuycaiVendorOrder.Builder {
                self.schemeList = value
                return self
            }
            @discardableResult
            public func clearSchemeList() -> Apiproto.BuycaiVendorOrder.Builder {
                builderResult.schemeList.removeAll(keepingCapacity: false)
                return self
            }
            /// 订单编号
            public var userOrderNo:String {
                get {
                    return builderResult.userOrderNo
                }
                set (value) {
                    builderResult.hasUserOrderNo = true
                    builderResult.userOrderNo = value
                }
            }
            public var hasUserOrderNo:Bool {
                get {
                    return builderResult.hasUserOrderNo
                }
            }
            @discardableResult
            public func setUserOrderNo(_ value:String) -> Apiproto.BuycaiVendorOrder.Builder {
                self.userOrderNo = value
                return self
            }
            @discardableResult
            public func clearUserOrderNo() -> Apiproto.BuycaiVendorOrder.Builder{
                builderResult.hasUserOrderNo = false
                builderResult.userOrderNo = ""
                return self
            }
            /// 订单id
            public var userOrderId:Int64 {
                get {
                    return builderResult.userOrderId
                }
                set (value) {
                    builderResult.hasUserOrderId = true
                    builderResult.userOrderId = value
                }
            }
            public var hasUserOrderId:Bool {
                get {
                    return builderResult.hasUserOrderId
                }
            }
            @discardableResult
            public func setUserOrderId(_ value:Int64) -> Apiproto.BuycaiVendorOrder.Builder {
                self.userOrderId = value
                return self
            }
            @discardableResult
            public func clearUserOrderId() -> Apiproto.BuycaiVendorOrder.Builder{
                builderResult.hasUserOrderId = false
                builderResult.userOrderId = Int64(0)
                return self
            }
            /// 预约时间
            public var orderTime:Int64 {
                get {
                    return builderResult.orderTime
                }
                set (value) {
                    builderResult.hasOrderTime = true
                    builderResult.orderTime = value
                }
            }
            public var hasOrderTime:Bool {
                get {
                    return builderResult.hasOrderTime
                }
            }
            @discardableResult
            public func setOrderTime(_ value:Int64) -> Apiproto.BuycaiVendorOrder.Builder {
                self.orderTime = value
                return self
            }
            @discardableResult
            public func clearOrderTime() -> Apiproto.BuycaiVendorOrder.Builder{
                builderResult.hasOrderTime = false
                builderResult.orderTime = Int64(0)
                return self
            }
            /// 接单时间
            public var reqTime:Int64 {
                get {
                    return builderResult.reqTime
                }
                set (value) {
                    builderResult.hasReqTime = true
                    builderResult.reqTime = value
                }
            }
            public var hasReqTime:Bool {
                get {
                    return builderResult.hasReqTime
                }
            }
            @discardableResult
            public func setReqTime(_ value:Int64) -> Apiproto.BuycaiVendorOrder.Builder {
                self.reqTime = value
                return self
            }
            @discardableResult
            public func clearReqTime() -> Apiproto.BuycaiVendorOrder.Builder{
                builderResult.hasReqTime = false
                builderResult.reqTime = Int64(0)
                return self
            }
            /// 出票时间
            public var respTime:Int64 {
                get {
                    return builderResult.respTime
                }
                set (value) {
                    builderResult.hasRespTime = true
                    builderResult.respTime = value
                }
            }
            public var hasRespTime:Bool {
                get {
                    return builderResult.hasRespTime
                }
            }
            @discardableResult
            public func setRespTime(_ value:Int64) -> Apiproto.BuycaiVendorOrder.Builder {
                self.respTime = value
                return self
            }
            @discardableResult
            public func clearRespTime() -> Apiproto.BuycaiVendorOrder.Builder{
                builderResult.hasRespTime = false
                builderResult.respTime = Int64(0)
                return self
            }
            /// 当前期号
            public var curIssue:String {
                get {
                    return builderResult.curIssue
                }
                set (value) {
                    builderResult.hasCurIssue = true
                    builderResult.curIssue = value
                }
            }
            public var hasCurIssue:Bool {
                get {
                    return builderResult.hasCurIssue
                }
            }
            @discardableResult
            public func setCurIssue(_ value:String) -> Apiproto.BuycaiVendorOrder.Builder {
                self.curIssue = value
                return self
            }
            @discardableResult
            public func clearCurIssue() -> Apiproto.BuycaiVendorOrder.Builder{
                builderResult.hasCurIssue = false
                builderResult.curIssue = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.BuycaiVendorOrder.Builder {
                builderResult = Apiproto.BuycaiVendorOrder()
                return self
            }
            override public func clone() throws -> Apiproto.BuycaiVendorOrder.Builder {
                return try Apiproto.BuycaiVendorOrder.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.BuycaiVendorOrder {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.BuycaiVendorOrder {
                let returnMe:Apiproto.BuycaiVendorOrder = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.BuycaiVendorOrder) throws -> Apiproto.BuycaiVendorOrder.Builder {
                if other == Apiproto.BuycaiVendorOrder() {
                    return self
                }
                if other.hasId {
                    id = other.id
                }
                if other.hasLotteryId {
                    lotteryId = other.lotteryId
                }
                if other.hasStatus {
                    status = other.status
                }
                if other.hasOpenTime {
                    openTime = other.openTime
                }
                if !other.openBalls.isEmpty {
                    builderResult.openBalls += other.openBalls
                }
                if other.hasMultiple {
                    multiple = other.multiple
                }
                if other.hasMoney {
                    money = other.money
                }
                if other.hasSumNum {
                    sumNum = other.sumNum
                }
                if other.hasWinMoney {
                    winMoney = other.winMoney
                }
                if !other.schemeList.isEmpty  {
                     builderResult.schemeList += other.schemeList
                }
                if other.hasUserOrderNo {
                    userOrderNo = other.userOrderNo
                }
                if other.hasUserOrderId {
                    userOrderId = other.userOrderId
                }
                if other.hasOrderTime {
                    orderTime = other.orderTime
                }
                if other.hasReqTime {
                    reqTime = other.reqTime
                }
                if other.hasRespTime {
                    respTime = other.respTime
                }
                if other.hasCurIssue {
                    curIssue = other.curIssue
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.BuycaiVendorOrder.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BuycaiVendorOrder.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        id = try codedInputStream.readInt64()

                    case 16:
                        let valueIntlotteryId = try codedInputStream.readEnum()
                        if let enumslotteryId = Apiproto.LotteryId(rawValue:valueIntlotteryId){
                            lotteryId = enumslotteryId
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 2, value:Int64(valueIntlotteryId))
                        }

                    case 24:
                        let valueIntstatus = try codedInputStream.readEnum()
                        if let enumsstatus = Apiproto.VendorOrderStatus(rawValue:valueIntstatus){
                            status = enumsstatus
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 3, value:Int64(valueIntstatus))
                        }

                    case 32:
                        openTime = try codedInputStream.readInt64()

                    case 42:
                        openBalls += [try codedInputStream.readString()]

                    case 48:
                        multiple = try codedInputStream.readInt32()

                    case 57:
                        money = try codedInputStream.readDouble()

                    case 64:
                        sumNum = try codedInputStream.readInt32()

                    case 73:
                        winMoney = try codedInputStream.readDouble()

                    case 82:
                        let subBuilder = Apiproto.BuycaiScheme.Builder()
                        try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                        schemeList.append(subBuilder.buildPartial())

                    case 90:
                        userOrderNo = try codedInputStream.readString()

                    case 96:
                        userOrderId = try codedInputStream.readInt64()

                    case 104:
                        orderTime = try codedInputStream.readInt64()

                    case 112:
                        reqTime = try codedInputStream.readInt64()

                    case 120:
                        respTime = try codedInputStream.readInt64()

                    case 130:
                        curIssue = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.BuycaiVendorOrder.Builder {
                let resultDecodedBuilder = Apiproto.BuycaiVendorOrder.Builder()
                if let jsonValueId = jsonMap["id"] as? String {
                    resultDecodedBuilder.id = Int64(jsonValueId)!
                } else if let jsonValueId = jsonMap["id"] as? Int {
                    resultDecodedBuilder.id = Int64(jsonValueId)
                }
                if let jsonValueLotteryId = jsonMap["lotteryId"] as? String {
                    resultDecodedBuilder.lotteryId = try Apiproto.LotteryId.fromString(str: jsonValueLotteryId)
                }
                if let jsonValueStatus = jsonMap["status"] as? String {
                    resultDecodedBuilder.status = try Apiproto.VendorOrderStatus.fromString(str: jsonValueStatus)
                }
                if let jsonValueOpenTime = jsonMap["openTime"] as? String {
                    resultDecodedBuilder.openTime = Int64(jsonValueOpenTime)!
                } else if let jsonValueOpenTime = jsonMap["openTime"] as? Int {
                    resultDecodedBuilder.openTime = Int64(jsonValueOpenTime)
                }
                if let jsonValueOpenBalls = jsonMap["openBalls"] as? Array<String> {
                    var jsonArrayOpenBalls:Array<String> = []
                    for oneValueOpenBalls in jsonValueOpenBalls {
                        jsonArrayOpenBalls.append(oneValueOpenBalls)
                    }
                    resultDecodedBuilder.openBalls = jsonArrayOpenBalls
                }
                if let jsonValueMultiple = jsonMap["multiple"] as? Int {
                    resultDecodedBuilder.multiple = Int32(jsonValueMultiple)
                } else if let jsonValueMultiple = jsonMap["multiple"] as? String {
                    resultDecodedBuilder.multiple = Int32(jsonValueMultiple)!
                }
                if let jsonValueMoney = jsonMap["money"] as? Double {
                    resultDecodedBuilder.money = Double(jsonValueMoney)
                } else if let jsonValueMoney = jsonMap["money"] as? String {
                    resultDecodedBuilder.money = Double(jsonValueMoney)!
                }
                if let jsonValueSumNum = jsonMap["sumNum"] as? Int {
                    resultDecodedBuilder.sumNum = Int32(jsonValueSumNum)
                } else if let jsonValueSumNum = jsonMap["sumNum"] as? String {
                    resultDecodedBuilder.sumNum = Int32(jsonValueSumNum)!
                }
                if let jsonValueWinMoney = jsonMap["winMoney"] as? Double {
                    resultDecodedBuilder.winMoney = Double(jsonValueWinMoney)
                } else if let jsonValueWinMoney = jsonMap["winMoney"] as? String {
                    resultDecodedBuilder.winMoney = Double(jsonValueWinMoney)!
                }
                if let jsonValueSchemeList = jsonMap["schemeList"] as? Array<Dictionary<String,Any>> {
                    var jsonArraySchemeList:Array<Apiproto.BuycaiScheme> = []
                    for oneValueSchemeList in jsonValueSchemeList {
                        let messageFromStringSchemeList = try Apiproto.BuycaiScheme.Builder.decodeToBuilder(jsonMap:oneValueSchemeList).build()

                        jsonArraySchemeList.append(messageFromStringSchemeList)
                    }
                    resultDecodedBuilder.schemeList = jsonArraySchemeList
                }
                if let jsonValueUserOrderNo = jsonMap["userOrderNo"] as? String {
                    resultDecodedBuilder.userOrderNo = jsonValueUserOrderNo
                }
                if let jsonValueUserOrderId = jsonMap["userOrderId"] as? String {
                    resultDecodedBuilder.userOrderId = Int64(jsonValueUserOrderId)!
                } else if let jsonValueUserOrderId = jsonMap["userOrderId"] as? Int {
                    resultDecodedBuilder.userOrderId = Int64(jsonValueUserOrderId)
                }
                if let jsonValueOrderTime = jsonMap["orderTime"] as? String {
                    resultDecodedBuilder.orderTime = Int64(jsonValueOrderTime)!
                } else if let jsonValueOrderTime = jsonMap["orderTime"] as? Int {
                    resultDecodedBuilder.orderTime = Int64(jsonValueOrderTime)
                }
                if let jsonValueReqTime = jsonMap["reqTime"] as? String {
                    resultDecodedBuilder.reqTime = Int64(jsonValueReqTime)!
                } else if let jsonValueReqTime = jsonMap["reqTime"] as? Int {
                    resultDecodedBuilder.reqTime = Int64(jsonValueReqTime)
                }
                if let jsonValueRespTime = jsonMap["respTime"] as? String {
                    resultDecodedBuilder.respTime = Int64(jsonValueRespTime)!
                } else if let jsonValueRespTime = jsonMap["respTime"] as? Int {
                    resultDecodedBuilder.respTime = Int64(jsonValueRespTime)
                }
                if let jsonValueCurIssue = jsonMap["curIssue"] as? String {
                    resultDecodedBuilder.curIssue = jsonValueCurIssue
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.BuycaiVendorOrder.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.BuycaiVendorOrder.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

}
extension Apiproto.Balls: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.Balls> {
        var mergedArray = Array<Apiproto.Balls>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.Balls? {
        return try Apiproto.Balls.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.Balls {
        return try Apiproto.Balls.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.BuycaiRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.Balls {
        return try Apiproto.Balls.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.Balls {
        return try Apiproto.Balls.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.Balls {
        return try Apiproto.Balls.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.Balls {
        return try Apiproto.Balls.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.Balls {
        return try Apiproto.Balls.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "list": return self.list
        default: return nil
        }
    }
}
extension Apiproto.Balls.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "list": return self.list
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "list":
                guard let newSubscriptValue = newSubscriptValue as? Array<Int32> else {
                    return
                }
                self.list = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.BuycaiScheme: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.BuycaiScheme> {
        var mergedArray = Array<Apiproto.BuycaiScheme>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.BuycaiScheme? {
        return try Apiproto.BuycaiScheme.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.BuycaiScheme {
        return try Apiproto.BuycaiScheme.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.BuycaiRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BuycaiScheme {
        return try Apiproto.BuycaiScheme.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.BuycaiScheme {
        return try Apiproto.BuycaiScheme.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BuycaiScheme {
        return try Apiproto.BuycaiScheme.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.BuycaiScheme {
        return try Apiproto.BuycaiScheme.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BuycaiScheme {
        return try Apiproto.BuycaiScheme.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "type": return self.type
        case "selectBalls": return self.selectBalls
        case "num": return self.num
        case "money": return self.money
        default: return nil
        }
    }
}
extension Apiproto.BuycaiScheme.SelectBallsEntry: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.BuycaiScheme.SelectBallsEntry> {
        var mergedArray = Array<Apiproto.BuycaiScheme.SelectBallsEntry>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.BuycaiScheme.SelectBallsEntry? {
        return try Apiproto.BuycaiScheme.SelectBallsEntry.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.BuycaiScheme.SelectBallsEntry {
        return try Apiproto.BuycaiScheme.SelectBallsEntry.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.BuycaiRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BuycaiScheme.SelectBallsEntry {
        return try Apiproto.BuycaiScheme.SelectBallsEntry.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.BuycaiScheme.SelectBallsEntry {
        return try Apiproto.BuycaiScheme.SelectBallsEntry.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BuycaiScheme.SelectBallsEntry {
        return try Apiproto.BuycaiScheme.SelectBallsEntry.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.BuycaiScheme.SelectBallsEntry {
        return try Apiproto.BuycaiScheme.SelectBallsEntry.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BuycaiScheme.SelectBallsEntry {
        return try Apiproto.BuycaiScheme.SelectBallsEntry.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "key": return self.key
        case "value": return self.value
        default: return nil
        }
    }
}
extension Apiproto.BuycaiScheme.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "type": return self.type
            case "selectBalls": return self.selectBalls
            case "num": return self.num
            case "money": return self.money
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "type":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.type = newSubscriptValue
            case "selectBalls":
                guard let newSubscriptValue = newSubscriptValue as? Dictionary<String,Apiproto.Balls> else {
                    return
                }
                self.selectBalls = newSubscriptValue
            case "num":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.num = newSubscriptValue
            case "money":
                guard let newSubscriptValue = newSubscriptValue as? Double else {
                    return
                }
                self.money = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.BuycaiScheme.SelectBallsEntry.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "key": return self.key
            case "value": return self.value
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "key":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.key = newSubscriptValue
            case "value":
                guard let newSubscriptValue = newSubscriptValue as? Apiproto.Balls else {
                    return
                }
                self.value = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.IssueMultiple: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.IssueMultiple> {
        var mergedArray = Array<Apiproto.IssueMultiple>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.IssueMultiple? {
        return try Apiproto.IssueMultiple.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.IssueMultiple {
        return try Apiproto.IssueMultiple.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.BuycaiRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.IssueMultiple {
        return try Apiproto.IssueMultiple.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.IssueMultiple {
        return try Apiproto.IssueMultiple.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.IssueMultiple {
        return try Apiproto.IssueMultiple.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.IssueMultiple {
        return try Apiproto.IssueMultiple.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.IssueMultiple {
        return try Apiproto.IssueMultiple.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "issue": return self.issue
        case "multiple": return self.multiple
        default: return nil
        }
    }
}
extension Apiproto.IssueMultiple.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "issue": return self.issue
            case "multiple": return self.multiple
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "issue":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.issue = newSubscriptValue
            case "multiple":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.multiple = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.BuycaiOrder: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.BuycaiOrder> {
        var mergedArray = Array<Apiproto.BuycaiOrder>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.BuycaiOrder? {
        return try Apiproto.BuycaiOrder.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.BuycaiOrder {
        return try Apiproto.BuycaiOrder.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.BuycaiRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BuycaiOrder {
        return try Apiproto.BuycaiOrder.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.BuycaiOrder {
        return try Apiproto.BuycaiOrder.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BuycaiOrder {
        return try Apiproto.BuycaiOrder.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.BuycaiOrder {
        return try Apiproto.BuycaiOrder.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BuycaiOrder {
        return try Apiproto.BuycaiOrder.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "lotteryId": return self.lotteryId
        case "issues": return self.issues
        case "sumMoney": return self.sumMoney
        case "cai": return self.cai
        case "balance": return self.balance
        case "schemeList": return self.schemeList
        case "ticketId": return self.ticketId
        case "isWinStop": return self.isWinStop
        default: return nil
        }
    }
}
extension Apiproto.BuycaiOrder.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "lotteryId": return self.lotteryId
            case "issues": return self.issues
            case "sumMoney": return self.sumMoney
            case "cai": return self.cai
            case "balance": return self.balance
            case "schemeList": return self.schemeList
            case "ticketId": return self.ticketId
            case "isWinStop": return self.isWinStop
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "lotteryId":
                guard let newSubscriptValue = newSubscriptValue as? Apiproto.LotteryId else {
                    return
                }
                self.lotteryId = newSubscriptValue
            case "issues":
                guard let newSubscriptValue = newSubscriptValue as? Array<Apiproto.IssueMultiple> else {
                    return
                }
                self.issues = newSubscriptValue
            case "sumMoney":
                guard let newSubscriptValue = newSubscriptValue as? Double else {
                    return
                }
                self.sumMoney = newSubscriptValue
            case "cai":
                guard let newSubscriptValue = newSubscriptValue as? Double else {
                    return
                }
                self.cai = newSubscriptValue
            case "balance":
                guard let newSubscriptValue = newSubscriptValue as? Double else {
                    return
                }
                self.balance = newSubscriptValue
            case "schemeList":
                guard let newSubscriptValue = newSubscriptValue as? Array<Apiproto.BuycaiScheme> else {
                    return
                }
                self.schemeList = newSubscriptValue
            case "ticketId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.ticketId = newSubscriptValue
            case "isWinStop":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.isWinStop = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.OnSellInfo: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.OnSellInfo> {
        var mergedArray = Array<Apiproto.OnSellInfo>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.OnSellInfo? {
        return try Apiproto.OnSellInfo.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.OnSellInfo {
        return try Apiproto.OnSellInfo.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.BuycaiRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.OnSellInfo {
        return try Apiproto.OnSellInfo.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.OnSellInfo {
        return try Apiproto.OnSellInfo.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.OnSellInfo {
        return try Apiproto.OnSellInfo.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.OnSellInfo {
        return try Apiproto.OnSellInfo.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.OnSellInfo {
        return try Apiproto.OnSellInfo.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "issue": return self.issue
        case "deadline": return self.deadline
        default: return nil
        }
    }
}
extension Apiproto.OnSellInfo.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "issue": return self.issue
            case "deadline": return self.deadline
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "issue":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.issue = newSubscriptValue
            case "deadline":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.deadline = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.ValidTicketsRequest: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.ValidTicketsRequest> {
        var mergedArray = Array<Apiproto.ValidTicketsRequest>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.ValidTicketsRequest? {
        return try Apiproto.ValidTicketsRequest.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.ValidTicketsRequest {
        return try Apiproto.ValidTicketsRequest.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.BuycaiRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.ValidTicketsRequest {
        return try Apiproto.ValidTicketsRequest.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.ValidTicketsRequest {
        return try Apiproto.ValidTicketsRequest.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.ValidTicketsRequest {
        return try Apiproto.ValidTicketsRequest.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.ValidTicketsRequest {
        return try Apiproto.ValidTicketsRequest.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.ValidTicketsRequest {
        return try Apiproto.ValidTicketsRequest.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "lotteryId": return self.lotteryId
        case "sumMoney": return self.sumMoney
        default: return nil
        }
    }
}
extension Apiproto.ValidTicketsRequest.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "lotteryId": return self.lotteryId
            case "sumMoney": return self.sumMoney
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "lotteryId":
                guard let newSubscriptValue = newSubscriptValue as? Apiproto.LotteryId else {
                    return
                }
                self.lotteryId = newSubscriptValue
            case "sumMoney":
                guard let newSubscriptValue = newSubscriptValue as? Double else {
                    return
                }
                self.sumMoney = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.SaleIssue: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.SaleIssue> {
        var mergedArray = Array<Apiproto.SaleIssue>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.SaleIssue? {
        return try Apiproto.SaleIssue.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.SaleIssue {
        return try Apiproto.SaleIssue.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.BuycaiRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.SaleIssue {
        return try Apiproto.SaleIssue.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.SaleIssue {
        return try Apiproto.SaleIssue.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.SaleIssue {
        return try Apiproto.SaleIssue.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.SaleIssue {
        return try Apiproto.SaleIssue.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.SaleIssue {
        return try Apiproto.SaleIssue.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "issue": return self.issue
        case "startTime": return self.startTime
        case "endTime": return self.endTime
        case "openTime": return self.openTime
        default: return nil
        }
    }
}
extension Apiproto.SaleIssue.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "issue": return self.issue
            case "startTime": return self.startTime
            case "endTime": return self.endTime
            case "openTime": return self.openTime
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "issue":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.issue = newSubscriptValue
            case "startTime":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.startTime = newSubscriptValue
            case "endTime":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.endTime = newSubscriptValue
            case "openTime":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.openTime = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.BuycaiInfo: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.BuycaiInfo> {
        var mergedArray = Array<Apiproto.BuycaiInfo>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.BuycaiInfo? {
        return try Apiproto.BuycaiInfo.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.BuycaiInfo {
        return try Apiproto.BuycaiInfo.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.BuycaiRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BuycaiInfo {
        return try Apiproto.BuycaiInfo.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.BuycaiInfo {
        return try Apiproto.BuycaiInfo.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BuycaiInfo {
        return try Apiproto.BuycaiInfo.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.BuycaiInfo {
        return try Apiproto.BuycaiInfo.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BuycaiInfo {
        return try Apiproto.BuycaiInfo.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "last": return self.last
        case "current": return self.current
        case "next": return self.next
        case "saleList": return self.saleList
        case "maxMultiple": return self.maxMultiple
        default: return nil
        }
    }
}
extension Apiproto.BuycaiInfo.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "last": return self.last
            case "current": return self.current
            case "next": return self.next
            case "saleList": return self.saleList
            case "maxMultiple": return self.maxMultiple
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "last":
                guard let newSubscriptValue = newSubscriptValue as? Apiproto.SaleIssue else {
                    return
                }
                self.last = newSubscriptValue
            case "current":
                guard let newSubscriptValue = newSubscriptValue as? Apiproto.SaleIssue else {
                    return
                }
                self.current = newSubscriptValue
            case "next":
                guard let newSubscriptValue = newSubscriptValue as? Apiproto.SaleIssue else {
                    return
                }
                self.next = newSubscriptValue
            case "saleList":
                guard let newSubscriptValue = newSubscriptValue as? Array<String> else {
                    return
                }
                self.saleList = newSubscriptValue
            case "maxMultiple":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.maxMultiple = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.VendorOrderHistoryRequest: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.VendorOrderHistoryRequest> {
        var mergedArray = Array<Apiproto.VendorOrderHistoryRequest>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.VendorOrderHistoryRequest? {
        return try Apiproto.VendorOrderHistoryRequest.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.VendorOrderHistoryRequest {
        return try Apiproto.VendorOrderHistoryRequest.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.BuycaiRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.VendorOrderHistoryRequest {
        return try Apiproto.VendorOrderHistoryRequest.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.VendorOrderHistoryRequest {
        return try Apiproto.VendorOrderHistoryRequest.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.VendorOrderHistoryRequest {
        return try Apiproto.VendorOrderHistoryRequest.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.VendorOrderHistoryRequest {
        return try Apiproto.VendorOrderHistoryRequest.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.VendorOrderHistoryRequest {
        return try Apiproto.VendorOrderHistoryRequest.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "lotteryId": return self.lotteryId
        case "range": return self.range
        case "status": return self.status
        case "page": return self.page
        default: return nil
        }
    }
}
extension Apiproto.VendorOrderHistoryRequest.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "lotteryId": return self.lotteryId
            case "range": return self.range
            case "status": return self.status
            case "page": return self.page
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "lotteryId":
                guard let newSubscriptValue = newSubscriptValue as? Apiproto.LotteryId else {
                    return
                }
                self.lotteryId = newSubscriptValue
            case "range":
                guard let newSubscriptValue = newSubscriptValue as? Apiproto.TimeRange else {
                    return
                }
                self.range = newSubscriptValue
            case "status":
                guard let newSubscriptValue = newSubscriptValue as? Apiproto.VendorOrderStatus else {
                    return
                }
                self.status = newSubscriptValue
            case "page":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.page = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.UserOrderHistoryRequest: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.UserOrderHistoryRequest> {
        var mergedArray = Array<Apiproto.UserOrderHistoryRequest>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.UserOrderHistoryRequest? {
        return try Apiproto.UserOrderHistoryRequest.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.UserOrderHistoryRequest {
        return try Apiproto.UserOrderHistoryRequest.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.BuycaiRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.UserOrderHistoryRequest {
        return try Apiproto.UserOrderHistoryRequest.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.UserOrderHistoryRequest {
        return try Apiproto.UserOrderHistoryRequest.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.UserOrderHistoryRequest {
        return try Apiproto.UserOrderHistoryRequest.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.UserOrderHistoryRequest {
        return try Apiproto.UserOrderHistoryRequest.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.UserOrderHistoryRequest {
        return try Apiproto.UserOrderHistoryRequest.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "lotteryId": return self.lotteryId
        case "range": return self.range
        case "status": return self.status
        case "type": return self.type
        case "page": return self.page
        default: return nil
        }
    }
}
extension Apiproto.UserOrderHistoryRequest.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "lotteryId": return self.lotteryId
            case "range": return self.range
            case "status": return self.status
            case "type": return self.type
            case "page": return self.page
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "lotteryId":
                guard let newSubscriptValue = newSubscriptValue as? Apiproto.LotteryId else {
                    return
                }
                self.lotteryId = newSubscriptValue
            case "range":
                guard let newSubscriptValue = newSubscriptValue as? Apiproto.TimeRange else {
                    return
                }
                self.range = newSubscriptValue
            case "status":
                guard let newSubscriptValue = newSubscriptValue as? Apiproto.UserOrderStatus else {
                    return
                }
                self.status = newSubscriptValue
            case "type":
                guard let newSubscriptValue = newSubscriptValue as? Apiproto.BuycaiOrderType else {
                    return
                }
                self.type = newSubscriptValue
            case "page":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.page = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.VendorOrderRecord: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.VendorOrderRecord> {
        var mergedArray = Array<Apiproto.VendorOrderRecord>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.VendorOrderRecord? {
        return try Apiproto.VendorOrderRecord.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.VendorOrderRecord {
        return try Apiproto.VendorOrderRecord.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.BuycaiRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.VendorOrderRecord {
        return try Apiproto.VendorOrderRecord.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.VendorOrderRecord {
        return try Apiproto.VendorOrderRecord.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.VendorOrderRecord {
        return try Apiproto.VendorOrderRecord.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.VendorOrderRecord {
        return try Apiproto.VendorOrderRecord.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.VendorOrderRecord {
        return try Apiproto.VendorOrderRecord.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "id": return self.id
        case "lotteryId": return self.lotteryId
        case "issue": return self.issue
        case "money": return self.money
        case "status": return self.status
        case "isChase": return self.isChase
        case "winMoney": return self.winMoney
        case "addTime": return self.addTime
        default: return nil
        }
    }
}
extension Apiproto.VendorOrderRecord.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "id": return self.id
            case "lotteryId": return self.lotteryId
            case "issue": return self.issue
            case "money": return self.money
            case "status": return self.status
            case "isChase": return self.isChase
            case "winMoney": return self.winMoney
            case "addTime": return self.addTime
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "id":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.id = newSubscriptValue
            case "lotteryId":
                guard let newSubscriptValue = newSubscriptValue as? Apiproto.LotteryId else {
                    return
                }
                self.lotteryId = newSubscriptValue
            case "issue":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.issue = newSubscriptValue
            case "money":
                guard let newSubscriptValue = newSubscriptValue as? Double else {
                    return
                }
                self.money = newSubscriptValue
            case "status":
                guard let newSubscriptValue = newSubscriptValue as? Apiproto.VendorOrderStatus else {
                    return
                }
                self.status = newSubscriptValue
            case "isChase":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.isChase = newSubscriptValue
            case "winMoney":
                guard let newSubscriptValue = newSubscriptValue as? Double else {
                    return
                }
                self.winMoney = newSubscriptValue
            case "addTime":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.addTime = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.UserOrderRecord: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.UserOrderRecord> {
        var mergedArray = Array<Apiproto.UserOrderRecord>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.UserOrderRecord? {
        return try Apiproto.UserOrderRecord.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.UserOrderRecord {
        return try Apiproto.UserOrderRecord.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.BuycaiRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.UserOrderRecord {
        return try Apiproto.UserOrderRecord.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.UserOrderRecord {
        return try Apiproto.UserOrderRecord.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.UserOrderRecord {
        return try Apiproto.UserOrderRecord.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.UserOrderRecord {
        return try Apiproto.UserOrderRecord.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.UserOrderRecord {
        return try Apiproto.UserOrderRecord.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "id": return self.id
        case "lotteryId": return self.lotteryId
        case "money": return self.money
        case "status": return self.status
        case "issueNum": return self.issueNum
        case "chaseNo": return self.chaseNo
        case "winMoney": return self.winMoney
        case "addTime": return self.addTime
        case "curIssue": return self.curIssue
        default: return nil
        }
    }
}
extension Apiproto.UserOrderRecord.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "id": return self.id
            case "lotteryId": return self.lotteryId
            case "money": return self.money
            case "status": return self.status
            case "issueNum": return self.issueNum
            case "chaseNo": return self.chaseNo
            case "winMoney": return self.winMoney
            case "addTime": return self.addTime
            case "curIssue": return self.curIssue
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "id":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.id = newSubscriptValue
            case "lotteryId":
                guard let newSubscriptValue = newSubscriptValue as? Apiproto.LotteryId else {
                    return
                }
                self.lotteryId = newSubscriptValue
            case "money":
                guard let newSubscriptValue = newSubscriptValue as? Double else {
                    return
                }
                self.money = newSubscriptValue
            case "status":
                guard let newSubscriptValue = newSubscriptValue as? Apiproto.UserOrderStatus else {
                    return
                }
                self.status = newSubscriptValue
            case "issueNum":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.issueNum = newSubscriptValue
            case "chaseNo":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.chaseNo = newSubscriptValue
            case "winMoney":
                guard let newSubscriptValue = newSubscriptValue as? Double else {
                    return
                }
                self.winMoney = newSubscriptValue
            case "addTime":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.addTime = newSubscriptValue
            case "curIssue":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.curIssue = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.VendorOrderHistory: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.VendorOrderHistory> {
        var mergedArray = Array<Apiproto.VendorOrderHistory>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.VendorOrderHistory? {
        return try Apiproto.VendorOrderHistory.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.VendorOrderHistory {
        return try Apiproto.VendorOrderHistory.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.BuycaiRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.VendorOrderHistory {
        return try Apiproto.VendorOrderHistory.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.VendorOrderHistory {
        return try Apiproto.VendorOrderHistory.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.VendorOrderHistory {
        return try Apiproto.VendorOrderHistory.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.VendorOrderHistory {
        return try Apiproto.VendorOrderHistory.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.VendorOrderHistory {
        return try Apiproto.VendorOrderHistory.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "list": return self.list
        case "pageSize": return self.pageSize
        default: return nil
        }
    }
}
extension Apiproto.VendorOrderHistory.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "list": return self.list
            case "pageSize": return self.pageSize
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "list":
                guard let newSubscriptValue = newSubscriptValue as? Array<Apiproto.VendorOrderRecord> else {
                    return
                }
                self.list = newSubscriptValue
            case "pageSize":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.pageSize = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.UserOrderHistory: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.UserOrderHistory> {
        var mergedArray = Array<Apiproto.UserOrderHistory>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.UserOrderHistory? {
        return try Apiproto.UserOrderHistory.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.UserOrderHistory {
        return try Apiproto.UserOrderHistory.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.BuycaiRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.UserOrderHistory {
        return try Apiproto.UserOrderHistory.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.UserOrderHistory {
        return try Apiproto.UserOrderHistory.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.UserOrderHistory {
        return try Apiproto.UserOrderHistory.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.UserOrderHistory {
        return try Apiproto.UserOrderHistory.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.UserOrderHistory {
        return try Apiproto.UserOrderHistory.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "list": return self.list
        case "pageSize": return self.pageSize
        default: return nil
        }
    }
}
extension Apiproto.UserOrderHistory.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "list": return self.list
            case "pageSize": return self.pageSize
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "list":
                guard let newSubscriptValue = newSubscriptValue as? Array<Apiproto.UserOrderRecord> else {
                    return
                }
                self.list = newSubscriptValue
            case "pageSize":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.pageSize = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.BuycaiIssueInfo: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.BuycaiIssueInfo> {
        var mergedArray = Array<Apiproto.BuycaiIssueInfo>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.BuycaiIssueInfo? {
        return try Apiproto.BuycaiIssueInfo.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.BuycaiIssueInfo {
        return try Apiproto.BuycaiIssueInfo.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.BuycaiRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BuycaiIssueInfo {
        return try Apiproto.BuycaiIssueInfo.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.BuycaiIssueInfo {
        return try Apiproto.BuycaiIssueInfo.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BuycaiIssueInfo {
        return try Apiproto.BuycaiIssueInfo.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.BuycaiIssueInfo {
        return try Apiproto.BuycaiIssueInfo.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BuycaiIssueInfo {
        return try Apiproto.BuycaiIssueInfo.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "issue": return self.issue
        case "multiple": return self.multiple
        case "money": return self.money
        case "winMoney": return self.winMoney
        case "status": return self.status
        case "chaseNo": return self.chaseNo
        case "vendorOrderId": return self.vendorOrderId
        default: return nil
        }
    }
}
extension Apiproto.BuycaiIssueInfo.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "issue": return self.issue
            case "multiple": return self.multiple
            case "money": return self.money
            case "winMoney": return self.winMoney
            case "status": return self.status
            case "chaseNo": return self.chaseNo
            case "vendorOrderId": return self.vendorOrderId
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "issue":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.issue = newSubscriptValue
            case "multiple":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.multiple = newSubscriptValue
            case "money":
                guard let newSubscriptValue = newSubscriptValue as? Double else {
                    return
                }
                self.money = newSubscriptValue
            case "winMoney":
                guard let newSubscriptValue = newSubscriptValue as? Double else {
                    return
                }
                self.winMoney = newSubscriptValue
            case "status":
                guard let newSubscriptValue = newSubscriptValue as? Apiproto.VendorOrderStatus else {
                    return
                }
                self.status = newSubscriptValue
            case "chaseNo":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.chaseNo = newSubscriptValue
            case "vendorOrderId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.vendorOrderId = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.BuycaiUserOrder: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.BuycaiUserOrder> {
        var mergedArray = Array<Apiproto.BuycaiUserOrder>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.BuycaiUserOrder? {
        return try Apiproto.BuycaiUserOrder.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.BuycaiUserOrder {
        return try Apiproto.BuycaiUserOrder.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.BuycaiRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BuycaiUserOrder {
        return try Apiproto.BuycaiUserOrder.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.BuycaiUserOrder {
        return try Apiproto.BuycaiUserOrder.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BuycaiUserOrder {
        return try Apiproto.BuycaiUserOrder.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.BuycaiUserOrder {
        return try Apiproto.BuycaiUserOrder.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BuycaiUserOrder {
        return try Apiproto.BuycaiUserOrder.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "id": return self.id
        case "lotteryId": return self.lotteryId
        case "sumMoney": return self.sumMoney
        case "status": return self.status
        case "orderTime": return self.orderTime
        case "ticketSubMoney": return self.ticketSubMoney
        case "totalWinMoney": return self.totalWinMoney
        case "sumNum": return self.sumNum
        case "issueNum": return self.issueNum
        case "chaseNo": return self.chaseNo
        case "curIssue": return self.curIssue
        case "schemeList": return self.schemeList
        case "issueList": return self.issueList
        case "orderType": return self.orderType
        case "userOrderNo": return self.userOrderNo
        default: return nil
        }
    }
}
extension Apiproto.BuycaiUserOrder.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "id": return self.id
            case "lotteryId": return self.lotteryId
            case "sumMoney": return self.sumMoney
            case "status": return self.status
            case "orderTime": return self.orderTime
            case "ticketSubMoney": return self.ticketSubMoney
            case "totalWinMoney": return self.totalWinMoney
            case "sumNum": return self.sumNum
            case "issueNum": return self.issueNum
            case "chaseNo": return self.chaseNo
            case "curIssue": return self.curIssue
            case "schemeList": return self.schemeList
            case "issueList": return self.issueList
            case "orderType": return self.orderType
            case "userOrderNo": return self.userOrderNo
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "id":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.id = newSubscriptValue
            case "lotteryId":
                guard let newSubscriptValue = newSubscriptValue as? Apiproto.LotteryId else {
                    return
                }
                self.lotteryId = newSubscriptValue
            case "sumMoney":
                guard let newSubscriptValue = newSubscriptValue as? Double else {
                    return
                }
                self.sumMoney = newSubscriptValue
            case "status":
                guard let newSubscriptValue = newSubscriptValue as? Apiproto.UserOrderStatus else {
                    return
                }
                self.status = newSubscriptValue
            case "orderTime":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.orderTime = newSubscriptValue
            case "ticketSubMoney":
                guard let newSubscriptValue = newSubscriptValue as? Double else {
                    return
                }
                self.ticketSubMoney = newSubscriptValue
            case "totalWinMoney":
                guard let newSubscriptValue = newSubscriptValue as? Double else {
                    return
                }
                self.totalWinMoney = newSubscriptValue
            case "sumNum":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.sumNum = newSubscriptValue
            case "issueNum":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.issueNum = newSubscriptValue
            case "chaseNo":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.chaseNo = newSubscriptValue
            case "curIssue":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.curIssue = newSubscriptValue
            case "schemeList":
                guard let newSubscriptValue = newSubscriptValue as? Array<Apiproto.BuycaiScheme> else {
                    return
                }
                self.schemeList = newSubscriptValue
            case "issueList":
                guard let newSubscriptValue = newSubscriptValue as? Array<Apiproto.BuycaiIssueInfo> else {
                    return
                }
                self.issueList = newSubscriptValue
            case "orderType":
                guard let newSubscriptValue = newSubscriptValue as? Apiproto.BuycaiOrderType else {
                    return
                }
                self.orderType = newSubscriptValue
            case "userOrderNo":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.userOrderNo = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.BuycaiVendorOrder: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.BuycaiVendorOrder> {
        var mergedArray = Array<Apiproto.BuycaiVendorOrder>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.BuycaiVendorOrder? {
        return try Apiproto.BuycaiVendorOrder.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.BuycaiVendorOrder {
        return try Apiproto.BuycaiVendorOrder.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.BuycaiRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BuycaiVendorOrder {
        return try Apiproto.BuycaiVendorOrder.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.BuycaiVendorOrder {
        return try Apiproto.BuycaiVendorOrder.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BuycaiVendorOrder {
        return try Apiproto.BuycaiVendorOrder.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.BuycaiVendorOrder {
        return try Apiproto.BuycaiVendorOrder.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.BuycaiVendorOrder {
        return try Apiproto.BuycaiVendorOrder.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "id": return self.id
        case "lotteryId": return self.lotteryId
        case "status": return self.status
        case "openTime": return self.openTime
        case "openBalls": return self.openBalls
        case "multiple": return self.multiple
        case "money": return self.money
        case "sumNum": return self.sumNum
        case "winMoney": return self.winMoney
        case "schemeList": return self.schemeList
        case "userOrderNo": return self.userOrderNo
        case "userOrderId": return self.userOrderId
        case "orderTime": return self.orderTime
        case "reqTime": return self.reqTime
        case "respTime": return self.respTime
        case "curIssue": return self.curIssue
        default: return nil
        }
    }
}
extension Apiproto.BuycaiVendorOrder.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "id": return self.id
            case "lotteryId": return self.lotteryId
            case "status": return self.status
            case "openTime": return self.openTime
            case "openBalls": return self.openBalls
            case "multiple": return self.multiple
            case "money": return self.money
            case "sumNum": return self.sumNum
            case "winMoney": return self.winMoney
            case "schemeList": return self.schemeList
            case "userOrderNo": return self.userOrderNo
            case "userOrderId": return self.userOrderId
            case "orderTime": return self.orderTime
            case "reqTime": return self.reqTime
            case "respTime": return self.respTime
            case "curIssue": return self.curIssue
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "id":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.id = newSubscriptValue
            case "lotteryId":
                guard let newSubscriptValue = newSubscriptValue as? Apiproto.LotteryId else {
                    return
                }
                self.lotteryId = newSubscriptValue
            case "status":
                guard let newSubscriptValue = newSubscriptValue as? Apiproto.VendorOrderStatus else {
                    return
                }
                self.status = newSubscriptValue
            case "openTime":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.openTime = newSubscriptValue
            case "openBalls":
                guard let newSubscriptValue = newSubscriptValue as? Array<String> else {
                    return
                }
                self.openBalls = newSubscriptValue
            case "multiple":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.multiple = newSubscriptValue
            case "money":
                guard let newSubscriptValue = newSubscriptValue as? Double else {
                    return
                }
                self.money = newSubscriptValue
            case "sumNum":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.sumNum = newSubscriptValue
            case "winMoney":
                guard let newSubscriptValue = newSubscriptValue as? Double else {
                    return
                }
                self.winMoney = newSubscriptValue
            case "schemeList":
                guard let newSubscriptValue = newSubscriptValue as? Array<Apiproto.BuycaiScheme> else {
                    return
                }
                self.schemeList = newSubscriptValue
            case "userOrderNo":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.userOrderNo = newSubscriptValue
            case "userOrderId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.userOrderId = newSubscriptValue
            case "orderTime":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.orderTime = newSubscriptValue
            case "reqTime":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.reqTime = newSubscriptValue
            case "respTime":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.respTime = newSubscriptValue
            case "curIssue":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.curIssue = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
