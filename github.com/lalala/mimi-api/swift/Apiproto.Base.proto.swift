/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "base.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public extension Apiproto{}

public extension Apiproto {
    public struct BaseRoot {
        public static let `default` = BaseRoot()
        public var extensionRegistry:ExtensionRegistry

        init() {
            extensionRegistry = ExtensionRegistry()
            registerAllExtensions(registry: extensionRegistry)
            Apiproto.ErrorRoot.default.registerAllExtensions(registry: extensionRegistry)
        }
        public func registerAllExtensions(registry: ExtensionRegistry) {
        }
    }

    final public class Nil : GeneratedMessage {

        public static func == (lhs: Apiproto.Nil, rhs: Apiproto.Nil) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.Nil.Builder {
            return Apiproto.Nil.classBuilder() as! Apiproto.Nil.Builder
        }
        public func getBuilder() -> Apiproto.Nil.Builder {
            return classBuilder() as! Apiproto.Nil.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.Nil.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.Nil.Builder()
        }
        public func toBuilder() throws -> Apiproto.Nil.Builder {
            return try Apiproto.Nil.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.Nil) throws -> Apiproto.Nil.Builder {
            return try Apiproto.Nil.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            let jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.Nil {
            return try Apiproto.Nil.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.Nil {
            return try Apiproto.Nil.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.Nil"
        }
        override public func className() -> String {
            return "Apiproto.Nil"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.Nil = Apiproto.Nil()
            public func getMessage() -> Apiproto.Nil {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.Nil.Builder {
                builderResult = Apiproto.Nil()
                return self
            }
            override public func clone() throws -> Apiproto.Nil.Builder {
                return try Apiproto.Nil.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.Nil {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.Nil {
                let returnMe:Apiproto.Nil = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.Nil) throws -> Apiproto.Nil.Builder {
                if other == Apiproto.Nil() {
                    return self
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.Nil.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.Nil.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.Nil.Builder {
                let resultDecodedBuilder = Apiproto.Nil.Builder()
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.Nil.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.Nil.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class StringList : GeneratedMessage {

        public static func == (lhs: Apiproto.StringList, rhs: Apiproto.StringList) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.list == rhs.list)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var list:Array<String> = Array<String>()
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if !list.isEmpty {
                for oneValuelist in list {
                    try codedOutputStream.writeString(fieldNumber: 1, value:oneValuelist)
                }
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            var dataSizeList:Int32 = 0
            for oneValuelist in list {
                dataSizeList += oneValuelist.computeStringSizeNoTag()
            }
            serialize_size += dataSizeList
            serialize_size += 1 * Int32(list.count)
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.StringList.Builder {
            return Apiproto.StringList.classBuilder() as! Apiproto.StringList.Builder
        }
        public func getBuilder() -> Apiproto.StringList.Builder {
            return classBuilder() as! Apiproto.StringList.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.StringList.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.StringList.Builder()
        }
        public func toBuilder() throws -> Apiproto.StringList.Builder {
            return try Apiproto.StringList.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.StringList) throws -> Apiproto.StringList.Builder {
            return try Apiproto.StringList.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if !list.isEmpty {
                var jsonArrayList:Array<String> = []
                for oneValueList in list {
                    jsonArrayList.append(oneValueList)
                }
                jsonMap["list"] = jsonArrayList
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.StringList {
            return try Apiproto.StringList.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.StringList {
            return try Apiproto.StringList.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            var listElementIndex:Int = 0
            for oneValueList in list  {
                output += "\(indent) list[\(listElementIndex)]: \(oneValueList)\n"
                listElementIndex += 1
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                for oneValueList in list {
                    hashCode = (hashCode &* 31) &+ oneValueList.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.StringList"
        }
        override public func className() -> String {
            return "Apiproto.StringList"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.StringList = Apiproto.StringList()
            public func getMessage() -> Apiproto.StringList {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var list:Array<String> {
                get {
                    return builderResult.list
                }
                set (array) {
                    builderResult.list = array
                }
            }
            @discardableResult
            public func setList(_ value:Array<String>) -> Apiproto.StringList.Builder {
                self.list = value
                return self
            }
            @discardableResult
            public func clearList() -> Apiproto.StringList.Builder {
                builderResult.list.removeAll(keepingCapacity: false)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.StringList.Builder {
                builderResult = Apiproto.StringList()
                return self
            }
            override public func clone() throws -> Apiproto.StringList.Builder {
                return try Apiproto.StringList.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.StringList {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.StringList {
                let returnMe:Apiproto.StringList = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.StringList) throws -> Apiproto.StringList.Builder {
                if other == Apiproto.StringList() {
                    return self
                }
                if !other.list.isEmpty {
                    builderResult.list += other.list
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.StringList.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.StringList.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        list += [try codedInputStream.readString()]

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.StringList.Builder {
                let resultDecodedBuilder = Apiproto.StringList.Builder()
                if let jsonValueList = jsonMap["list"] as? Array<String> {
                    var jsonArrayList:Array<String> = []
                    for oneValueList in jsonValueList {
                        jsonArrayList.append(oneValueList)
                    }
                    resultDecodedBuilder.list = jsonArrayList
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.StringList.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.StringList.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class IntValue : GeneratedMessage {

        public static func == (lhs: Apiproto.IntValue, rhs: Apiproto.IntValue) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasValue == rhs.hasValue) && (!lhs.hasValue || lhs.value == rhs.value)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var value:Int64 = Int64(0)
        public fileprivate(set) var hasValue:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasValue {
                try codedOutputStream.writeInt64(fieldNumber: 1, value:value)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasValue {
                serialize_size += value.computeInt64Size(fieldNumber: 1)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.IntValue.Builder {
            return Apiproto.IntValue.classBuilder() as! Apiproto.IntValue.Builder
        }
        public func getBuilder() -> Apiproto.IntValue.Builder {
            return classBuilder() as! Apiproto.IntValue.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.IntValue.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.IntValue.Builder()
        }
        public func toBuilder() throws -> Apiproto.IntValue.Builder {
            return try Apiproto.IntValue.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.IntValue) throws -> Apiproto.IntValue.Builder {
            return try Apiproto.IntValue.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasValue {
                jsonMap["value"] = "\(value)"
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.IntValue {
            return try Apiproto.IntValue.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.IntValue {
            return try Apiproto.IntValue.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasValue {
                output += "\(indent) value: \(value) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasValue {
                    hashCode = (hashCode &* 31) &+ value.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.IntValue"
        }
        override public func className() -> String {
            return "Apiproto.IntValue"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.IntValue = Apiproto.IntValue()
            public func getMessage() -> Apiproto.IntValue {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var value:Int64 {
                get {
                    return builderResult.value
                }
                set (value) {
                    builderResult.hasValue = true
                    builderResult.value = value
                }
            }
            public var hasValue:Bool {
                get {
                    return builderResult.hasValue
                }
            }
            @discardableResult
            public func setValue(_ value:Int64) -> Apiproto.IntValue.Builder {
                self.value = value
                return self
            }
            @discardableResult
            public func clearValue() -> Apiproto.IntValue.Builder{
                builderResult.hasValue = false
                builderResult.value = Int64(0)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.IntValue.Builder {
                builderResult = Apiproto.IntValue()
                return self
            }
            override public func clone() throws -> Apiproto.IntValue.Builder {
                return try Apiproto.IntValue.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.IntValue {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.IntValue {
                let returnMe:Apiproto.IntValue = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.IntValue) throws -> Apiproto.IntValue.Builder {
                if other == Apiproto.IntValue() {
                    return self
                }
                if other.hasValue {
                    value = other.value
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.IntValue.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.IntValue.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        value = try codedInputStream.readInt64()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.IntValue.Builder {
                let resultDecodedBuilder = Apiproto.IntValue.Builder()
                if let jsonValueValue = jsonMap["value"] as? String {
                    resultDecodedBuilder.value = Int64(jsonValueValue)!
                } else if let jsonValueValue = jsonMap["value"] as? Int {
                    resultDecodedBuilder.value = Int64(jsonValueValue)
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.IntValue.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.IntValue.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class StringValue : GeneratedMessage {

        public static func == (lhs: Apiproto.StringValue, rhs: Apiproto.StringValue) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasValue == rhs.hasValue) && (!lhs.hasValue || lhs.value == rhs.value)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var value:String = ""
        public fileprivate(set) var hasValue:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasValue {
                try codedOutputStream.writeString(fieldNumber: 1, value:value)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasValue {
                serialize_size += value.computeStringSize(fieldNumber: 1)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.StringValue.Builder {
            return Apiproto.StringValue.classBuilder() as! Apiproto.StringValue.Builder
        }
        public func getBuilder() -> Apiproto.StringValue.Builder {
            return classBuilder() as! Apiproto.StringValue.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.StringValue.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.StringValue.Builder()
        }
        public func toBuilder() throws -> Apiproto.StringValue.Builder {
            return try Apiproto.StringValue.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.StringValue) throws -> Apiproto.StringValue.Builder {
            return try Apiproto.StringValue.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasValue {
                jsonMap["value"] = value
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.StringValue {
            return try Apiproto.StringValue.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.StringValue {
            return try Apiproto.StringValue.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasValue {
                output += "\(indent) value: \(value) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasValue {
                    hashCode = (hashCode &* 31) &+ value.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.StringValue"
        }
        override public func className() -> String {
            return "Apiproto.StringValue"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.StringValue = Apiproto.StringValue()
            public func getMessage() -> Apiproto.StringValue {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var value:String {
                get {
                    return builderResult.value
                }
                set (value) {
                    builderResult.hasValue = true
                    builderResult.value = value
                }
            }
            public var hasValue:Bool {
                get {
                    return builderResult.hasValue
                }
            }
            @discardableResult
            public func setValue(_ value:String) -> Apiproto.StringValue.Builder {
                self.value = value
                return self
            }
            @discardableResult
            public func clearValue() -> Apiproto.StringValue.Builder{
                builderResult.hasValue = false
                builderResult.value = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.StringValue.Builder {
                builderResult = Apiproto.StringValue()
                return self
            }
            override public func clone() throws -> Apiproto.StringValue.Builder {
                return try Apiproto.StringValue.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.StringValue {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.StringValue {
                let returnMe:Apiproto.StringValue = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.StringValue) throws -> Apiproto.StringValue.Builder {
                if other == Apiproto.StringValue() {
                    return self
                }
                if other.hasValue {
                    value = other.value
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.StringValue.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.StringValue.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        value = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.StringValue.Builder {
                let resultDecodedBuilder = Apiproto.StringValue.Builder()
                if let jsonValueValue = jsonMap["value"] as? String {
                    resultDecodedBuilder.value = jsonValueValue
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.StringValue.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.StringValue.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class Response : GeneratedMessage {

        public static func == (lhs: Apiproto.Response, rhs: Apiproto.Response) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasCode == rhs.hasCode) && (!lhs.hasCode || lhs.code == rhs.code)
            fieldCheck = fieldCheck && (lhs.hasDesc == rhs.hasDesc) && (!lhs.hasDesc || lhs.desc == rhs.desc)
            fieldCheck = fieldCheck && (lhs.hasApi == rhs.hasApi) && (!lhs.hasApi || lhs.api == rhs.api)
            fieldCheck = fieldCheck && (lhs.hasResult == rhs.hasResult) && (!lhs.hasResult || lhs.result == rhs.result)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var code:Apiproto.RespCode = Apiproto.RespCode.success
        public fileprivate(set) var hasCode:Bool = false
        /// 状态描述
        public fileprivate(set) var desc:String = ""
        public fileprivate(set) var hasDesc:Bool = false

        /// 接口URI
        public fileprivate(set) var api:String = ""
        public fileprivate(set) var hasApi:Bool = false

        /// 执行结果
        public fileprivate(set) var result:Data = Data()
        public fileprivate(set) var hasResult:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasCode {
                try codedOutputStream.writeEnum(fieldNumber: 1, value:code.rawValue)
            }
            if hasDesc {
                try codedOutputStream.writeString(fieldNumber: 2, value:desc)
            }
            if hasApi {
                try codedOutputStream.writeString(fieldNumber: 3, value:api)
            }
            if hasResult {
                try codedOutputStream.writeData(fieldNumber: 4, value:result)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if (hasCode) {
                serialize_size += code.rawValue.computeEnumSize(fieldNumber: 1)
            }
            if hasDesc {
                serialize_size += desc.computeStringSize(fieldNumber: 2)
            }
            if hasApi {
                serialize_size += api.computeStringSize(fieldNumber: 3)
            }
            if hasResult {
                serialize_size += result.computeDataSize(fieldNumber: 4)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Apiproto.Response.Builder {
            return Apiproto.Response.classBuilder() as! Apiproto.Response.Builder
        }
        public func getBuilder() -> Apiproto.Response.Builder {
            return classBuilder() as! Apiproto.Response.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.Response.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Apiproto.Response.Builder()
        }
        public func toBuilder() throws -> Apiproto.Response.Builder {
            return try Apiproto.Response.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Apiproto.Response) throws -> Apiproto.Response.Builder {
            return try Apiproto.Response.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasCode {
                jsonMap["code"] = code.toString()
            }
            if hasDesc {
                jsonMap["desc"] = desc
            }
            if hasApi {
                jsonMap["api"] = api
            }
            if hasResult {
                jsonMap["result"] = result.base64EncodedString(options: Data.Base64EncodingOptions(rawValue: 0))
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Apiproto.Response {
            return try Apiproto.Response.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Apiproto.Response {
            return try Apiproto.Response.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if (hasCode) {
                output += "\(indent) code: \(code.description)\n"
            }
            if hasDesc {
                output += "\(indent) desc: \(desc) \n"
            }
            if hasApi {
                output += "\(indent) api: \(api) \n"
            }
            if hasResult {
                output += "\(indent) result: \(result) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasCode {
                     hashCode = (hashCode &* 31) &+ code.hashValue
                }
                if hasDesc {
                    hashCode = (hashCode &* 31) &+ desc.hashValue
                }
                if hasApi {
                    hashCode = (hashCode &* 31) &+ api.hashValue
                }
                if hasResult {
                    hashCode = (hashCode &* 31) &+ result.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Apiproto.Response"
        }
        override public func className() -> String {
            return "Apiproto.Response"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Apiproto.Response = Apiproto.Response()
            public func getMessage() -> Apiproto.Response {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            /// 执行状态码(见error.proto)
                public var code:Apiproto.RespCode {
                    get {
                        return builderResult.code
                    }
                    set (value) {
                        builderResult.hasCode = true
                        builderResult.code = value
                    }
                }
                public var hasCode:Bool{
                    get {
                        return builderResult.hasCode
                    }
                }
            @discardableResult
                public func setCode(_ value:Apiproto.RespCode) -> Apiproto.Response.Builder {
                  self.code = value
                  return self
                }
            @discardableResult
                public func clearCode() -> Apiproto.Response.Builder {
                   builderResult.hasCode = false
                   builderResult.code = .success
                   return self
                }
            /// 状态描述
            public var desc:String {
                get {
                    return builderResult.desc
                }
                set (value) {
                    builderResult.hasDesc = true
                    builderResult.desc = value
                }
            }
            public var hasDesc:Bool {
                get {
                    return builderResult.hasDesc
                }
            }
            @discardableResult
            public func setDesc(_ value:String) -> Apiproto.Response.Builder {
                self.desc = value
                return self
            }
            @discardableResult
            public func clearDesc() -> Apiproto.Response.Builder{
                builderResult.hasDesc = false
                builderResult.desc = ""
                return self
            }
            /// 接口URI
            public var api:String {
                get {
                    return builderResult.api
                }
                set (value) {
                    builderResult.hasApi = true
                    builderResult.api = value
                }
            }
            public var hasApi:Bool {
                get {
                    return builderResult.hasApi
                }
            }
            @discardableResult
            public func setApi(_ value:String) -> Apiproto.Response.Builder {
                self.api = value
                return self
            }
            @discardableResult
            public func clearApi() -> Apiproto.Response.Builder{
                builderResult.hasApi = false
                builderResult.api = ""
                return self
            }
            /// 执行结果
            public var result:Data {
                get {
                    return builderResult.result
                }
                set (value) {
                    builderResult.hasResult = true
                    builderResult.result = value
                }
            }
            public var hasResult:Bool {
                get {
                    return builderResult.hasResult
                }
            }
            @discardableResult
            public func setResult(_ value:Data) -> Apiproto.Response.Builder {
                self.result = value
                return self
            }
            @discardableResult
            public func clearResult() -> Apiproto.Response.Builder{
                builderResult.hasResult = false
                builderResult.result = Data()
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Apiproto.Response.Builder {
                builderResult = Apiproto.Response()
                return self
            }
            override public func clone() throws -> Apiproto.Response.Builder {
                return try Apiproto.Response.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Apiproto.Response {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Apiproto.Response {
                let returnMe:Apiproto.Response = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Apiproto.Response) throws -> Apiproto.Response.Builder {
                if other == Apiproto.Response() {
                    return self
                }
                if other.hasCode {
                    code = other.code
                }
                if other.hasDesc {
                    desc = other.desc
                }
                if other.hasApi {
                    api = other.api
                }
                if other.hasResult {
                    result = other.result
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Apiproto.Response.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.Response.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        let valueIntcode = try codedInputStream.readEnum()
                        if let enumscode = Apiproto.RespCode(rawValue:valueIntcode){
                            code = enumscode
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 1, value:Int64(valueIntcode))
                        }

                    case 18:
                        desc = try codedInputStream.readString()

                    case 26:
                        api = try codedInputStream.readString()

                    case 34:
                        result = try codedInputStream.readData()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Apiproto.Response.Builder {
                let resultDecodedBuilder = Apiproto.Response.Builder()
                if let jsonValueCode = jsonMap["code"] as? String {
                    resultDecodedBuilder.code = try Apiproto.RespCode.fromString(str: jsonValueCode)
                }
                if let jsonValueDesc = jsonMap["desc"] as? String {
                    resultDecodedBuilder.desc = jsonValueDesc
                }
                if let jsonValueApi = jsonMap["api"] as? String {
                    resultDecodedBuilder.api = jsonValueApi
                }
                if let jsonValueResult = jsonMap["result"] as? String {
                    resultDecodedBuilder.result = Data(base64Encoded:jsonValueResult, options: Data.Base64DecodingOptions(rawValue:0))!
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Apiproto.Response.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Apiproto.Response.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

}
extension Apiproto.Nil: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.Nil> {
        var mergedArray = Array<Apiproto.Nil>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.Nil? {
        return try Apiproto.Nil.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.Nil {
        return try Apiproto.Nil.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.BaseRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.Nil {
        return try Apiproto.Nil.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.Nil {
        return try Apiproto.Nil.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.Nil {
        return try Apiproto.Nil.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.Nil {
        return try Apiproto.Nil.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.Nil {
        return try Apiproto.Nil.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        return nil
    }
}
extension Apiproto.Nil.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { return nil }
        set { }
    }
}
extension Apiproto.StringList: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.StringList> {
        var mergedArray = Array<Apiproto.StringList>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.StringList? {
        return try Apiproto.StringList.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.StringList {
        return try Apiproto.StringList.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.BaseRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.StringList {
        return try Apiproto.StringList.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.StringList {
        return try Apiproto.StringList.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.StringList {
        return try Apiproto.StringList.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.StringList {
        return try Apiproto.StringList.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.StringList {
        return try Apiproto.StringList.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "list": return self.list
        default: return nil
        }
    }
}
extension Apiproto.StringList.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "list": return self.list
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "list":
                guard let newSubscriptValue = newSubscriptValue as? Array<String> else {
                    return
                }
                self.list = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.IntValue: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.IntValue> {
        var mergedArray = Array<Apiproto.IntValue>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.IntValue? {
        return try Apiproto.IntValue.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.IntValue {
        return try Apiproto.IntValue.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.BaseRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.IntValue {
        return try Apiproto.IntValue.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.IntValue {
        return try Apiproto.IntValue.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.IntValue {
        return try Apiproto.IntValue.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.IntValue {
        return try Apiproto.IntValue.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.IntValue {
        return try Apiproto.IntValue.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "value": return self.value
        default: return nil
        }
    }
}
extension Apiproto.IntValue.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "value": return self.value
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "value":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.value = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.StringValue: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.StringValue> {
        var mergedArray = Array<Apiproto.StringValue>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.StringValue? {
        return try Apiproto.StringValue.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.StringValue {
        return try Apiproto.StringValue.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.BaseRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.StringValue {
        return try Apiproto.StringValue.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.StringValue {
        return try Apiproto.StringValue.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.StringValue {
        return try Apiproto.StringValue.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.StringValue {
        return try Apiproto.StringValue.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.StringValue {
        return try Apiproto.StringValue.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "value": return self.value
        default: return nil
        }
    }
}
extension Apiproto.StringValue.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "value": return self.value
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "value":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.value = newSubscriptValue
            default: return
            }
        }
    }
}
extension Apiproto.Response: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Apiproto.Response> {
        var mergedArray = Array<Apiproto.Response>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Apiproto.Response? {
        return try Apiproto.Response.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Apiproto.Response {
        return try Apiproto.Response.Builder().mergeFrom(data: data, extensionRegistry:Apiproto.BaseRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Apiproto.Response {
        return try Apiproto.Response.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Apiproto.Response {
        return try Apiproto.Response.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.Response {
        return try Apiproto.Response.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Apiproto.Response {
        return try Apiproto.Response.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Apiproto.Response {
        return try Apiproto.Response.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "code": return self.code
        case "desc": return self.desc
        case "api": return self.api
        case "result": return self.result
        default: return nil
        }
    }
}
extension Apiproto.Response.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "code": return self.code
            case "desc": return self.desc
            case "api": return self.api
            case "result": return self.result
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "code":
                guard let newSubscriptValue = newSubscriptValue as? Apiproto.RespCode else {
                    return
                }
                self.code = newSubscriptValue
            case "desc":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.desc = newSubscriptValue
            case "api":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.api = newSubscriptValue
            case "result":
                guard let newSubscriptValue = newSubscriptValue as? Data else {
                    return
                }
                self.result = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
