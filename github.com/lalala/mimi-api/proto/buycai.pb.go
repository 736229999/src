// Code generated by protoc-gen-go. DO NOT EDIT.
// source: buycai.proto

package apiproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type BuycaiOrderType int32

const (
	BuycaiOrderType_Normal BuycaiOrderType = 0
	BuycaiOrderType_Chase  BuycaiOrderType = 1
	BuycaiOrderType_Union  BuycaiOrderType = 2
)

var BuycaiOrderType_name = map[int32]string{
	0: "Normal",
	1: "Chase",
	2: "Union",
}
var BuycaiOrderType_value = map[string]int32{
	"Normal": 0,
	"Chase":  1,
	"Union":  2,
}

func (x BuycaiOrderType) String() string {
	return proto.EnumName(BuycaiOrderType_name, int32(x))
}
func (BuycaiOrderType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type TimeRange int32

const (
	TimeRange_TR_Default    TimeRange = 0
	TimeRange_TR_Today      TimeRange = 1
	TimeRange_TR_Week       TimeRange = 2
	TimeRange_TR_Month      TimeRange = 3
	TimeRange_TR_ThreeMonth TimeRange = 4
)

var TimeRange_name = map[int32]string{
	0: "TR_Default",
	1: "TR_Today",
	2: "TR_Week",
	3: "TR_Month",
	4: "TR_ThreeMonth",
}
var TimeRange_value = map[string]int32{
	"TR_Default":    0,
	"TR_Today":      1,
	"TR_Week":       2,
	"TR_Month":      3,
	"TR_ThreeMonth": 4,
}

func (x TimeRange) String() string {
	return proto.EnumName(TimeRange_name, int32(x))
}
func (TimeRange) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

type VendorOrderStatus int32

const (
	VendorOrderStatus_VOS_All        VendorOrderStatus = 0
	VendorOrderStatus_VOS_WaitTicket VendorOrderStatus = 1
	VendorOrderStatus_VOS_TicketFail VendorOrderStatus = 2
	VendorOrderStatus_VOS_WaitOpen   VendorOrderStatus = 3
	VendorOrderStatus_VOS_Win        VendorOrderStatus = 4
	VendorOrderStatus_VOS_NotWin     VendorOrderStatus = 5
)

var VendorOrderStatus_name = map[int32]string{
	0: "VOS_All",
	1: "VOS_WaitTicket",
	2: "VOS_TicketFail",
	3: "VOS_WaitOpen",
	4: "VOS_Win",
	5: "VOS_NotWin",
}
var VendorOrderStatus_value = map[string]int32{
	"VOS_All":        0,
	"VOS_WaitTicket": 1,
	"VOS_TicketFail": 2,
	"VOS_WaitOpen":   3,
	"VOS_Win":        4,
	"VOS_NotWin":     5,
}

func (x VendorOrderStatus) String() string {
	return proto.EnumName(VendorOrderStatus_name, int32(x))
}
func (VendorOrderStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

type UserOrderStatus int32

const (
	UserOrderStatus_UOS_All    UserOrderStatus = 0
	UserOrderStatus_UOS_Doing  UserOrderStatus = 1
	UserOrderStatus_UOS_Finish UserOrderStatus = 2
	UserOrderStatus_UOS_Stop   UserOrderStatus = 3
)

var UserOrderStatus_name = map[int32]string{
	0: "UOS_All",
	1: "UOS_Doing",
	2: "UOS_Finish",
	3: "UOS_Stop",
}
var UserOrderStatus_value = map[string]int32{
	"UOS_All":    0,
	"UOS_Doing":  1,
	"UOS_Finish": 2,
	"UOS_Stop":   3,
}

func (x UserOrderStatus) String() string {
	return proto.EnumName(UserOrderStatus_name, int32(x))
}
func (UserOrderStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

type Balls struct {
	List []int32 `protobuf:"varint,1,rep,packed,name=list" json:"list"`
}

func (m *Balls) Reset()                    { *m = Balls{} }
func (m *Balls) String() string            { return proto.CompactTextString(m) }
func (*Balls) ProtoMessage()               {}
func (*Balls) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *Balls) GetList() []int32 {
	if m != nil {
		return m.List
	}
	return nil
}

type BuycaiScheme struct {
	Type        string            `protobuf:"bytes,1,opt,name=type" json:"type"`
	SelectBalls map[string]*Balls `protobuf:"bytes,2,rep,name=select_balls,json=selectBalls" json:"select_balls" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Num         int32             `protobuf:"varint,3,opt,name=num" json:"num"`
	Money       float64           `protobuf:"fixed64,4,opt,name=money" json:"money"`
}

func (m *BuycaiScheme) Reset()                    { *m = BuycaiScheme{} }
func (m *BuycaiScheme) String() string            { return proto.CompactTextString(m) }
func (*BuycaiScheme) ProtoMessage()               {}
func (*BuycaiScheme) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *BuycaiScheme) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *BuycaiScheme) GetSelectBalls() map[string]*Balls {
	if m != nil {
		return m.SelectBalls
	}
	return nil
}

func (m *BuycaiScheme) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *BuycaiScheme) GetMoney() float64 {
	if m != nil {
		return m.Money
	}
	return 0
}

type IssueMultiple struct {
	Issue    string `protobuf:"bytes,1,opt,name=issue" json:"issue"`
	Multiple int32  `protobuf:"varint,2,opt,name=multiple" json:"multiple"`
}

func (m *IssueMultiple) Reset()                    { *m = IssueMultiple{} }
func (m *IssueMultiple) String() string            { return proto.CompactTextString(m) }
func (*IssueMultiple) ProtoMessage()               {}
func (*IssueMultiple) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *IssueMultiple) GetIssue() string {
	if m != nil {
		return m.Issue
	}
	return ""
}

func (m *IssueMultiple) GetMultiple() int32 {
	if m != nil {
		return m.Multiple
	}
	return 0
}

// 追号订单
type BuycaiOrder struct {
	LotteryId  LotteryId        `protobuf:"varint,1,opt,name=lottery_id,json=lotteryId,enum=apiproto.LotteryId" json:"lottery_id"`
	Issues     []*IssueMultiple `protobuf:"bytes,2,rep,name=issues" json:"issues"`
	SumMoney   float64          `protobuf:"fixed64,3,opt,name=sum_money,json=sumMoney" json:"sum_money"`
	Cai        float64          `protobuf:"fixed64,4,opt,name=cai" json:"cai"`
	Balance    float64          `protobuf:"fixed64,5,opt,name=balance" json:"balance"`
	SchemeList []*BuycaiScheme  `protobuf:"bytes,6,rep,name=scheme_list,json=schemeList" json:"scheme_list"`
	TicketId   int64            `protobuf:"varint,7,opt,name=ticket_id,json=ticketId" json:"ticket_id"`
	IsWinStop  bool             `protobuf:"varint,8,opt,name=is_win_stop,json=isWinStop" json:"is_win_stop"`
}

func (m *BuycaiOrder) Reset()                    { *m = BuycaiOrder{} }
func (m *BuycaiOrder) String() string            { return proto.CompactTextString(m) }
func (*BuycaiOrder) ProtoMessage()               {}
func (*BuycaiOrder) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *BuycaiOrder) GetLotteryId() LotteryId {
	if m != nil {
		return m.LotteryId
	}
	return LotteryId_AllId
}

func (m *BuycaiOrder) GetIssues() []*IssueMultiple {
	if m != nil {
		return m.Issues
	}
	return nil
}

func (m *BuycaiOrder) GetSumMoney() float64 {
	if m != nil {
		return m.SumMoney
	}
	return 0
}

func (m *BuycaiOrder) GetCai() float64 {
	if m != nil {
		return m.Cai
	}
	return 0
}

func (m *BuycaiOrder) GetBalance() float64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *BuycaiOrder) GetSchemeList() []*BuycaiScheme {
	if m != nil {
		return m.SchemeList
	}
	return nil
}

func (m *BuycaiOrder) GetTicketId() int64 {
	if m != nil {
		return m.TicketId
	}
	return 0
}

func (m *BuycaiOrder) GetIsWinStop() bool {
	if m != nil {
		return m.IsWinStop
	}
	return false
}

type OnSellInfo struct {
	Issue    string `protobuf:"bytes,1,opt,name=issue" json:"issue"`
	Deadline int64  `protobuf:"varint,2,opt,name=deadline" json:"deadline"`
}

func (m *OnSellInfo) Reset()                    { *m = OnSellInfo{} }
func (m *OnSellInfo) String() string            { return proto.CompactTextString(m) }
func (*OnSellInfo) ProtoMessage()               {}
func (*OnSellInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *OnSellInfo) GetIssue() string {
	if m != nil {
		return m.Issue
	}
	return ""
}

func (m *OnSellInfo) GetDeadline() int64 {
	if m != nil {
		return m.Deadline
	}
	return 0
}

type ValidTicketsRequest struct {
	LotteryId LotteryId `protobuf:"varint,1,opt,name=lottery_id,json=lotteryId,enum=apiproto.LotteryId" json:"lottery_id"`
	SumMoney  float64   `protobuf:"fixed64,2,opt,name=sum_money,json=sumMoney" json:"sum_money"`
}

func (m *ValidTicketsRequest) Reset()                    { *m = ValidTicketsRequest{} }
func (m *ValidTicketsRequest) String() string            { return proto.CompactTextString(m) }
func (*ValidTicketsRequest) ProtoMessage()               {}
func (*ValidTicketsRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *ValidTicketsRequest) GetLotteryId() LotteryId {
	if m != nil {
		return m.LotteryId
	}
	return LotteryId_AllId
}

func (m *ValidTicketsRequest) GetSumMoney() float64 {
	if m != nil {
		return m.SumMoney
	}
	return 0
}

type SaleIssue struct {
	Issue     string `protobuf:"bytes,1,opt,name=issue" json:"issue"`
	StartTime int64  `protobuf:"varint,2,opt,name=start_time,json=startTime" json:"start_time"`
	EndTime   int64  `protobuf:"varint,3,opt,name=end_time,json=endTime" json:"end_time"`
	OpenTime  int64  `protobuf:"varint,4,opt,name=open_time,json=openTime" json:"open_time"`
}

func (m *SaleIssue) Reset()                    { *m = SaleIssue{} }
func (m *SaleIssue) String() string            { return proto.CompactTextString(m) }
func (*SaleIssue) ProtoMessage()               {}
func (*SaleIssue) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *SaleIssue) GetIssue() string {
	if m != nil {
		return m.Issue
	}
	return ""
}

func (m *SaleIssue) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *SaleIssue) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *SaleIssue) GetOpenTime() int64 {
	if m != nil {
		return m.OpenTime
	}
	return 0
}

type BuycaiInfo struct {
	Last        *SaleIssue `protobuf:"bytes,1,opt,name=last" json:"last"`
	Current     *SaleIssue `protobuf:"bytes,2,opt,name=current" json:"current"`
	Next        *SaleIssue `protobuf:"bytes,3,opt,name=next" json:"next"`
	SaleList    []string   `protobuf:"bytes,4,rep,name=sale_list,json=saleList" json:"sale_list"`
	MaxMultiple int32      `protobuf:"varint,5,opt,name=max_multiple,json=maxMultiple" json:"max_multiple"`
}

func (m *BuycaiInfo) Reset()                    { *m = BuycaiInfo{} }
func (m *BuycaiInfo) String() string            { return proto.CompactTextString(m) }
func (*BuycaiInfo) ProtoMessage()               {}
func (*BuycaiInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *BuycaiInfo) GetLast() *SaleIssue {
	if m != nil {
		return m.Last
	}
	return nil
}

func (m *BuycaiInfo) GetCurrent() *SaleIssue {
	if m != nil {
		return m.Current
	}
	return nil
}

func (m *BuycaiInfo) GetNext() *SaleIssue {
	if m != nil {
		return m.Next
	}
	return nil
}

func (m *BuycaiInfo) GetSaleList() []string {
	if m != nil {
		return m.SaleList
	}
	return nil
}

func (m *BuycaiInfo) GetMaxMultiple() int32 {
	if m != nil {
		return m.MaxMultiple
	}
	return 0
}

type VendorOrderHistoryRequest struct {
	LotteryId LotteryId         `protobuf:"varint,1,opt,name=lottery_id,json=lotteryId,enum=apiproto.LotteryId" json:"lottery_id"`
	Range     TimeRange         `protobuf:"varint,2,opt,name=range,enum=apiproto.TimeRange" json:"range"`
	Status    VendorOrderStatus `protobuf:"varint,3,opt,name=status,enum=apiproto.VendorOrderStatus" json:"status"`
	Page      int32             `protobuf:"varint,4,opt,name=page" json:"page"`
}

func (m *VendorOrderHistoryRequest) Reset()                    { *m = VendorOrderHistoryRequest{} }
func (m *VendorOrderHistoryRequest) String() string            { return proto.CompactTextString(m) }
func (*VendorOrderHistoryRequest) ProtoMessage()               {}
func (*VendorOrderHistoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

func (m *VendorOrderHistoryRequest) GetLotteryId() LotteryId {
	if m != nil {
		return m.LotteryId
	}
	return LotteryId_AllId
}

func (m *VendorOrderHistoryRequest) GetRange() TimeRange {
	if m != nil {
		return m.Range
	}
	return TimeRange_TR_Default
}

func (m *VendorOrderHistoryRequest) GetStatus() VendorOrderStatus {
	if m != nil {
		return m.Status
	}
	return VendorOrderStatus_VOS_All
}

func (m *VendorOrderHistoryRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type UserOrderHistoryRequest struct {
	LotteryId LotteryId       `protobuf:"varint,1,opt,name=lottery_id,json=lotteryId,enum=apiproto.LotteryId" json:"lottery_id"`
	Range     TimeRange       `protobuf:"varint,2,opt,name=range,enum=apiproto.TimeRange" json:"range"`
	Status    UserOrderStatus `protobuf:"varint,3,opt,name=status,enum=apiproto.UserOrderStatus" json:"status"`
	Type      BuycaiOrderType `protobuf:"varint,4,opt,name=type,enum=apiproto.BuycaiOrderType" json:"type"`
	Page      int32           `protobuf:"varint,5,opt,name=page" json:"page"`
}

func (m *UserOrderHistoryRequest) Reset()                    { *m = UserOrderHistoryRequest{} }
func (m *UserOrderHistoryRequest) String() string            { return proto.CompactTextString(m) }
func (*UserOrderHistoryRequest) ProtoMessage()               {}
func (*UserOrderHistoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{9} }

func (m *UserOrderHistoryRequest) GetLotteryId() LotteryId {
	if m != nil {
		return m.LotteryId
	}
	return LotteryId_AllId
}

func (m *UserOrderHistoryRequest) GetRange() TimeRange {
	if m != nil {
		return m.Range
	}
	return TimeRange_TR_Default
}

func (m *UserOrderHistoryRequest) GetStatus() UserOrderStatus {
	if m != nil {
		return m.Status
	}
	return UserOrderStatus_UOS_All
}

func (m *UserOrderHistoryRequest) GetType() BuycaiOrderType {
	if m != nil {
		return m.Type
	}
	return BuycaiOrderType_Normal
}

func (m *UserOrderHistoryRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type VendorOrderRecord struct {
	Id        int64             `protobuf:"varint,1,opt,name=id" json:"id"`
	LotteryId LotteryId         `protobuf:"varint,2,opt,name=lottery_id,json=lotteryId,enum=apiproto.LotteryId" json:"lottery_id"`
	Issue     string            `protobuf:"bytes,3,opt,name=issue" json:"issue"`
	Money     float64           `protobuf:"fixed64,4,opt,name=money" json:"money"`
	Status    VendorOrderStatus `protobuf:"varint,5,opt,name=status,enum=apiproto.VendorOrderStatus" json:"status"`
	IsChase   bool              `protobuf:"varint,6,opt,name=is_chase,json=isChase" json:"is_chase"`
	WinMoney  float64           `protobuf:"fixed64,7,opt,name=win_money,json=winMoney" json:"win_money"`
	AddTime   int64             `protobuf:"varint,8,opt,name=add_time,json=addTime" json:"add_time"`
}

func (m *VendorOrderRecord) Reset()                    { *m = VendorOrderRecord{} }
func (m *VendorOrderRecord) String() string            { return proto.CompactTextString(m) }
func (*VendorOrderRecord) ProtoMessage()               {}
func (*VendorOrderRecord) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{10} }

func (m *VendorOrderRecord) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *VendorOrderRecord) GetLotteryId() LotteryId {
	if m != nil {
		return m.LotteryId
	}
	return LotteryId_AllId
}

func (m *VendorOrderRecord) GetIssue() string {
	if m != nil {
		return m.Issue
	}
	return ""
}

func (m *VendorOrderRecord) GetMoney() float64 {
	if m != nil {
		return m.Money
	}
	return 0
}

func (m *VendorOrderRecord) GetStatus() VendorOrderStatus {
	if m != nil {
		return m.Status
	}
	return VendorOrderStatus_VOS_All
}

func (m *VendorOrderRecord) GetIsChase() bool {
	if m != nil {
		return m.IsChase
	}
	return false
}

func (m *VendorOrderRecord) GetWinMoney() float64 {
	if m != nil {
		return m.WinMoney
	}
	return 0
}

func (m *VendorOrderRecord) GetAddTime() int64 {
	if m != nil {
		return m.AddTime
	}
	return 0
}

type UserOrderRecord struct {
	Id        int64           `protobuf:"varint,1,opt,name=id" json:"id"`
	LotteryId LotteryId       `protobuf:"varint,2,opt,name=lottery_id,json=lotteryId,enum=apiproto.LotteryId" json:"lottery_id"`
	Money     float64         `protobuf:"fixed64,3,opt,name=money" json:"money"`
	Status    UserOrderStatus `protobuf:"varint,4,opt,name=status,enum=apiproto.UserOrderStatus" json:"status"`
	IssueNum  int32           `protobuf:"varint,5,opt,name=issue_num,json=issueNum" json:"issue_num"`
	ChaseNo   int32           `protobuf:"varint,6,opt,name=chase_no,json=chaseNo" json:"chase_no"`
	WinMoney  float64         `protobuf:"fixed64,7,opt,name=win_money,json=winMoney" json:"win_money"`
	AddTime   int64           `protobuf:"varint,8,opt,name=add_time,json=addTime" json:"add_time"`
	CurIssue  string          `protobuf:"bytes,9,opt,name=cur_issue,json=curIssue" json:"cur_issue"`
}

func (m *UserOrderRecord) Reset()                    { *m = UserOrderRecord{} }
func (m *UserOrderRecord) String() string            { return proto.CompactTextString(m) }
func (*UserOrderRecord) ProtoMessage()               {}
func (*UserOrderRecord) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{11} }

func (m *UserOrderRecord) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserOrderRecord) GetLotteryId() LotteryId {
	if m != nil {
		return m.LotteryId
	}
	return LotteryId_AllId
}

func (m *UserOrderRecord) GetMoney() float64 {
	if m != nil {
		return m.Money
	}
	return 0
}

func (m *UserOrderRecord) GetStatus() UserOrderStatus {
	if m != nil {
		return m.Status
	}
	return UserOrderStatus_UOS_All
}

func (m *UserOrderRecord) GetIssueNum() int32 {
	if m != nil {
		return m.IssueNum
	}
	return 0
}

func (m *UserOrderRecord) GetChaseNo() int32 {
	if m != nil {
		return m.ChaseNo
	}
	return 0
}

func (m *UserOrderRecord) GetWinMoney() float64 {
	if m != nil {
		return m.WinMoney
	}
	return 0
}

func (m *UserOrderRecord) GetAddTime() int64 {
	if m != nil {
		return m.AddTime
	}
	return 0
}

func (m *UserOrderRecord) GetCurIssue() string {
	if m != nil {
		return m.CurIssue
	}
	return ""
}

type VendorOrderHistory struct {
	List     []*VendorOrderRecord `protobuf:"bytes,1,rep,name=list" json:"list"`
	PageSize int32                `protobuf:"varint,2,opt,name=page_size,json=pageSize" json:"page_size"`
}

func (m *VendorOrderHistory) Reset()                    { *m = VendorOrderHistory{} }
func (m *VendorOrderHistory) String() string            { return proto.CompactTextString(m) }
func (*VendorOrderHistory) ProtoMessage()               {}
func (*VendorOrderHistory) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{12} }

func (m *VendorOrderHistory) GetList() []*VendorOrderRecord {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *VendorOrderHistory) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type UserOrderHistory struct {
	List     []*UserOrderRecord `protobuf:"bytes,1,rep,name=list" json:"list"`
	PageSize int32              `protobuf:"varint,2,opt,name=page_size,json=pageSize" json:"page_size"`
}

func (m *UserOrderHistory) Reset()                    { *m = UserOrderHistory{} }
func (m *UserOrderHistory) String() string            { return proto.CompactTextString(m) }
func (*UserOrderHistory) ProtoMessage()               {}
func (*UserOrderHistory) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{13} }

func (m *UserOrderHistory) GetList() []*UserOrderRecord {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *UserOrderHistory) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type BuycaiIssueInfo struct {
	Issue         string            `protobuf:"bytes,1,opt,name=issue" json:"issue"`
	Multiple      int32             `protobuf:"varint,2,opt,name=multiple" json:"multiple"`
	Money         float64           `protobuf:"fixed64,3,opt,name=money" json:"money"`
	WinMoney      float64           `protobuf:"fixed64,4,opt,name=win_money,json=winMoney" json:"win_money"`
	Status        VendorOrderStatus `protobuf:"varint,5,opt,name=status,enum=apiproto.VendorOrderStatus" json:"status"`
	ChaseNo       int32             `protobuf:"varint,6,opt,name=chase_no,json=chaseNo" json:"chase_no"`
	VendorOrderId int64             `protobuf:"varint,7,opt,name=vendor_order_id,json=vendorOrderId" json:"vendor_order_id"`
}

func (m *BuycaiIssueInfo) Reset()                    { *m = BuycaiIssueInfo{} }
func (m *BuycaiIssueInfo) String() string            { return proto.CompactTextString(m) }
func (*BuycaiIssueInfo) ProtoMessage()               {}
func (*BuycaiIssueInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{14} }

func (m *BuycaiIssueInfo) GetIssue() string {
	if m != nil {
		return m.Issue
	}
	return ""
}

func (m *BuycaiIssueInfo) GetMultiple() int32 {
	if m != nil {
		return m.Multiple
	}
	return 0
}

func (m *BuycaiIssueInfo) GetMoney() float64 {
	if m != nil {
		return m.Money
	}
	return 0
}

func (m *BuycaiIssueInfo) GetWinMoney() float64 {
	if m != nil {
		return m.WinMoney
	}
	return 0
}

func (m *BuycaiIssueInfo) GetStatus() VendorOrderStatus {
	if m != nil {
		return m.Status
	}
	return VendorOrderStatus_VOS_All
}

func (m *BuycaiIssueInfo) GetChaseNo() int32 {
	if m != nil {
		return m.ChaseNo
	}
	return 0
}

func (m *BuycaiIssueInfo) GetVendorOrderId() int64 {
	if m != nil {
		return m.VendorOrderId
	}
	return 0
}

type BuycaiUserOrder struct {
	Id             int64              `protobuf:"varint,1,opt,name=id" json:"id"`
	LotteryId      LotteryId          `protobuf:"varint,2,opt,name=lottery_id,json=lotteryId,enum=apiproto.LotteryId" json:"lottery_id"`
	SumMoney       float64            `protobuf:"fixed64,3,opt,name=sum_money,json=sumMoney" json:"sum_money"`
	Status         UserOrderStatus    `protobuf:"varint,4,opt,name=status,enum=apiproto.UserOrderStatus" json:"status"`
	OrderTime      int64              `protobuf:"varint,5,opt,name=order_time,json=orderTime" json:"order_time"`
	TicketSubMoney float64            `protobuf:"fixed64,6,opt,name=ticket_sub_money,json=ticketSubMoney" json:"ticket_sub_money"`
	TotalWinMoney  float64            `protobuf:"fixed64,7,opt,name=total_win_money,json=totalWinMoney" json:"total_win_money"`
	SumNum         int32              `protobuf:"varint,8,opt,name=sum_num,json=sumNum" json:"sum_num"`
	IssueNum       int32              `protobuf:"varint,9,opt,name=issue_num,json=issueNum" json:"issue_num"`
	ChaseNo        int32              `protobuf:"varint,10,opt,name=chase_no,json=chaseNo" json:"chase_no"`
	CurIssue       string             `protobuf:"bytes,11,opt,name=cur_issue,json=curIssue" json:"cur_issue"`
	SchemeList     []*BuycaiScheme    `protobuf:"bytes,12,rep,name=scheme_list,json=schemeList" json:"scheme_list"`
	IssueList      []*BuycaiIssueInfo `protobuf:"bytes,13,rep,name=issue_list,json=issueList" json:"issue_list"`
	OrderType      BuycaiOrderType    `protobuf:"varint,14,opt,name=order_type,json=orderType,enum=apiproto.BuycaiOrderType" json:"order_type"`
	UserOrderNo    string             `protobuf:"bytes,15,opt,name=user_order_no,json=userOrderNo" json:"user_order_no"`
}

func (m *BuycaiUserOrder) Reset()                    { *m = BuycaiUserOrder{} }
func (m *BuycaiUserOrder) String() string            { return proto.CompactTextString(m) }
func (*BuycaiUserOrder) ProtoMessage()               {}
func (*BuycaiUserOrder) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{15} }

func (m *BuycaiUserOrder) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BuycaiUserOrder) GetLotteryId() LotteryId {
	if m != nil {
		return m.LotteryId
	}
	return LotteryId_AllId
}

func (m *BuycaiUserOrder) GetSumMoney() float64 {
	if m != nil {
		return m.SumMoney
	}
	return 0
}

func (m *BuycaiUserOrder) GetStatus() UserOrderStatus {
	if m != nil {
		return m.Status
	}
	return UserOrderStatus_UOS_All
}

func (m *BuycaiUserOrder) GetOrderTime() int64 {
	if m != nil {
		return m.OrderTime
	}
	return 0
}

func (m *BuycaiUserOrder) GetTicketSubMoney() float64 {
	if m != nil {
		return m.TicketSubMoney
	}
	return 0
}

func (m *BuycaiUserOrder) GetTotalWinMoney() float64 {
	if m != nil {
		return m.TotalWinMoney
	}
	return 0
}

func (m *BuycaiUserOrder) GetSumNum() int32 {
	if m != nil {
		return m.SumNum
	}
	return 0
}

func (m *BuycaiUserOrder) GetIssueNum() int32 {
	if m != nil {
		return m.IssueNum
	}
	return 0
}

func (m *BuycaiUserOrder) GetChaseNo() int32 {
	if m != nil {
		return m.ChaseNo
	}
	return 0
}

func (m *BuycaiUserOrder) GetCurIssue() string {
	if m != nil {
		return m.CurIssue
	}
	return ""
}

func (m *BuycaiUserOrder) GetSchemeList() []*BuycaiScheme {
	if m != nil {
		return m.SchemeList
	}
	return nil
}

func (m *BuycaiUserOrder) GetIssueList() []*BuycaiIssueInfo {
	if m != nil {
		return m.IssueList
	}
	return nil
}

func (m *BuycaiUserOrder) GetOrderType() BuycaiOrderType {
	if m != nil {
		return m.OrderType
	}
	return BuycaiOrderType_Normal
}

func (m *BuycaiUserOrder) GetUserOrderNo() string {
	if m != nil {
		return m.UserOrderNo
	}
	return ""
}

type BuycaiVendorOrder struct {
	Id          int64             `protobuf:"varint,1,opt,name=id" json:"id"`
	LotteryId   LotteryId         `protobuf:"varint,2,opt,name=lottery_id,json=lotteryId,enum=apiproto.LotteryId" json:"lottery_id"`
	Status      VendorOrderStatus `protobuf:"varint,3,opt,name=status,enum=apiproto.VendorOrderStatus" json:"status"`
	OpenTime    int64             `protobuf:"varint,4,opt,name=open_time,json=openTime" json:"open_time"`
	OpenBalls   []string          `protobuf:"bytes,5,rep,name=open_balls,json=openBalls" json:"open_balls"`
	Multiple    int32             `protobuf:"varint,6,opt,name=multiple" json:"multiple"`
	Money       float64           `protobuf:"fixed64,7,opt,name=money" json:"money"`
	SumNum      int32             `protobuf:"varint,8,opt,name=sum_num,json=sumNum" json:"sum_num"`
	WinMoney    float64           `protobuf:"fixed64,9,opt,name=win_money,json=winMoney" json:"win_money"`
	SchemeList  []*BuycaiScheme   `protobuf:"bytes,10,rep,name=scheme_list,json=schemeList" json:"scheme_list"`
	UserOrderNo string            `protobuf:"bytes,11,opt,name=user_order_no,json=userOrderNo" json:"user_order_no"`
	UserOrderId int64             `protobuf:"varint,12,opt,name=user_order_id,json=userOrderId" json:"user_order_id"`
	OrderTime   int64             `protobuf:"varint,13,opt,name=order_time,json=orderTime" json:"order_time"`
	ReqTime     int64             `protobuf:"varint,14,opt,name=req_time,json=reqTime" json:"req_time"`
	RespTime    int64             `protobuf:"varint,15,opt,name=resp_time,json=respTime" json:"resp_time"`
	CurIssue    string            `protobuf:"bytes,16,opt,name=cur_issue,json=curIssue" json:"cur_issue"`
}

func (m *BuycaiVendorOrder) Reset()                    { *m = BuycaiVendorOrder{} }
func (m *BuycaiVendorOrder) String() string            { return proto.CompactTextString(m) }
func (*BuycaiVendorOrder) ProtoMessage()               {}
func (*BuycaiVendorOrder) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{16} }

func (m *BuycaiVendorOrder) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BuycaiVendorOrder) GetLotteryId() LotteryId {
	if m != nil {
		return m.LotteryId
	}
	return LotteryId_AllId
}

func (m *BuycaiVendorOrder) GetStatus() VendorOrderStatus {
	if m != nil {
		return m.Status
	}
	return VendorOrderStatus_VOS_All
}

func (m *BuycaiVendorOrder) GetOpenTime() int64 {
	if m != nil {
		return m.OpenTime
	}
	return 0
}

func (m *BuycaiVendorOrder) GetOpenBalls() []string {
	if m != nil {
		return m.OpenBalls
	}
	return nil
}

func (m *BuycaiVendorOrder) GetMultiple() int32 {
	if m != nil {
		return m.Multiple
	}
	return 0
}

func (m *BuycaiVendorOrder) GetMoney() float64 {
	if m != nil {
		return m.Money
	}
	return 0
}

func (m *BuycaiVendorOrder) GetSumNum() int32 {
	if m != nil {
		return m.SumNum
	}
	return 0
}

func (m *BuycaiVendorOrder) GetWinMoney() float64 {
	if m != nil {
		return m.WinMoney
	}
	return 0
}

func (m *BuycaiVendorOrder) GetSchemeList() []*BuycaiScheme {
	if m != nil {
		return m.SchemeList
	}
	return nil
}

func (m *BuycaiVendorOrder) GetUserOrderNo() string {
	if m != nil {
		return m.UserOrderNo
	}
	return ""
}

func (m *BuycaiVendorOrder) GetUserOrderId() int64 {
	if m != nil {
		return m.UserOrderId
	}
	return 0
}

func (m *BuycaiVendorOrder) GetOrderTime() int64 {
	if m != nil {
		return m.OrderTime
	}
	return 0
}

func (m *BuycaiVendorOrder) GetReqTime() int64 {
	if m != nil {
		return m.ReqTime
	}
	return 0
}

func (m *BuycaiVendorOrder) GetRespTime() int64 {
	if m != nil {
		return m.RespTime
	}
	return 0
}

func (m *BuycaiVendorOrder) GetCurIssue() string {
	if m != nil {
		return m.CurIssue
	}
	return ""
}

func init() {
	proto.RegisterType((*Balls)(nil), "apiproto.Balls")
	proto.RegisterType((*BuycaiScheme)(nil), "apiproto.BuycaiScheme")
	proto.RegisterType((*IssueMultiple)(nil), "apiproto.IssueMultiple")
	proto.RegisterType((*BuycaiOrder)(nil), "apiproto.BuycaiOrder")
	proto.RegisterType((*OnSellInfo)(nil), "apiproto.OnSellInfo")
	proto.RegisterType((*ValidTicketsRequest)(nil), "apiproto.ValidTicketsRequest")
	proto.RegisterType((*SaleIssue)(nil), "apiproto.SaleIssue")
	proto.RegisterType((*BuycaiInfo)(nil), "apiproto.BuycaiInfo")
	proto.RegisterType((*VendorOrderHistoryRequest)(nil), "apiproto.VendorOrderHistoryRequest")
	proto.RegisterType((*UserOrderHistoryRequest)(nil), "apiproto.UserOrderHistoryRequest")
	proto.RegisterType((*VendorOrderRecord)(nil), "apiproto.VendorOrderRecord")
	proto.RegisterType((*UserOrderRecord)(nil), "apiproto.UserOrderRecord")
	proto.RegisterType((*VendorOrderHistory)(nil), "apiproto.VendorOrderHistory")
	proto.RegisterType((*UserOrderHistory)(nil), "apiproto.UserOrderHistory")
	proto.RegisterType((*BuycaiIssueInfo)(nil), "apiproto.BuycaiIssueInfo")
	proto.RegisterType((*BuycaiUserOrder)(nil), "apiproto.BuycaiUserOrder")
	proto.RegisterType((*BuycaiVendorOrder)(nil), "apiproto.BuycaiVendorOrder")
	proto.RegisterEnum("apiproto.BuycaiOrderType", BuycaiOrderType_name, BuycaiOrderType_value)
	proto.RegisterEnum("apiproto.TimeRange", TimeRange_name, TimeRange_value)
	proto.RegisterEnum("apiproto.VendorOrderStatus", VendorOrderStatus_name, VendorOrderStatus_value)
	proto.RegisterEnum("apiproto.UserOrderStatus", UserOrderStatus_name, UserOrderStatus_value)
}

func init() { proto.RegisterFile("buycai.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 1414 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0xcd, 0x6e, 0xdb, 0xc6,
	0x13, 0x0f, 0x45, 0x51, 0x22, 0x47, 0x5f, 0xcc, 0xe6, 0x8f, 0x7f, 0xe4, 0x18, 0x29, 0x54, 0x02,
	0x4d, 0x54, 0x03, 0x71, 0x50, 0xe7, 0xd0, 0xa0, 0x87, 0x02, 0x71, 0xd3, 0xa0, 0x6e, 0x13, 0xbb,
	0xa0, 0x94, 0xf8, 0x56, 0x62, 0x25, 0x6e, 0xe2, 0x45, 0x28, 0x52, 0xe1, 0x2e, 0x13, 0x2b, 0xaf,
	0xd0, 0xe7, 0xe8, 0xa9, 0xa7, 0x3e, 0x43, 0xcf, 0x3d, 0xf6, 0x19, 0x7a, 0xcb, 0x33, 0x14, 0xb3,
	0x4b, 0x4a, 0x14, 0x6d, 0xb9, 0x86, 0x1b, 0xa0, 0x37, 0xce, 0xec, 0xec, 0x7c, 0xfc, 0xe6, 0x37,
	0xbb, 0x4b, 0x68, 0x4f, 0xb2, 0xc5, 0x94, 0xf2, 0xdd, 0x79, 0x9a, 0xc8, 0x84, 0xd8, 0x74, 0xce,
	0xd5, 0xd7, 0xad, 0x4e, 0x32, 0x67, 0xf1, 0x72, 0xc1, 0xdb, 0x06, 0x6b, 0x9f, 0x46, 0x91, 0x20,
	0x04, 0xea, 0x11, 0x17, 0xb2, 0x6f, 0x0c, 0xcc, 0xa1, 0xe5, 0xab, 0x6f, 0xef, 0x2f, 0x03, 0xda,
	0xfb, 0xca, 0xcd, 0x68, 0x7a, 0xc2, 0x66, 0x0c, 0x8d, 0xe4, 0x62, 0xce, 0xfa, 0xc6, 0xc0, 0x18,
	0x3a, 0xbe, 0xfa, 0x26, 0xdf, 0x43, 0x5b, 0xb0, 0x88, 0x4d, 0x65, 0x30, 0x41, 0x47, 0xfd, 0xda,
	0xc0, 0x1c, 0xb6, 0xf6, 0xee, 0xee, 0x16, 0x11, 0x77, 0xcb, 0x1e, 0x76, 0x47, 0xca, 0x54, 0x85,
	0xfc, 0x36, 0x96, 0xe9, 0xc2, 0x6f, 0x89, 0x95, 0x86, 0xb8, 0x60, 0xc6, 0xd9, 0xac, 0x6f, 0x0e,
	0x8c, 0xa1, 0xe5, 0xe3, 0x27, 0xf9, 0x1f, 0x58, 0xb3, 0x24, 0x66, 0x8b, 0x7e, 0x7d, 0x60, 0x0c,
	0x0d, 0x5f, 0x0b, 0xb7, 0x8e, 0xc0, 0xad, 0x3a, 0xc2, 0xbd, 0xaf, 0xd9, 0x22, 0x4f, 0x0d, 0x3f,
	0xc9, 0x67, 0x60, 0xbd, 0xa5, 0x51, 0xc6, 0xfa, 0xb5, 0x81, 0x31, 0x6c, 0xed, 0xf5, 0x4a, 0x29,
	0xe1, 0x36, 0x5f, 0xaf, 0x7e, 0x55, 0x7b, 0x68, 0x78, 0x8f, 0xa0, 0x73, 0x20, 0x44, 0xc6, 0x9e,
	0x65, 0x91, 0xe4, 0xf3, 0x88, 0x61, 0x5c, 0x8e, 0x8a, 0xdc, 0x9f, 0x16, 0xc8, 0x2d, 0xb0, 0x67,
	0xb9, 0x85, 0x72, 0x6a, 0xf9, 0x4b, 0xd9, 0xfb, 0xad, 0x06, 0x2d, 0x5d, 0xea, 0x51, 0x1a, 0xb2,
	0x94, 0xec, 0x01, 0x44, 0x89, 0x94, 0x2c, 0x5d, 0x04, 0x3c, 0x54, 0x6e, 0xba, 0x7b, 0x37, 0x56,
	0x29, 0x3c, 0xd5, 0x6b, 0x07, 0xa1, 0xef, 0x44, 0xc5, 0x27, 0xb9, 0x0f, 0x0d, 0x15, 0xa8, 0x40,
	0xf1, 0xe6, 0xca, 0x7e, 0x2d, 0x3d, 0x3f, 0x37, 0x23, 0xdb, 0xe0, 0x88, 0x6c, 0x16, 0x68, 0x88,
	0x4c, 0x05, 0x91, 0x2d, 0xb2, 0xd9, 0x33, 0x94, 0x11, 0x91, 0x29, 0xe5, 0x39, 0x72, 0xf8, 0x49,
	0xfa, 0xd0, 0x9c, 0xd0, 0x88, 0xc6, 0x53, 0xd6, 0xb7, 0x94, 0xb6, 0x10, 0xc9, 0x97, 0xd0, 0x12,
	0xaa, 0x43, 0x81, 0x62, 0x41, 0x43, 0x85, 0xff, 0xff, 0xf9, 0x4d, 0xf4, 0x41, 0x9b, 0x3e, 0xe5,
	0x42, 0x62, 0x06, 0x92, 0x4f, 0x5f, 0x33, 0x89, 0x55, 0x36, 0x07, 0xc6, 0xd0, 0xf4, 0x6d, 0xad,
	0x38, 0x08, 0xc9, 0x27, 0xd0, 0xe2, 0x22, 0x78, 0xc7, 0xe3, 0x40, 0xc8, 0x64, 0xde, 0xb7, 0x07,
	0xc6, 0xd0, 0xf6, 0x1d, 0x2e, 0x8e, 0x79, 0x3c, 0x92, 0xc9, 0xdc, 0xfb, 0x1a, 0xe0, 0x28, 0x1e,
	0xb1, 0x28, 0x3a, 0x88, 0x5f, 0x26, 0x9b, 0x31, 0x0f, 0x19, 0x0d, 0x23, 0x1e, 0x6b, 0xcc, 0x4d,
	0x7f, 0x29, 0x7b, 0x2f, 0xe1, 0xc6, 0x0b, 0x1a, 0xf1, 0x70, 0xac, 0x02, 0x0a, 0x9f, 0xbd, 0xc9,
	0x98, 0x90, 0x57, 0x82, 0x7e, 0x0d, 0xc9, 0xda, 0x3a, 0x92, 0xde, 0x29, 0x38, 0x23, 0x1a, 0x31,
	0xd5, 0x83, 0x0d, 0x69, 0xde, 0x06, 0x10, 0x92, 0xa6, 0x32, 0x90, 0x7c, 0x56, 0x24, 0xea, 0x28,
	0xcd, 0x98, 0xcf, 0x18, 0xd9, 0x02, 0x9b, 0xc5, 0xa1, 0x5e, 0x34, 0xd5, 0x62, 0x93, 0xc5, 0xa1,
	0x5a, 0xda, 0x06, 0x07, 0x67, 0x52, 0xaf, 0xd5, 0x75, 0x85, 0xa8, 0xc0, 0x45, 0xef, 0x0f, 0x03,
	0x40, 0x63, 0xaf, 0x20, 0xba, 0x0b, 0xf5, 0x88, 0xaa, 0x29, 0x45, 0x46, 0x97, 0x6a, 0x5a, 0xa6,
	0xe7, 0x2b, 0x03, 0x72, 0x0f, 0x9a, 0xd3, 0x2c, 0x4d, 0x59, 0x2c, 0x73, 0xf6, 0x9f, 0x6b, 0x5b,
	0xd8, 0xa0, 0xdf, 0x98, 0x9d, 0x4a, 0x95, 0xda, 0x26, 0xbf, 0x68, 0xa0, 0x60, 0xa2, 0x51, 0xce,
	0x92, 0xfa, 0xc0, 0x1c, 0x3a, 0xbe, 0x8d, 0x0a, 0xc5, 0x85, 0x4f, 0xa1, 0x3d, 0xa3, 0xa7, 0xc1,
	0x72, 0x44, 0x2c, 0x35, 0x22, 0xad, 0x19, 0x3d, 0x2d, 0x88, 0xeb, 0xfd, 0x6e, 0xc0, 0xd6, 0x0b,
	0x16, 0x87, 0x49, 0xaa, 0xa6, 0xe4, 0x3b, 0x2e, 0x64, 0x92, 0x2e, 0xfe, 0x4d, 0xe3, 0x3e, 0x07,
	0x2b, 0xa5, 0xf1, 0x2b, 0x8d, 0xf9, 0x9a, 0x39, 0x02, 0xe8, 0xe3, 0x92, 0xaf, 0x2d, 0xc8, 0x03,
	0x68, 0x08, 0x49, 0x65, 0x26, 0x54, 0x9d, 0xdd, 0xbd, 0xed, 0x95, 0x6d, 0x29, 0xa7, 0x91, 0x32,
	0xf1, 0x73, 0x53, 0x3c, 0xf3, 0xe6, 0xf4, 0x95, 0xee, 0x8c, 0xe5, 0xab, 0x6f, 0xef, 0x83, 0x01,
	0x37, 0x9f, 0x0b, 0xf6, 0x5f, 0xd4, 0xf0, 0x45, 0xa5, 0x86, 0xad, 0x95, 0xed, 0x32, 0xa3, 0x4a,
	0x05, 0xf7, 0xf2, 0x53, 0xbb, 0x5e, 0xdd, 0x50, 0x3a, 0xae, 0xc6, 0x8b, 0x39, 0xcb, 0x0f, 0xf4,
	0xa2, 0x60, 0xab, 0x54, 0xf0, 0xcf, 0x35, 0xb8, 0x5e, 0x82, 0xc8, 0x67, 0xd3, 0x24, 0x0d, 0x49,
	0x17, 0x6a, 0x79, 0x89, 0xa6, 0x5f, 0xe3, 0x61, 0xa5, 0xf4, 0xda, 0xa5, 0x4a, 0x5f, 0x4e, 0x93,
	0x59, 0x9e, 0xa6, 0x73, 0x8f, 0xfd, 0x52, 0xff, 0xac, 0xcb, 0xf7, 0x6f, 0x0b, 0x6c, 0x2e, 0x82,
	0xe9, 0x09, 0x15, 0xac, 0xdf, 0x50, 0x07, 0x50, 0x93, 0x8b, 0x6f, 0x50, 0x44, 0x32, 0xe3, 0xd9,
	0xa4, 0x23, 0x35, 0xf5, 0xcc, 0xbf, 0xe3, 0xb1, 0x3e, 0x3d, 0xb7, 0xc0, 0xa6, 0x61, 0x3e, 0xb1,
	0xb6, 0x9e, 0x58, 0x1a, 0xaa, 0x89, 0xf5, 0x7e, 0xad, 0x41, 0x6f, 0x09, 0xf6, 0xc7, 0xc5, 0xa2,
	0x7c, 0x92, 0xe7, 0x55, 0xaf, 0x3a, 0x5e, 0xbf, 0x6c, 0xc7, 0xb7, 0xc1, 0x51, 0x38, 0x06, 0x78,
	0x9b, 0xea, 0x3e, 0xda, 0x4a, 0x71, 0x98, 0xcd, 0xb0, 0x30, 0x85, 0x46, 0x10, 0x27, 0x0a, 0x10,
	0xcb, 0x6f, 0x2a, 0xf9, 0x30, 0xb9, 0x2a, 0x20, 0xb8, 0x6f, 0x9a, 0xa5, 0x81, 0x6e, 0xa4, 0xa3,
	0x1a, 0x69, 0x4f, 0xb3, 0x54, 0x1d, 0x1c, 0xde, 0x04, 0xc8, 0xd9, 0x89, 0x27, 0xf7, 0x4b, 0xef,
	0x8d, 0xd6, 0x86, 0x4e, 0x6a, 0x68, 0xf5, 0x63, 0x04, 0x63, 0x20, 0x15, 0x03, 0xc1, 0xdf, 0x2f,
	0x2f, 0x5f, 0x54, 0x8c, 0xf8, 0x7b, 0xe6, 0xfd, 0x04, 0x6e, 0x75, 0x1e, 0x91, 0xf6, 0xa5, 0x08,
	0xe7, 0xa1, 0x76, 0x79, 0xff, 0x1f, 0x0c, 0xe8, 0xe5, 0xc7, 0x30, 0xd6, 0x74, 0xf1, 0x75, 0xb5,
	0xe9, 0x89, 0xb0, 0xa1, 0xbf, 0x6b, 0xa0, 0xd7, 0x2b, 0xa0, 0x5f, 0x95, 0xf2, 0x9b, 0x3a, 0x7c,
	0x07, 0x7a, 0x6f, 0xd5, 0xbe, 0x20, 0xc1, 0x8d, 0xab, 0x4b, 0xbb, 0xf3, 0x76, 0xe5, 0xee, 0x20,
	0xf4, 0xfe, 0xac, 0x17, 0x05, 0x2f, 0xd1, 0xfa, 0x28, 0x14, 0xbf, 0xf0, 0xc1, 0x72, 0x05, 0xa6,
	0xdf, 0x06, 0xd0, 0x85, 0x28, 0x5a, 0x5a, 0xfa, 0xda, 0x55, 0x1a, 0x45, 0xcc, 0x21, 0xb8, 0xf9,
	0xeb, 0x44, 0x64, 0x93, 0x3c, 0x6a, 0x43, 0x45, 0xed, 0x6a, 0xfd, 0x28, 0x9b, 0xe8, 0xd8, 0x77,
	0xa0, 0x27, 0x13, 0x49, 0xa3, 0xa0, 0x3a, 0x00, 0x1d, 0xa5, 0x3e, 0x2e, 0x1a, 0x72, 0x13, 0x9a,
	0x58, 0x00, 0x0e, 0x96, 0xad, 0xa0, 0x6d, 0x88, 0x6c, 0x86, 0x63, 0xb5, 0x36, 0x73, 0xce, 0x05,
	0x33, 0x07, 0x67, 0x66, 0x6e, 0x35, 0x3b, 0xad, 0xf5, 0xd9, 0xa9, 0x3e, 0xcb, 0xda, 0x97, 0x7e,
	0x96, 0x3d, 0x04, 0xd0, 0xd9, 0xa8, 0x7d, 0x9d, 0xea, 0x08, 0x54, 0xb8, 0xec, 0xeb, 0xd4, 0x8b,
	0x9d, 0x39, 0xa2, 0x78, 0x67, 0x74, 0xff, 0xe9, 0xce, 0xc8, 0xc1, 0xc6, 0x8b, 0xc3, 0x83, 0x4e,
	0x26, 0x58, 0xc1, 0xac, 0x38, 0xe9, 0xf7, 0x54, 0x35, 0xad, 0xac, 0xe8, 0xdd, 0x61, 0xe2, 0xfd,
	0x52, 0x87, 0xeb, 0xda, 0x45, 0x89, 0xbe, 0x1f, 0x85, 0x59, 0x57, 0xba, 0xdc, 0x2f, 0x7a, 0x7b,
	0x29, 0x6e, 0xe1, 0xa2, 0xfe, 0xaf, 0xb1, 0xd4, 0x63, 0x47, 0x99, 0xeb, 0x9f, 0x95, 0xf2, 0xa4,
	0x37, 0x36, 0x4d, 0x7a, 0xb3, 0x3c, 0xe9, 0x17, 0x71, 0x67, 0x45, 0x3b, 0xa7, 0x72, 0x04, 0x54,
	0x38, 0x00, 0x97, 0xe6, 0xc0, 0x99, 0x7e, 0xb4, 0xce, 0xf4, 0xa3, 0x62, 0xc3, 0xc3, 0x7e, 0x5b,
	0x81, 0xb0, 0xb2, 0x39, 0x08, 0x2b, 0x33, 0xd6, 0xa9, 0xce, 0xd8, 0x16, 0xd8, 0x29, 0x7b, 0xa3,
	0x17, 0xbb, 0xfa, 0x5e, 0x48, 0xd9, 0x9b, 0xe2, 0x5e, 0x48, 0x99, 0x98, 0xeb, 0xb5, 0x9e, 0x86,
	0x17, 0x15, 0x67, 0x2f, 0x0d, 0x77, 0x9d, 0xf8, 0x3b, 0x0f, 0x8a, 0xe3, 0x67, 0xc9, 0x34, 0x02,
	0xd0, 0x38, 0x4c, 0xd2, 0x19, 0x8d, 0xdc, 0x6b, 0xc4, 0x01, 0x4b, 0x5d, 0xe1, 0xae, 0x81, 0x9f,
	0xcf, 0x63, 0x9e, 0xc4, 0x6e, 0x6d, 0xe7, 0x18, 0x9c, 0xe5, 0x7b, 0x89, 0x74, 0x01, 0xc6, 0x7e,
	0xf0, 0x98, 0xbd, 0xa4, 0x59, 0x24, 0xdd, 0x6b, 0xa4, 0x0d, 0xf6, 0xd8, 0x0f, 0xc6, 0x49, 0x48,
	0x17, 0xae, 0x41, 0x5a, 0xd0, 0x1c, 0xfb, 0xc1, 0x31, 0x63, 0xaf, 0xdd, 0x5a, 0xbe, 0xf4, 0x2c,
	0x89, 0xe5, 0x89, 0x6b, 0x92, 0xeb, 0xd0, 0x41, 0xc3, 0x93, 0x94, 0x31, 0xad, 0xaa, 0xef, 0xbc,
	0x5b, 0x7b, 0xfd, 0x68, 0x0e, 0xa1, 0x8b, 0x17, 0x47, 0xa3, 0xe0, 0x51, 0x84, 0x09, 0x11, 0xe8,
	0xa2, 0x70, 0x4c, 0xb9, 0xd4, 0x3f, 0x23, 0xae, 0x51, 0xe8, 0xb4, 0xfc, 0x84, 0xf2, 0xc8, 0xad,
	0x11, 0x17, 0xda, 0x85, 0xdd, 0xd1, 0x9c, 0xc5, 0xae, 0x59, 0xb8, 0x39, 0xe6, 0xb1, 0x5b, 0xc7,
	0xa4, 0x51, 0x38, 0x4c, 0x24, 0xca, 0xd6, 0xce, 0x0f, 0xa5, 0x87, 0xc6, 0x2a, 0xec, 0xf3, 0x65,
	0xd8, 0x0e, 0x38, 0x28, 0x3c, 0x4e, 0x78, 0xfc, 0xca, 0x35, 0x70, 0x3b, 0x8a, 0x4f, 0x78, 0xcc,
	0xc5, 0x89, 0x2e, 0x0c, 0x65, 0xfc, 0xd7, 0x72, 0xcd, 0xfd, 0x1e, 0x58, 0x3f, 0x22, 0x63, 0xf6,
	0x1b, 0x1a, 0xda, 0x49, 0x43, 0x11, 0xe8, 0xc1, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x99, 0x13,
	0xa2, 0x59, 0x2c, 0x10, 0x00, 0x00,
}
