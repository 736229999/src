// Code generated by protoc-gen-go. DO NOT EDIT.
// source: recharge.proto

package apiproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RechargeRequest struct {
	Money int64  `protobuf:"varint,1,opt,name=money" json:"money"`
	Os    string `protobuf:"bytes,2,opt,name=os" json:"os"`
}

func (m *RechargeRequest) Reset()                    { *m = RechargeRequest{} }
func (m *RechargeRequest) String() string            { return proto.CompactTextString(m) }
func (*RechargeRequest) ProtoMessage()               {}
func (*RechargeRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{0} }

func (m *RechargeRequest) GetMoney() int64 {
	if m != nil {
		return m.Money
	}
	return 0
}

func (m *RechargeRequest) GetOs() string {
	if m != nil {
		return m.Os
	}
	return ""
}

type RechargeResponse struct {
	AppId     string `protobuf:"bytes,1,opt,name=app_id,json=appId" json:"app_id"`
	PartnerId string `protobuf:"bytes,2,opt,name=partner_id,json=partnerId" json:"partner_id"`
	PrepayId  string `protobuf:"bytes,3,opt,name=prepay_id,json=prepayId" json:"prepay_id"`
	Package   string `protobuf:"bytes,4,opt,name=package" json:"package"`
	NonceStr  string `protobuf:"bytes,5,opt,name=nonce_str,json=nonceStr" json:"nonce_str"`
	Timestamp int64  `protobuf:"varint,6,opt,name=timestamp" json:"timestamp"`
	Sign      string `protobuf:"bytes,7,opt,name=sign" json:"sign"`
}

func (m *RechargeResponse) Reset()                    { *m = RechargeResponse{} }
func (m *RechargeResponse) String() string            { return proto.CompactTextString(m) }
func (*RechargeResponse) ProtoMessage()               {}
func (*RechargeResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{1} }

func (m *RechargeResponse) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *RechargeResponse) GetPartnerId() string {
	if m != nil {
		return m.PartnerId
	}
	return ""
}

func (m *RechargeResponse) GetPrepayId() string {
	if m != nil {
		return m.PrepayId
	}
	return ""
}

func (m *RechargeResponse) GetPackage() string {
	if m != nil {
		return m.Package
	}
	return ""
}

func (m *RechargeResponse) GetNonceStr() string {
	if m != nil {
		return m.NonceStr
	}
	return ""
}

func (m *RechargeResponse) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *RechargeResponse) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

type AlipayRechargeReply struct {
	AppId      string `protobuf:"bytes,1,opt,name=App_id,json=AppId" json:"App_id"`
	Method     string `protobuf:"bytes,2,opt,name=Method" json:"Method"`
	Charset    string `protobuf:"bytes,3,opt,name=Charset" json:"Charset"`
	SignType   string `protobuf:"bytes,4,opt,name=Sign_type,json=SignType" json:"Sign_type"`
	Timestamp  string `protobuf:"bytes,5,opt,name=Timestamp" json:"Timestamp"`
	Version    string `protobuf:"bytes,6,opt,name=Version" json:"Version"`
	BizContent string `protobuf:"bytes,7,opt,name=Biz_content,json=BizContent" json:"Biz_content"`
	NotifyUrl  string `protobuf:"bytes,8,opt,name=Notify_url,json=NotifyUrl" json:"Notify_url"`
	Sign       string `protobuf:"bytes,9,opt,name=Sign" json:"Sign"`
}

func (m *AlipayRechargeReply) Reset()                    { *m = AlipayRechargeReply{} }
func (m *AlipayRechargeReply) String() string            { return proto.CompactTextString(m) }
func (*AlipayRechargeReply) ProtoMessage()               {}
func (*AlipayRechargeReply) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{2} }

func (m *AlipayRechargeReply) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *AlipayRechargeReply) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *AlipayRechargeReply) GetCharset() string {
	if m != nil {
		return m.Charset
	}
	return ""
}

func (m *AlipayRechargeReply) GetSignType() string {
	if m != nil {
		return m.SignType
	}
	return ""
}

func (m *AlipayRechargeReply) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *AlipayRechargeReply) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *AlipayRechargeReply) GetBizContent() string {
	if m != nil {
		return m.BizContent
	}
	return ""
}

func (m *AlipayRechargeReply) GetNotifyUrl() string {
	if m != nil {
		return m.NotifyUrl
	}
	return ""
}

func (m *AlipayRechargeReply) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

type JdPayRechargeReply struct {
	Merchant string `protobuf:"bytes,1,opt,name=Merchant" json:"Merchant"`
	Device   string `protobuf:"bytes,2,opt,name=Device" json:"Device"`
	OrderId  string `protobuf:"bytes,3,opt,name=OrderId" json:"OrderId"`
	Sign     string `protobuf:"bytes,4,opt,name=Sign" json:"Sign"`
}

func (m *JdPayRechargeReply) Reset()                    { *m = JdPayRechargeReply{} }
func (m *JdPayRechargeReply) String() string            { return proto.CompactTextString(m) }
func (*JdPayRechargeReply) ProtoMessage()               {}
func (*JdPayRechargeReply) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{3} }

func (m *JdPayRechargeReply) GetMerchant() string {
	if m != nil {
		return m.Merchant
	}
	return ""
}

func (m *JdPayRechargeReply) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *JdPayRechargeReply) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *JdPayRechargeReply) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

func init() {
	proto.RegisterType((*RechargeRequest)(nil), "apiproto.RechargeRequest")
	proto.RegisterType((*RechargeResponse)(nil), "apiproto.RechargeResponse")
	proto.RegisterType((*AlipayRechargeReply)(nil), "apiproto.AlipayRechargeReply")
	proto.RegisterType((*JdPayRechargeReply)(nil), "apiproto.JdPayRechargeReply")
}

func init() { proto.RegisterFile("recharge.proto", fileDescriptor12) }

var fileDescriptor12 = []byte{
	// 412 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x52, 0x4d, 0x6f, 0x13, 0x31,
	0x10, 0x55, 0xd2, 0x24, 0xdd, 0x1d, 0xa4, 0x02, 0xe6, 0x43, 0x16, 0x1f, 0xa2, 0xca, 0xa9, 0x27,
	0x2e, 0x1c, 0x38, 0x27, 0xe5, 0x12, 0xa4, 0x42, 0xb5, 0x2d, 0x5c, 0x57, 0x66, 0x77, 0x48, 0x2c,
	0x36, 0xf6, 0x60, 0xbb, 0x95, 0x36, 0x7f, 0x80, 0x7f, 0xc7, 0x6f, 0x42, 0x63, 0xaf, 0xb3, 0xa2,
	0xb7, 0x79, 0x6f, 0x34, 0x33, 0xef, 0x3d, 0x1b, 0xce, 0x1c, 0x36, 0x3b, 0xe5, 0xb6, 0xf8, 0x9e,
	0x9c, 0x0d, 0x56, 0x14, 0x8a, 0x74, 0xac, 0x96, 0x1f, 0xe1, 0x71, 0x35, 0xf4, 0x2a, 0xfc, 0x7d,
	0x87, 0x3e, 0x88, 0xe7, 0x30, 0xdf, 0x5b, 0x83, 0xbd, 0x9c, 0x9c, 0x4f, 0x2e, 0x4e, 0xaa, 0x04,
	0xc4, 0x19, 0x4c, 0xad, 0x97, 0xd3, 0xf3, 0xc9, 0x45, 0x59, 0x4d, 0xad, 0x5f, 0xfe, 0x9d, 0xc0,
	0x93, 0x71, 0xd2, 0x93, 0x35, 0x1e, 0xc5, 0x0b, 0x58, 0x28, 0xa2, 0x5a, 0xb7, 0x71, 0xb6, 0xac,
	0xe6, 0x8a, 0x68, 0xd3, 0x8a, 0xb7, 0x00, 0xa4, 0x5c, 0x30, 0xe8, 0xb8, 0x95, 0x76, 0x94, 0x03,
	0xb3, 0x69, 0xc5, 0x6b, 0x28, 0xc9, 0x21, 0xa9, 0x9e, 0xbb, 0x27, 0xb1, 0x5b, 0x24, 0x62, 0xd3,
	0x0a, 0x09, 0xa7, 0xa4, 0x9a, 0x5f, 0x6a, 0x8b, 0x72, 0x16, 0x5b, 0x19, 0xf2, 0x98, 0xb1, 0xa6,
	0xc1, 0xda, 0x07, 0x27, 0xe7, 0x69, 0x2c, 0x12, 0x37, 0xc1, 0x89, 0x37, 0x50, 0x06, 0xbd, 0x47,
	0x1f, 0xd4, 0x9e, 0xe4, 0x22, 0x1a, 0x19, 0x09, 0x21, 0x60, 0xe6, 0xf5, 0xd6, 0xc8, 0xd3, 0x38,
	0x15, 0xeb, 0xe5, 0x9f, 0x29, 0x3c, 0x5b, 0x75, 0x9a, 0x54, 0x3f, 0xda, 0xa2, 0xae, 0x67, 0x4f,
	0xab, 0xff, 0x3c, 0xad, 0xa2, 0xa7, 0x97, 0xb0, 0xb8, 0xc2, 0xb0, 0xb3, 0xd9, 0xcf, 0x80, 0x58,
	0xef, 0xe5, 0x4e, 0x39, 0x8f, 0x61, 0xb0, 0x92, 0x21, 0xeb, 0xbd, 0xd1, 0x5b, 0x53, 0x87, 0x9e,
	0xb2, 0x97, 0x82, 0x89, 0xdb, 0x9e, 0x90, 0xf5, 0xde, 0x1e, 0xf5, 0x26, 0x33, 0x23, 0xc1, 0x4b,
	0xbf, 0xa3, 0xf3, 0xda, 0x9a, 0xe8, 0xa5, 0xac, 0x32, 0x14, 0xef, 0xe0, 0xd1, 0x5a, 0x1f, 0xea,
	0xc6, 0x9a, 0x80, 0x26, 0x0c, 0x86, 0x60, 0xad, 0x0f, 0x97, 0x89, 0xe1, 0xec, 0xbf, 0xd8, 0xa0,
	0x7f, 0xf6, 0xf5, 0x9d, 0xeb, 0x64, 0x91, 0x36, 0x27, 0xe6, 0x9b, 0xeb, 0x38, 0x09, 0xd6, 0x20,
	0xcb, 0x94, 0x04, 0xd7, 0xcb, 0x7b, 0x10, 0x9f, 0xdb, 0xeb, 0x87, 0x39, 0xbc, 0x82, 0xe2, 0x0a,
	0x5d, 0xb3, 0x53, 0x26, 0x0c, 0x49, 0x1c, 0x31, 0x87, 0xf1, 0x09, 0xef, 0x75, 0x83, 0x39, 0x8c,
	0x84, 0x58, 0xf7, 0x57, 0xd7, 0xf2, 0x23, 0xe7, 0x30, 0x06, 0x78, 0xbc, 0x3b, 0x1b, 0xef, 0xae,
	0x9f, 0xc2, 0xfc, 0x9a, 0x3f, 0xe5, 0xba, 0xc8, 0x97, 0x7f, 0x2c, 0xe2, 0x2f, 0xfd, 0xf0, 0x2f,
	0x00, 0x00, 0xff, 0xff, 0xce, 0xbe, 0xe4, 0x68, 0xc1, 0x02, 0x00, 0x00,
}
