// Code generated by protoc-gen-go. DO NOT EDIT.
// source: order.proto

package dbproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 用户购彩订单
type UserOrder struct {
	Id            int64   `protobuf:"varint,1,opt,name=id" json:"id"`
	Name          string  `protobuf:"bytes,2,opt,name=name" json:"name"`
	OrderTime     int64   `protobuf:"varint,3,opt,name=order_time,json=orderTime" json:"order_time"`
	SumMoney      float64 `protobuf:"fixed64,4,opt,name=sum_money,json=sumMoney" json:"sum_money"`
	Cai           float64 `protobuf:"fixed64,5,opt,name=cai" json:"cai"`
	Balance       float64 `protobuf:"fixed64,6,opt,name=balance" json:"balance"`
	CostCai       float64 `protobuf:"fixed64,7,opt,name=cost_cai,json=costCai" json:"cost_cai"`
	CostBalance   float64 `protobuf:"fixed64,8,opt,name=cost_balance,json=costBalance" json:"cost_balance"`
	LotteryName   string  `protobuf:"bytes,9,opt,name=lottery_name,json=lotteryName" json:"lottery_name"`
	Issues        string  `protobuf:"bytes,10,opt,name=issues" json:"issues"`
	IssuesNum     int64   `protobuf:"varint,11,opt,name=issues_num,json=issuesNum" json:"issues_num"`
	SchemeList    string  `protobuf:"bytes,12,opt,name=scheme_list,json=schemeList" json:"scheme_list"`
	IsUseTicket   bool    `protobuf:"varint,13,opt,name=is_use_ticket,json=isUseTicket" json:"is_use_ticket"`
	Status        int32   `protobuf:"varint,14,opt,name=status" json:"status"`
	TotalWinMoney float64 `protobuf:"fixed64,15,opt,name=total_win_money,json=totalWinMoney" json:"total_win_money"`
	Ticket        *Ticket `protobuf:"bytes,16,opt,name=ticket" json:"ticket"`
}

func (m *UserOrder) Reset()                    { *m = UserOrder{} }
func (m *UserOrder) String() string            { return proto.CompactTextString(m) }
func (*UserOrder) ProtoMessage()               {}
func (*UserOrder) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{0} }

func (m *UserOrder) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserOrder) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserOrder) GetOrderTime() int64 {
	if m != nil {
		return m.OrderTime
	}
	return 0
}

func (m *UserOrder) GetSumMoney() float64 {
	if m != nil {
		return m.SumMoney
	}
	return 0
}

func (m *UserOrder) GetCai() float64 {
	if m != nil {
		return m.Cai
	}
	return 0
}

func (m *UserOrder) GetBalance() float64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *UserOrder) GetCostCai() float64 {
	if m != nil {
		return m.CostCai
	}
	return 0
}

func (m *UserOrder) GetCostBalance() float64 {
	if m != nil {
		return m.CostBalance
	}
	return 0
}

func (m *UserOrder) GetLotteryName() string {
	if m != nil {
		return m.LotteryName
	}
	return ""
}

func (m *UserOrder) GetIssues() string {
	if m != nil {
		return m.Issues
	}
	return ""
}

func (m *UserOrder) GetIssuesNum() int64 {
	if m != nil {
		return m.IssuesNum
	}
	return 0
}

func (m *UserOrder) GetSchemeList() string {
	if m != nil {
		return m.SchemeList
	}
	return ""
}

func (m *UserOrder) GetIsUseTicket() bool {
	if m != nil {
		return m.IsUseTicket
	}
	return false
}

func (m *UserOrder) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *UserOrder) GetTotalWinMoney() float64 {
	if m != nil {
		return m.TotalWinMoney
	}
	return 0
}

func (m *UserOrder) GetTicket() *Ticket {
	if m != nil {
		return m.Ticket
	}
	return nil
}

func init() {
	proto.RegisterType((*UserOrder)(nil), "dbproto.UserOrder")
}

func init() { proto.RegisterFile("order.proto", fileDescriptor20) }

var fileDescriptor20 = []byte{
	// 352 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x34, 0x91, 0xcd, 0xae, 0xd3, 0x30,
	0x14, 0x84, 0xe5, 0xe6, 0x36, 0x4d, 0x4e, 0xfa, 0x27, 0x2f, 0x90, 0x01, 0x21, 0xd2, 0x2e, 0x20,
	0xab, 0x2e, 0xe0, 0x0d, 0x60, 0x0b, 0x45, 0x8a, 0x5a, 0xb1, 0xb4, 0xdc, 0xc4, 0x14, 0xab, 0x71,
	0x52, 0xe5, 0x38, 0x42, 0x7d, 0x58, 0xde, 0xe5, 0xca, 0xc7, 0xee, 0x6e, 0xe6, 0x9b, 0x8c, 0xad,
	0x71, 0xa0, 0x18, 0xc6, 0x56, 0x8f, 0x87, 0xfb, 0x38, 0xb8, 0x81, 0x2f, 0xda, 0x0b, 0x89, 0x77,
	0xfc, 0x6a, 0xfe, 0x38, 0x79, 0x57, 0xcd, 0x4d, 0x5d, 0x75, 0x08, 0xf7, 0xff, 0x13, 0xc8, 0xcf,
	0xa8, 0xc7, 0x5f, 0xbe, 0xc0, 0xd7, 0x30, 0x33, 0xad, 0x60, 0x25, 0xab, 0x92, 0x7a, 0x66, 0x5a,
	0xce, 0xe1, 0xa5, 0x57, 0x56, 0x8b, 0x59, 0xc9, 0xaa, 0xbc, 0x26, 0xcd, 0x3f, 0x00, 0xd0, 0xe9,
	0xd2, 0x19, 0xab, 0x45, 0x42, 0xdf, 0xe6, 0x44, 0x4e, 0xc6, 0x6a, 0xfe, 0x1e, 0x72, 0x9c, 0xac,
	0xb4, 0x43, 0xaf, 0x1f, 0xe2, 0xa5, 0x64, 0x15, 0xab, 0x33, 0x9c, 0xec, 0x4f, 0xef, 0xf9, 0x16,
	0x92, 0x46, 0x19, 0x31, 0x27, 0xec, 0x25, 0x17, 0xb0, 0xb8, 0xa8, 0x4e, 0xf5, 0x8d, 0x16, 0x29,
	0xd1, 0xa7, 0xe5, 0x6f, 0x21, 0x6b, 0x06, 0x74, 0xd2, 0x17, 0x16, 0x21, 0xf2, 0xfe, 0xbb, 0x32,
	0x7c, 0x07, 0x4b, 0x8a, 0x9e, 0xcd, 0x8c, 0xe2, 0xc2, 0xb3, 0x6f, 0xb1, 0xbd, 0x83, 0x65, 0x37,
	0x38, 0xa7, 0xc7, 0x87, 0xa4, 0x05, 0x39, 0x2d, 0x28, 0x22, 0x3b, 0xfa, 0x21, 0x6f, 0x20, 0x35,
	0x88, 0x93, 0x46, 0x01, 0x14, 0x46, 0xe7, 0x07, 0x06, 0x25, 0xfb, 0xc9, 0x8a, 0x22, 0x0c, 0x0c,
	0xe4, 0x38, 0x59, 0xfe, 0x11, 0x0a, 0x6c, 0xfe, 0x6a, 0xab, 0x65, 0x67, 0xd0, 0x89, 0x25, 0x75,
	0x21, 0xa0, 0x1f, 0x06, 0x1d, 0xdf, 0xc3, 0xca, 0xa0, 0x9c, 0x50, 0x4b, 0x67, 0x9a, 0x9b, 0x76,
	0x62, 0x55, 0xb2, 0x2a, 0xab, 0x0b, 0x83, 0x67, 0xd4, 0x27, 0x42, 0xfe, 0x6e, 0x74, 0xca, 0x4d,
	0x28, 0xd6, 0x25, 0xab, 0xe6, 0x75, 0x74, 0xfc, 0x13, 0x6c, 0xdc, 0xe0, 0x54, 0x27, 0xff, 0x99,
	0x3e, 0xbe, 0xe1, 0x86, 0xc6, 0xad, 0x08, 0xff, 0x36, 0x7d, 0x78, 0xc8, 0xcf, 0x90, 0xc6, 0xc3,
	0xb7, 0x25, 0xab, 0x8a, 0x2f, 0x9b, 0x43, 0xfc, 0xc9, 0x87, 0x70, 0x41, 0x1d, 0xe3, 0x4b, 0x4a,
	0xf4, 0xeb, 0x6b, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbe, 0x74, 0x7f, 0x27, 0x12, 0x02, 0x00, 0x00,
}
