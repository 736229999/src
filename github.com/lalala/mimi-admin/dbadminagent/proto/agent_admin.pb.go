// Code generated by protoc-gen-go. DO NOT EDIT.
// source: agent_admin.proto

package dbproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DbAdminAgent service

type DbAdminAgentClient interface {
	QueryUserInfoByEmail(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*AdminUserInfoArg, error)
	SetUserInfoById(ctx context.Context, in *AdminUserInfoArg, opts ...grpc.CallOption) (*AdminUserInfoArg, error)
	QueryUserList(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*AdminUserList, error)
	QueryRoleList(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*RoleList, error)
	QueryPrivilegeList(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*PrivilegeList, error)
	InsertPrivilege(ctx context.Context, in *Privilege, opts ...grpc.CallOption) (*Nil, error)
	SetPrivileges(ctx context.Context, in *AdminPrivileges, opts ...grpc.CallOption) (*Nil, error)
	DeletePrivileges(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*Nil, error)
	// 新闻相关
	// 添加一条新闻
	CreateNews(ctx context.Context, in *News, opts ...grpc.CallOption) (*IntValue, error)
	// 后台查询新闻列表
	QueryNewsList(ctx context.Context, in *QueryNewsArg, opts ...grpc.CallOption) (*NewsList, error)
	// 获取一条新闻
	QueryNewsById(ctx context.Context, in *NewsId, opts ...grpc.CallOption) (*News, error)
	// 修改一条新闻
	UpdateNews(ctx context.Context, in *News, opts ...grpc.CallOption) (*IntValue, error)
	// 获取后台新闻select框查询内容
	QueryBakendSelectOfNews(ctx context.Context, in *QueryNewsOfSelect, opts ...grpc.CallOption) (*NewsList, error)
	// 平台配置相关
	// 创建一条Banner信息
	CreateBanner(ctx context.Context, in *Banner, opts ...grpc.CallOption) (*IntValue, error)
	// 后台查询Banner列表
	QueryBannerList(ctx context.Context, in *QueryBannerArg, opts ...grpc.CallOption) (*BannerList, error)
	// 查询一条Banner信息
	QueryBannerById(ctx context.Context, in *BannerId, opts ...grpc.CallOption) (*Banner, error)
	// 修改一条Banner信息
	UpdateBanner(ctx context.Context, in *Banner, opts ...grpc.CallOption) (*IntValue, error)
	// 获取Banner预览
	QueryPreBanner(ctx context.Context, in *QueryBannerArg, opts ...grpc.CallOption) (*BannerList, error)
	// 创建一条常见问题
	CreateFaq(ctx context.Context, in *Faq, opts ...grpc.CallOption) (*IntValue, error)
	// 查询Faq列表
	QueryFaqList(ctx context.Context, in *QueryFaqArg, opts ...grpc.CallOption) (*FaqList, error)
	// 查询一条Faq信息
	QueryFaqById(ctx context.Context, in *FaqId, opts ...grpc.CallOption) (*Faq, error)
	// 修改一条Faq信息
	UpdateFaq(ctx context.Context, in *Faq, opts ...grpc.CallOption) (*IntValue, error)
	// 日志.
	InsertLog(ctx context.Context, in *Log, opts ...grpc.CallOption) (*Nil, error)
	QueryLog(ctx context.Context, in *LogReply, opts ...grpc.CallOption) (*LogReply, error)
	// 彩票.
	QueryBuycaiOptions(ctx context.Context, in *BuycaiOptionsReply, opts ...grpc.CallOption) (*BuycaiOptionsReply, error)
	QueryLotteryIssue(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*BuycaiOptions, error)
	InsertLotteryOptions(ctx context.Context, in *BuycaiOptionsIssue, opts ...grpc.CallOption) (*Nil, error)
	QueryPlayTimeSettingList(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*PlayTimeSettingsList, error)
	InsertPlayTimeSettings(ctx context.Context, in *PlayTimeSettings, opts ...grpc.CallOption) (*Nil, error)
	UpdatePlayTimeSettings(ctx context.Context, in *PlayTimeSettings, opts ...grpc.CallOption) (*Nil, error)
	InsertLotteryOption(ctx context.Context, in *LotteryOptions, opts ...grpc.CallOption) (*Nil, error)
	QueryLotteryOptionsList(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*LotteryOptionsList, error)
	GetLotteryOptionsById(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*LotteryOptions, error)
	UpdateLotteryOptionsById(ctx context.Context, in *LotteryOptions, opts ...grpc.CallOption) (*Nil, error)
	DeleteIssueById(ctx context.Context, in *BuycaiOptionsIssue, opts ...grpc.CallOption) (*Nil, error)
	QueryLotteryBuycaiOptionsById(ctx context.Context, in *BuycaiOptionsIssue, opts ...grpc.CallOption) (*BuycaiOptions, error)
	UpdateLotteryBuycaiOptionsById(ctx context.Context, in *BuycaiOptionsUpdateIssue, opts ...grpc.CallOption) (*Nil, error)
	InsertLotteryBuycaiOptions(ctx context.Context, in *BuycaiOptionsUpdateIssue, opts ...grpc.CallOption) (*Nil, error)
	QueryWinningLotteryList(ctx context.Context, in *WinningLotteryList, opts ...grpc.CallOption) (*LotteryWinningNoList, error)
	QueryWinningByIssue(ctx context.Context, in *LotteryWinningNo, opts ...grpc.CallOption) (*LotteryWinningNoList, error)
	QueryWinningHistoryListByLottery(ctx context.Context, in *WinningListByLottery, opts ...grpc.CallOption) (*WinningListByLottery, error)
	// 活动.
	QueryGiftList(ctx context.Context, in *GiftList, opts ...grpc.CallOption) (*GiftList, error)
	InsertGift(ctx context.Context, in *GiftPackageRequest, opts ...grpc.CallOption) (*Nil, error)
	QueryGiftDetailById(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*GiftPackageRequest, error)
	DeleteGiftById(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*Nil, error)
	UpdateGiftById(ctx context.Context, in *GiftPackageRequest, opts ...grpc.CallOption) (*Nil, error)
	QueryCdkeyList(ctx context.Context, in *CdkeyReply, opts ...grpc.CallOption) (*CdkeyReply, error)
	InsertCdkeyBatch(ctx context.Context, in *CdkeyBatch, opts ...grpc.CallOption) (*Nil, error)
	QueryCdkeyDetailById(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*CdkeyDetail, error)
	UpdateCdkeyById(ctx context.Context, in *CdkeyDetail, opts ...grpc.CallOption) (*Nil, error)
	DeleteCdkeyById(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*Nil, error)
	// 平台配置.
	UpdateContact(ctx context.Context, in *Contact, opts ...grpc.CallOption) (*Nil, error)
	QueryContact(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*Contact, error)
	QueryFeedbackList(ctx context.Context, in *FeedbackList, opts ...grpc.CallOption) (*FeedbackList, error)
	DeleteFeedbackById(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*Nil, error)
	QueryFeedbackById(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*Feedback, error)
	UpdateFeedbackById(ctx context.Context, in *Feedback, opts ...grpc.CallOption) (*Nil, error)
	// 足彩相关
	CreateFbGame(ctx context.Context, in *GameInfo, opts ...grpc.CallOption) (*IntValue, error)
	CreatePlayOdds(ctx context.Context, in *PlayOdds, opts ...grpc.CallOption) (*IntValue, error)
	UpdatePlayOdds(ctx context.Context, in *PlayOdds, opts ...grpc.CallOption) (*IntValue, error)
	CreateFbResult(ctx context.Context, in *FbGameresult, opts ...grpc.CallOption) (*IntValue, error)
	CreateFbTeam(ctx context.Context, in *FbTeamInfo, opts ...grpc.CallOption) (*IntValue, error)
	CreateFbLeague(ctx context.Context, in *FbLeagueInfo, opts ...grpc.CallOption) (*IntValue, error)
	QueryFbGame(ctx context.Context, in *QueryFbGameArg, opts ...grpc.CallOption) (*FbGameList, error)
	QueryFbGameById(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*GameInfo, error)
	QueryOddsById(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*PlayOdds, error)
	QueryFbResult(ctx context.Context, in *QueryOpencaiArg, opts ...grpc.CallOption) (*FbOpencaiList, error)
	QueryFbResultById(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*FbGameresult, error)
	QueryFbTeamList(ctx context.Context, in *QueryFbTeamArg, opts ...grpc.CallOption) (*FbTeamList, error)
	QueryFbTeamById(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*FbTeamInfo, error)
	QueryFbLeague(ctx context.Context, in *QueryFbLeagueArg, opts ...grpc.CallOption) (*FbLeagueList, error)
	// usercenter.
	QueryUsercenterList(ctx context.Context, in *UsercenterList, opts ...grpc.CallOption) (*UsercenterList, error)
	QueryUsercenterDetail(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*Userinfo, error)
	QueryUsercenterFundById(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*FundHistory, error)
	QueryUsercenterRechargeById(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*FundHistory, error)
	QueryUsercenterWithdrawById(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*WithdrawApplyList, error)
	// 获取提现申请列表
	QueryWithdrawApplyList(ctx context.Context, in *QueryWithdrawApplyArg, opts ...grpc.CallOption) (*WithdrawApplyList, error)
	// 获取提现申请
	QueryWithdrawApplyById(ctx context.Context, in *WithdrawApplyId, opts ...grpc.CallOption) (*WithdrawApply, error)
	// 修改提现申请状态
	UpdateWithdrawApplyStatus(ctx context.Context, in *UpdateWAStatusArg, opts ...grpc.CallOption) (*IntValue, error)
	// 检查提现申请
	CheckWithdrawApply(ctx context.Context, in *CheckWAArg, opts ...grpc.CallOption) (*CheckWARes, error)
	// 认领提现申请
	ClaimWithdrawApply(ctx context.Context, in *ClaimWAArg, opts ...grpc.CallOption) (*WithdrawApply, error)
	// rpc  (Request) returns (Response);
	// 添加提现申请审核权限
	CreateWithdrawAuditAuth(ctx context.Context, in *WithdrawAuditAuth, opts ...grpc.CallOption) (*IntValue, error)
	// 获取提现申请审核权限列表
	QueryWithdrawAuditAuthList(ctx context.Context, in *QueryWithdrawAuditAuthArg, opts ...grpc.CallOption) (*WithdrawAuditAuthList, error)
	// 获取提现申请审核权限
	QueryWithdrawAuditAuthById(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*WithdrawAuditAuth, error)
	// 更新提现申请审核权限
	UpdateWithdrawAuditAuth(ctx context.Context, in *WithdrawAuditAuth, opts ...grpc.CallOption) (*IntValue, error)
	// 添加提现转账信息
	CreateWithdrawTransfer(ctx context.Context, in *WithdrawTransfer, opts ...grpc.CallOption) (*IntValue, error)
	// 获取提现转账列表
	QueryWithdrawTransferList(ctx context.Context, in *QueryWithdrawTransferArg, opts ...grpc.CallOption) (*WithdrawTransferList, error)
	// 获取提现转账
	QueryWithdrawTransferById(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*WithdrawTransfer, error)
	// 修改提现转账
	UpdateWithdrawTransfer(ctx context.Context, in *WithdrawTransfer, opts ...grpc.CallOption) (*IntValue, error)
	// 数据统计.
	QueryOrderAndIncome(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*StatisticsOrderAndIncome, error)
	QueryRechargeList(ctx context.Context, in *RechargeOrderList, opts ...grpc.CallOption) (*RechargeOrderList, error)
	QueryRechargeListByMonth(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*RechargeOrderList, error)
	QueryRechangeListByYear(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*RechargeOrderList, error)
	QueryBuycaiListByDay(ctx context.Context, in *BuycaiStatisticsList, opts ...grpc.CallOption) (*BuycaiStatisticsList, error)
	QueryUserStatisticsNum(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*UserStatisticsNum, error)
	// 活动相关
	InsertTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Nil, error)
	// 查询任务列表带分页
	QueryTaskList(ctx context.Context, in *TaskReplyList, opts ...grpc.CallOption) (*TaskReplyList, error)
	// 查询任务列表不带分页
	QueryAllTaskList(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*TaskList, error)
	// 删除任务
	DeleteTask(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*Nil, error)
	// 获取单个任务
	QueryTaskById(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*Task, error)
	// 更新任务
	UpdateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Nil, error)
	// 获取所有任务类型
	QueryAllTaskType(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*TaskTypeList, error)
	// 添加活动
	InsertActivity(ctx context.Context, in *Activity, opts ...grpc.CallOption) (*Nil, error)
	// 查询所有活动
	QueryActivityList(ctx context.Context, in *ActivityReplyList, opts ...grpc.CallOption) (*ActivityReplyList, error)
	// 查询礼包列表
	QueryAllGiftTemplateList(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*TemplateList, error)
	// 删除活动
	DeleteActivity(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*Nil, error)
	// 查询单个活动
	QueryActivityById(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*Activity, error)
	// 更新活动
	UpdateActivity(ctx context.Context, in *Activity, opts ...grpc.CallOption) (*Nil, error)
	// 礼包模板.
	QueryGiftTemplateList(ctx context.Context, in *GiftTemplateList, opts ...grpc.CallOption) (*GiftTemplateList, error)
	InsertGiftTemplate(ctx context.Context, in *GiftTemplate, opts ...grpc.CallOption) (*Nil, error)
	QueryGiftTemplateById(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*GiftTemplate, error)
	UpdateGiftTemplateById(ctx context.Context, in *GiftTemplate, opts ...grpc.CallOption) (*Nil, error)
	DeleteGiftTemplateById(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*Nil, error)
	QueryGiftTemplateListAll(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*GiftTemplateList, error)
	// 订单管理
	QueryUserOrderList(ctx context.Context, in *UserOrderList, opts ...grpc.CallOption) (*UserOrderList, error)
	QueryUserOrderListWithCondition(ctx context.Context, in *UserOrderList, opts ...grpc.CallOption) (*UserOrderList, error)
}

type dbAdminAgentClient struct {
	cc *grpc.ClientConn
}

func NewDbAdminAgentClient(cc *grpc.ClientConn) DbAdminAgentClient {
	return &dbAdminAgentClient{cc}
}

func (c *dbAdminAgentClient) QueryUserInfoByEmail(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*AdminUserInfoArg, error) {
	out := new(AdminUserInfoArg)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryUserInfoByEmail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) SetUserInfoById(ctx context.Context, in *AdminUserInfoArg, opts ...grpc.CallOption) (*AdminUserInfoArg, error) {
	out := new(AdminUserInfoArg)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/SetUserInfoById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryUserList(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*AdminUserList, error) {
	out := new(AdminUserList)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryUserList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryRoleList(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*RoleList, error) {
	out := new(RoleList)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryRoleList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryPrivilegeList(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*PrivilegeList, error) {
	out := new(PrivilegeList)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryPrivilegeList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) InsertPrivilege(ctx context.Context, in *Privilege, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/InsertPrivilege", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) SetPrivileges(ctx context.Context, in *AdminPrivileges, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/SetPrivileges", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) DeletePrivileges(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/DeletePrivileges", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) CreateNews(ctx context.Context, in *News, opts ...grpc.CallOption) (*IntValue, error) {
	out := new(IntValue)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/CreateNews", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryNewsList(ctx context.Context, in *QueryNewsArg, opts ...grpc.CallOption) (*NewsList, error) {
	out := new(NewsList)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryNewsList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryNewsById(ctx context.Context, in *NewsId, opts ...grpc.CallOption) (*News, error) {
	out := new(News)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryNewsById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) UpdateNews(ctx context.Context, in *News, opts ...grpc.CallOption) (*IntValue, error) {
	out := new(IntValue)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/UpdateNews", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryBakendSelectOfNews(ctx context.Context, in *QueryNewsOfSelect, opts ...grpc.CallOption) (*NewsList, error) {
	out := new(NewsList)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryBakendSelectOfNews", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) CreateBanner(ctx context.Context, in *Banner, opts ...grpc.CallOption) (*IntValue, error) {
	out := new(IntValue)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/CreateBanner", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryBannerList(ctx context.Context, in *QueryBannerArg, opts ...grpc.CallOption) (*BannerList, error) {
	out := new(BannerList)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryBannerList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryBannerById(ctx context.Context, in *BannerId, opts ...grpc.CallOption) (*Banner, error) {
	out := new(Banner)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryBannerById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) UpdateBanner(ctx context.Context, in *Banner, opts ...grpc.CallOption) (*IntValue, error) {
	out := new(IntValue)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/UpdateBanner", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryPreBanner(ctx context.Context, in *QueryBannerArg, opts ...grpc.CallOption) (*BannerList, error) {
	out := new(BannerList)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryPreBanner", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) CreateFaq(ctx context.Context, in *Faq, opts ...grpc.CallOption) (*IntValue, error) {
	out := new(IntValue)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/CreateFaq", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryFaqList(ctx context.Context, in *QueryFaqArg, opts ...grpc.CallOption) (*FaqList, error) {
	out := new(FaqList)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryFaqList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryFaqById(ctx context.Context, in *FaqId, opts ...grpc.CallOption) (*Faq, error) {
	out := new(Faq)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryFaqById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) UpdateFaq(ctx context.Context, in *Faq, opts ...grpc.CallOption) (*IntValue, error) {
	out := new(IntValue)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/UpdateFaq", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) InsertLog(ctx context.Context, in *Log, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/InsertLog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryLog(ctx context.Context, in *LogReply, opts ...grpc.CallOption) (*LogReply, error) {
	out := new(LogReply)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryLog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryBuycaiOptions(ctx context.Context, in *BuycaiOptionsReply, opts ...grpc.CallOption) (*BuycaiOptionsReply, error) {
	out := new(BuycaiOptionsReply)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryBuycaiOptions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryLotteryIssue(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*BuycaiOptions, error) {
	out := new(BuycaiOptions)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryLotteryIssue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) InsertLotteryOptions(ctx context.Context, in *BuycaiOptionsIssue, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/InsertLotteryOptions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryPlayTimeSettingList(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*PlayTimeSettingsList, error) {
	out := new(PlayTimeSettingsList)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryPlayTimeSettingList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) InsertPlayTimeSettings(ctx context.Context, in *PlayTimeSettings, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/InsertPlayTimeSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) UpdatePlayTimeSettings(ctx context.Context, in *PlayTimeSettings, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/UpdatePlayTimeSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) InsertLotteryOption(ctx context.Context, in *LotteryOptions, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/InsertLotteryOption", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryLotteryOptionsList(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*LotteryOptionsList, error) {
	out := new(LotteryOptionsList)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryLotteryOptionsList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) GetLotteryOptionsById(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*LotteryOptions, error) {
	out := new(LotteryOptions)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/GetLotteryOptionsById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) UpdateLotteryOptionsById(ctx context.Context, in *LotteryOptions, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/UpdateLotteryOptionsById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) DeleteIssueById(ctx context.Context, in *BuycaiOptionsIssue, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/DeleteIssueById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryLotteryBuycaiOptionsById(ctx context.Context, in *BuycaiOptionsIssue, opts ...grpc.CallOption) (*BuycaiOptions, error) {
	out := new(BuycaiOptions)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryLotteryBuycaiOptionsById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) UpdateLotteryBuycaiOptionsById(ctx context.Context, in *BuycaiOptionsUpdateIssue, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/UpdateLotteryBuycaiOptionsById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) InsertLotteryBuycaiOptions(ctx context.Context, in *BuycaiOptionsUpdateIssue, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/InsertLotteryBuycaiOptions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryWinningLotteryList(ctx context.Context, in *WinningLotteryList, opts ...grpc.CallOption) (*LotteryWinningNoList, error) {
	out := new(LotteryWinningNoList)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryWinningLotteryList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryWinningByIssue(ctx context.Context, in *LotteryWinningNo, opts ...grpc.CallOption) (*LotteryWinningNoList, error) {
	out := new(LotteryWinningNoList)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryWinningByIssue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryWinningHistoryListByLottery(ctx context.Context, in *WinningListByLottery, opts ...grpc.CallOption) (*WinningListByLottery, error) {
	out := new(WinningListByLottery)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryWinningHistoryListByLottery", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryGiftList(ctx context.Context, in *GiftList, opts ...grpc.CallOption) (*GiftList, error) {
	out := new(GiftList)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryGiftList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) InsertGift(ctx context.Context, in *GiftPackageRequest, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/InsertGift", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryGiftDetailById(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*GiftPackageRequest, error) {
	out := new(GiftPackageRequest)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryGiftDetailById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) DeleteGiftById(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/DeleteGiftById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) UpdateGiftById(ctx context.Context, in *GiftPackageRequest, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/UpdateGiftById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryCdkeyList(ctx context.Context, in *CdkeyReply, opts ...grpc.CallOption) (*CdkeyReply, error) {
	out := new(CdkeyReply)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryCdkeyList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) InsertCdkeyBatch(ctx context.Context, in *CdkeyBatch, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/InsertCdkeyBatch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryCdkeyDetailById(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*CdkeyDetail, error) {
	out := new(CdkeyDetail)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryCdkeyDetailById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) UpdateCdkeyById(ctx context.Context, in *CdkeyDetail, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/UpdateCdkeyById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) DeleteCdkeyById(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/DeleteCdkeyById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) UpdateContact(ctx context.Context, in *Contact, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/UpdateContact", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryContact(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*Contact, error) {
	out := new(Contact)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryContact", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryFeedbackList(ctx context.Context, in *FeedbackList, opts ...grpc.CallOption) (*FeedbackList, error) {
	out := new(FeedbackList)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryFeedbackList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) DeleteFeedbackById(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/DeleteFeedbackById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryFeedbackById(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*Feedback, error) {
	out := new(Feedback)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryFeedbackById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) UpdateFeedbackById(ctx context.Context, in *Feedback, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/UpdateFeedbackById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) CreateFbGame(ctx context.Context, in *GameInfo, opts ...grpc.CallOption) (*IntValue, error) {
	out := new(IntValue)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/CreateFbGame", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) CreatePlayOdds(ctx context.Context, in *PlayOdds, opts ...grpc.CallOption) (*IntValue, error) {
	out := new(IntValue)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/CreatePlayOdds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) UpdatePlayOdds(ctx context.Context, in *PlayOdds, opts ...grpc.CallOption) (*IntValue, error) {
	out := new(IntValue)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/UpdatePlayOdds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) CreateFbResult(ctx context.Context, in *FbGameresult, opts ...grpc.CallOption) (*IntValue, error) {
	out := new(IntValue)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/CreateFbResult", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) CreateFbTeam(ctx context.Context, in *FbTeamInfo, opts ...grpc.CallOption) (*IntValue, error) {
	out := new(IntValue)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/CreateFbTeam", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) CreateFbLeague(ctx context.Context, in *FbLeagueInfo, opts ...grpc.CallOption) (*IntValue, error) {
	out := new(IntValue)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/CreateFbLeague", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryFbGame(ctx context.Context, in *QueryFbGameArg, opts ...grpc.CallOption) (*FbGameList, error) {
	out := new(FbGameList)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryFbGame", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryFbGameById(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*GameInfo, error) {
	out := new(GameInfo)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryFbGameById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryOddsById(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*PlayOdds, error) {
	out := new(PlayOdds)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryOddsById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryFbResult(ctx context.Context, in *QueryOpencaiArg, opts ...grpc.CallOption) (*FbOpencaiList, error) {
	out := new(FbOpencaiList)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryFbResult", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryFbResultById(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*FbGameresult, error) {
	out := new(FbGameresult)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryFbResultById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryFbTeamList(ctx context.Context, in *QueryFbTeamArg, opts ...grpc.CallOption) (*FbTeamList, error) {
	out := new(FbTeamList)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryFbTeamList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryFbTeamById(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*FbTeamInfo, error) {
	out := new(FbTeamInfo)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryFbTeamById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryFbLeague(ctx context.Context, in *QueryFbLeagueArg, opts ...grpc.CallOption) (*FbLeagueList, error) {
	out := new(FbLeagueList)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryFbLeague", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryUsercenterList(ctx context.Context, in *UsercenterList, opts ...grpc.CallOption) (*UsercenterList, error) {
	out := new(UsercenterList)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryUsercenterList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryUsercenterDetail(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*Userinfo, error) {
	out := new(Userinfo)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryUsercenterDetail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryUsercenterFundById(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*FundHistory, error) {
	out := new(FundHistory)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryUsercenterFundById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryUsercenterRechargeById(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*FundHistory, error) {
	out := new(FundHistory)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryUsercenterRechargeById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryUsercenterWithdrawById(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*WithdrawApplyList, error) {
	out := new(WithdrawApplyList)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryUsercenterWithdrawById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryWithdrawApplyList(ctx context.Context, in *QueryWithdrawApplyArg, opts ...grpc.CallOption) (*WithdrawApplyList, error) {
	out := new(WithdrawApplyList)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryWithdrawApplyList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryWithdrawApplyById(ctx context.Context, in *WithdrawApplyId, opts ...grpc.CallOption) (*WithdrawApply, error) {
	out := new(WithdrawApply)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryWithdrawApplyById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) UpdateWithdrawApplyStatus(ctx context.Context, in *UpdateWAStatusArg, opts ...grpc.CallOption) (*IntValue, error) {
	out := new(IntValue)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/UpdateWithdrawApplyStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) CheckWithdrawApply(ctx context.Context, in *CheckWAArg, opts ...grpc.CallOption) (*CheckWARes, error) {
	out := new(CheckWARes)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/CheckWithdrawApply", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) ClaimWithdrawApply(ctx context.Context, in *ClaimWAArg, opts ...grpc.CallOption) (*WithdrawApply, error) {
	out := new(WithdrawApply)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/ClaimWithdrawApply", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) CreateWithdrawAuditAuth(ctx context.Context, in *WithdrawAuditAuth, opts ...grpc.CallOption) (*IntValue, error) {
	out := new(IntValue)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/CreateWithdrawAuditAuth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryWithdrawAuditAuthList(ctx context.Context, in *QueryWithdrawAuditAuthArg, opts ...grpc.CallOption) (*WithdrawAuditAuthList, error) {
	out := new(WithdrawAuditAuthList)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryWithdrawAuditAuthList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryWithdrawAuditAuthById(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*WithdrawAuditAuth, error) {
	out := new(WithdrawAuditAuth)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryWithdrawAuditAuthById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) UpdateWithdrawAuditAuth(ctx context.Context, in *WithdrawAuditAuth, opts ...grpc.CallOption) (*IntValue, error) {
	out := new(IntValue)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/UpdateWithdrawAuditAuth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) CreateWithdrawTransfer(ctx context.Context, in *WithdrawTransfer, opts ...grpc.CallOption) (*IntValue, error) {
	out := new(IntValue)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/CreateWithdrawTransfer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryWithdrawTransferList(ctx context.Context, in *QueryWithdrawTransferArg, opts ...grpc.CallOption) (*WithdrawTransferList, error) {
	out := new(WithdrawTransferList)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryWithdrawTransferList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryWithdrawTransferById(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*WithdrawTransfer, error) {
	out := new(WithdrawTransfer)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryWithdrawTransferById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) UpdateWithdrawTransfer(ctx context.Context, in *WithdrawTransfer, opts ...grpc.CallOption) (*IntValue, error) {
	out := new(IntValue)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/UpdateWithdrawTransfer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryOrderAndIncome(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*StatisticsOrderAndIncome, error) {
	out := new(StatisticsOrderAndIncome)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryOrderAndIncome", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryRechargeList(ctx context.Context, in *RechargeOrderList, opts ...grpc.CallOption) (*RechargeOrderList, error) {
	out := new(RechargeOrderList)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryRechargeList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryRechargeListByMonth(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*RechargeOrderList, error) {
	out := new(RechargeOrderList)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryRechargeListByMonth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryRechangeListByYear(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*RechargeOrderList, error) {
	out := new(RechargeOrderList)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryRechangeListByYear", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryBuycaiListByDay(ctx context.Context, in *BuycaiStatisticsList, opts ...grpc.CallOption) (*BuycaiStatisticsList, error) {
	out := new(BuycaiStatisticsList)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryBuycaiListByDay", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryUserStatisticsNum(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*UserStatisticsNum, error) {
	out := new(UserStatisticsNum)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryUserStatisticsNum", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) InsertTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/InsertTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryTaskList(ctx context.Context, in *TaskReplyList, opts ...grpc.CallOption) (*TaskReplyList, error) {
	out := new(TaskReplyList)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryTaskList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryAllTaskList(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*TaskList, error) {
	out := new(TaskList)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryAllTaskList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) DeleteTask(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/DeleteTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryTaskById(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryTaskById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) UpdateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/UpdateTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryAllTaskType(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*TaskTypeList, error) {
	out := new(TaskTypeList)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryAllTaskType", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) InsertActivity(ctx context.Context, in *Activity, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/InsertActivity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryActivityList(ctx context.Context, in *ActivityReplyList, opts ...grpc.CallOption) (*ActivityReplyList, error) {
	out := new(ActivityReplyList)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryActivityList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryAllGiftTemplateList(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*TemplateList, error) {
	out := new(TemplateList)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryAllGiftTemplateList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) DeleteActivity(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/DeleteActivity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryActivityById(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*Activity, error) {
	out := new(Activity)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryActivityById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) UpdateActivity(ctx context.Context, in *Activity, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/UpdateActivity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryGiftTemplateList(ctx context.Context, in *GiftTemplateList, opts ...grpc.CallOption) (*GiftTemplateList, error) {
	out := new(GiftTemplateList)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryGiftTemplateList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) InsertGiftTemplate(ctx context.Context, in *GiftTemplate, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/InsertGiftTemplate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryGiftTemplateById(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*GiftTemplate, error) {
	out := new(GiftTemplate)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryGiftTemplateById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) UpdateGiftTemplateById(ctx context.Context, in *GiftTemplate, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/UpdateGiftTemplateById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) DeleteGiftTemplateById(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/DeleteGiftTemplateById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryGiftTemplateListAll(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*GiftTemplateList, error) {
	out := new(GiftTemplateList)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryGiftTemplateListAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryUserOrderList(ctx context.Context, in *UserOrderList, opts ...grpc.CallOption) (*UserOrderList, error) {
	out := new(UserOrderList)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryUserOrderList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminAgentClient) QueryUserOrderListWithCondition(ctx context.Context, in *UserOrderList, opts ...grpc.CallOption) (*UserOrderList, error) {
	out := new(UserOrderList)
	err := grpc.Invoke(ctx, "/dbproto.DbAdminAgent/QueryUserOrderListWithCondition", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DbAdminAgent service

type DbAdminAgentServer interface {
	QueryUserInfoByEmail(context.Context, *StringValue) (*AdminUserInfoArg, error)
	SetUserInfoById(context.Context, *AdminUserInfoArg) (*AdminUserInfoArg, error)
	QueryUserList(context.Context, *Nil) (*AdminUserList, error)
	QueryRoleList(context.Context, *Nil) (*RoleList, error)
	QueryPrivilegeList(context.Context, *Nil) (*PrivilegeList, error)
	InsertPrivilege(context.Context, *Privilege) (*Nil, error)
	SetPrivileges(context.Context, *AdminPrivileges) (*Nil, error)
	DeletePrivileges(context.Context, *IntValue) (*Nil, error)
	// 新闻相关
	// 添加一条新闻
	CreateNews(context.Context, *News) (*IntValue, error)
	// 后台查询新闻列表
	QueryNewsList(context.Context, *QueryNewsArg) (*NewsList, error)
	// 获取一条新闻
	QueryNewsById(context.Context, *NewsId) (*News, error)
	// 修改一条新闻
	UpdateNews(context.Context, *News) (*IntValue, error)
	// 获取后台新闻select框查询内容
	QueryBakendSelectOfNews(context.Context, *QueryNewsOfSelect) (*NewsList, error)
	// 平台配置相关
	// 创建一条Banner信息
	CreateBanner(context.Context, *Banner) (*IntValue, error)
	// 后台查询Banner列表
	QueryBannerList(context.Context, *QueryBannerArg) (*BannerList, error)
	// 查询一条Banner信息
	QueryBannerById(context.Context, *BannerId) (*Banner, error)
	// 修改一条Banner信息
	UpdateBanner(context.Context, *Banner) (*IntValue, error)
	// 获取Banner预览
	QueryPreBanner(context.Context, *QueryBannerArg) (*BannerList, error)
	// 创建一条常见问题
	CreateFaq(context.Context, *Faq) (*IntValue, error)
	// 查询Faq列表
	QueryFaqList(context.Context, *QueryFaqArg) (*FaqList, error)
	// 查询一条Faq信息
	QueryFaqById(context.Context, *FaqId) (*Faq, error)
	// 修改一条Faq信息
	UpdateFaq(context.Context, *Faq) (*IntValue, error)
	// 日志.
	InsertLog(context.Context, *Log) (*Nil, error)
	QueryLog(context.Context, *LogReply) (*LogReply, error)
	// 彩票.
	QueryBuycaiOptions(context.Context, *BuycaiOptionsReply) (*BuycaiOptionsReply, error)
	QueryLotteryIssue(context.Context, *StringValue) (*BuycaiOptions, error)
	InsertLotteryOptions(context.Context, *BuycaiOptionsIssue) (*Nil, error)
	QueryPlayTimeSettingList(context.Context, *Nil) (*PlayTimeSettingsList, error)
	InsertPlayTimeSettings(context.Context, *PlayTimeSettings) (*Nil, error)
	UpdatePlayTimeSettings(context.Context, *PlayTimeSettings) (*Nil, error)
	InsertLotteryOption(context.Context, *LotteryOptions) (*Nil, error)
	QueryLotteryOptionsList(context.Context, *Nil) (*LotteryOptionsList, error)
	GetLotteryOptionsById(context.Context, *IntValue) (*LotteryOptions, error)
	UpdateLotteryOptionsById(context.Context, *LotteryOptions) (*Nil, error)
	DeleteIssueById(context.Context, *BuycaiOptionsIssue) (*Nil, error)
	QueryLotteryBuycaiOptionsById(context.Context, *BuycaiOptionsIssue) (*BuycaiOptions, error)
	UpdateLotteryBuycaiOptionsById(context.Context, *BuycaiOptionsUpdateIssue) (*Nil, error)
	InsertLotteryBuycaiOptions(context.Context, *BuycaiOptionsUpdateIssue) (*Nil, error)
	QueryWinningLotteryList(context.Context, *WinningLotteryList) (*LotteryWinningNoList, error)
	QueryWinningByIssue(context.Context, *LotteryWinningNo) (*LotteryWinningNoList, error)
	QueryWinningHistoryListByLottery(context.Context, *WinningListByLottery) (*WinningListByLottery, error)
	// 活动.
	QueryGiftList(context.Context, *GiftList) (*GiftList, error)
	InsertGift(context.Context, *GiftPackageRequest) (*Nil, error)
	QueryGiftDetailById(context.Context, *IntValue) (*GiftPackageRequest, error)
	DeleteGiftById(context.Context, *IntValue) (*Nil, error)
	UpdateGiftById(context.Context, *GiftPackageRequest) (*Nil, error)
	QueryCdkeyList(context.Context, *CdkeyReply) (*CdkeyReply, error)
	InsertCdkeyBatch(context.Context, *CdkeyBatch) (*Nil, error)
	QueryCdkeyDetailById(context.Context, *IntValue) (*CdkeyDetail, error)
	UpdateCdkeyById(context.Context, *CdkeyDetail) (*Nil, error)
	DeleteCdkeyById(context.Context, *IntValue) (*Nil, error)
	// 平台配置.
	UpdateContact(context.Context, *Contact) (*Nil, error)
	QueryContact(context.Context, *Nil) (*Contact, error)
	QueryFeedbackList(context.Context, *FeedbackList) (*FeedbackList, error)
	DeleteFeedbackById(context.Context, *IntValue) (*Nil, error)
	QueryFeedbackById(context.Context, *IntValue) (*Feedback, error)
	UpdateFeedbackById(context.Context, *Feedback) (*Nil, error)
	// 足彩相关
	CreateFbGame(context.Context, *GameInfo) (*IntValue, error)
	CreatePlayOdds(context.Context, *PlayOdds) (*IntValue, error)
	UpdatePlayOdds(context.Context, *PlayOdds) (*IntValue, error)
	CreateFbResult(context.Context, *FbGameresult) (*IntValue, error)
	CreateFbTeam(context.Context, *FbTeamInfo) (*IntValue, error)
	CreateFbLeague(context.Context, *FbLeagueInfo) (*IntValue, error)
	QueryFbGame(context.Context, *QueryFbGameArg) (*FbGameList, error)
	QueryFbGameById(context.Context, *IntValue) (*GameInfo, error)
	QueryOddsById(context.Context, *IntValue) (*PlayOdds, error)
	QueryFbResult(context.Context, *QueryOpencaiArg) (*FbOpencaiList, error)
	QueryFbResultById(context.Context, *IntValue) (*FbGameresult, error)
	QueryFbTeamList(context.Context, *QueryFbTeamArg) (*FbTeamList, error)
	QueryFbTeamById(context.Context, *IntValue) (*FbTeamInfo, error)
	QueryFbLeague(context.Context, *QueryFbLeagueArg) (*FbLeagueList, error)
	// usercenter.
	QueryUsercenterList(context.Context, *UsercenterList) (*UsercenterList, error)
	QueryUsercenterDetail(context.Context, *IntValue) (*Userinfo, error)
	QueryUsercenterFundById(context.Context, *IntValue) (*FundHistory, error)
	QueryUsercenterRechargeById(context.Context, *IntValue) (*FundHistory, error)
	QueryUsercenterWithdrawById(context.Context, *IntValue) (*WithdrawApplyList, error)
	// 获取提现申请列表
	QueryWithdrawApplyList(context.Context, *QueryWithdrawApplyArg) (*WithdrawApplyList, error)
	// 获取提现申请
	QueryWithdrawApplyById(context.Context, *WithdrawApplyId) (*WithdrawApply, error)
	// 修改提现申请状态
	UpdateWithdrawApplyStatus(context.Context, *UpdateWAStatusArg) (*IntValue, error)
	// 检查提现申请
	CheckWithdrawApply(context.Context, *CheckWAArg) (*CheckWARes, error)
	// 认领提现申请
	ClaimWithdrawApply(context.Context, *ClaimWAArg) (*WithdrawApply, error)
	// rpc  (Request) returns (Response);
	// 添加提现申请审核权限
	CreateWithdrawAuditAuth(context.Context, *WithdrawAuditAuth) (*IntValue, error)
	// 获取提现申请审核权限列表
	QueryWithdrawAuditAuthList(context.Context, *QueryWithdrawAuditAuthArg) (*WithdrawAuditAuthList, error)
	// 获取提现申请审核权限
	QueryWithdrawAuditAuthById(context.Context, *IntValue) (*WithdrawAuditAuth, error)
	// 更新提现申请审核权限
	UpdateWithdrawAuditAuth(context.Context, *WithdrawAuditAuth) (*IntValue, error)
	// 添加提现转账信息
	CreateWithdrawTransfer(context.Context, *WithdrawTransfer) (*IntValue, error)
	// 获取提现转账列表
	QueryWithdrawTransferList(context.Context, *QueryWithdrawTransferArg) (*WithdrawTransferList, error)
	// 获取提现转账
	QueryWithdrawTransferById(context.Context, *IntValue) (*WithdrawTransfer, error)
	// 修改提现转账
	UpdateWithdrawTransfer(context.Context, *WithdrawTransfer) (*IntValue, error)
	// 数据统计.
	QueryOrderAndIncome(context.Context, *Nil) (*StatisticsOrderAndIncome, error)
	QueryRechargeList(context.Context, *RechargeOrderList) (*RechargeOrderList, error)
	QueryRechargeListByMonth(context.Context, *Nil) (*RechargeOrderList, error)
	QueryRechangeListByYear(context.Context, *Nil) (*RechargeOrderList, error)
	QueryBuycaiListByDay(context.Context, *BuycaiStatisticsList) (*BuycaiStatisticsList, error)
	QueryUserStatisticsNum(context.Context, *Nil) (*UserStatisticsNum, error)
	// 活动相关
	InsertTask(context.Context, *Task) (*Nil, error)
	// 查询任务列表带分页
	QueryTaskList(context.Context, *TaskReplyList) (*TaskReplyList, error)
	// 查询任务列表不带分页
	QueryAllTaskList(context.Context, *Nil) (*TaskList, error)
	// 删除任务
	DeleteTask(context.Context, *IntValue) (*Nil, error)
	// 获取单个任务
	QueryTaskById(context.Context, *IntValue) (*Task, error)
	// 更新任务
	UpdateTask(context.Context, *Task) (*Nil, error)
	// 获取所有任务类型
	QueryAllTaskType(context.Context, *Nil) (*TaskTypeList, error)
	// 添加活动
	InsertActivity(context.Context, *Activity) (*Nil, error)
	// 查询所有活动
	QueryActivityList(context.Context, *ActivityReplyList) (*ActivityReplyList, error)
	// 查询礼包列表
	QueryAllGiftTemplateList(context.Context, *Nil) (*TemplateList, error)
	// 删除活动
	DeleteActivity(context.Context, *IntValue) (*Nil, error)
	// 查询单个活动
	QueryActivityById(context.Context, *IntValue) (*Activity, error)
	// 更新活动
	UpdateActivity(context.Context, *Activity) (*Nil, error)
	// 礼包模板.
	QueryGiftTemplateList(context.Context, *GiftTemplateList) (*GiftTemplateList, error)
	InsertGiftTemplate(context.Context, *GiftTemplate) (*Nil, error)
	QueryGiftTemplateById(context.Context, *IntValue) (*GiftTemplate, error)
	UpdateGiftTemplateById(context.Context, *GiftTemplate) (*Nil, error)
	DeleteGiftTemplateById(context.Context, *IntValue) (*Nil, error)
	QueryGiftTemplateListAll(context.Context, *Nil) (*GiftTemplateList, error)
	// 订单管理
	QueryUserOrderList(context.Context, *UserOrderList) (*UserOrderList, error)
	QueryUserOrderListWithCondition(context.Context, *UserOrderList) (*UserOrderList, error)
}

func RegisterDbAdminAgentServer(s *grpc.Server, srv DbAdminAgentServer) {
	s.RegisterService(&_DbAdminAgent_serviceDesc, srv)
}

func _DbAdminAgent_QueryUserInfoByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryUserInfoByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryUserInfoByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryUserInfoByEmail(ctx, req.(*StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_SetUserInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUserInfoArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).SetUserInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/SetUserInfoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).SetUserInfoById(ctx, req.(*AdminUserInfoArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryUserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryUserList(ctx, req.(*Nil))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryRoleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryRoleList(ctx, req.(*Nil))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryPrivilegeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryPrivilegeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryPrivilegeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryPrivilegeList(ctx, req.(*Nil))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_InsertPrivilege_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Privilege)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).InsertPrivilege(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/InsertPrivilege",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).InsertPrivilege(ctx, req.(*Privilege))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_SetPrivileges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminPrivileges)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).SetPrivileges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/SetPrivileges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).SetPrivileges(ctx, req.(*AdminPrivileges))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_DeletePrivileges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).DeletePrivileges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/DeletePrivileges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).DeletePrivileges(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_CreateNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(News)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).CreateNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/CreateNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).CreateNews(ctx, req.(*News))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryNewsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNewsArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryNewsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryNewsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryNewsList(ctx, req.(*QueryNewsArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryNewsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewsId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryNewsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryNewsById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryNewsById(ctx, req.(*NewsId))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_UpdateNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(News)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).UpdateNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/UpdateNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).UpdateNews(ctx, req.(*News))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryBakendSelectOfNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNewsOfSelect)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryBakendSelectOfNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryBakendSelectOfNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryBakendSelectOfNews(ctx, req.(*QueryNewsOfSelect))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_CreateBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Banner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).CreateBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/CreateBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).CreateBanner(ctx, req.(*Banner))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryBannerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBannerArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryBannerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryBannerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryBannerList(ctx, req.(*QueryBannerArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryBannerById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BannerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryBannerById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryBannerById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryBannerById(ctx, req.(*BannerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_UpdateBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Banner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).UpdateBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/UpdateBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).UpdateBanner(ctx, req.(*Banner))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryPreBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBannerArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryPreBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryPreBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryPreBanner(ctx, req.(*QueryBannerArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_CreateFaq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Faq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).CreateFaq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/CreateFaq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).CreateFaq(ctx, req.(*Faq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryFaqList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFaqArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryFaqList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryFaqList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryFaqList(ctx, req.(*QueryFaqArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryFaqById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FaqId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryFaqById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryFaqById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryFaqById(ctx, req.(*FaqId))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_UpdateFaq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Faq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).UpdateFaq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/UpdateFaq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).UpdateFaq(ctx, req.(*Faq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_InsertLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Log)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).InsertLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/InsertLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).InsertLog(ctx, req.(*Log))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogReply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryLog(ctx, req.(*LogReply))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryBuycaiOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuycaiOptionsReply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryBuycaiOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryBuycaiOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryBuycaiOptions(ctx, req.(*BuycaiOptionsReply))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryLotteryIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryLotteryIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryLotteryIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryLotteryIssue(ctx, req.(*StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_InsertLotteryOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuycaiOptionsIssue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).InsertLotteryOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/InsertLotteryOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).InsertLotteryOptions(ctx, req.(*BuycaiOptionsIssue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryPlayTimeSettingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryPlayTimeSettingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryPlayTimeSettingList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryPlayTimeSettingList(ctx, req.(*Nil))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_InsertPlayTimeSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayTimeSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).InsertPlayTimeSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/InsertPlayTimeSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).InsertPlayTimeSettings(ctx, req.(*PlayTimeSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_UpdatePlayTimeSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayTimeSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).UpdatePlayTimeSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/UpdatePlayTimeSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).UpdatePlayTimeSettings(ctx, req.(*PlayTimeSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_InsertLotteryOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LotteryOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).InsertLotteryOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/InsertLotteryOption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).InsertLotteryOption(ctx, req.(*LotteryOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryLotteryOptionsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryLotteryOptionsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryLotteryOptionsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryLotteryOptionsList(ctx, req.(*Nil))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_GetLotteryOptionsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).GetLotteryOptionsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/GetLotteryOptionsById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).GetLotteryOptionsById(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_UpdateLotteryOptionsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LotteryOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).UpdateLotteryOptionsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/UpdateLotteryOptionsById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).UpdateLotteryOptionsById(ctx, req.(*LotteryOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_DeleteIssueById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuycaiOptionsIssue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).DeleteIssueById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/DeleteIssueById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).DeleteIssueById(ctx, req.(*BuycaiOptionsIssue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryLotteryBuycaiOptionsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuycaiOptionsIssue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryLotteryBuycaiOptionsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryLotteryBuycaiOptionsById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryLotteryBuycaiOptionsById(ctx, req.(*BuycaiOptionsIssue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_UpdateLotteryBuycaiOptionsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuycaiOptionsUpdateIssue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).UpdateLotteryBuycaiOptionsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/UpdateLotteryBuycaiOptionsById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).UpdateLotteryBuycaiOptionsById(ctx, req.(*BuycaiOptionsUpdateIssue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_InsertLotteryBuycaiOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuycaiOptionsUpdateIssue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).InsertLotteryBuycaiOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/InsertLotteryBuycaiOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).InsertLotteryBuycaiOptions(ctx, req.(*BuycaiOptionsUpdateIssue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryWinningLotteryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WinningLotteryList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryWinningLotteryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryWinningLotteryList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryWinningLotteryList(ctx, req.(*WinningLotteryList))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryWinningByIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LotteryWinningNo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryWinningByIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryWinningByIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryWinningByIssue(ctx, req.(*LotteryWinningNo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryWinningHistoryListByLottery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WinningListByLottery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryWinningHistoryListByLottery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryWinningHistoryListByLottery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryWinningHistoryListByLottery(ctx, req.(*WinningListByLottery))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryGiftList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GiftList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryGiftList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryGiftList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryGiftList(ctx, req.(*GiftList))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_InsertGift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GiftPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).InsertGift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/InsertGift",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).InsertGift(ctx, req.(*GiftPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryGiftDetailById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryGiftDetailById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryGiftDetailById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryGiftDetailById(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_DeleteGiftById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).DeleteGiftById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/DeleteGiftById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).DeleteGiftById(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_UpdateGiftById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GiftPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).UpdateGiftById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/UpdateGiftById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).UpdateGiftById(ctx, req.(*GiftPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryCdkeyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CdkeyReply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryCdkeyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryCdkeyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryCdkeyList(ctx, req.(*CdkeyReply))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_InsertCdkeyBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CdkeyBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).InsertCdkeyBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/InsertCdkeyBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).InsertCdkeyBatch(ctx, req.(*CdkeyBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryCdkeyDetailById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryCdkeyDetailById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryCdkeyDetailById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryCdkeyDetailById(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_UpdateCdkeyById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CdkeyDetail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).UpdateCdkeyById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/UpdateCdkeyById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).UpdateCdkeyById(ctx, req.(*CdkeyDetail))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_DeleteCdkeyById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).DeleteCdkeyById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/DeleteCdkeyById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).DeleteCdkeyById(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_UpdateContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Contact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).UpdateContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/UpdateContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).UpdateContact(ctx, req.(*Contact))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryContact(ctx, req.(*Nil))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryFeedbackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedbackList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryFeedbackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryFeedbackList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryFeedbackList(ctx, req.(*FeedbackList))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_DeleteFeedbackById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).DeleteFeedbackById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/DeleteFeedbackById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).DeleteFeedbackById(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryFeedbackById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryFeedbackById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryFeedbackById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryFeedbackById(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_UpdateFeedbackById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Feedback)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).UpdateFeedbackById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/UpdateFeedbackById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).UpdateFeedbackById(ctx, req.(*Feedback))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_CreateFbGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).CreateFbGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/CreateFbGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).CreateFbGame(ctx, req.(*GameInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_CreatePlayOdds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayOdds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).CreatePlayOdds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/CreatePlayOdds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).CreatePlayOdds(ctx, req.(*PlayOdds))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_UpdatePlayOdds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayOdds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).UpdatePlayOdds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/UpdatePlayOdds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).UpdatePlayOdds(ctx, req.(*PlayOdds))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_CreateFbResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FbGameresult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).CreateFbResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/CreateFbResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).CreateFbResult(ctx, req.(*FbGameresult))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_CreateFbTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FbTeamInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).CreateFbTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/CreateFbTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).CreateFbTeam(ctx, req.(*FbTeamInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_CreateFbLeague_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FbLeagueInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).CreateFbLeague(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/CreateFbLeague",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).CreateFbLeague(ctx, req.(*FbLeagueInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryFbGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFbGameArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryFbGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryFbGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryFbGame(ctx, req.(*QueryFbGameArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryFbGameById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryFbGameById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryFbGameById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryFbGameById(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryOddsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryOddsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryOddsById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryOddsById(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryFbResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOpencaiArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryFbResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryFbResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryFbResult(ctx, req.(*QueryOpencaiArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryFbResultById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryFbResultById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryFbResultById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryFbResultById(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryFbTeamList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFbTeamArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryFbTeamList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryFbTeamList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryFbTeamList(ctx, req.(*QueryFbTeamArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryFbTeamById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryFbTeamById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryFbTeamById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryFbTeamById(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryFbLeague_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFbLeagueArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryFbLeague(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryFbLeague",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryFbLeague(ctx, req.(*QueryFbLeagueArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryUsercenterList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsercenterList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryUsercenterList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryUsercenterList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryUsercenterList(ctx, req.(*UsercenterList))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryUsercenterDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryUsercenterDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryUsercenterDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryUsercenterDetail(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryUsercenterFundById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryUsercenterFundById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryUsercenterFundById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryUsercenterFundById(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryUsercenterRechargeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryUsercenterRechargeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryUsercenterRechargeById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryUsercenterRechargeById(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryUsercenterWithdrawById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryUsercenterWithdrawById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryUsercenterWithdrawById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryUsercenterWithdrawById(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryWithdrawApplyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWithdrawApplyArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryWithdrawApplyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryWithdrawApplyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryWithdrawApplyList(ctx, req.(*QueryWithdrawApplyArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryWithdrawApplyById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawApplyId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryWithdrawApplyById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryWithdrawApplyById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryWithdrawApplyById(ctx, req.(*WithdrawApplyId))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_UpdateWithdrawApplyStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWAStatusArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).UpdateWithdrawApplyStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/UpdateWithdrawApplyStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).UpdateWithdrawApplyStatus(ctx, req.(*UpdateWAStatusArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_CheckWithdrawApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckWAArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).CheckWithdrawApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/CheckWithdrawApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).CheckWithdrawApply(ctx, req.(*CheckWAArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_ClaimWithdrawApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimWAArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).ClaimWithdrawApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/ClaimWithdrawApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).ClaimWithdrawApply(ctx, req.(*ClaimWAArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_CreateWithdrawAuditAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawAuditAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).CreateWithdrawAuditAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/CreateWithdrawAuditAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).CreateWithdrawAuditAuth(ctx, req.(*WithdrawAuditAuth))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryWithdrawAuditAuthList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWithdrawAuditAuthArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryWithdrawAuditAuthList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryWithdrawAuditAuthList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryWithdrawAuditAuthList(ctx, req.(*QueryWithdrawAuditAuthArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryWithdrawAuditAuthById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryWithdrawAuditAuthById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryWithdrawAuditAuthById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryWithdrawAuditAuthById(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_UpdateWithdrawAuditAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawAuditAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).UpdateWithdrawAuditAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/UpdateWithdrawAuditAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).UpdateWithdrawAuditAuth(ctx, req.(*WithdrawAuditAuth))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_CreateWithdrawTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawTransfer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).CreateWithdrawTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/CreateWithdrawTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).CreateWithdrawTransfer(ctx, req.(*WithdrawTransfer))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryWithdrawTransferList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWithdrawTransferArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryWithdrawTransferList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryWithdrawTransferList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryWithdrawTransferList(ctx, req.(*QueryWithdrawTransferArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryWithdrawTransferById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryWithdrawTransferById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryWithdrawTransferById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryWithdrawTransferById(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_UpdateWithdrawTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawTransfer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).UpdateWithdrawTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/UpdateWithdrawTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).UpdateWithdrawTransfer(ctx, req.(*WithdrawTransfer))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryOrderAndIncome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryOrderAndIncome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryOrderAndIncome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryOrderAndIncome(ctx, req.(*Nil))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryRechargeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RechargeOrderList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryRechargeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryRechargeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryRechargeList(ctx, req.(*RechargeOrderList))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryRechargeListByMonth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryRechargeListByMonth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryRechargeListByMonth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryRechargeListByMonth(ctx, req.(*Nil))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryRechangeListByYear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryRechangeListByYear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryRechangeListByYear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryRechangeListByYear(ctx, req.(*Nil))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryBuycaiListByDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuycaiStatisticsList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryBuycaiListByDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryBuycaiListByDay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryBuycaiListByDay(ctx, req.(*BuycaiStatisticsList))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryUserStatisticsNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryUserStatisticsNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryUserStatisticsNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryUserStatisticsNum(ctx, req.(*Nil))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_InsertTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).InsertTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/InsertTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).InsertTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryTaskList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskReplyList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryTaskList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryTaskList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryTaskList(ctx, req.(*TaskReplyList))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryAllTaskList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryAllTaskList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryAllTaskList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryAllTaskList(ctx, req.(*Nil))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/DeleteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).DeleteTask(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryTaskById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryTaskById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryTaskById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryTaskById(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/UpdateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).UpdateTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryAllTaskType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryAllTaskType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryAllTaskType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryAllTaskType(ctx, req.(*Nil))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_InsertActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Activity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).InsertActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/InsertActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).InsertActivity(ctx, req.(*Activity))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryActivityList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityReplyList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryActivityList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryActivityList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryActivityList(ctx, req.(*ActivityReplyList))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryAllGiftTemplateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryAllGiftTemplateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryAllGiftTemplateList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryAllGiftTemplateList(ctx, req.(*Nil))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_DeleteActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).DeleteActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/DeleteActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).DeleteActivity(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryActivityById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryActivityById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryActivityById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryActivityById(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_UpdateActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Activity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).UpdateActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/UpdateActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).UpdateActivity(ctx, req.(*Activity))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryGiftTemplateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GiftTemplateList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryGiftTemplateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryGiftTemplateList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryGiftTemplateList(ctx, req.(*GiftTemplateList))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_InsertGiftTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GiftTemplate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).InsertGiftTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/InsertGiftTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).InsertGiftTemplate(ctx, req.(*GiftTemplate))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryGiftTemplateById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryGiftTemplateById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryGiftTemplateById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryGiftTemplateById(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_UpdateGiftTemplateById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GiftTemplate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).UpdateGiftTemplateById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/UpdateGiftTemplateById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).UpdateGiftTemplateById(ctx, req.(*GiftTemplate))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_DeleteGiftTemplateById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).DeleteGiftTemplateById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/DeleteGiftTemplateById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).DeleteGiftTemplateById(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryGiftTemplateListAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryGiftTemplateListAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryGiftTemplateListAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryGiftTemplateListAll(ctx, req.(*Nil))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryUserOrderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserOrderList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryUserOrderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryUserOrderList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryUserOrderList(ctx, req.(*UserOrderList))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminAgent_QueryUserOrderListWithCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserOrderList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminAgentServer).QueryUserOrderListWithCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbproto.DbAdminAgent/QueryUserOrderListWithCondition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminAgentServer).QueryUserOrderListWithCondition(ctx, req.(*UserOrderList))
	}
	return interceptor(ctx, in, info, handler)
}

var _DbAdminAgent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dbproto.DbAdminAgent",
	HandlerType: (*DbAdminAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryUserInfoByEmail",
			Handler:    _DbAdminAgent_QueryUserInfoByEmail_Handler,
		},
		{
			MethodName: "SetUserInfoById",
			Handler:    _DbAdminAgent_SetUserInfoById_Handler,
		},
		{
			MethodName: "QueryUserList",
			Handler:    _DbAdminAgent_QueryUserList_Handler,
		},
		{
			MethodName: "QueryRoleList",
			Handler:    _DbAdminAgent_QueryRoleList_Handler,
		},
		{
			MethodName: "QueryPrivilegeList",
			Handler:    _DbAdminAgent_QueryPrivilegeList_Handler,
		},
		{
			MethodName: "InsertPrivilege",
			Handler:    _DbAdminAgent_InsertPrivilege_Handler,
		},
		{
			MethodName: "SetPrivileges",
			Handler:    _DbAdminAgent_SetPrivileges_Handler,
		},
		{
			MethodName: "DeletePrivileges",
			Handler:    _DbAdminAgent_DeletePrivileges_Handler,
		},
		{
			MethodName: "CreateNews",
			Handler:    _DbAdminAgent_CreateNews_Handler,
		},
		{
			MethodName: "QueryNewsList",
			Handler:    _DbAdminAgent_QueryNewsList_Handler,
		},
		{
			MethodName: "QueryNewsById",
			Handler:    _DbAdminAgent_QueryNewsById_Handler,
		},
		{
			MethodName: "UpdateNews",
			Handler:    _DbAdminAgent_UpdateNews_Handler,
		},
		{
			MethodName: "QueryBakendSelectOfNews",
			Handler:    _DbAdminAgent_QueryBakendSelectOfNews_Handler,
		},
		{
			MethodName: "CreateBanner",
			Handler:    _DbAdminAgent_CreateBanner_Handler,
		},
		{
			MethodName: "QueryBannerList",
			Handler:    _DbAdminAgent_QueryBannerList_Handler,
		},
		{
			MethodName: "QueryBannerById",
			Handler:    _DbAdminAgent_QueryBannerById_Handler,
		},
		{
			MethodName: "UpdateBanner",
			Handler:    _DbAdminAgent_UpdateBanner_Handler,
		},
		{
			MethodName: "QueryPreBanner",
			Handler:    _DbAdminAgent_QueryPreBanner_Handler,
		},
		{
			MethodName: "CreateFaq",
			Handler:    _DbAdminAgent_CreateFaq_Handler,
		},
		{
			MethodName: "QueryFaqList",
			Handler:    _DbAdminAgent_QueryFaqList_Handler,
		},
		{
			MethodName: "QueryFaqById",
			Handler:    _DbAdminAgent_QueryFaqById_Handler,
		},
		{
			MethodName: "UpdateFaq",
			Handler:    _DbAdminAgent_UpdateFaq_Handler,
		},
		{
			MethodName: "InsertLog",
			Handler:    _DbAdminAgent_InsertLog_Handler,
		},
		{
			MethodName: "QueryLog",
			Handler:    _DbAdminAgent_QueryLog_Handler,
		},
		{
			MethodName: "QueryBuycaiOptions",
			Handler:    _DbAdminAgent_QueryBuycaiOptions_Handler,
		},
		{
			MethodName: "QueryLotteryIssue",
			Handler:    _DbAdminAgent_QueryLotteryIssue_Handler,
		},
		{
			MethodName: "InsertLotteryOptions",
			Handler:    _DbAdminAgent_InsertLotteryOptions_Handler,
		},
		{
			MethodName: "QueryPlayTimeSettingList",
			Handler:    _DbAdminAgent_QueryPlayTimeSettingList_Handler,
		},
		{
			MethodName: "InsertPlayTimeSettings",
			Handler:    _DbAdminAgent_InsertPlayTimeSettings_Handler,
		},
		{
			MethodName: "UpdatePlayTimeSettings",
			Handler:    _DbAdminAgent_UpdatePlayTimeSettings_Handler,
		},
		{
			MethodName: "InsertLotteryOption",
			Handler:    _DbAdminAgent_InsertLotteryOption_Handler,
		},
		{
			MethodName: "QueryLotteryOptionsList",
			Handler:    _DbAdminAgent_QueryLotteryOptionsList_Handler,
		},
		{
			MethodName: "GetLotteryOptionsById",
			Handler:    _DbAdminAgent_GetLotteryOptionsById_Handler,
		},
		{
			MethodName: "UpdateLotteryOptionsById",
			Handler:    _DbAdminAgent_UpdateLotteryOptionsById_Handler,
		},
		{
			MethodName: "DeleteIssueById",
			Handler:    _DbAdminAgent_DeleteIssueById_Handler,
		},
		{
			MethodName: "QueryLotteryBuycaiOptionsById",
			Handler:    _DbAdminAgent_QueryLotteryBuycaiOptionsById_Handler,
		},
		{
			MethodName: "UpdateLotteryBuycaiOptionsById",
			Handler:    _DbAdminAgent_UpdateLotteryBuycaiOptionsById_Handler,
		},
		{
			MethodName: "InsertLotteryBuycaiOptions",
			Handler:    _DbAdminAgent_InsertLotteryBuycaiOptions_Handler,
		},
		{
			MethodName: "QueryWinningLotteryList",
			Handler:    _DbAdminAgent_QueryWinningLotteryList_Handler,
		},
		{
			MethodName: "QueryWinningByIssue",
			Handler:    _DbAdminAgent_QueryWinningByIssue_Handler,
		},
		{
			MethodName: "QueryWinningHistoryListByLottery",
			Handler:    _DbAdminAgent_QueryWinningHistoryListByLottery_Handler,
		},
		{
			MethodName: "QueryGiftList",
			Handler:    _DbAdminAgent_QueryGiftList_Handler,
		},
		{
			MethodName: "InsertGift",
			Handler:    _DbAdminAgent_InsertGift_Handler,
		},
		{
			MethodName: "QueryGiftDetailById",
			Handler:    _DbAdminAgent_QueryGiftDetailById_Handler,
		},
		{
			MethodName: "DeleteGiftById",
			Handler:    _DbAdminAgent_DeleteGiftById_Handler,
		},
		{
			MethodName: "UpdateGiftById",
			Handler:    _DbAdminAgent_UpdateGiftById_Handler,
		},
		{
			MethodName: "QueryCdkeyList",
			Handler:    _DbAdminAgent_QueryCdkeyList_Handler,
		},
		{
			MethodName: "InsertCdkeyBatch",
			Handler:    _DbAdminAgent_InsertCdkeyBatch_Handler,
		},
		{
			MethodName: "QueryCdkeyDetailById",
			Handler:    _DbAdminAgent_QueryCdkeyDetailById_Handler,
		},
		{
			MethodName: "UpdateCdkeyById",
			Handler:    _DbAdminAgent_UpdateCdkeyById_Handler,
		},
		{
			MethodName: "DeleteCdkeyById",
			Handler:    _DbAdminAgent_DeleteCdkeyById_Handler,
		},
		{
			MethodName: "UpdateContact",
			Handler:    _DbAdminAgent_UpdateContact_Handler,
		},
		{
			MethodName: "QueryContact",
			Handler:    _DbAdminAgent_QueryContact_Handler,
		},
		{
			MethodName: "QueryFeedbackList",
			Handler:    _DbAdminAgent_QueryFeedbackList_Handler,
		},
		{
			MethodName: "DeleteFeedbackById",
			Handler:    _DbAdminAgent_DeleteFeedbackById_Handler,
		},
		{
			MethodName: "QueryFeedbackById",
			Handler:    _DbAdminAgent_QueryFeedbackById_Handler,
		},
		{
			MethodName: "UpdateFeedbackById",
			Handler:    _DbAdminAgent_UpdateFeedbackById_Handler,
		},
		{
			MethodName: "CreateFbGame",
			Handler:    _DbAdminAgent_CreateFbGame_Handler,
		},
		{
			MethodName: "CreatePlayOdds",
			Handler:    _DbAdminAgent_CreatePlayOdds_Handler,
		},
		{
			MethodName: "UpdatePlayOdds",
			Handler:    _DbAdminAgent_UpdatePlayOdds_Handler,
		},
		{
			MethodName: "CreateFbResult",
			Handler:    _DbAdminAgent_CreateFbResult_Handler,
		},
		{
			MethodName: "CreateFbTeam",
			Handler:    _DbAdminAgent_CreateFbTeam_Handler,
		},
		{
			MethodName: "CreateFbLeague",
			Handler:    _DbAdminAgent_CreateFbLeague_Handler,
		},
		{
			MethodName: "QueryFbGame",
			Handler:    _DbAdminAgent_QueryFbGame_Handler,
		},
		{
			MethodName: "QueryFbGameById",
			Handler:    _DbAdminAgent_QueryFbGameById_Handler,
		},
		{
			MethodName: "QueryOddsById",
			Handler:    _DbAdminAgent_QueryOddsById_Handler,
		},
		{
			MethodName: "QueryFbResult",
			Handler:    _DbAdminAgent_QueryFbResult_Handler,
		},
		{
			MethodName: "QueryFbResultById",
			Handler:    _DbAdminAgent_QueryFbResultById_Handler,
		},
		{
			MethodName: "QueryFbTeamList",
			Handler:    _DbAdminAgent_QueryFbTeamList_Handler,
		},
		{
			MethodName: "QueryFbTeamById",
			Handler:    _DbAdminAgent_QueryFbTeamById_Handler,
		},
		{
			MethodName: "QueryFbLeague",
			Handler:    _DbAdminAgent_QueryFbLeague_Handler,
		},
		{
			MethodName: "QueryUsercenterList",
			Handler:    _DbAdminAgent_QueryUsercenterList_Handler,
		},
		{
			MethodName: "QueryUsercenterDetail",
			Handler:    _DbAdminAgent_QueryUsercenterDetail_Handler,
		},
		{
			MethodName: "QueryUsercenterFundById",
			Handler:    _DbAdminAgent_QueryUsercenterFundById_Handler,
		},
		{
			MethodName: "QueryUsercenterRechargeById",
			Handler:    _DbAdminAgent_QueryUsercenterRechargeById_Handler,
		},
		{
			MethodName: "QueryUsercenterWithdrawById",
			Handler:    _DbAdminAgent_QueryUsercenterWithdrawById_Handler,
		},
		{
			MethodName: "QueryWithdrawApplyList",
			Handler:    _DbAdminAgent_QueryWithdrawApplyList_Handler,
		},
		{
			MethodName: "QueryWithdrawApplyById",
			Handler:    _DbAdminAgent_QueryWithdrawApplyById_Handler,
		},
		{
			MethodName: "UpdateWithdrawApplyStatus",
			Handler:    _DbAdminAgent_UpdateWithdrawApplyStatus_Handler,
		},
		{
			MethodName: "CheckWithdrawApply",
			Handler:    _DbAdminAgent_CheckWithdrawApply_Handler,
		},
		{
			MethodName: "ClaimWithdrawApply",
			Handler:    _DbAdminAgent_ClaimWithdrawApply_Handler,
		},
		{
			MethodName: "CreateWithdrawAuditAuth",
			Handler:    _DbAdminAgent_CreateWithdrawAuditAuth_Handler,
		},
		{
			MethodName: "QueryWithdrawAuditAuthList",
			Handler:    _DbAdminAgent_QueryWithdrawAuditAuthList_Handler,
		},
		{
			MethodName: "QueryWithdrawAuditAuthById",
			Handler:    _DbAdminAgent_QueryWithdrawAuditAuthById_Handler,
		},
		{
			MethodName: "UpdateWithdrawAuditAuth",
			Handler:    _DbAdminAgent_UpdateWithdrawAuditAuth_Handler,
		},
		{
			MethodName: "CreateWithdrawTransfer",
			Handler:    _DbAdminAgent_CreateWithdrawTransfer_Handler,
		},
		{
			MethodName: "QueryWithdrawTransferList",
			Handler:    _DbAdminAgent_QueryWithdrawTransferList_Handler,
		},
		{
			MethodName: "QueryWithdrawTransferById",
			Handler:    _DbAdminAgent_QueryWithdrawTransferById_Handler,
		},
		{
			MethodName: "UpdateWithdrawTransfer",
			Handler:    _DbAdminAgent_UpdateWithdrawTransfer_Handler,
		},
		{
			MethodName: "QueryOrderAndIncome",
			Handler:    _DbAdminAgent_QueryOrderAndIncome_Handler,
		},
		{
			MethodName: "QueryRechargeList",
			Handler:    _DbAdminAgent_QueryRechargeList_Handler,
		},
		{
			MethodName: "QueryRechargeListByMonth",
			Handler:    _DbAdminAgent_QueryRechargeListByMonth_Handler,
		},
		{
			MethodName: "QueryRechangeListByYear",
			Handler:    _DbAdminAgent_QueryRechangeListByYear_Handler,
		},
		{
			MethodName: "QueryBuycaiListByDay",
			Handler:    _DbAdminAgent_QueryBuycaiListByDay_Handler,
		},
		{
			MethodName: "QueryUserStatisticsNum",
			Handler:    _DbAdminAgent_QueryUserStatisticsNum_Handler,
		},
		{
			MethodName: "InsertTask",
			Handler:    _DbAdminAgent_InsertTask_Handler,
		},
		{
			MethodName: "QueryTaskList",
			Handler:    _DbAdminAgent_QueryTaskList_Handler,
		},
		{
			MethodName: "QueryAllTaskList",
			Handler:    _DbAdminAgent_QueryAllTaskList_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _DbAdminAgent_DeleteTask_Handler,
		},
		{
			MethodName: "QueryTaskById",
			Handler:    _DbAdminAgent_QueryTaskById_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _DbAdminAgent_UpdateTask_Handler,
		},
		{
			MethodName: "QueryAllTaskType",
			Handler:    _DbAdminAgent_QueryAllTaskType_Handler,
		},
		{
			MethodName: "InsertActivity",
			Handler:    _DbAdminAgent_InsertActivity_Handler,
		},
		{
			MethodName: "QueryActivityList",
			Handler:    _DbAdminAgent_QueryActivityList_Handler,
		},
		{
			MethodName: "QueryAllGiftTemplateList",
			Handler:    _DbAdminAgent_QueryAllGiftTemplateList_Handler,
		},
		{
			MethodName: "DeleteActivity",
			Handler:    _DbAdminAgent_DeleteActivity_Handler,
		},
		{
			MethodName: "QueryActivityById",
			Handler:    _DbAdminAgent_QueryActivityById_Handler,
		},
		{
			MethodName: "UpdateActivity",
			Handler:    _DbAdminAgent_UpdateActivity_Handler,
		},
		{
			MethodName: "QueryGiftTemplateList",
			Handler:    _DbAdminAgent_QueryGiftTemplateList_Handler,
		},
		{
			MethodName: "InsertGiftTemplate",
			Handler:    _DbAdminAgent_InsertGiftTemplate_Handler,
		},
		{
			MethodName: "QueryGiftTemplateById",
			Handler:    _DbAdminAgent_QueryGiftTemplateById_Handler,
		},
		{
			MethodName: "UpdateGiftTemplateById",
			Handler:    _DbAdminAgent_UpdateGiftTemplateById_Handler,
		},
		{
			MethodName: "DeleteGiftTemplateById",
			Handler:    _DbAdminAgent_DeleteGiftTemplateById_Handler,
		},
		{
			MethodName: "QueryGiftTemplateListAll",
			Handler:    _DbAdminAgent_QueryGiftTemplateListAll_Handler,
		},
		{
			MethodName: "QueryUserOrderList",
			Handler:    _DbAdminAgent_QueryUserOrderList_Handler,
		},
		{
			MethodName: "QueryUserOrderListWithCondition",
			Handler:    _DbAdminAgent_QueryUserOrderListWithCondition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agent_admin.proto",
}

func init() { proto.RegisterFile("agent_admin.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 1946 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x59, 0x5f, 0x53, 0xdb, 0xb8,
	0x16, 0xcf, 0xd3, 0xbd, 0xb7, 0x2a, 0x04, 0x22, 0x20, 0x80, 0x3b, 0xf4, 0x6e, 0xf3, 0xb6, 0xb3,
	0x33, 0xec, 0xb6, 0xb4, 0xdb, 0xed, 0xd0, 0x76, 0x37, 0x09, 0x04, 0xd2, 0xa5, 0xa4, 0x05, 0x4a,
	0x67, 0x9f, 0x32, 0x8a, 0xad, 0x04, 0x0f, 0x8e, 0x1d, 0x6c, 0xa5, 0x4c, 0x3e, 0xef, 0x7e, 0x91,
	0x1d, 0xe9, 0x48, 0xb6, 0x64, 0x5b, 0x09, 0xe9, 0xbe, 0x91, 0xf3, 0xe7, 0x77, 0xce, 0xf9, 0x1d,
	0xe9, 0x58, 0x12, 0xa8, 0x46, 0x46, 0x34, 0x64, 0x7d, 0xe2, 0x8d, 0xfd, 0x70, 0x7f, 0x12, 0x47,
	0x2c, 0xc2, 0xff, 0xf5, 0x06, 0xe2, 0x0f, 0x07, 0x0d, 0x48, 0x42, 0x41, 0xe8, 0x3c, 0xd6, 0x2c,
	0x9c, 0x0d, 0xcf, 0x4f, 0xdc, 0xe8, 0x1b, 0x8d, 0xfb, 0x21, 0xbd, 0x4f, 0xa4, 0x70, 0x65, 0x30,
	0x9d, 0xb9, 0xc4, 0x97, 0xbf, 0x1e, 0x05, 0xd1, 0x28, 0x55, 0x90, 0x30, 0xa4, 0xb1, 0xfc, 0x85,
	0xe2, 0x28, 0x50, 0xa0, 0x5b, 0x41, 0xc4, 0x18, 0x8d, 0x67, 0xfd, 0x68, 0xc2, 0xfc, 0x28, 0x54,
	0x48, 0xd5, 0x61, 0x14, 0xb1, 0x01, 0x09, 0x02, 0xf9, 0x7b, 0x7d, 0x9a, 0xd0, 0xd8, 0xa5, 0x21,
	0x4b, 0x41, 0xea, 0x31, 0x75, 0x6f, 0x48, 0x3c, 0xa2, 0xfd, 0x1b, 0x3f, 0x61, 0x51, 0x3c, 0x4b,
	0x3d, 0x29, 0xf5, 0x06, 0xc4, 0xbd, 0x95, 0xbf, 0x57, 0xdd, 0x28, 0x64, 0xc4, 0x65, 0x2a, 0xa9,
	0x21, 0xb9, 0x53, 0x96, 0xf7, 0x3e, 0xbb, 0xf1, 0x62, 0x72, 0x2f, 0x7f, 0xd7, 0x5c, 0xef, 0x96,
	0xce, 0xfa, 0x03, 0xc2, 0xdc, 0x1b, 0x29, 0xc2, 0x23, 0x7f, 0xc8, 0xfa, 0x13, 0xe2, 0xde, 0x92,
	0x91, 0xca, 0x78, 0x35, 0x9a, 0xd0, 0x30, 0xab, 0x72, 0xcb, 0x23, 0x8c, 0xf4, 0x13, 0x46, 0x98,
	0x9f, 0x30, 0xdf, 0x55, 0x05, 0x6c, 0xa6, 0xe9, 0x45, 0xb1, 0x97, 0x26, 0x5d, 0x25, 0x2e, 0xf3,
	0xbf, 0xf9, 0x4c, 0x25, 0xbb, 0x36, 0x89, 0xfd, 0x6f, 0x7e, 0x40, 0x53, 0xf0, 0x0d, 0x11, 0x90,
	0xd1, 0xf1, 0x24, 0x20, 0x4c, 0x09, 0xb7, 0x81, 0xd6, 0x3e, 0xe7, 0x40, 0x87, 0x7b, 0xf1, 0xf7,
	0x21, 0x5a, 0x39, 0x1a, 0x34, 0x79, 0x5b, 0x9a, 0xbc, 0x87, 0xb8, 0x8b, 0x36, 0x3f, 0x4f, 0x69,
	0x3c, 0xfb, 0x92, 0xd0, 0xb8, 0x1b, 0x0e, 0xa3, 0xd6, 0xec, 0x78, 0x4c, 0xfc, 0x00, 0x6f, 0xee,
	0xcb, 0x86, 0xee, 0x5f, 0xb2, 0xd8, 0x0f, 0x47, 0xd7, 0x24, 0x98, 0x52, 0x67, 0x37, 0x95, 0x0a,
	0x08, 0xe5, 0xd4, 0x8c, 0x47, 0x8d, 0x0a, 0xee, 0xa2, 0xb5, 0x4b, 0xca, 0x32, 0xa0, 0xae, 0x87,
	0xed, 0xf6, 0xf3, 0xa1, 0x5e, 0xa3, 0xd5, 0x34, 0xab, 0x33, 0x3f, 0x61, 0x78, 0x25, 0xb5, 0x3e,
	0xf7, 0x03, 0xa7, 0x5e, 0xf4, 0xe5, 0x56, 0x8d, 0x0a, 0x7e, 0x21, 0x1d, 0x2f, 0xa2, 0x80, 0x96,
	0x38, 0xd6, 0xd2, 0x5f, 0xca, 0xa0, 0x51, 0xc1, 0x6f, 0x11, 0x16, 0x3e, 0x9f, 0x14, 0xb3, 0x73,
	0x23, 0x1a, 0x56, 0x8d, 0x0a, 0x7e, 0x85, 0xd6, 0xba, 0x61, 0x42, 0x63, 0x96, 0x2a, 0x30, 0x2e,
	0x1a, 0x3b, 0x06, 0x5c, 0xa3, 0x82, 0xdf, 0xa0, 0xd5, 0x4b, 0x9a, 0xf9, 0x24, 0x78, 0xc7, 0xac,
	0x29, 0xd3, 0x14, 0x5c, 0x5f, 0xa1, 0xf5, 0x23, 0x1a, 0x50, 0x46, 0x35, 0xef, 0xac, 0xb0, 0x6e,
	0xc8, 0xa0, 0x57, 0x79, 0xb7, 0x5f, 0x10, 0x6a, 0xc7, 0x94, 0x30, 0x7a, 0x4e, 0xef, 0x13, 0xbc,
	0x9a, 0x69, 0xe9, 0x7d, 0xe2, 0x14, 0xfd, 0x1b, 0x15, 0x7c, 0x28, 0xc9, 0xe4, 0x16, 0x82, 0x93,
	0xad, 0xd4, 0x2a, 0x95, 0xf3, 0x56, 0xd6, 0x0c, 0x2c, 0xc9, 0xcb, 0x73, 0xcd, 0x59, 0xac, 0x85,
	0x35, 0xc3, 0xaa, 0xeb, 0x39, 0x66, 0x0a, 0x90, 0xe1, 0x97, 0x89, 0xb7, 0x4c, 0x86, 0x1f, 0xd0,
	0xb6, 0x08, 0xd2, 0x22, 0xb7, 0x34, 0xf4, 0x2e, 0x69, 0x40, 0x5d, 0xd6, 0x1b, 0x0a, 0x77, 0xa7,
	0x98, 0x6b, 0x6f, 0x08, 0x16, 0xe5, 0x09, 0xbf, 0x44, 0x2b, 0xc0, 0x4f, 0x4b, 0x4c, 0x1e, 0x2d,
	0x5f, 0x10, 0x94, 0x67, 0xd0, 0x44, 0x6b, 0x32, 0x03, 0x6e, 0x23, 0x58, 0xda, 0x36, 0x23, 0x83,
	0x86, 0xf3, 0xb4, 0x91, 0x43, 0x94, 0x81, 0x5f, 0x1b, 0x10, 0x82, 0xab, 0x5a, 0xce, 0xb2, 0xeb,
	0x39, 0xf9, 0x74, 0x20, 0x63, 0xe0, 0x6b, 0xa9, 0x8c, 0xff, 0x40, 0x55, 0xb9, 0xdc, 0x95, 0xdf,
	0xb2, 0x09, 0xef, 0xa3, 0x47, 0xc0, 0x54, 0x87, 0xdc, 0x69, 0xfb, 0xa4, 0x43, 0xee, 0xca, 0x23,
	0xfe, 0x86, 0x56, 0x04, 0x70, 0x87, 0xdc, 0x09, 0x82, 0x36, 0xcd, 0x78, 0x1d, 0x72, 0xc7, 0x83,
	0xad, 0xeb, 0x40, 0x69, 0xa4, 0xd4, 0x53, 0xf0, 0x52, 0xd5, 0x6d, 0xba, 0x9e, 0x63, 0x04, 0x87,
	0xcc, 0x80, 0x91, 0x07, 0x66, 0xf6, 0x23, 0x7a, 0x04, 0x9b, 0xf7, 0x2c, 0x1a, 0x69, 0xf6, 0x67,
	0xd1, 0xa8, 0xb0, 0x7d, 0x5e, 0xa0, 0xff, 0x89, 0x54, 0xb8, 0x65, 0x4d, 0xb7, 0xbc, 0xa0, 0x93,
	0x60, 0xe6, 0x14, 0x45, 0x8d, 0x0a, 0xfe, 0x24, 0x27, 0x4b, 0x4b, 0x4c, 0xe3, 0x1e, 0x7c, 0xaf,
	0xf0, 0x93, 0x8c, 0x55, 0x5d, 0x0e, 0x38, 0xf3, 0x94, 0x8d, 0x0a, 0x6e, 0xa3, 0x9a, 0xcc, 0x42,
	0x7c, 0x03, 0xbb, 0x49, 0x32, 0xa5, 0x96, 0x59, 0x5d, 0x2f, 0x47, 0x12, 0x20, 0x9b, 0xaa, 0x6a,
	0x81, 0xb2, 0x20, 0x31, 0x11, 0xa4, 0xc0, 0x47, 0x17, 0xed, 0xc0, 0x32, 0x0a, 0xc8, 0xec, 0xca,
	0x1f, 0xd3, 0x4b, 0xca, 0x98, 0x1f, 0x8e, 0x4a, 0x66, 0xe7, 0x5e, 0x36, 0x0e, 0x4d, 0x5b, 0xb5,
	0xf3, 0xda, 0xa8, 0x2e, 0x47, 0x68, 0x4e, 0xaf, 0x7d, 0x3f, 0xf2, 0xaa, 0x42, 0x3e, 0x6d, 0x54,
	0x87, 0xd6, 0xff, 0x1b, 0x90, 0xf7, 0x68, 0xa3, 0x84, 0x19, 0x6d, 0x83, 0x98, 0x8c, 0x15, 0xfc,
	0x3b, 0x72, 0x1e, 0x99, 0x66, 0x25, 0x9c, 0x3c, 0xb1, 0x20, 0x4a, 0x46, 0x8e, 0xd1, 0xd6, 0x09,
	0xcd, 0xb5, 0x27, 0x37, 0x18, 0xd2, 0x39, 0x6f, 0x4b, 0x4e, 0x70, 0xb2, 0x03, 0x9c, 0x94, 0x20,
	0x3d, 0xb8, 0xa6, 0xf7, 0x68, 0x0d, 0x3e, 0x37, 0x62, 0x1d, 0x08, 0xdf, 0xa5, 0x16, 0xca, 0x35,
	0xda, 0xd3, 0x39, 0x31, 0x3c, 0x16, 0xa3, 0xd9, 0x57, 0xf1, 0x25, 0x7a, 0x6a, 0x14, 0x57, 0x04,
	0x7e, 0x56, 0xee, 0x0b, 0x5e, 0xe5, 0xc9, 0xf6, 0x90, 0x63, 0x2c, 0x00, 0x73, 0xe7, 0x7e, 0x07,
	0xe0, 0x57, 0xb9, 0x22, 0xbe, 0xfa, 0x61, 0xc8, 0xb7, 0x07, 0xc0, 0x8a, 0x15, 0x91, 0xd5, 0x5d,
	0x54, 0x6a, 0x9b, 0x46, 0x4a, 0xa5, 0xcd, 0x79, 0x24, 0x97, 0xc8, 0x67, 0xb4, 0xa1, 0x03, 0xb7,
	0xe4, 0x2c, 0xd8, 0xb5, 0xfa, 0x2d, 0x86, 0x1c, 0xa0, 0x1f, 0x74, 0xc8, 0x53, 0x38, 0x25, 0x73,
	0x65, 0x4b, 0x75, 0x0f, 0xef, 0x15, 0x92, 0xd6, 0xd5, 0xce, 0x7c, 0xb5, 0x76, 0xb2, 0x3b, 0xf1,
	0x87, 0x4c, 0xb0, 0x90, 0xad, 0x68, 0x25, 0x72, 0x8a, 0x22, 0x71, 0x60, 0x42, 0xd0, 0x19, 0x2e,
	0xd3, 0xb8, 0xe3, 0x3f, 0x3f, 0xc1, 0x71, 0xfb, 0x82, 0xde, 0x4d, 0x69, 0xc2, 0x0a, 0x3d, 0x38,
	0x91, 0x54, 0x71, 0xd3, 0x23, 0xca, 0x88, 0x1f, 0xd8, 0xf6, 0xd2, 0x3c, 0xd8, 0x46, 0x05, 0x1f,
	0xa0, 0x2a, 0x6c, 0x05, 0xae, 0xb5, 0x61, 0xe4, 0xa3, 0xbf, 0x43, 0x55, 0x58, 0x20, 0xa9, 0xd3,
	0x52, 0xc9, 0xbf, 0x95, 0x9f, 0xeb, 0x36, 0xbf, 0x6a, 0x08, 0xc6, 0xb2, 0xaf, 0xb2, 0x90, 0xc1,
	0x77, 0xa3, 0x4c, 0x28, 0xe8, 0x5e, 0x07, 0xd6, 0x84, 0xb4, 0xc5, 0x2f, 0x2a, 0x79, 0x7f, 0x21,
	0x2c, 0x84, 0x6d, 0xca, 0x7b, 0x81, 0x30, 0x99, 0x4f, 0xda, 0xa6, 0x89, 0x07, 0xc6, 0x70, 0xae,
	0x81, 0xc2, 0x21, 0x0c, 0xf7, 0x2e, 0x35, 0x2d, 0xc4, 0x7e, 0xa9, 0x26, 0x4e, 0xe6, 0xf8, 0x00,
	0x9e, 0x9f, 0xa3, 0x55, 0x19, 0x0e, 0xae, 0x6f, 0x38, 0x3b, 0x50, 0x48, 0x49, 0xc9, 0x91, 0x18,
	0x8e, 0x17, 0xca, 0xc3, 0x9c, 0xd1, 0x05, 0x7f, 0xed, 0xfb, 0xdb, 0x91, 0x57, 0xc6, 0xdc, 0xb1,
	0x58, 0x17, 0x3b, 0xe5, 0x62, 0x41, 0x0c, 0x86, 0xfa, 0x94, 0xfc, 0xa1, 0x25, 0x1e, 0xe6, 0xa2,
	0xdb, 0xfc, 0x6a, 0x85, 0xc8, 0x10, 0x55, 0x9e, 0x8d, 0xca, 0xbd, 0x95, 0xb8, 0x10, 0xf5, 0x57,
	0x75, 0x30, 0xee, 0x0c, 0x4e, 0xc8, 0x98, 0xea, 0x3b, 0x96, 0x8c, 0x29, 0xbf, 0xb4, 0xd9, 0x8e,
	0x7d, 0x55, 0xf0, 0xe3, 0x9f, 0xdd, 0x9e, 0xe7, 0xe9, 0xb7, 0x14, 0x25, 0xb2, 0x7a, 0x66, 0xdf,
	0xf2, 0xa5, 0x3c, 0xdf, 0xaa, 0x98, 0x9d, 0xc1, 0x05, 0x4d, 0xa6, 0x81, 0xd1, 0x1c, 0x91, 0x7e,
	0x2c, 0xc4, 0xd6, 0x83, 0xaa, 0xf2, 0xbe, 0xa2, 0x64, 0xac, 0xed, 0x14, 0x10, 0xd8, 0x6b, 0xd5,
	0xe2, 0x9e, 0x51, 0x32, 0x9a, 0x52, 0x23, 0x2e, 0x88, 0xec, 0xde, 0xef, 0xd0, 0x63, 0xe8, 0x2b,
	0x10, 0x9c, 0x3b, 0x8f, 0x83, 0xd4, 0x3c, 0x8f, 0x83, 0x2c, 0x1d, 0x8d, 0x6b, 0x9a, 0xe1, 0xe2,
	0x45, 0xa1, 0xda, 0xa6, 0x8d, 0x63, 0xce, 0xe8, 0x62, 0x47, 0xc5, 0xbd, 0xd8, 0x08, 0xab, 0x32,
	0xa6, 0xe4, 0x79, 0xc7, 0x4c, 0xba, 0x07, 0x4f, 0x1e, 0x3c, 0xeb, 0xba, 0x96, 0xb5, 0x14, 0xcb,
	0xc4, 0x7f, 0x57, 0xeb, 0x59, 0x82, 0xd8, 0x32, 0x28, 0xef, 0xa1, 0x76, 0xfb, 0x82, 0xf6, 0x94,
	0xdd, 0xbe, 0x40, 0x93, 0x27, 0x4f, 0x59, 0x8b, 0x3d, 0xa5, 0x43, 0xd8, 0x32, 0x28, 0x5b, 0x09,
	0x06, 0x0b, 0xb2, 0xeb, 0xbb, 0xf9, 0xe8, 0x20, 0xe7, 0xf1, 0x8b, 0x0b, 0x42, 0x66, 0xd0, 0x95,
	0x9f, 0xa7, 0x2f, 0xe9, 0x83, 0x55, 0xae, 0x10, 0x53, 0xe1, 0xd8, 0x14, 0x82, 0xd0, 0xad, 0x1c,
	0x14, 0x8c, 0xd8, 0xf9, 0x6d, 0xe5, 0xd6, 0x3e, 0x14, 0x74, 0x24, 0x8f, 0x2b, 0x19, 0x40, 0x67,
	0x1a, 0x7a, 0x8b, 0x27, 0x3f, 0xb7, 0x92, 0xe7, 0x85, 0x46, 0x05, 0x9f, 0xa2, 0x27, 0x39, 0x94,
	0x0b, 0xf9, 0xb6, 0xb5, 0x2c, 0xd2, 0x79, 0x01, 0xe9, 0xab, 0x7c, 0x82, 0xb3, 0x21, 0x39, 0xda,
	0x09, 0x04, 0x2c, 0x9b, 0x93, 0x49, 0x30, 0x93, 0x04, 0x5d, 0xa3, 0xba, 0x3c, 0xe2, 0xe4, 0x74,
	0xf8, 0xa9, 0xd9, 0x39, 0xc3, 0x80, 0xb7, 0x6f, 0x3e, 0xee, 0x59, 0x19, 0xae, 0x48, 0x71, 0xa7,
	0xdc, 0xaf, 0xeb, 0x69, 0xfb, 0xc2, 0xd0, 0x08, 0xb4, 0x5d, 0x98, 0x7f, 0x86, 0xe2, 0x92, 0x11,
	0x36, 0xd5, 0x1f, 0x36, 0xa4, 0x4d, 0x13, 0x14, 0xe6, 0x4b, 0x8c, 0x71, 0xe1, 0xc7, 0xed, 0x1b,
	0xea, 0xde, 0x1a, 0x60, 0xfa, 0x29, 0x40, 0x28, 0x9b, 0xe6, 0x1e, 0x91, 0xc2, 0x0b, 0x0a, 0x9b,
	0x1d, 0xb7, 0x03, 0xe2, 0x8f, 0xad, 0x08, 0x42, 0xd9, 0x34, 0x37, 0x7b, 0xbe, 0xa8, 0x0f, 0x68,
	0x1b, 0x46, 0x64, 0xaa, 0x98, 0x7a, 0x3e, 0x6b, 0x4e, 0xd9, 0x0d, 0x2e, 0xe1, 0x56, 0xe9, 0xca,
	0x4b, 0x1a, 0x20, 0xc7, 0xa4, 0x5b, 0x99, 0x8b, 0x56, 0x36, 0x2c, 0xad, 0x54, 0x46, 0x3c, 0xcf,
	0xa7, 0xf6, 0x90, 0xb2, 0xa5, 0x1f, 0x6d, 0x31, 0x96, 0x58, 0x79, 0xca, 0x05, 0xca, 0xcf, 0xf5,
	0xf4, 0xfb, 0xcb, 0x3f, 0x45, 0x75, 0x93, 0xca, 0xab, 0x98, 0x84, 0xc9, 0x90, 0xc6, 0xda, 0xfc,
	0xc9, 0xab, 0xca, 0x91, 0xfa, 0x68, 0xd7, 0x28, 0x52, 0x59, 0x0b, 0x1e, 0x9f, 0x95, 0xf3, 0xa8,
	0x6c, 0x38, 0x8d, 0x7b, 0xd6, 0x78, 0x92, 0xc5, 0x3f, 0x2d, 0x01, 0x6c, 0x24, 0xda, 0x0b, 0x80,
	0xba, 0x4d, 0x0e, 0xbf, 0xbb, 0xee, 0x53, 0x39, 0x73, 0x7b, 0xb1, 0x47, 0xe3, 0x66, 0xe8, 0x75,
	0x43, 0x37, 0x1a, 0xd3, 0xdc, 0x01, 0xf0, 0x99, 0xf6, 0xae, 0xa2, 0x1e, 0xeb, 0x4d, 0x07, 0xb1,
	0x4c, 0xe0, 0x1b, 0xa6, 0x26, 0x9c, 0x60, 0x2e, 0xeb, 0xa8, 0x12, 0x0b, 0x3f, 0x31, 0xbe, 0xe7,
	0xe8, 0xc4, 0x0b, 0xc2, 0x4e, 0x01, 0xae, 0x35, 0xfb, 0x18, 0x85, 0xec, 0x26, 0x97, 0xdd, 0x7c,
	0x9c, 0x63, 0x39, 0xc8, 0x85, 0x2e, 0x54, 0x38, 0x7f, 0x51, 0x12, 0x2f, 0x05, 0x73, 0x2d, 0xaf,
	0x01, 0x70, 0xdf, 0x05, 0x90, 0x23, 0xa2, 0x5f, 0x03, 0x41, 0x93, 0x11, 0x94, 0xbb, 0xbd, 0x96,
	0xa9, 0xc5, 0x77, 0xa6, 0x9e, 0xce, 0xf5, 0x4c, 0x79, 0x3e, 0x1d, 0x5b, 0xb3, 0x2b, 0x58, 0x36,
	0x2a, 0xf8, 0x27, 0x75, 0x27, 0xbc, 0x22, 0xc9, 0xad, 0xf6, 0x60, 0xcc, 0x7f, 0x96, 0xdc, 0x68,
	0xe0, 0x5b, 0xcd, 0x95, 0xa2, 0x49, 0x75, 0xc3, 0x5e, 0xdc, 0x98, 0x44, 0xf2, 0x16, 0x39, 0xbc,
	0xbc, 0x0b, 0x88, 0x66, 0x10, 0xa4, 0x28, 0xb6, 0x7f, 0x30, 0x28, 0x83, 0x46, 0x05, 0xff, 0x8c,
	0x10, 0x9c, 0xf7, 0x45, 0x9a, 0x0f, 0x38, 0xe7, 0x1f, 0x68, 0xa9, 0xda, 0x36, 0x8a, 0x59, 0x2d,
	0x90, 0x01, 0x9b, 0xe3, 0x21, 0x64, 0xbc, 0x31, 0x2b, 0xb9, 0x9a, 0x4d, 0xf2, 0x8b, 0x7f, 0xcb,
	0x00, 0xe0, 0x06, 0xb2, 0x9a, 0x03, 0x54, 0x05, 0xd2, 0x9b, 0xf2, 0x3f, 0x53, 0x5a, 0x76, 0x4a,
	0x54, 0x88, 0xa7, 0x76, 0x89, 0x32, 0xc8, 0xed, 0x12, 0x25, 0xce, 0x9a, 0x30, 0x47, 0x27, 0x7a,
	0xb9, 0xa3, 0xd2, 0xe7, 0x57, 0xe8, 0x2b, 0xf9, 0xdf, 0xaf, 0x92, 0x86, 0x68, 0x65, 0x68, 0x46,
	0xfa, 0x5d, 0xbe, 0xa4, 0x8c, 0x85, 0x17, 0x30, 0xe5, 0xb3, 0xf8, 0xc8, 0xac, 0x2c, 0x21, 0x22,
	0x34, 0x68, 0x19, 0xe2, 0x7a, 0xf2, 0x44, 0x57, 0x28, 0x73, 0xd7, 0x78, 0x44, 0xd0, 0x55, 0x8e,
	0x5d, 0x25, 0x4a, 0xc0, 0xd9, 0x3b, 0x8a, 0xd2, 0x69, 0xb7, 0x15, 0x5d, 0x5c, 0xf2, 0xc8, 0x5a,
	0xcc, 0x66, 0xf1, 0xa1, 0x5d, 0xb7, 0x16, 0x87, 0xd4, 0x7a, 0xf6, 0x20, 0x62, 0xa0, 0x3c, 0x30,
	0x8b, 0x43, 0x54, 0xcf, 0x9e, 0x61, 0x16, 0xa5, 0x91, 0x77, 0x3e, 0x96, 0x4b, 0x27, 0x4f, 0x4d,
	0x33, 0x08, 0x72, 0x4b, 0x67, 0x2e, 0x8d, 0x1d, 0xf9, 0xb4, 0xcf, 0xc7, 0x52, 0x3a, 0x30, 0xb5,
	0x91, 0x62, 0xc8, 0x1d, 0x8b, 0x5c, 0xbc, 0x62, 0xfe, 0xbf, 0x88, 0xc3, 0xbf, 0x61, 0xed, 0x28,
	0xf4, 0x7c, 0xf1, 0xfa, 0xbc, 0x34, 0xe8, 0xe0, 0x3f, 0x42, 0x7c, 0xf0, 0x4f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x25, 0xf8, 0x32, 0x4c, 0xa8, 0x1f, 0x00, 0x00,
}
