// Code generated by protoc-gen-go. DO NOT EDIT.
// source: buycai_user_order.proto

package dbproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type BuycaiUserOrder struct {
	Id             int64   `protobuf:"varint,1,opt,name=id" json:"id"`
	AccountId      int64   `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id"`
	LotteryId      int32   `protobuf:"varint,3,opt,name=lottery_id,json=lotteryId" json:"lottery_id"`
	OrderTime      int64   `protobuf:"varint,4,opt,name=order_time,json=orderTime" json:"order_time"`
	IssueNum       int32   `protobuf:"varint,5,opt,name=issue_num,json=issueNum" json:"issue_num"`
	ChaseNo        int32   `protobuf:"varint,6,opt,name=chase_no,json=chaseNo" json:"chase_no"`
	Cai            float64 `protobuf:"fixed64,7,opt,name=cai" json:"cai"`
	Balance        float64 `protobuf:"fixed64,8,opt,name=balance" json:"balance"`
	SumMoney       float64 `protobuf:"fixed64,9,opt,name=sum_money,json=sumMoney" json:"sum_money"`
	Issues         string  `protobuf:"bytes,10,opt,name=issues" json:"issues"`
	TicketId       int64   `protobuf:"varint,11,opt,name=ticket_id,json=ticketId" json:"ticket_id"`
	TicketSubMoney float64 `protobuf:"fixed64,12,opt,name=ticket_sub_money,json=ticketSubMoney" json:"ticket_sub_money"`
	SchemeList     string  `protobuf:"bytes,13,opt,name=scheme_list,json=schemeList" json:"scheme_list"`
	Status         int32   `protobuf:"varint,14,opt,name=status" json:"status"`
	IsWinStop      bool    `protobuf:"varint,15,opt,name=is_win_stop,json=isWinStop" json:"is_win_stop"`
	CostCai        float64 `protobuf:"fixed64,16,opt,name=cost_cai,json=costCai" json:"cost_cai"`
	CostBalance    float64 `protobuf:"fixed64,17,opt,name=cost_balance,json=costBalance" json:"cost_balance"`
	TotalWinMoney  float64 `protobuf:"fixed64,18,opt,name=total_win_money,json=totalWinMoney" json:"total_win_money"`
	UserName       string  `protobuf:"bytes,19,opt,name=user_name,json=userName" json:"user_name"`
	Ticket         *Ticket `protobuf:"bytes,20,opt,name=ticket" json:"ticket"`
}

func (m *BuycaiUserOrder) Reset()                    { *m = BuycaiUserOrder{} }
func (m *BuycaiUserOrder) String() string            { return proto.CompactTextString(m) }
func (*BuycaiUserOrder) ProtoMessage()               {}
func (*BuycaiUserOrder) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *BuycaiUserOrder) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BuycaiUserOrder) GetAccountId() int64 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *BuycaiUserOrder) GetLotteryId() int32 {
	if m != nil {
		return m.LotteryId
	}
	return 0
}

func (m *BuycaiUserOrder) GetOrderTime() int64 {
	if m != nil {
		return m.OrderTime
	}
	return 0
}

func (m *BuycaiUserOrder) GetIssueNum() int32 {
	if m != nil {
		return m.IssueNum
	}
	return 0
}

func (m *BuycaiUserOrder) GetChaseNo() int32 {
	if m != nil {
		return m.ChaseNo
	}
	return 0
}

func (m *BuycaiUserOrder) GetCai() float64 {
	if m != nil {
		return m.Cai
	}
	return 0
}

func (m *BuycaiUserOrder) GetBalance() float64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *BuycaiUserOrder) GetSumMoney() float64 {
	if m != nil {
		return m.SumMoney
	}
	return 0
}

func (m *BuycaiUserOrder) GetIssues() string {
	if m != nil {
		return m.Issues
	}
	return ""
}

func (m *BuycaiUserOrder) GetTicketId() int64 {
	if m != nil {
		return m.TicketId
	}
	return 0
}

func (m *BuycaiUserOrder) GetTicketSubMoney() float64 {
	if m != nil {
		return m.TicketSubMoney
	}
	return 0
}

func (m *BuycaiUserOrder) GetSchemeList() string {
	if m != nil {
		return m.SchemeList
	}
	return ""
}

func (m *BuycaiUserOrder) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *BuycaiUserOrder) GetIsWinStop() bool {
	if m != nil {
		return m.IsWinStop
	}
	return false
}

func (m *BuycaiUserOrder) GetCostCai() float64 {
	if m != nil {
		return m.CostCai
	}
	return 0
}

func (m *BuycaiUserOrder) GetCostBalance() float64 {
	if m != nil {
		return m.CostBalance
	}
	return 0
}

func (m *BuycaiUserOrder) GetTotalWinMoney() float64 {
	if m != nil {
		return m.TotalWinMoney
	}
	return 0
}

func (m *BuycaiUserOrder) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *BuycaiUserOrder) GetTicket() *Ticket {
	if m != nil {
		return m.Ticket
	}
	return nil
}

// 用户购彩订单列表
type UserOrderList struct {
	Total     int64              `protobuf:"varint,1,opt,name=total" json:"total"`
	Size      int64              `protobuf:"varint,2,opt,name=size" json:"size"`
	Page      int64              `protobuf:"varint,3,opt,name=page" json:"page"`
	List      []*BuycaiUserOrder `protobuf:"bytes,4,rep,name=list" json:"list"`
	Condition string             `protobuf:"bytes,5,opt,name=condition" json:"condition"`
}

func (m *UserOrderList) Reset()                    { *m = UserOrderList{} }
func (m *UserOrderList) String() string            { return proto.CompactTextString(m) }
func (*UserOrderList) ProtoMessage()               {}
func (*UserOrderList) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *UserOrderList) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *UserOrderList) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *UserOrderList) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *UserOrderList) GetList() []*BuycaiUserOrder {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *UserOrderList) GetCondition() string {
	if m != nil {
		return m.Condition
	}
	return ""
}

func init() {
	proto.RegisterType((*BuycaiUserOrder)(nil), "dbproto.BuycaiUserOrder")
	proto.RegisterType((*UserOrderList)(nil), "dbproto.UserOrderList")
}

func init() { proto.RegisterFile("buycai_user_order.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 508 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0xcb, 0x6e, 0xd4, 0x30,
	0x14, 0x86, 0x95, 0xb9, 0x26, 0x27, 0x9d, 0x0b, 0xa6, 0x02, 0xb7, 0xe5, 0x12, 0xba, 0x80, 0x2c,
	0xd0, 0x2c, 0xca, 0x1b, 0x94, 0x55, 0x25, 0x18, 0xa4, 0xb4, 0xa8, 0x4b, 0xcb, 0x49, 0xcc, 0xd4,
	0xea, 0xc4, 0x8e, 0x62, 0x1b, 0x34, 0xbc, 0x09, 0xcf, 0xc7, 0x8b, 0x20, 0x1f, 0xbb, 0x45, 0xb0,
	0xf3, 0xf9, 0xfe, 0x73, 0x7c, 0x2e, 0xfa, 0xe1, 0x79, 0xed, 0x0e, 0x0d, 0x97, 0xcc, 0x19, 0x31,
	0x30, 0x3d, 0xb4, 0x62, 0xd8, 0xf4, 0x83, 0xb6, 0x9a, 0xcc, 0xdb, 0x1a, 0x1f, 0xa7, 0x27, 0x31,
	0xe3, 0xbb, 0x50, 0xad, 0xfe, 0x27, 0xe7, 0x94, 0xec, 0xe4, 0x37, 0xcb, 0x7a, 0xde, 0xdc, 0xf3,
	0x9d, 0x08, 0xec, 0xfc, 0xf7, 0x04, 0x56, 0x97, 0x58, 0xf1, 0xd5, 0x88, 0xe1, 0x8b, 0xcf, 0x26,
	0x4b, 0x18, 0xc9, 0x96, 0x26, 0x45, 0x52, 0x8e, 0xab, 0x91, 0x6c, 0xc9, 0x4b, 0x00, 0xde, 0x34,
	0xda, 0x29, 0xcb, 0x64, 0x4b, 0x47, 0xc8, 0xb3, 0x48, 0xae, 0x50, 0xde, 0x6b, 0x6b, 0xc5, 0x70,
	0xf0, 0xf2, 0xb8, 0x48, 0xca, 0x69, 0x95, 0x45, 0x12, 0x64, 0x1c, 0x82, 0x59, 0xd9, 0x09, 0x3a,
	0x09, 0xd5, 0x48, 0x6e, 0x64, 0x27, 0xc8, 0x19, 0x64, 0xd2, 0x18, 0x27, 0x98, 0x72, 0x1d, 0x9d,
	0x62, 0x71, 0x8a, 0x60, 0xeb, 0x3a, 0x72, 0x02, 0x69, 0x73, 0xc7, 0x8d, 0x60, 0x4a, 0xd3, 0x19,
	0x6a, 0x73, 0x8c, 0xb7, 0x9a, 0xac, 0x61, 0xdc, 0x70, 0x49, 0xe7, 0x45, 0x52, 0x26, 0x95, 0x7f,
	0x12, 0x0a, 0xf3, 0x9a, 0xef, 0xb9, 0x6a, 0x04, 0x4d, 0x91, 0x3e, 0x84, 0xbe, 0x87, 0x71, 0x1d,
	0xeb, 0xb4, 0x12, 0x07, 0x9a, 0xa1, 0x96, 0x1a, 0xd7, 0x7d, 0xf6, 0x31, 0x79, 0x06, 0x33, 0xec,
	0x67, 0x28, 0x14, 0x49, 0x99, 0x55, 0x31, 0xf2, 0x45, 0x56, 0x36, 0xf7, 0x02, 0x97, 0xce, 0x71,
	0xec, 0x34, 0x80, 0xab, 0x96, 0x94, 0xb0, 0x8e, 0xa2, 0x71, 0x75, 0xfc, 0xf8, 0x08, 0x3f, 0x5e,
	0x06, 0x7e, 0xed, 0xea, 0xf0, 0xfd, 0x6b, 0xc8, 0x4d, 0x73, 0x27, 0x3a, 0xc1, 0xf6, 0xd2, 0x58,
	0xba, 0xc0, 0x1e, 0x10, 0xd0, 0x27, 0x69, 0xac, 0xef, 0x6f, 0x2c, 0xb7, 0xce, 0xd0, 0x25, 0x6e,
	0x18, 0x23, 0xf2, 0x0a, 0x72, 0x69, 0xd8, 0x0f, 0xa9, 0x98, 0xb1, 0xba, 0xa7, 0xab, 0x22, 0x29,
	0xd3, 0x2a, 0x93, 0xe6, 0x56, 0xaa, 0x6b, 0xab, 0x7b, 0xbc, 0x8d, 0x36, 0x96, 0xf9, 0x2b, 0xac,
	0xc3, 0xbe, 0x3e, 0xfe, 0xc8, 0x25, 0x79, 0x03, 0x47, 0x28, 0x3d, 0x9c, 0xe3, 0x09, 0xca, 0xb9,
	0x67, 0x97, 0xf1, 0x24, 0x6f, 0x61, 0x65, 0xb5, 0xe5, 0x7b, 0x6c, 0x10, 0xe6, 0x27, 0x98, 0xb5,
	0x40, 0x7c, 0x2b, 0x55, 0x18, 0xff, 0x0c, 0x32, 0xf4, 0x9a, 0xe2, 0x9d, 0xa0, 0x4f, 0x71, 0xf8,
	0xd4, 0x83, 0x2d, 0xef, 0x04, 0x79, 0x07, 0xb3, 0xb0, 0x2d, 0x3d, 0x2e, 0x92, 0x32, 0xbf, 0x58,
	0x6d, 0xa2, 0x0b, 0x37, 0x37, 0x88, 0xab, 0x28, 0x9f, 0xff, 0x4a, 0x60, 0xf1, 0xe8, 0x2f, 0xdc,
	0xfa, 0x18, 0xa6, 0xd8, 0x28, 0xda, 0x2c, 0x04, 0x84, 0xc0, 0xc4, 0xc8, 0x9f, 0x22, 0x7a, 0x0c,
	0xdf, 0x9e, 0xf5, 0x7c, 0x27, 0xd0, 0x58, 0xe3, 0x0a, 0xdf, 0xe4, 0x3d, 0x4c, 0xf0, 0x9a, 0x93,
	0x62, 0x5c, 0xe6, 0x17, 0xf4, 0xb1, 0xed, 0x7f, 0x4e, 0xae, 0x30, 0x8b, 0xbc, 0x80, 0xac, 0xd1,
	0xaa, 0x95, 0x56, 0x6a, 0x85, 0x16, 0xcb, 0xaa, 0xbf, 0xa0, 0x9e, 0x61, 0xe9, 0x87, 0x3f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xb1, 0x3b, 0x4d, 0x71, 0x5b, 0x03, 0x00, 0x00,
}
