// Code generated by protoc-gen-go. DO NOT EDIT.
// source: winning.proto

package dbproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Winning struct {
	Id         int64  `protobuf:"varint,1,opt,name=id" json:"id"`
	UserId     int64  `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id"`
	Username   string `protobuf:"bytes,3,opt,name=username" json:"username"`
	Info       string `protobuf:"bytes,4,opt,name=info" json:"info"`
	Status     bool   `protobuf:"varint,5,opt,name=status" json:"status"`
	CreateTime int64  `protobuf:"varint,6,opt,name=create_time,json=createTime" json:"create_time"`
}

func (m *Winning) Reset()                    { *m = Winning{} }
func (m *Winning) String() string            { return proto.CompactTextString(m) }
func (*Winning) ProtoMessage()               {}
func (*Winning) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{0} }

func (m *Winning) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Winning) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Winning) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Winning) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func (m *Winning) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *Winning) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

type WinningList struct {
	Page   int64      `protobuf:"varint,1,opt,name=page" json:"page"`
	Size   int64      `protobuf:"varint,2,opt,name=size" json:"size"`
	Total  int64      `protobuf:"varint,3,opt,name=total" json:"total"`
	Mobile string     `protobuf:"bytes,4,opt,name=mobile" json:"mobile"`
	List   []*Winning `protobuf:"bytes,5,rep,name=list" json:"list"`
}

func (m *WinningList) Reset()                    { *m = WinningList{} }
func (m *WinningList) String() string            { return proto.CompactTextString(m) }
func (*WinningList) ProtoMessage()               {}
func (*WinningList) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{1} }

func (m *WinningList) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *WinningList) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *WinningList) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *WinningList) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

func (m *WinningList) GetList() []*Winning {
	if m != nil {
		return m.List
	}
	return nil
}

func init() {
	proto.RegisterType((*Winning)(nil), "dbproto.Winning")
	proto.RegisterType((*WinningList)(nil), "dbproto.WinningList")
}

func init() { proto.RegisterFile("winning.proto", fileDescriptor26) }

var fileDescriptor26 = []byte{
	// 238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x90, 0xcd, 0x4a, 0xc4, 0x30,
	0x14, 0x85, 0x49, 0x7f, 0xc7, 0x5b, 0x14, 0xb9, 0x88, 0x06, 0x37, 0x96, 0xc1, 0x45, 0x57, 0x5d,
	0xe8, 0x53, 0x08, 0xae, 0x82, 0xe0, 0x72, 0x48, 0x4d, 0x1c, 0x2e, 0xb4, 0xc9, 0xd0, 0x64, 0x10,
	0x7c, 0x03, 0x9f, 0xc1, 0x97, 0x95, 0xdc, 0x06, 0x77, 0xe7, 0x7c, 0x17, 0x72, 0x3e, 0x02, 0x97,
	0x5f, 0xe4, 0x1c, 0xb9, 0xe3, 0x78, 0x5a, 0x7d, 0xf4, 0xd8, 0x9a, 0x89, 0xc3, 0xfe, 0x57, 0x40,
	0xfb, 0xbe, 0x9d, 0xf0, 0x0a, 0x0a, 0x32, 0x52, 0xf4, 0x62, 0x28, 0x55, 0x41, 0x06, 0xef, 0xa0,
	0x3d, 0x07, 0xbb, 0x1e, 0xc8, 0xc8, 0x82, 0x61, 0x93, 0xea, 0x8b, 0xc1, 0x7b, 0xd8, 0xa5, 0xe4,
	0xf4, 0x62, 0x65, 0xd9, 0x8b, 0xe1, 0x42, 0xfd, 0x77, 0x44, 0xa8, 0xc8, 0x7d, 0x7a, 0x59, 0x31,
	0xe7, 0x8c, 0xb7, 0xd0, 0x84, 0xa8, 0xe3, 0x39, 0xc8, 0xba, 0x17, 0xc3, 0x4e, 0xe5, 0x86, 0x0f,
	0xd0, 0x7d, 0xac, 0x56, 0x47, 0x7b, 0x88, 0xb4, 0x58, 0xd9, 0xf0, 0x08, 0x6c, 0xe8, 0x8d, 0x16,
	0xbb, 0xff, 0x11, 0xd0, 0x65, 0xbb, 0x57, 0x0a, 0x31, 0x3d, 0x7e, 0xd2, 0x47, 0x9b, 0x1d, 0x39,
	0x27, 0x16, 0xe8, 0xdb, 0x66, 0x45, 0xce, 0x78, 0x03, 0x75, 0xf4, 0x51, 0xcf, 0x6c, 0x57, 0xaa,
	0xad, 0x24, 0x8d, 0xc5, 0x4f, 0x34, 0xdb, 0x2c, 0x97, 0x1b, 0x3e, 0x42, 0x35, 0x53, 0x88, 0xb2,
	0xee, 0xcb, 0xa1, 0x7b, 0xba, 0x1e, 0xf3, 0xdf, 0x8c, 0x79, 0x59, 0xf1, 0x75, 0x6a, 0x18, 0x3e,
	0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x9e, 0xe3, 0x07, 0x1c, 0x4a, 0x01, 0x00, 0x00,
}
