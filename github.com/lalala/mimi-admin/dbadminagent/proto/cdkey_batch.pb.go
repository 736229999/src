// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cdkey_batch.proto

package dbproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CdKeyBatchArg struct {
	Id             int64  `protobuf:"varint,1,opt,name=id" json:"id"`
	AddTime        int64  `protobuf:"varint,2,opt,name=add_time,json=addTime" json:"add_time"`
	MaxExchange    int64  `protobuf:"varint,3,opt,name=max_exchange,json=maxExchange" json:"max_exchange"`
	Title          string `protobuf:"bytes,4,opt,name=title" json:"title"`
	GiftTemplateId int64  `protobuf:"varint,5,opt,name=gift_template_id,json=giftTemplateId" json:"gift_template_id"`
	ValidStart     int64  `protobuf:"varint,6,opt,name=valid_start,json=validStart" json:"valid_start"`
	ValidEnd       int64  `protobuf:"varint,7,opt,name=valid_end,json=validEnd" json:"valid_end"`
	CdkeyDesc      string `protobuf:"bytes,8,opt,name=cdkey_desc,json=cdkeyDesc" json:"cdkey_desc"`
}

func (m *CdKeyBatchArg) Reset()                    { *m = CdKeyBatchArg{} }
func (m *CdKeyBatchArg) String() string            { return proto.CompactTextString(m) }
func (*CdKeyBatchArg) ProtoMessage()               {}
func (*CdKeyBatchArg) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

func (m *CdKeyBatchArg) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CdKeyBatchArg) GetAddTime() int64 {
	if m != nil {
		return m.AddTime
	}
	return 0
}

func (m *CdKeyBatchArg) GetMaxExchange() int64 {
	if m != nil {
		return m.MaxExchange
	}
	return 0
}

func (m *CdKeyBatchArg) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CdKeyBatchArg) GetGiftTemplateId() int64 {
	if m != nil {
		return m.GiftTemplateId
	}
	return 0
}

func (m *CdKeyBatchArg) GetValidStart() int64 {
	if m != nil {
		return m.ValidStart
	}
	return 0
}

func (m *CdKeyBatchArg) GetValidEnd() int64 {
	if m != nil {
		return m.ValidEnd
	}
	return 0
}

func (m *CdKeyBatchArg) GetCdkeyDesc() string {
	if m != nil {
		return m.CdkeyDesc
	}
	return ""
}

type GiftCdkeyArg struct {
	Gift  *GiftPackageArg `protobuf:"bytes,1,opt,name=gift" json:"gift"`
	Cdkey *CdKeyBatchArg  `protobuf:"bytes,2,opt,name=cdkey" json:"cdkey"`
}

func (m *GiftCdkeyArg) Reset()                    { *m = GiftCdkeyArg{} }
func (m *GiftCdkeyArg) String() string            { return proto.CompactTextString(m) }
func (*GiftCdkeyArg) ProtoMessage()               {}
func (*GiftCdkeyArg) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

func (m *GiftCdkeyArg) GetGift() *GiftPackageArg {
	if m != nil {
		return m.Gift
	}
	return nil
}

func (m *GiftCdkeyArg) GetCdkey() *CdKeyBatchArg {
	if m != nil {
		return m.Cdkey
	}
	return nil
}

type CdkeyListArg struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name"`
	Page int64  `protobuf:"varint,2,opt,name=page" json:"page"`
	Size int64  `protobuf:"varint,3,opt,name=size" json:"size"`
}

func (m *CdkeyListArg) Reset()                    { *m = CdkeyListArg{} }
func (m *CdkeyListArg) String() string            { return proto.CompactTextString(m) }
func (*CdkeyListArg) ProtoMessage()               {}
func (*CdkeyListArg) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{2} }

func (m *CdkeyListArg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CdkeyListArg) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *CdkeyListArg) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

type CdkeyListReply struct {
	Id          int64  `protobuf:"varint,1,opt,name=id" json:"id"`
	Title       string `protobuf:"bytes,2,opt,name=title" json:"title"`
	ContentDesc string `protobuf:"bytes,3,opt,name=content_desc,json=contentDesc" json:"content_desc"`
	ValidStart  string `protobuf:"bytes,4,opt,name=valid_start,json=validStart" json:"valid_start"`
	ValidEnd    string `protobuf:"bytes,5,opt,name=valid_end,json=validEnd" json:"valid_end"`
}

func (m *CdkeyListReply) Reset()                    { *m = CdkeyListReply{} }
func (m *CdkeyListReply) String() string            { return proto.CompactTextString(m) }
func (*CdkeyListReply) ProtoMessage()               {}
func (*CdkeyListReply) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{3} }

func (m *CdkeyListReply) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CdkeyListReply) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CdkeyListReply) GetContentDesc() string {
	if m != nil {
		return m.ContentDesc
	}
	return ""
}

func (m *CdkeyListReply) GetValidStart() string {
	if m != nil {
		return m.ValidStart
	}
	return ""
}

func (m *CdkeyListReply) GetValidEnd() string {
	if m != nil {
		return m.ValidEnd
	}
	return ""
}

type CdkeyListArgReply struct {
	Total     int64             `protobuf:"varint,1,opt,name=total" json:"total"`
	CdkeyList []*CdkeyListReply `protobuf:"bytes,2,rep,name=cdkey_list,json=cdkeyList" json:"cdkey_list"`
}

func (m *CdkeyListArgReply) Reset()                    { *m = CdkeyListArgReply{} }
func (m *CdkeyListArgReply) String() string            { return proto.CompactTextString(m) }
func (*CdkeyListArgReply) ProtoMessage()               {}
func (*CdkeyListArgReply) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{4} }

func (m *CdkeyListArgReply) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *CdkeyListArgReply) GetCdkeyList() []*CdkeyListReply {
	if m != nil {
		return m.CdkeyList
	}
	return nil
}

type CdkeyBatch struct {
	Id             int64  `protobuf:"varint,1,opt,name=id" json:"id"`
	MaxExchange    int64  `protobuf:"varint,2,opt,name=max_exchange,json=maxExchange" json:"max_exchange"`
	Title          string `protobuf:"bytes,3,opt,name=title" json:"title"`
	GiftTemplateId int64  `protobuf:"varint,4,opt,name=gift_template_id,json=giftTemplateId" json:"gift_template_id"`
	ValidStart     int64  `protobuf:"varint,5,opt,name=valid_start,json=validStart" json:"valid_start"`
	ValidEnd       int64  `protobuf:"varint,6,opt,name=valid_end,json=validEnd" json:"valid_end"`
	AddTime        int64  `protobuf:"varint,7,opt,name=add_time,json=addTime" json:"add_time"`
	CdkeyDesc      string `protobuf:"bytes,8,opt,name=cdkey_desc,json=cdkeyDesc" json:"cdkey_desc"`
}

func (m *CdkeyBatch) Reset()                    { *m = CdkeyBatch{} }
func (m *CdkeyBatch) String() string            { return proto.CompactTextString(m) }
func (*CdkeyBatch) ProtoMessage()               {}
func (*CdkeyBatch) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{5} }

func (m *CdkeyBatch) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CdkeyBatch) GetMaxExchange() int64 {
	if m != nil {
		return m.MaxExchange
	}
	return 0
}

func (m *CdkeyBatch) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CdkeyBatch) GetGiftTemplateId() int64 {
	if m != nil {
		return m.GiftTemplateId
	}
	return 0
}

func (m *CdkeyBatch) GetValidStart() int64 {
	if m != nil {
		return m.ValidStart
	}
	return 0
}

func (m *CdkeyBatch) GetValidEnd() int64 {
	if m != nil {
		return m.ValidEnd
	}
	return 0
}

func (m *CdkeyBatch) GetAddTime() int64 {
	if m != nil {
		return m.AddTime
	}
	return 0
}

func (m *CdkeyBatch) GetCdkeyDesc() string {
	if m != nil {
		return m.CdkeyDesc
	}
	return ""
}

type CdkeyReply struct {
	Page  int64         `protobuf:"varint,1,opt,name=page" json:"page"`
	Size  int64         `protobuf:"varint,2,opt,name=size" json:"size"`
	Total int64         `protobuf:"varint,3,opt,name=total" json:"total"`
	Title string        `protobuf:"bytes,4,opt,name=title" json:"title"`
	List  []*CdkeyBatch `protobuf:"bytes,5,rep,name=list" json:"list"`
}

func (m *CdkeyReply) Reset()                    { *m = CdkeyReply{} }
func (m *CdkeyReply) String() string            { return proto.CompactTextString(m) }
func (*CdkeyReply) ProtoMessage()               {}
func (*CdkeyReply) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{6} }

func (m *CdkeyReply) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *CdkeyReply) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *CdkeyReply) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *CdkeyReply) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CdkeyReply) GetList() []*CdkeyBatch {
	if m != nil {
		return m.List
	}
	return nil
}

type CdkeyDetail struct {
	Id             int64                `protobuf:"varint,1,opt,name=id" json:"id"`
	MaxExchange    int64                `protobuf:"varint,2,opt,name=max_exchange,json=maxExchange" json:"max_exchange"`
	Title          string               `protobuf:"bytes,3,opt,name=title" json:"title"`
	GiftTemplateId int64                `protobuf:"varint,4,opt,name=gift_template_id,json=giftTemplateId" json:"gift_template_id"`
	ValidStart     int64                `protobuf:"varint,5,opt,name=valid_start,json=validStart" json:"valid_start"`
	ValidEnd       int64                `protobuf:"varint,6,opt,name=valid_end,json=validEnd" json:"valid_end"`
	AddTime        int64                `protobuf:"varint,7,opt,name=add_time,json=addTime" json:"add_time"`
	Gift           *GiftTemplateContent `protobuf:"bytes,8,opt,name=gift" json:"gift"`
	Content        string               `protobuf:"bytes,9,opt,name=content" json:"content"`
	CdkeyDesc      string               `protobuf:"bytes,10,opt,name=cdkey_desc,json=cdkeyDesc" json:"cdkey_desc"`
}

func (m *CdkeyDetail) Reset()                    { *m = CdkeyDetail{} }
func (m *CdkeyDetail) String() string            { return proto.CompactTextString(m) }
func (*CdkeyDetail) ProtoMessage()               {}
func (*CdkeyDetail) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{7} }

func (m *CdkeyDetail) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CdkeyDetail) GetMaxExchange() int64 {
	if m != nil {
		return m.MaxExchange
	}
	return 0
}

func (m *CdkeyDetail) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CdkeyDetail) GetGiftTemplateId() int64 {
	if m != nil {
		return m.GiftTemplateId
	}
	return 0
}

func (m *CdkeyDetail) GetValidStart() int64 {
	if m != nil {
		return m.ValidStart
	}
	return 0
}

func (m *CdkeyDetail) GetValidEnd() int64 {
	if m != nil {
		return m.ValidEnd
	}
	return 0
}

func (m *CdkeyDetail) GetAddTime() int64 {
	if m != nil {
		return m.AddTime
	}
	return 0
}

func (m *CdkeyDetail) GetGift() *GiftTemplateContent {
	if m != nil {
		return m.Gift
	}
	return nil
}

func (m *CdkeyDetail) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *CdkeyDetail) GetCdkeyDesc() string {
	if m != nil {
		return m.CdkeyDesc
	}
	return ""
}

func init() {
	proto.RegisterType((*CdKeyBatchArg)(nil), "dbproto.CdKeyBatchArg")
	proto.RegisterType((*GiftCdkeyArg)(nil), "dbproto.GiftCdkeyArg")
	proto.RegisterType((*CdkeyListArg)(nil), "dbproto.CdkeyListArg")
	proto.RegisterType((*CdkeyListReply)(nil), "dbproto.CdkeyListReply")
	proto.RegisterType((*CdkeyListArgReply)(nil), "dbproto.CdkeyListArgReply")
	proto.RegisterType((*CdkeyBatch)(nil), "dbproto.CdkeyBatch")
	proto.RegisterType((*CdkeyReply)(nil), "dbproto.CdkeyReply")
	proto.RegisterType((*CdkeyDetail)(nil), "dbproto.CdkeyDetail")
}

func init() { proto.RegisterFile("cdkey_batch.proto", fileDescriptor8) }

var fileDescriptor8 = []byte{
	// 554 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x94, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0x65, 0x3b, 0x4e, 0xe2, 0x71, 0x88, 0xe8, 0x16, 0xc1, 0x52, 0x40, 0xa4, 0xbe, 0x10,
	0x09, 0x14, 0xa1, 0x22, 0x71, 0x2f, 0xa1, 0x42, 0x7c, 0x1c, 0x90, 0xe9, 0xdd, 0xda, 0x78, 0xb7,
	0xee, 0xaa, 0xb6, 0x63, 0xc5, 0x2b, 0x94, 0xf0, 0x06, 0x3c, 0x01, 0x2f, 0xc4, 0x3b, 0x21, 0x71,
	0x42, 0x3b, 0xbb, 0x4e, 0x63, 0xb7, 0xb4, 0x9c, 0xb9, 0xed, 0xfe, 0x67, 0xbc, 0x33, 0xf3, 0x9b,
	0x19, 0xc3, 0x5e, 0xca, 0x2f, 0xc4, 0x26, 0x59, 0x30, 0x95, 0x9e, 0xcf, 0xaa, 0xd5, 0x52, 0x2d,
	0xc9, 0x80, 0x2f, 0xf0, 0x70, 0x40, 0x32, 0x79, 0xa6, 0x92, 0x8a, 0xa5, 0x17, 0x2c, 0x13, 0xc6,
	0x78, 0xb0, 0x8f, 0x9a, 0x12, 0x45, 0x95, 0x33, 0x65, 0xc5, 0xe8, 0xb7, 0x03, 0x77, 0xe6, 0xfc,
	0xa3, 0xd8, 0xbc, 0xd1, 0xcf, 0x1c, 0xaf, 0x32, 0x32, 0x06, 0x57, 0x72, 0xea, 0x4c, 0x9c, 0xa9,
	0x17, 0xbb, 0x92, 0x93, 0x87, 0x30, 0x64, 0x9c, 0x27, 0x4a, 0x16, 0x82, 0xba, 0xa8, 0x0e, 0x18,
	0xe7, 0xa7, 0xb2, 0x10, 0xe4, 0x10, 0x46, 0x05, 0x5b, 0x27, 0x62, 0x9d, 0x9e, 0xb3, 0x32, 0x13,
	0xd4, 0x43, 0x73, 0x58, 0xb0, 0xf5, 0x89, 0x95, 0xc8, 0x3d, 0xf0, 0x95, 0x54, 0xb9, 0xa0, 0xbd,
	0x89, 0x33, 0x0d, 0x62, 0x73, 0x21, 0x53, 0xb8, 0xdb, 0x4a, 0x26, 0x91, 0x9c, 0xfa, 0xf8, 0xf1,
	0x58, 0xeb, 0xa7, 0x56, 0x7e, 0xcf, 0xc9, 0x53, 0x08, 0xbf, 0xb2, 0x5c, 0xf2, 0xa4, 0x56, 0x6c,
	0xa5, 0x68, 0x1f, 0x9d, 0x00, 0xa5, 0x2f, 0x5a, 0x21, 0x8f, 0x20, 0x30, 0x0e, 0xa2, 0xe4, 0x74,
	0x80, 0xe6, 0x21, 0x0a, 0x27, 0x25, 0x27, 0x4f, 0x00, 0x0c, 0x24, 0x2e, 0xea, 0x94, 0x0e, 0x31,
	0x85, 0x00, 0x95, 0xb7, 0xa2, 0x4e, 0x23, 0x09, 0xa3, 0x77, 0xf2, 0x4c, 0xcd, 0xb5, 0xa0, 0x4b,
	0x7f, 0x0e, 0x3d, 0x1d, 0x1e, 0x8b, 0x0f, 0x8f, 0x1e, 0xcc, 0x2c, 0xcd, 0x99, 0x76, 0xfa, 0x6c,
	0x58, 0x1e, 0xaf, 0xb2, 0x18, 0x9d, 0xc8, 0x0b, 0xf0, 0xf1, 0x25, 0x84, 0x12, 0x1e, 0xdd, 0xdf,
	0x7a, 0xb7, 0x70, 0xc6, 0xc6, 0x29, 0xfa, 0x00, 0x23, 0x0c, 0xf3, 0x49, 0xd6, 0x4a, 0x87, 0x22,
	0xd0, 0x2b, 0x59, 0x21, 0x30, 0x54, 0x10, 0xe3, 0x59, 0x6b, 0x15, 0xcb, 0x1a, 0xca, 0x78, 0xd6,
	0x5a, 0x2d, 0xbf, 0x35, 0x68, 0xf1, 0x1c, 0xfd, 0x70, 0x60, 0xbc, 0x7d, 0x2c, 0x16, 0x55, 0xbe,
	0xb9, 0xd2, 0xb4, 0x2d, 0x76, 0x77, 0x17, 0xfb, 0x21, 0x8c, 0xd2, 0x65, 0xa9, 0x44, 0xa9, 0x0c,
	0x10, 0x0f, 0x8d, 0xa1, 0xd5, 0x34, 0x92, 0x2e, 0x6f, 0xd3, 0xb5, 0xbf, 0xf2, 0xf6, 0xd1, 0xbc,
	0xe5, 0x1d, 0x31, 0xd8, 0xdb, 0xad, 0xd2, 0xe4, 0xa6, 0x73, 0x59, 0x2a, 0x96, 0xdb, 0xf4, 0xcc,
	0x85, 0xbc, 0x6e, 0x5a, 0x93, 0xcb, 0x5a, 0x51, 0x77, 0xe2, 0xb5, 0x88, 0xb7, 0xcb, 0xb3, 0x3d,
	0xd3, 0xf7, 0xe8, 0x97, 0x03, 0x80, 0x56, 0x24, 0x7c, 0xa5, 0xf0, 0xee, 0x48, 0xba, 0x37, 0x8c,
	0xa4, 0x77, 0xdb, 0x48, 0xf6, 0xfe, 0x65, 0x24, 0xfd, 0x9b, 0x47, 0xb2, 0xdf, 0x19, 0xc9, 0xdd,
	0x75, 0x1a, 0xb4, 0xd7, 0xe9, 0x96, 0x69, 0xfd, 0xde, 0x54, 0x6e, 0xb0, 0x36, 0xd3, 0xe2, 0x5c,
	0x33, 0x2d, 0xee, 0xe5, 0xb4, 0x5c, 0xe2, 0xf7, 0x76, 0xf1, 0x5f, 0xbf, 0x97, 0xcf, 0xa0, 0x87,
	0xed, 0xf0, 0xb1, 0x1d, 0xfb, 0xed, 0x76, 0x20, 0xf0, 0x18, 0x1d, 0xa2, 0x9f, 0x2e, 0x84, 0x73,
	0x93, 0x99, 0x62, 0x32, 0xff, 0xaf, 0xda, 0xf0, 0xd2, 0xfe, 0x05, 0x86, 0xb8, 0xd7, 0x8f, 0x5b,
	0x7f, 0x81, 0x26, 0xfe, 0xdc, 0xac, 0x8c, 0xfd, 0x15, 0x50, 0x18, 0xd8, 0x1d, 0xa2, 0x01, 0x16,
	0xd3, 0x5c, 0x3b, 0x2d, 0x85, 0x4e, 0x4b, 0x17, 0x7d, 0x7c, 0xf9, 0xd5, 0x9f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x6d, 0xfc, 0x74, 0xd9, 0xcb, 0x05, 0x00, 0x00,
}
